
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cfa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  0801d178  0801d178  0002d178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e3bc  0801e3bc  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801e3bc  0801e3bc  0002e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e3c4  0801e3c4  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e3c4  0801e3c4  0002e3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e3c8  0801e3c8  0002e3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801e3cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a8c  20000308  0801e6d4  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20007d94  0801e6d4  00037d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   000306e7  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008561  00000000  00000000  00060a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002850  00000000  00000000  00068fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eae  00000000  00000000  0006b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd51  00000000  00000000  0006d6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c6a1  00000000  00000000  0007b417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a70  00000000  00000000  000b7ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bca4  00000000  00000000  001ad528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b91cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000308 	.word	0x20000308
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d15c 	.word	0x0801d15c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000030c 	.word	0x2000030c
 800020c:	0801d15c 	.word	0x0801d15c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <setPath>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *sensorData, uint8_t path)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	71fb      	strb	r3, [r7, #7]
	sprintf(dir, "Data%d", path);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	4907      	ldr	r1, [pc, #28]	; (8001080 <setPath+0x30>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f018 f80d 	bl	8019084 <siprintf>
	sprintf(sensorData, "Data%d/Data%d.csv", path, path);
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <setPath+0x34>)
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f018 f807 	bl	8019084 <siprintf>

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801d178 	.word	0x0801d178
 8001084:	0801d180 	.word	0x0801d180

08001088 <createNewFile>:
void createNewFile(char *dir, char *sensorData, uint8_t *pathPtr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	uint8_t path = *pathPtr;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <createNewFile+0x50>)
 800109c:	f000 f820 	bl	80010e0 <Mount_SD>
	Format_SD(path);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f846 	bl	8001134 <Format_SD>
	Create_Dir(dir);
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f95b 	bl	8001364 <Create_Dir>
	Create_File(sensorData);
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f000 f8dc 	bl	800126c <Create_File>
	Update_File(sensorData,"FrontTravel;RearTravel;FrontPressure;RearPressure;LeftBrake;RightBrake\n");
 80010b4:	4909      	ldr	r1, [pc, #36]	; (80010dc <createNewFile+0x54>)
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f000 f90e 	bl	80012d8 <Update_File>
	Unmount_SD("/");
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <createNewFile+0x50>)
 80010be:	f000 f825 	bl	800110c <Unmount_SD>
	(*pathPtr)++;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0801d194 	.word	0x0801d194
 80010dc:	0801d198 	.word	0x0801d198

080010e0 <Mount_SD>:
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
#endif
}

void Mount_SD(const TCHAR *path)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&SDFatFs, path, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <Mount_SD+0x24>)
 80010ee:	f011 fc6f 	bl	80129d0 <f_mount>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <Mount_SD+0x28>)
 80010f8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
	else
		Send_Uart("SD CARD mounted successfully...\n");
#endif
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000324 	.word	0x20000324
 8001108:	200009d4 	.word	0x200009d4

0800110c <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2000      	movs	r0, #0
 800111a:	f011 fc59 	bl	80129d0 <f_mount>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <Unmount_SD+0x24>)
 8001124:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
#endif
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200009d4 	.word	0x200009d4

08001134 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	; 0x58
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 800113e:	2014      	movs	r0, #20
 8001140:	f015 ffc2 	bl	80170c8 <pvPortMalloc>
 8001144:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	4943      	ldr	r1, [pc, #268]	; (8001258 <Format_SD+0x124>)
 800114c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800114e:	f017 ff99 	bl	8019084 <siprintf>
	fresult = f_opendir(&dir, path);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001158:	4618      	mov	r0, r3
 800115a:	f012 fc7f 	bl	8013a5c <f_opendir>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <Format_SD+0x128>)
 8001164:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <Format_SD+0x128>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d154      	bne.n	8001218 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f012 fd13 	bl	8013ba4 <f_readdir>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <Format_SD+0x128>)
 8001184:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 8001186:	4b35      	ldr	r3, [pc, #212]	; (800125c <Format_SD+0x128>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d13f      	bne.n	800120e <Format_SD+0xda>
 800118e:	7d7b      	ldrb	r3, [r7, #21]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03c      	beq.n	800120e <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	3309      	adds	r3, #9
 800119a:	4619      	mov	r1, r3
 800119c:	4830      	ldr	r0, [pc, #192]	; (8001260 <Format_SD+0x12c>)
 800119e:	f7ff f837 	bl	8000210 <strcmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02f      	beq.n	8001208 <Format_SD+0xd4>
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	3309      	adds	r3, #9
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	; (8001264 <Format_SD+0x130>)
 80011b2:	f7ff f82d 	bl	8000210 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d025      	beq.n	8001208 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	3309      	adds	r3, #9
 80011c4:	4928      	ldr	r1, [pc, #160]	; (8001268 <Format_SD+0x134>)
 80011c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011c8:	f017 ff5c 	bl	8019084 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 80011cc:	7d3b      	ldrb	r3, [r7, #20]
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffab 	bl	8001134 <Format_SD>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Format_SD+0x128>)
 80011e4:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <Format_SD+0x128>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0bf      	beq.n	800116e <Format_SD+0x3a>
					break;
 80011ee:	e00e      	b.n	800120e <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 80011f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011f2:	f012 fd5a 	bl	8013caa <f_unlink>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Format_SD+0x128>)
 80011fc:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <Format_SD+0x128>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <Format_SD+0xd8>
 8001206:	e7b2      	b.n	800116e <Format_SD+0x3a>
				continue;
 8001208:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800120a:	e7b0      	b.n	800116e <Format_SD+0x3a>
					break;
 800120c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f012 fc9b 	bl	8013b4e <f_closedir>
	}

	if (fresult == FR_OK)
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <Format_SD+0x128>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d111      	bne.n	8001244 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001220:	2214      	movs	r2, #20
 8001222:	2100      	movs	r1, #0
 8001224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001226:	f018 f853 	bl	80192d0 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	461a      	mov	r2, r3
 800122e:	490a      	ldr	r1, [pc, #40]	; (8001258 <Format_SD+0x124>)
 8001230:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001232:	f017 ff27 	bl	8019084 <siprintf>
		fresult = f_unlink(path);
 8001236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001238:	f012 fd37 	bl	8013caa <f_unlink>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <Format_SD+0x128>)
 8001242:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001244:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001246:	f016 f80b 	bl	8017260 <vPortFree>
	return (fresult);
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <Format_SD+0x128>)
 800124c:	781b      	ldrb	r3, [r3, #0]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3758      	adds	r7, #88	; 0x58
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0801d1f4 	.word	0x0801d1f4
 800125c:	200009d4 	.word	0x200009d4
 8001260:	0801d1fc 	.word	0x0801d1fc
 8001264:	0801d200 	.word	0x0801d200
 8001268:	0801d204 	.word	0x0801d204

0800126c <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8001274:	4915      	ldr	r1, [pc, #84]	; (80012cc <Create_File+0x60>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f012 fcd7 	bl	8013c2a <f_stat>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <Create_File+0x64>)
 8001282:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <Create_File+0x64>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <Create_File+0x26>
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <Create_File+0x64>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	e018      	b.n	80012c4 <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001292:	220b      	movs	r2, #11
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <Create_File+0x68>)
 8001298:	f011 fbfe 	bl	8012a98 <f_open>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <Create_File+0x64>)
 80012a2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <Create_File+0x64>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <Create_File+0x46>
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <Create_File+0x64>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	e008      	b.n	80012c4 <Create_File+0x58>
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}

		fresult = f_close(&fil);
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <Create_File+0x68>)
 80012b4:	f012 f950 	bl	8013558 <f_close>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <Create_File+0x64>)
 80012be:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <Create_File+0x64>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200009bc 	.word	0x200009bc
 80012d0:	200009d4 	.word	0x200009d4
 80012d4:	20000558 	.word	0x20000558

080012d8 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012e2:	491c      	ldr	r1, [pc, #112]	; (8001354 <Update_File+0x7c>)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f012 fca0 	bl	8013c2a <f_stat>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <Update_File+0x80>)
 80012f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <Update_File+0x80>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <Update_File+0x28>
		char *buf = pvPortMalloc(100 * sizeof(char));
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
		return fresult;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Update_File+0x80>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e025      	b.n	800134c <Update_File+0x74>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001300:	2232      	movs	r2, #50	; 0x32
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <Update_File+0x84>)
 8001306:	f011 fbc7 	bl	8012a98 <f_open>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <Update_File+0x80>)
 8001310:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <Update_File+0x80>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <Update_File+0x48>
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
					name);
			Send_Uart(buf);
			vPortFree(buf);
#endif
			return fresult;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <Update_File+0x80>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	e015      	b.n	800134c <Update_File+0x74>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7fe ffd5 	bl	80002d0 <strlen>
 8001326:	4602      	mov	r2, r0
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <Update_File+0x88>)
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	480b      	ldr	r0, [pc, #44]	; (800135c <Update_File+0x84>)
 800132e:	f011 fee6 	bl	80130fe <f_write>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <Update_File+0x80>)
 8001338:	701a      	strb	r2, [r3, #0]
			vPortFree(buf);
#endif
		}

		/* Close file */
		fresult = f_close(&fil);
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <Update_File+0x84>)
 800133c:	f012 f90c 	bl	8013558 <f_close>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <Update_File+0x80>)
 8001346:	701a      	strb	r2, [r3, #0]
			Send_Uart(buf);
			vPortFree(buf);
#endif
		}
	}
	return fresult;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <Update_File+0x80>)
 800134a:	781b      	ldrb	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200009bc 	.word	0x200009bc
 8001358:	200009d4 	.word	0x200009d4
 800135c:	20000558 	.word	0x20000558
 8001360:	200009d8 	.word	0x200009d8

08001364 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f012 fd4e 	bl	8013e0e <f_mkdir>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <Create_Dir+0x24>)
 8001378:	701a      	strb	r2, [r3, #0]
				name);
		Send_Uart(buf);
		vPortFree(buf);
#endif
	}
	return fresult;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <Create_Dir+0x24>)
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200009d4 	.word	0x200009d4

0800138c <sendDataSD>:
	Send_Uart(buf);
	vPortFree(buf);
#endif
}
void sendDataSD(char *file, volatile int16_t *sensor)
{
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	char *buffer = pvPortMalloc(
 8001396:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 800139a:	f015 fe95 	bl	80170c8 <pvPortMalloc>
 800139e:	60b8      	str	r0, [r7, #8]
			(7 * TRAVEL_SENSOR_BUFFER_SIZE / 2) * sizeof(char));
	if (NULL != buffer)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d059      	beq.n	800145a <sendDataSD+0xce>
	{
		memset(buffer, 0, (7 * TRAVEL_SENSOR_BUFFER_SIZE / 2));
 80013a6:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 80013aa:	2100      	movs	r1, #0
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f017 ff8f 	bl	80192d0 <memset>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e03f      	b.n	8001438 <sendDataSD+0xac>
				NUMBER_OF_SENSORS)
		{
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7fe ff89 	bl	80002d0 <strlen>
 80013be:	4602      	mov	r2, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1898      	adds	r0, r3, r2
					sensor[i + FRONT_TRAVEL_BUFFER_POSITION],
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013d0:	461e      	mov	r6, r3
					sensor[i + REAR_TRAVEL_BUFFER_POSITION],
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013e0:	469c      	mov	ip, r3
					sensor[i + FRONT_PRESSURE_BUFFER_POSITION],
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3302      	adds	r3, #2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 80013f0:	4619      	mov	r1, r3
					sensor[i + REAR_PRESSURE_BUFFER_POSITION],
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3303      	adds	r3, #3
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001400:	461c      	mov	r4, r3
					sensor[i + LEFT_BRAKE_POSITION],
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001410:	461d      	mov	r5, r3
					sensor[i + RIGHT_BRAKE_POSITION]);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3305      	adds	r3, #5
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
			sprintf(buffer + strlen(buffer), "%d;%d;%d;%d;%d;%d\n",
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	9502      	str	r5, [sp, #8]
 8001424:	9401      	str	r4, [sp, #4]
 8001426:	9100      	str	r1, [sp, #0]
 8001428:	4663      	mov	r3, ip
 800142a:	4632      	mov	r2, r6
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <sendDataSD+0xdc>)
 800142e:	f017 fe29 	bl	8019084 <siprintf>
		for (int i = 0; i < (TRAVEL_SENSOR_BUFFER_SIZE) / 2; i +=
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3306      	adds	r3, #6
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b5f      	cmp	r3, #95	; 0x5f
 800143c:	d9bc      	bls.n	80013b8 <sendDataSD+0x2c>
		}
		Mount_SD("/");
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <sendDataSD+0xe0>)
 8001440:	f7ff fe4e 	bl	80010e0 <Mount_SD>
		Update_File(file, buffer);
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff46 	bl	80012d8 <Update_File>
		Unmount_SD("/");
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <sendDataSD+0xe0>)
 800144e:	f7ff fe5d 	bl	800110c <Unmount_SD>
		vPortFree(buffer);
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f015 ff04 	bl	8017260 <vPortFree>
	else
	{
		puts("Wrong alocation pressureTravel Buffer SD Card");
	}

}
 8001458:	e002      	b.n	8001460 <sendDataSD+0xd4>
		puts("Wrong alocation pressureTravel Buffer SD Card");
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <sendDataSD+0xe4>)
 800145c:	f017 fe0a 	bl	8019074 <puts>
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	0801d214 	.word	0x0801d214
 800146c:	0801d194 	.word	0x0801d194
 8001470:	0801d228 	.word	0x0801d228

08001474 <readCalibrationData>:

int readCalibrationData(calibration_t *calibration)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	; 0x68
 8001478:	af06      	add	r7, sp, #24
 800147a:	6078      	str	r0, [r7, #4]


	Mount_SD("/");
 800147c:	483e      	ldr	r0, [pc, #248]	; (8001578 <readCalibrationData+0x104>)
 800147e:	f7ff fe2f 	bl	80010e0 <Mount_SD>
	resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_READ);
 8001482:	2201      	movs	r2, #1
 8001484:	493d      	ldr	r1, [pc, #244]	; (800157c <readCalibrationData+0x108>)
 8001486:	483e      	ldr	r0, [pc, #248]	; (8001580 <readCalibrationData+0x10c>)
 8001488:	f011 fb06 	bl	8012a98 <f_open>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <readCalibrationData+0x110>)
 8001492:	701a      	strb	r2, [r3, #0]
	if (resultCalibration != FR_OK)
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <readCalibrationData+0x110>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <readCalibrationData+0x34>
	{
		printf("Nie można otworzyć pliku do odczytu\n");
 800149c:	483a      	ldr	r0, [pc, #232]	; (8001588 <readCalibrationData+0x114>)
 800149e:	f017 fde9 	bl	8019074 <puts>
		return -1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e062      	b.n	800156e <readCalibrationData+0xfa>
	}

	char *buffer = (char*) calloc(240, sizeof(char));
 80014a8:	2101      	movs	r1, #1
 80014aa:	20f0      	movs	r0, #240	; 0xf0
 80014ac:	f016 fd7c 	bl	8017fa8 <calloc>
 80014b0:	4603      	mov	r3, r0
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (buffer == NULL)
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <readCalibrationData+0x5c>
	{
		printf("Błąd alokacji pamięci dla bufora.\n");
 80014ba:	4834      	ldr	r0, [pc, #208]	; (800158c <readCalibrationData+0x118>)
 80014bc:	f017 fdda 	bl	8019074 <puts>
		return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e054      	b.n	800156e <readCalibrationData+0xfa>

	char line[30];

	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
	{
		strcat(buffer, line);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014cc:	f017 ff08 	bl	80192e0 <strcat>
	while (f_gets(line, sizeof(line), &fileCalibration) != NULL)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <readCalibrationData+0x10c>)
 80014d6:	211e      	movs	r1, #30
 80014d8:	4618      	mov	r0, r3
 80014da:	f012 fda6 	bl	801402a <f_gets>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ef      	bne.n	80014c4 <readCalibrationData+0x50>
	}
	sscanf(buffer,
 80014e4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80014e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	9305      	str	r3, [sp, #20]
 80014f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f6:	9304      	str	r3, [sp, #16]
 80014f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fc:	9303      	str	r3, [sp, #12]
 80014fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	460b      	mov	r3, r1
 8001512:	491f      	ldr	r1, [pc, #124]	; (8001590 <readCalibrationData+0x11c>)
 8001514:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001516:	f017 fdd5 	bl	80190c4 <siscanf>
			"Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d\nFront Travel: %d\nRear Stroke: %d",
			&frontTravelInt, &rearTravelInt, &frontPressureInt,
			&rearPressureInt, &leftBrakeInt, &rightBrakeInt, &frontTravel, &rearStroke);
	free(buffer);
 800151a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800151c:	f016 fd6a 	bl	8017ff4 <free>

	f_close(&fileCalibration);
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <readCalibrationData+0x10c>)
 8001522:	f012 f819 	bl	8013558 <f_close>

	// Konwertuj i przypisz do struktury calibration
	calibration->frontTravelSensor = frontTravelInt;
 8001526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	801a      	strh	r2, [r3, #0]
	calibration->rearTravelSensor = rearTravelInt;
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	805a      	strh	r2, [r3, #2]
	calibration->frontPressureSensor = frontPressureInt;
 8001536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	809a      	strh	r2, [r3, #4]
	calibration->rearPressureSensor = rearPressureInt;
 800153e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001540:	b21a      	sxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	80da      	strh	r2, [r3, #6]
	calibration->leftBrakeSensor = leftBrakeInt;
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	811a      	strh	r2, [r3, #8]
	calibration->rightBrakeSensor = rightBrakeInt;
 800154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	815a      	strh	r2, [r3, #10]
	calibration->frontTravel = frontTravel;
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	819a      	strh	r2, [r3, #12]
	calibration->rearStroke = rearStroke;
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	b21a      	sxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	81da      	strh	r2, [r3, #14]
	Unmount_SD("/");
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <readCalibrationData+0x104>)
 8001568:	f7ff fdd0 	bl	800110c <Unmount_SD>

	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3750      	adds	r7, #80	; 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	0801d194 	.word	0x0801d194
 800157c:	0801d258 	.word	0x0801d258
 8001580:	20000788 	.word	0x20000788
 8001584:	200009b8 	.word	0x200009b8
 8001588:	0801d264 	.word	0x0801d264
 800158c:	0801d28c 	.word	0x0801d28c
 8001590:	0801d2b4 	.word	0x0801d2b4

08001594 <writeCalibrationData>:

int writeCalibrationData(const calibration_t *calibration)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af04      	add	r7, sp, #16
 800159a:	6078      	str	r0, [r7, #4]

	Mount_SD("/");
 800159c:	4825      	ldr	r0, [pc, #148]	; (8001634 <writeCalibrationData+0xa0>)
 800159e:	f7ff fd9f 	bl	80010e0 <Mount_SD>
	    resultCalibration = f_open(&fileCalibration, CONFIG_FILE_NAME, FA_WRITE);
 80015a2:	2202      	movs	r2, #2
 80015a4:	4924      	ldr	r1, [pc, #144]	; (8001638 <writeCalibrationData+0xa4>)
 80015a6:	4825      	ldr	r0, [pc, #148]	; (800163c <writeCalibrationData+0xa8>)
 80015a8:	f011 fa76 	bl	8012a98 <f_open>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <writeCalibrationData+0xac>)
 80015b2:	701a      	strb	r2, [r3, #0]

	    if (resultCalibration != FR_OK)
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <writeCalibrationData+0xac>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <writeCalibrationData+0x34>
	    {
	        printf("Nie można otworzyć pliku do zapisu\n");
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <writeCalibrationData+0xb0>)
 80015be:	f017 fd59 	bl	8019074 <puts>
	        return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e031      	b.n	800162c <writeCalibrationData+0x98>
	    }

	    // Ustaw kursor na początku pliku
	    f_lseek(&fileCalibration, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <writeCalibrationData+0xa8>)
 80015cc:	f011 fff3 	bl	80135b6 <f_lseek>

	    f_printf(&fileCalibration,
	             "Front travel sensor: %d\nRear travel sensor: %d\nFront pressure sensor: %d\nRear pressure sensor: %d\nLeft brake sensor: %d\nRight brake sensor: %d\n",
	             (int16_t)calibration->frontTravelSensor,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
	    f_printf(&fileCalibration,
 80015d6:	461c      	mov	r4, r3
	             (int16_t)calibration->rearTravelSensor,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	    f_printf(&fileCalibration,
 80015de:	461d      	mov	r5, r3
	             (int16_t)calibration->frontPressureSensor,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	    f_printf(&fileCalibration,
 80015e6:	461a      	mov	r2, r3
	             (int16_t)calibration->rearPressureSensor,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	    f_printf(&fileCalibration,
 80015ee:	4619      	mov	r1, r3
	             (int16_t)calibration->leftBrakeSensor,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	    f_printf(&fileCalibration,
 80015f6:	4618      	mov	r0, r3
	             (int16_t)calibration->rightBrakeSensor);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	    f_printf(&fileCalibration,
 80015fe:	9303      	str	r3, [sp, #12]
 8001600:	9002      	str	r0, [sp, #8]
 8001602:	9101      	str	r1, [sp, #4]
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	462b      	mov	r3, r5
 8001608:	4622      	mov	r2, r4
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <writeCalibrationData+0xb4>)
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <writeCalibrationData+0xa8>)
 800160e:	f012 fdc1 	bl	8014194 <f_printf>

	    // Ustaw kursor na końcu pliku
	    f_lseek(&fileCalibration, f_size(&fileCalibration));
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <writeCalibrationData+0xa8>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4619      	mov	r1, r3
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <writeCalibrationData+0xa8>)
 800161a:	f011 ffcc 	bl	80135b6 <f_lseek>

	    f_close(&fileCalibration);
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <writeCalibrationData+0xa8>)
 8001620:	f011 ff9a 	bl	8013558 <f_close>
	    Unmount_SD("/");
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <writeCalibrationData+0xa0>)
 8001626:	f7ff fd71 	bl	800110c <Unmount_SD>

	    return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	0801d194 	.word	0x0801d194
 8001638:	0801d258 	.word	0x0801d258
 800163c:	20000788 	.word	0x20000788
 8001640:	200009b8 	.word	0x200009b8
 8001644:	0801d364 	.word	0x0801d364
 8001648:	0801d38c 	.word	0x0801d38c

0800164c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001660:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <MX_ADC1_Init+0x9c>)
 8001662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_ADC1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_ADC1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_ADC1_Init+0x98>)
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <MX_ADC1_Init+0xa0>)
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_ADC1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_ADC1_Init+0x98>)
 800169a:	2201      	movs	r2, #1
 800169c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_ADC1_Init+0x98>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_ADC1_Init+0x98>)
 80016ae:	f002 fb39 	bl	8003d24 <HAL_ADC_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 fe90 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016bc:	2304      	movs	r3, #4
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_ADC1_Init+0x98>)
 80016ce:	f002 fce1 	bl	8004094 <HAL_ADC_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016d8:	f000 fe80 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200009dc 	.word	0x200009dc
 80016e8:	40012000 	.word	0x40012000
 80016ec:	0f000001 	.word	0x0f000001

080016f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <MX_ADC2_Init+0x128>)
 8001704:	4a45      	ldr	r2, [pc, #276]	; (800181c <MX_ADC2_Init+0x12c>)
 8001706:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001708:	4b43      	ldr	r3, [pc, #268]	; (8001818 <MX_ADC2_Init+0x128>)
 800170a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001710:	4b41      	ldr	r3, [pc, #260]	; (8001818 <MX_ADC2_Init+0x128>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <MX_ADC2_Init+0x128>)
 8001718:	2201      	movs	r2, #1
 800171a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <MX_ADC2_Init+0x128>)
 800171e:	2200      	movs	r2, #0
 8001720:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <MX_ADC2_Init+0x128>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <MX_ADC2_Init+0x128>)
 800172c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <MX_ADC2_Init+0x128>)
 8001734:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <MX_ADC2_Init+0x128>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <MX_ADC2_Init+0x128>)
 8001742:	2206      	movs	r2, #6
 8001744:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <MX_ADC2_Init+0x128>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <MX_ADC2_Init+0x128>)
 8001750:	2201      	movs	r2, #1
 8001752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001754:	4830      	ldr	r0, [pc, #192]	; (8001818 <MX_ADC2_Init+0x128>)
 8001756:	f002 fae5 	bl	8003d24 <HAL_ADC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001760:	f000 fe3c 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001764:	230c      	movs	r3, #12
 8001766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800176c:	2301      	movs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	4828      	ldr	r0, [pc, #160]	; (8001818 <MX_ADC2_Init+0x128>)
 8001776:	f002 fc8d 	bl	8004094 <HAL_ADC_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001780:	f000 fe2c 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001784:	230d      	movs	r3, #13
 8001786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001788:	2302      	movs	r3, #2
 800178a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <MX_ADC2_Init+0x128>)
 8001792:	f002 fc7f 	bl	8004094 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 800179c:	f000 fe1e 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017a4:	2303      	movs	r3, #3
 80017a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	; (8001818 <MX_ADC2_Init+0x128>)
 80017ae:	f002 fc71 	bl	8004094 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80017b8:	f000 fe10 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017bc:	2302      	movs	r3, #2
 80017be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_ADC2_Init+0x128>)
 80017ca:	f002 fc63 	bl	8004094 <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 80017d4:	f000 fe02 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80017d8:	230b      	movs	r3, #11
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017dc:	2305      	movs	r3, #5
 80017de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_ADC2_Init+0x128>)
 80017e6:	f002 fc55 	bl	8004094 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC2_Init+0x104>
  {
    Error_Handler();
 80017f0:	f000 fdf4 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017f4:	230a      	movs	r3, #10
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017f8:	2306      	movs	r3, #6
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_ADC2_Init+0x128>)
 8001802:	f002 fc47 	bl	8004094 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0x120>
  {
    Error_Handler();
 800180c:	f000 fde6 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000a24 	.word	0x20000a24
 800181c:	40012100 	.word	0x40012100

08001820 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_ADC_MspInit+0x16c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d128      	bne.n	8001894 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_ADC_MspInit+0x170>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_ADC_MspInit+0x170>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_ADC_MspInit+0x170>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <HAL_ADC_MspInit+0x170>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <HAL_ADC_MspInit+0x170>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_ADC_MspInit+0x170>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = BATTERY_LEVEL_Pin;
 800187a:	2310      	movs	r3, #16
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BATTERY_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4841      	ldr	r0, [pc, #260]	; (8001994 <HAL_ADC_MspInit+0x174>)
 800188e:	f003 fba1 	bl	8004fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001892:	e077      	b.n	8001984 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a3f      	ldr	r2, [pc, #252]	; (8001998 <HAL_ADC_MspInit+0x178>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d172      	bne.n	8001984 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a33      	ldr	r2, [pc, #204]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_ADC_MspInit+0x170>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_SENSOR_RIGHT_Pin|BRAKE_SENSOR_LEFT_Pin|TRAVEL_SENSOR_FRONT_Pin|TRAVEL_SENSOR_REAR_Pin;
 80018f2:	230f      	movs	r3, #15
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4825      	ldr	r0, [pc, #148]	; (800199c <HAL_ADC_MspInit+0x17c>)
 8001906:	f003 fb65 	bl	8004fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PRESSURE_SENSOR_FRONT_Pin|PRESSURE_SENSOR_REAR_Pin;
 800190a:	2306      	movs	r3, #6
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190e:	2303      	movs	r3, #3
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	481d      	ldr	r0, [pc, #116]	; (8001994 <HAL_ADC_MspInit+0x174>)
 800191e:	f003 fb59 	bl	8004fd4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_ADC_MspInit+0x184>)
 8001926:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800192a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800196a:	f002 ff25 	bl	80047b8 <HAL_DMA_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8001974:	f000 fd32 	bl	80023dc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_ADC_MspInit+0x180>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40012000 	.word	0x40012000
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40012100 	.word	0x40012100
 800199c:	40020800 	.word	0x40020800
 80019a0:	20000a6c 	.word	0x20000a6c
 80019a4:	40026440 	.word	0x40026440

080019a8 <readButton>:
/******************************************************************************
 * Function Definitions
 *******************************************************************************/

button_t readButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
	button_t button = BUTTON_SNA;
 80019b4:	2304      	movs	r3, #4
 80019b6:	73fb      	strb	r3, [r7, #15]
	static uint8_t buttonPressedCounter = 0;
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 80019b8:	e01b      	b.n	80019f2 <readButton+0x4a>
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
	{
		if ( BUTTON_PRESSED_COUNT > buttonPressedCounter)
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <readButton+0x74>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b13      	cmp	r3, #19
 80019c0:	d80d      	bhi.n	80019de <readButton+0x36>
		{

			++buttonPressedCounter;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <readButton+0x74>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <readButton+0x74>)
 80019cc:	701a      	strb	r2, [r3, #0]
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT) : (BUTTON_RIGHT);
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
			button =
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e006      	b.n	80019ec <readButton+0x44>
		}
		else
		{
			button =
					(LEFT_BUTTON_Pin == GPIO_Pin) ?
							(BUTTON_LEFT_PRESSED) : (BUTTON_RIGHT_PRESSED);
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d101      	bne.n	80019e8 <readButton+0x40>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e000      	b.n	80019ea <readButton+0x42>
 80019e8:	2303      	movs	r3, #3
			button =
 80019ea:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(BUTTON_DELAY);
 80019ec:	201e      	movs	r0, #30
 80019ee:	f012 ff2f 	bl	8014850 <osDelay>
	while (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f003 fc80 	bl	80052fc <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
			&& (BUTTON_PRESSED_COUNT >= buttonPressedCounter))
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <readButton+0x62>
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <readButton+0x74>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b14      	cmp	r3, #20
 8001a08:	d9d7      	bls.n	80019ba <readButton+0x12>
	}
	buttonPressedCounter = 0;
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <readButton+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	return (button);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000acc 	.word	0x20000acc

08001a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_DMA_Init+0x5c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <MX_DMA_Init+0x5c>)
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_DMA_Init+0x5c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2105      	movs	r1, #5
 8001a46:	203a      	movs	r0, #58	; 0x3a
 8001a48:	f002 fe8c 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a4c:	203a      	movs	r0, #58	; 0x3a
 8001a4e:	f002 fea5 	bl	800479c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2105      	movs	r1, #5
 8001a56:	203b      	movs	r0, #59	; 0x3b
 8001a58:	f002 fe84 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a5c:	203b      	movs	r0, #59	; 0x3b
 8001a5e:	f002 fe9d 	bl	800479c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	2045      	movs	r0, #69	; 0x45
 8001a68:	f002 fe7c 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a6c:	2045      	movs	r0, #69	; 0x45
 8001a6e:	f002 fe95 	bl	800479c <HAL_NVIC_EnableIRQ>

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <vApplicationGetIdleTaskMemory+0x2c>)
 8001a90:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <vApplicationGetIdleTaskMemory+0x30>)
 8001a96:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20002554 	.word	0x20002554
 8001ab0:	200025f4 	.word	0x200025f4

08001ab4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b09e      	sub	sp, #120	; 0x78
 8001ab8:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8001aba:	2300      	movs	r3, #0
 8001abc:	673b      	str	r3, [r7, #112]	; 0x70
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <MX_FREERTOS_Init+0xe4>)
 8001ac0:	677b      	str	r3, [r7, #116]	; 0x74
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8001ac2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f012 fed5 	bl	8014878 <osSemaphoreCreate>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <MX_FREERTOS_Init+0xe8>)
 8001ad2:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <MX_FREERTOS_Init+0xec>)
 8001ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8001adc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f012 fec8 	bl	8014878 <osSemaphoreCreate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <MX_FREERTOS_Init+0xf0>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* definition and creation of writeCalibrationSem */
  osSemaphoreStaticDef(writeCalibrationSem, &writeCalibrationSemControlBlock);
 8001aee:	2300      	movs	r3, #0
 8001af0:	663b      	str	r3, [r7, #96]	; 0x60
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_FREERTOS_Init+0xf4>)
 8001af4:	667b      	str	r3, [r7, #100]	; 0x64
  writeCalibrationSemHandle = osSemaphoreCreate(osSemaphore(writeCalibrationSem), 1);
 8001af6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f012 febb 	bl	8014878 <osSemaphoreCreate>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <MX_FREERTOS_Init+0xf8>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* definition and creation of SagMeasurement */
  osSemaphoreStaticDef(SagMeasurement, &SagMeasurementControlBlock);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <MX_FREERTOS_Init+0xfc>)
 8001b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  SagMeasurementHandle = osSemaphoreCreate(osSemaphore(SagMeasurement), 1);
 8001b10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f012 feae 	bl	8014878 <osSemaphoreCreate>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <MX_FREERTOS_Init+0x100>)
 8001b20:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SdCard */
  osThreadDef(SdCard, SdCardInit, osPriorityNormal, 0, 1024);
 8001b22:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <MX_FREERTOS_Init+0x104>)
 8001b24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b28:	461d      	mov	r5, r3
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 8001b36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f012 fe3b 	bl	80147b8 <osThreadCreate>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <MX_FREERTOS_Init+0x108>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, sensorReadInit, osPriorityNormal, 0, 1024, sensorReadBuffer, &sensorReadControlBlock);
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_FREERTOS_Init+0x10c>)
 8001b4a:	f107 0420 	add.w	r4, r7, #32
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f012 fe28 	bl	80147b8 <osThreadCreate>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <MX_FREERTOS_Init+0x110>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 512, menuProcessDataBuffer, &menuProcessDataControlBlock);
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_FREERTOS_Init+0x114>)
 8001b70:	1d3c      	adds	r4, r7, #4
 8001b72:	461d      	mov	r5, r3
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f012 fe17 	bl	80147b8 <osThreadCreate>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_FREERTOS_Init+0x118>)
 8001b8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001b90:	bf00      	nop
 8001b92:	3778      	adds	r7, #120	; 0x78
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	20002428 	.word	0x20002428
 8001b9c:	20002424 	.word	0x20002424
 8001ba0:	20002474 	.word	0x20002474
 8001ba4:	20002470 	.word	0x20002470
 8001ba8:	200024c0 	.word	0x200024c0
 8001bac:	200024bc 	.word	0x200024bc
 8001bb0:	2000250c 	.word	0x2000250c
 8001bb4:	20002508 	.word	0x20002508
 8001bb8:	0801d424 	.word	0x0801d424
 8001bbc:	20000ad8 	.word	0x20000ad8
 8001bc0:	0801d44c 	.word	0x0801d44c
 8001bc4:	20000adc 	.word	0x20000adc
 8001bc8:	0801d478 	.word	0x0801d478
 8001bcc:	20001b80 	.word	0x20001b80

08001bd0 <SdCardInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bd8:	f015 fc60 	bl	801749c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN SdCardInit */
	Mount_SD("/");
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <SdCardInit+0x24>)
 8001bde:	f7ff fa7f 	bl	80010e0 <Mount_SD>
	Unmount_SD("/");
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <SdCardInit+0x24>)
 8001be4:	f7ff fa92 	bl	800110c <Unmount_SD>
	/* Infinite loop */
	for (;;)
	{

		osDelay(1000);
 8001be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bec:	f012 fe30 	bl	8014850 <osDelay>
 8001bf0:	e7fa      	b.n	8001be8 <SdCardInit+0x18>
 8001bf2:	bf00      	nop
 8001bf4:	0801d494 	.word	0x0801d494

08001bf8 <sensorReadInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sensorReadInit */
void sensorReadInit(void const * argument)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorReadInit */

	/* Infinite loop */
	for (;;)
	{
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <sensorReadInit+0x7c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f012 fe67 	bl	80148dc <osSemaphoreWait>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d12a      	bne.n	8001c6a <sensorReadInit+0x72>
		{
			if (MENU_MEASURMENT_START == getMenuSelector())
 8001c14:	f000 fbe8 	bl	80023e8 <getMenuSelector>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d106      	bne.n	8001c2c <sensorReadInit+0x34>
			{
				char *sensorDataPtr = getSensorDataFileName();
 8001c1e:	f000 fbff 	bl	8002420 <getSensorDataFileName>
 8001c22:	60f8      	str	r0, [r7, #12]
				processData(sensorDataPtr);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f001 fd7b 	bl	8003720 <processData>
 8001c2a:	e01e      	b.n	8001c6a <sensorReadInit+0x72>
			}
			else if (MENU_SAG_START == getMenuSelector())
 8001c2c:	f000 fbdc 	bl	80023e8 <getMenuSelector>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d108      	bne.n	8001c48 <sensorReadInit+0x50>
			{
				processDataSag(result, resultPressure);
 8001c36:	4910      	ldr	r1, [pc, #64]	; (8001c78 <sensorReadInit+0x80>)
 8001c38:	4810      	ldr	r0, [pc, #64]	; (8001c7c <sensorReadInit+0x84>)
 8001c3a:	f001 fd89 	bl	8003750 <processDataSag>
				lcdMenuSagStart(result, resultPressure);
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <sensorReadInit+0x80>)
 8001c40:	480e      	ldr	r0, [pc, #56]	; (8001c7c <sensorReadInit+0x84>)
 8001c42:	f000 f951 	bl	8001ee8 <lcdMenuSagStart>
 8001c46:	e010      	b.n	8001c6a <sensorReadInit+0x72>
			}
			else if (MENU_CALIBRATION == getMenuSelector()){
 8001c48:	f000 fbce 	bl	80023e8 <getMenuSelector>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d10b      	bne.n	8001c6a <sensorReadInit+0x72>
				stopAdcDma();
 8001c52:	f001 fc97 	bl	8003584 <stopAdcDma>
				travelPressureSensorCalibration();
 8001c56:	f001 fca9 	bl	80035ac <travelPressureSensorCalibration>
				lcdMenuFinishedNotification("Cal Finished");
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <sensorReadInit+0x88>)
 8001c5c:	f000 f9cc 	bl	8001ff8 <lcdMenuFinishedNotification>
				lcdMenuStart();
 8001c60:	f000 f9e6 	bl	8002030 <lcdMenuStart>
				setMenuSelector(MENU_START);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f000 fbcb 	bl	8002400 <setMenuSelector>

		else
		{

		}
		osDelay(50);
 8001c6a:	2032      	movs	r0, #50	; 0x32
 8001c6c:	f012 fdf0 	bl	8014850 <osDelay>
		if (osOK == osSemaphoreWait(travelSensorSemHandle, osWaitForever))
 8001c70:	e7c6      	b.n	8001c00 <sensorReadInit+0x8>
 8001c72:	bf00      	nop
 8001c74:	20002424 	.word	0x20002424
 8001c78:	20000ad4 	.word	0x20000ad4
 8001c7c:	20000ad0 	.word	0x20000ad0
 8001c80:	0801d498 	.word	0x0801d498

08001c84 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	button_t buttonLeft;
	button_t buttonRight;
	HAL_I2C_Init(&hi2c1);
 8001c8c:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <menuProcessDataInit+0x50>)
 8001c8e:	f003 fb4d 	bl	800532c <HAL_I2C_Init>
	SSD1306_Init();
 8001c92:	f000 fdf7 	bl	8002884 <SSD1306_Init>
	lcdMenuStart();
 8001c96:	f000 f9cb 	bl	8002030 <lcdMenuStart>
	/* Infinite loop */
	for (;;)
	{
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <menuProcessDataInit+0x54>)
 8001c9e:	f7ff fe83 	bl	80019a8 <readButton>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
		buttonRight = readButton(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <menuProcessDataInit+0x54>)
 8001caa:	f7ff fe7d 	bl	80019a8 <readButton>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73bb      	strb	r3, [r7, #14]
		if ((BUTTON_SNA != buttonLeft) || (BUTTON_SNA != buttonRight))
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d102      	bne.n	8001cbe <menuProcessDataInit+0x3a>
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d005      	beq.n	8001cca <menuProcessDataInit+0x46>
		{
			menuSelector(buttonLeft, buttonRight);
 8001cbe:	7bba      	ldrb	r2, [r7, #14]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fbb5 	bl	8002434 <menuSelector>
		}

		osDelay(10);
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f012 fdc0 	bl	8014850 <osDelay>
		buttonLeft = readButton(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
 8001cd0:	e7e3      	b.n	8001c9a <menuProcessDataInit+0x16>
 8001cd2:	bf00      	nop
 8001cd4:	200027f4 	.word	0x200027f4
 8001cd8:	40020400 	.word	0x40020400

08001cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <MX_GPIO_Init+0x110>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <MX_GPIO_Init+0x110>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_GPIO_Init+0x110>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCELEROMETER_INT0_Pin;
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCELEROMETER_INT0_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <MX_GPIO_Init+0x114>)
 8001d94:	f003 f91e 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_detection_Pin;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_detection_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_GPIO_Init+0x118>)
 8001dae:	f003 f911 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARGE_DETECTION_Pin;
 8001db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGE_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480b      	ldr	r0, [pc, #44]	; (8001df4 <MX_GPIO_Init+0x118>)
 8001dc8:	f003 f904 	bl	8004fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_GPIO_Init+0x11c>)
 8001de0:	f003 f8f8 	bl	8004fd4 <HAL_GPIO_Init>

}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400

08001dfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <MX_I2C1_Init+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_I2C1_Init+0x58>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e3a:	f003 fa77 	bl	800532c <HAL_I2C_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e44:	f000 faca 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200027f4 	.word	0x200027f4
 8001e50:	40005400 	.word	0x40005400
 8001e54:	00061a80 	.word	0x00061a80

08001e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a19      	ldr	r2, [pc, #100]	; (8001edc <HAL_I2C_MspInit+0x84>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12c      	bne.n	8001ed4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <HAL_I2C_MspInit+0x8c>)
 8001eb4:	f003 f88e 	bl	8004fd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_I2C_MspInit+0x88>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <lcdMenuSagStart>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void lcdMenuSagStart(int16_t *result, int16_t *resultPressure)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	char lcdFirstLineTravel[8] =
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
	{ 0 };
	char lcSecondLineTravel[8] =
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
	{ 0 };
	char lcdFirstLinePressure[8] =
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
	{ 0 };
	char lcSecondLinePressure[8] =
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
	{ 0 };
	sprintf(lcdFirstLineTravel, "FT: %d", result[0]);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	4930      	ldr	r1, [pc, #192]	; (8001fe0 <lcdMenuSagStart+0xf8>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f017 f8af 	bl	8019084 <siprintf>
	sprintf(lcSecondLineTravel, "RT: %d", result[1]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	492b      	ldr	r1, [pc, #172]	; (8001fe4 <lcdMenuSagStart+0xfc>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f017 f8a4 	bl	8019084 <siprintf>
	sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[0]);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <lcdMenuSagStart+0x100>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f017 f89a 	bl	8019084 <siprintf>
	sprintf(lcSecondLinePressure, "RP: %d", resultPressure[1]);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3302      	adds	r3, #2
 8001f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4923      	ldr	r1, [pc, #140]	; (8001fec <lcdMenuSagStart+0x104>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f017 f88f 	bl	8019084 <siprintf>
	SSD1306_Clear();
 8001f66:	f000 feb2 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8001f6a:	210a      	movs	r1, #10
 8001f6c:	200a      	movs	r0, #10
 8001f6e:	f000 fdf3 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f72:	f107 0320 	add.w	r3, r7, #32
 8001f76:	2201      	movs	r2, #1
 8001f78:	491d      	ldr	r1, [pc, #116]	; (8001ff0 <lcdMenuSagStart+0x108>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fe82 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8001f80:	211e      	movs	r1, #30
 8001f82:	200a      	movs	r0, #10
 8001f84:	f000 fde8 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLineTravel, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4918      	ldr	r1, [pc, #96]	; (8001ff0 <lcdMenuSagStart+0x108>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fe77 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(78, 10);
 8001f96:	210a      	movs	r1, #10
 8001f98:	204e      	movs	r0, #78	; 0x4e
 8001f9a:	f000 fddd 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts(lcdFirstLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4912      	ldr	r1, [pc, #72]	; (8001ff0 <lcdMenuSagStart+0x108>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fe6c 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(78, 30);
 8001fac:	211e      	movs	r1, #30
 8001fae:	204e      	movs	r0, #78	; 0x4e
 8001fb0:	f000 fdd2 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts(lcSecondLinePressure, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fb4:	f107 0308 	add.w	r3, r7, #8
 8001fb8:	2201      	movs	r2, #1
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <lcdMenuSagStart+0x108>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fe61 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 8001fc2:	2132      	movs	r1, #50	; 0x32
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f000 fdc7 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <lcdMenuSagStart+0x108>)
 8001fce:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <lcdMenuSagStart+0x10c>)
 8001fd0:	f000 fe58 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001fd4:	f000 fd1a 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0801d4a8 	.word	0x0801d4a8
 8001fe4:	0801d4b0 	.word	0x0801d4b0
 8001fe8:	0801d4b8 	.word	0x0801d4b8
 8001fec:	0801d4c0 	.word	0x0801d4c0
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	0801d4c8 	.word	0x0801d4c8

08001ff8 <lcdMenuFinishedNotification>:
void lcdMenuFinishedNotification(char *notification)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8002000:	f000 fe65 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 8002004:	211e      	movs	r1, #30
 8002006:	201e      	movs	r0, #30
 8002008:	f000 fda6 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts(notification, &Font_7x10, SSD1306_COLOR_WHITE);
 800200c:	2201      	movs	r2, #1
 800200e:	4907      	ldr	r1, [pc, #28]	; (800202c <lcdMenuFinishedNotification+0x34>)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fe37 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002016:	f000 fcf9 	bl	8002a0c <SSD1306_UpdateScreen>
	osDelay(2000);
 800201a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800201e:	f012 fc17 	bl	8014850 <osDelay>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <lcdMenuStart>:

void lcdMenuStart()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002034:	f000 fe4b 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002038:	210a      	movs	r1, #10
 800203a:	200a      	movs	r0, #10
 800203c:	f000 fd8c 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("SAG", &Font_7x10, SSD1306_COLOR_WHITE);
 8002040:	2201      	movs	r2, #1
 8002042:	4911      	ldr	r1, [pc, #68]	; (8002088 <lcdMenuStart+0x58>)
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <lcdMenuStart+0x5c>)
 8002046:	f000 fe1d 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 800204a:	211e      	movs	r1, #30
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fd83 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002052:	2201      	movs	r2, #1
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <lcdMenuStart+0x58>)
 8002056:	480e      	ldr	r0, [pc, #56]	; (8002090 <lcdMenuStart+0x60>)
 8002058:	f000 fe14 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 800205c:	210a      	movs	r1, #10
 800205e:	2044      	movs	r0, #68	; 0x44
 8002060:	f000 fd7a 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002064:	2201      	movs	r2, #1
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <lcdMenuStart+0x58>)
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <lcdMenuStart+0x64>)
 800206a:	f000 fe0b 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 800206e:	211e      	movs	r1, #30
 8002070:	2044      	movs	r0, #68	; 0x44
 8002072:	f000 fd71 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002076:	2201      	movs	r2, #1
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <lcdMenuStart+0x58>)
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <lcdMenuStart+0x68>)
 800207c:	f000 fe02 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002080:	f000 fcc4 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000000 	.word	0x20000000
 800208c:	0801d4dc 	.word	0x0801d4dc
 8002090:	0801d4e0 	.word	0x0801d4e0
 8002094:	0801d4e8 	.word	0x0801d4e8
 8002098:	0801d4f0 	.word	0x0801d4f0

0800209c <lcdMenuSag>:

void lcdMenuSag()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80020a0:	f000 fe15 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 80020a4:	210a      	movs	r1, #10
 80020a6:	200a      	movs	r0, #10
 80020a8:	f000 fd56 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 80020ac:	2201      	movs	r2, #1
 80020ae:	4916      	ldr	r1, [pc, #88]	; (8002108 <lcdMenuSag+0x6c>)
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <lcdMenuSag+0x70>)
 80020b2:	f000 fde7 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 80020b6:	211e      	movs	r1, #30
 80020b8:	200a      	movs	r0, #10
 80020ba:	f000 fd4d 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020be:	2201      	movs	r2, #1
 80020c0:	4911      	ldr	r1, [pc, #68]	; (8002108 <lcdMenuSag+0x6c>)
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <lcdMenuSag+0x74>)
 80020c4:	f000 fdde 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 80020c8:	210a      	movs	r1, #10
 80020ca:	2044      	movs	r0, #68	; 0x44
 80020cc:	f000 fd44 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80020d0:	2201      	movs	r2, #1
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <lcdMenuSag+0x6c>)
 80020d4:	480f      	ldr	r0, [pc, #60]	; (8002114 <lcdMenuSag+0x78>)
 80020d6:	f000 fdd5 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 80020da:	211e      	movs	r1, #30
 80020dc:	2044      	movs	r0, #68	; 0x44
 80020de:	f000 fd3b 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020e2:	2201      	movs	r2, #1
 80020e4:	4908      	ldr	r1, [pc, #32]	; (8002108 <lcdMenuSag+0x6c>)
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <lcdMenuSag+0x7c>)
 80020e8:	f000 fdcc 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 80020ec:	2132      	movs	r1, #50	; 0x32
 80020ee:	200a      	movs	r0, #10
 80020f0:	f000 fd32 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80020f4:	2201      	movs	r2, #1
 80020f6:	4904      	ldr	r1, [pc, #16]	; (8002108 <lcdMenuSag+0x6c>)
 80020f8:	4808      	ldr	r0, [pc, #32]	; (800211c <lcdMenuSag+0x80>)
 80020fa:	f000 fdc3 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80020fe:	f000 fc85 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000
 800210c:	0801d4f8 	.word	0x0801d4f8
 8002110:	0801d4e0 	.word	0x0801d4e0
 8002114:	0801d500 	.word	0x0801d500
 8002118:	0801d4f0 	.word	0x0801d4f0
 800211c:	0801d508 	.word	0x0801d508

08002120 <lcdStartMeasurement>:

void lcdStartMeasurement()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002124:	f000 fdd3 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002128:	210a      	movs	r1, #10
 800212a:	200a      	movs	r0, #10
 800212c:	f000 fd14 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 8002130:	2201      	movs	r2, #1
 8002132:	4911      	ldr	r1, [pc, #68]	; (8002178 <lcdStartMeasurement+0x58>)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <lcdStartMeasurement+0x5c>)
 8002136:	f000 fda5 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 800213a:	211e      	movs	r1, #30
 800213c:	200a      	movs	r0, #10
 800213e:	f000 fd0b 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002142:	2201      	movs	r2, #1
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <lcdStartMeasurement+0x58>)
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <lcdStartMeasurement+0x60>)
 8002148:	f000 fd9c 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 800214c:	210a      	movs	r1, #10
 800214e:	2044      	movs	r0, #68	; 0x44
 8002150:	f000 fd02 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("MESSURE", &Font_7x10, SSD1306_COLOR_WHITE);
 8002154:	2201      	movs	r2, #1
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <lcdStartMeasurement+0x58>)
 8002158:	480a      	ldr	r0, [pc, #40]	; (8002184 <lcdStartMeasurement+0x64>)
 800215a:	f000 fd93 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 800215e:	2132      	movs	r1, #50	; 0x32
 8002160:	200a      	movs	r0, #10
 8002162:	f000 fcf9 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("START hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 8002166:	2201      	movs	r2, #1
 8002168:	4903      	ldr	r1, [pc, #12]	; (8002178 <lcdStartMeasurement+0x58>)
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <lcdStartMeasurement+0x68>)
 800216c:	f000 fd8a 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002170:	f000 fc4c 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000000 	.word	0x20000000
 800217c:	0801d500 	.word	0x0801d500
 8002180:	0801d4e0 	.word	0x0801d4e0
 8002184:	0801d4e8 	.word	0x0801d4e8
 8002188:	0801d518 	.word	0x0801d518

0800218c <lcdCalibration>:

void lcdCalibration()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002190:	f000 fd9d 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(10, 10);
 8002194:	210a      	movs	r1, #10
 8002196:	200a      	movs	r0, #10
 8002198:	f000 fcde 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("CALIB", &Font_7x10, SSD1306_COLOR_WHITE);
 800219c:	2201      	movs	r2, #1
 800219e:	4911      	ldr	r1, [pc, #68]	; (80021e4 <lcdCalibration+0x58>)
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <lcdCalibration+0x5c>)
 80021a2:	f000 fd6f 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 10);
 80021a6:	210a      	movs	r1, #10
 80021a8:	2044      	movs	r0, #68	; 0x44
 80021aa:	f000 fcd5 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("MENU", &Font_7x10, SSD1306_COLOR_WHITE);
 80021ae:	2201      	movs	r2, #1
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <lcdCalibration+0x58>)
 80021b2:	480e      	ldr	r0, [pc, #56]	; (80021ec <lcdCalibration+0x60>)
 80021b4:	f000 fd66 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(68, 30);
 80021b8:	211e      	movs	r1, #30
 80021ba:	2044      	movs	r0, #68	; 0x44
 80021bc:	f000 fccc 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021c0:	2201      	movs	r2, #1
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <lcdCalibration+0x58>)
 80021c4:	480a      	ldr	r0, [pc, #40]	; (80021f0 <lcdCalibration+0x64>)
 80021c6:	f000 fd5d 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 80021ca:	2132      	movs	r1, #50	; 0x32
 80021cc:	200a      	movs	r0, #10
 80021ce:	f000 fcc3 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("START hold LEFT", &Font_7x10, SSD1306_COLOR_WHITE);
 80021d2:	2201      	movs	r2, #1
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <lcdCalibration+0x58>)
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <lcdCalibration+0x68>)
 80021d8:	f000 fd54 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80021dc:	f000 fc16 	bl	8002a0c <SSD1306_UpdateScreen>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	0801d4f8 	.word	0x0801d4f8
 80021ec:	0801d500 	.word	0x0801d500
 80021f0:	0801d4f0 	.word	0x0801d4f0
 80021f4:	0801d508 	.word	0x0801d508

080021f8 <lcdMeasurementStart>:

void lcdMeasurementStart()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80021fc:	f000 fd67 	bl	8002cce <SSD1306_Clear>
	SSD1306_GotoXY(30, 30);
 8002200:	211e      	movs	r1, #30
 8002202:	201e      	movs	r0, #30
 8002204:	f000 fca8 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("STARTING", &Font_7x10, SSD1306_COLOR_WHITE);
 8002208:	2201      	movs	r2, #1
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <lcdMeasurementStart+0x34>)
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <lcdMeasurementStart+0x38>)
 800220e:	f000 fd39 	bl	8002c84 <SSD1306_Puts>
	SSD1306_GotoXY(10, 50);
 8002212:	2132      	movs	r1, #50	; 0x32
 8002214:	200a      	movs	r0, #10
 8002216:	f000 fc9f 	bl	8002b58 <SSD1306_GotoXY>
	SSD1306_Puts("FINISH hold RIGHT", &Font_7x10, SSD1306_COLOR_WHITE);
 800221a:	2201      	movs	r2, #1
 800221c:	4903      	ldr	r1, [pc, #12]	; (800222c <lcdMeasurementStart+0x34>)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <lcdMeasurementStart+0x3c>)
 8002220:	f000 fd30 	bl	8002c84 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002224:	f000 fbf2 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000000 	.word	0x20000000
 8002230:	0801d52c 	.word	0x0801d52c
 8002234:	0801d538 	.word	0x0801d538

08002238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002260:	e000      	b.n	8002264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f9      	beq.n	8002262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800226e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ffd1 	bl	8002238 <ITM_SendChar>
	return (ch);
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f001 fcd8 	bl	8003c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f81a 	bl	80022e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f7ff fd16 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 80022b0:	f7ff fbb6 	bl	8001a20 <MX_DMA_Init>
  MX_TIM6_Init();
 80022b4:	f001 f828 	bl	8003308 <MX_TIM6_Init>
  MX_TIM8_Init();
 80022b8:	f001 f85c 	bl	8003374 <MX_TIM8_Init>
  MX_TIM2_Init();
 80022bc:	f000 ffb2 	bl	8003224 <MX_TIM2_Init>
  MX_ADC2_Init();
 80022c0:	f7ff fa16 	bl	80016f0 <MX_ADC2_Init>
  MX_I2C1_Init();
 80022c4:	f7ff fd9a 	bl	8001dfc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80022c8:	f000 f98e 	bl	80025e8 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 80022cc:	f7ff f9be 	bl	800164c <MX_ADC1_Init>
  MX_FATFS_Init();
 80022d0:	f00a fff2 	bl	800d2b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	//MX_SDIO_SD_Init_4B();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80022d4:	f7ff fbee 	bl	8001ab4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022d8:	f012 fa4b 	bl	8014772 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80022dc:	e7fe      	b.n	80022dc <main+0x3c>
	...

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	; 0x50
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	2234      	movs	r2, #52	; 0x34
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f016 ffee 	bl	80192d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <SystemClock_Config+0xd0>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <SystemClock_Config+0xd0>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <SystemClock_Config+0xd0>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	2300      	movs	r3, #0
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <SystemClock_Config+0xd4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <SystemClock_Config+0xd4>)
 800232a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <SystemClock_Config+0xd4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002344:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002346:	2302      	movs	r3, #2
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002350:	2308      	movs	r3, #8
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002354:	23a8      	movs	r3, #168	; 0xa8
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002358:	2302      	movs	r3, #2
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800235c:	2307      	movs	r3, #7
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002360:	2302      	movs	r3, #2
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4618      	mov	r0, r3
 800236a:	f005 fedf 	bl	800812c <HAL_RCC_OscConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002374:	f000 f832 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002378:	230f      	movs	r3, #15
 800237a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237c:	2302      	movs	r3, #2
 800237e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002384:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	2105      	movs	r1, #5
 8002396:	4618      	mov	r0, r3
 8002398:	f005 f838 	bl	800740c <HAL_RCC_ClockConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023a2:	f000 f81b 	bl	80023dc <Error_Handler>
  }
}
 80023a6:	bf00      	nop
 80023a8:	3750      	adds	r7, #80	; 0x50
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ca:	f001 fc67 	bl	8003c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40000400 	.word	0x40000400

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>
	...

080023e8 <getMenuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
menu_t getMenuSelector(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	return (selector);
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <getMenuSelector+0x14>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20002848 	.word	0x20002848

08002400 <setMenuSelector>:
void setMenuSelector(menu_t selectorState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	selector = selectorState;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <setMenuSelector+0x1c>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	7013      	strb	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20002848 	.word	0x20002848

08002420 <getSensorDataFileName>:
char* getSensorDataFileName(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	return (sensorData);
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <getSensorDataFileName+0x10>)
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	20002860 	.word	0x20002860

08002434 <menuSelector>:

void menuSelector(button_t buttonLeft, button_t buttonRight)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]

	switch (selector)
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <menuSelector+0x184>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b05      	cmp	r3, #5
 800244a:	f200 80b0 	bhi.w	80025ae <menuSelector+0x17a>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <menuSelector+0x20>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002497 	.word	0x08002497
 800245c:	080024e7 	.word	0x080024e7
 8002460:	0800250d 	.word	0x0800250d
 8002464:	0800252b 	.word	0x0800252b
 8002468:	08002585 	.word	0x08002585
	{

	case (MENU_START):

		if (BUTTON_LEFT == buttonLeft)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <menuSelector+0x4a>
		{
			lcdMenuSag();
 8002472:	f7ff fe13 	bl	800209c <lcdMenuSag>
			selector = MENU_SAG;
 8002476:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <menuSelector+0x184>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
		else
		{
			lcdMenuStart();
		}

		break;
 800247c:	e097      	b.n	80025ae <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <menuSelector+0x5c>
			lcdStartMeasurement();
 8002484:	f7ff fe4c 	bl	8002120 <lcdStartMeasurement>
			selector = MENU_MEASURMENT;
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <menuSelector+0x184>)
 800248a:	2204      	movs	r2, #4
 800248c:	701a      	strb	r2, [r3, #0]
		break;
 800248e:	e08e      	b.n	80025ae <menuSelector+0x17a>
			lcdMenuStart();
 8002490:	f7ff fdce 	bl	8002030 <lcdMenuStart>
		break;
 8002494:	e08b      	b.n	80025ae <menuSelector+0x17a>

	case (MENU_SAG):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d10e      	bne.n	80024ba <menuSelector+0x86>
		{
			if(0 == readCalibrationData(&calibrationValues)){
 800249c:	4847      	ldr	r0, [pc, #284]	; (80025bc <menuSelector+0x188>)
 800249e:	f7fe ffe9 	bl	8001474 <readCalibrationData>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d17f      	bne.n	80025a8 <menuSelector+0x174>
			startAdcDma();
 80024a8:	f001 f84e 	bl	8003548 <startAdcDma>
			puts("pomiar rozpoczety, Przytrzymaj LEFT aby zakonczyc\n");
 80024ac:	4844      	ldr	r0, [pc, #272]	; (80025c0 <menuSelector+0x18c>)
 80024ae:	f016 fde1 	bl	8019074 <puts>
			selector = MENU_SAG_START;
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <menuSelector+0x184>)
 80024b4:	2203      	movs	r2, #3
 80024b6:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 80024b8:	e076      	b.n	80025a8 <menuSelector+0x174>
		else if (BUTTON_LEFT == buttonLeft)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <menuSelector+0x98>
			lcdCalibration();
 80024c0:	f7ff fe64 	bl	800218c <lcdCalibration>
			selector = MENU_CALIBRATION;
 80024c4:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <menuSelector+0x184>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
		break;
 80024ca:	e06d      	b.n	80025a8 <menuSelector+0x174>
		else if (BUTTON_RIGHT == buttonRight)
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <menuSelector+0xaa>
			lcdMenuStart();
 80024d2:	f7ff fdad 	bl	8002030 <lcdMenuStart>
			selector = MENU_START;
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <menuSelector+0x184>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
		break;
 80024dc:	e064      	b.n	80025a8 <menuSelector+0x174>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 80024de:	4839      	ldr	r0, [pc, #228]	; (80025c4 <menuSelector+0x190>)
 80024e0:	f016 fdc8 	bl	8019074 <puts>
		break;
 80024e4:	e060      	b.n	80025a8 <menuSelector+0x174>
	case (MENU_CALIBRATION):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d102      	bne.n	80024f2 <menuSelector+0xbe>
		{
			startAdcDma();
 80024ec:	f001 f82c 	bl	8003548 <startAdcDma>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
		}
		break;
 80024f0:	e05d      	b.n	80025ae <menuSelector+0x17a>
		else if (BUTTON_RIGHT == buttonRight)
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <menuSelector+0xd0>
			selector = MENU_START;
 80024f8:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <menuSelector+0x184>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 80024fe:	f7ff fd97 	bl	8002030 <lcdMenuStart>
		break;
 8002502:	e054      	b.n	80025ae <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby rozpoczac pomiar\n");
 8002504:	482f      	ldr	r0, [pc, #188]	; (80025c4 <menuSelector+0x190>)
 8002506:	f016 fdb5 	bl	8019074 <puts>
		break;
 800250a:	e050      	b.n	80025ae <menuSelector+0x17a>
	case (MENU_SAG_START):
		if (BUTTON_LEFT_PRESSED == buttonLeft)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <menuSelector+0xee>
		{
			stopAdcDma();
 8002512:	f001 f837 	bl	8003584 <stopAdcDma>
			selector = MENU_START;
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <menuSelector+0x184>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
			lcdMenuStart();
 800251c:	f7ff fd88 	bl	8002030 <lcdMenuStart>
		}
		else
		{
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
		}
		break;
 8002520:	e045      	b.n	80025ae <menuSelector+0x17a>
			puts("PRZYTRZYMAJ LEFT aby wrocic do menu start");
 8002522:	4829      	ldr	r0, [pc, #164]	; (80025c8 <menuSelector+0x194>)
 8002524:	f016 fda6 	bl	8019074 <puts>
		break;
 8002528:	e041      	b.n	80025ae <menuSelector+0x17a>

	case (MENU_MEASURMENT):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d11c      	bne.n	800256a <menuSelector+0x136>
		{
			lcdMeasurementStart();
 8002530:	f7ff fe62 	bl	80021f8 <lcdMeasurementStart>
			setPath(dir, sensorData, path);
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <menuSelector+0x198>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4925      	ldr	r1, [pc, #148]	; (80025d0 <menuSelector+0x19c>)
 800253c:	4825      	ldr	r0, [pc, #148]	; (80025d4 <menuSelector+0x1a0>)
 800253e:	f7fe fd87 	bl	8001050 <setPath>
			createNewFile(dir, sensorData, &path);
 8002542:	4a22      	ldr	r2, [pc, #136]	; (80025cc <menuSelector+0x198>)
 8002544:	4922      	ldr	r1, [pc, #136]	; (80025d0 <menuSelector+0x19c>)
 8002546:	4823      	ldr	r0, [pc, #140]	; (80025d4 <menuSelector+0x1a0>)
 8002548:	f7fe fd9e 	bl	8001088 <createNewFile>
			if(0 == readCalibrationData(&calibrationValues)){
 800254c:	481b      	ldr	r0, [pc, #108]	; (80025bc <menuSelector+0x188>)
 800254e:	f7fe ff91 	bl	8001474 <readCalibrationData>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d129      	bne.n	80025ac <menuSelector+0x178>
			startAdcDma();
 8002558:	f000 fff6 	bl	8003548 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <menuSelector+0x184>)
 800255e:	2205      	movs	r2, #5
 8002560:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, PRZYTRZYMAJ RIGHT aby zakonczyc\n");
 8002562:	481d      	ldr	r0, [pc, #116]	; (80025d8 <menuSelector+0x1a4>)
 8002564:	f016 fd86 	bl	8019074 <puts>
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
		}
		break;
 8002568:	e020      	b.n	80025ac <menuSelector+0x178>
		else if (BUTTON_LEFT == buttonLeft)
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <menuSelector+0x148>
			lcdMenuStart();
 8002570:	f7ff fd5e 	bl	8002030 <lcdMenuStart>
			selector = MENU_START;
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <menuSelector+0x184>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
		break;
 800257a:	e017      	b.n	80025ac <menuSelector+0x178>
			puts("PRZYTRZYMAJ RIGHT aby rozpoczac pomiar\n");
 800257c:	4817      	ldr	r0, [pc, #92]	; (80025dc <menuSelector+0x1a8>)
 800257e:	f016 fd79 	bl	8019074 <puts>
		break;
 8002582:	e013      	b.n	80025ac <menuSelector+0x178>

	case (MENU_MEASURMENT_START):
		if (BUTTON_RIGHT_PRESSED == buttonRight)
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d10a      	bne.n	80025a0 <menuSelector+0x16c>
		{
			stopAdcDma();
 800258a:	f000 fffb 	bl	8003584 <stopAdcDma>
			lcdMenuFinishedNotification("Mes Finished");
 800258e:	4814      	ldr	r0, [pc, #80]	; (80025e0 <menuSelector+0x1ac>)
 8002590:	f7ff fd32 	bl	8001ff8 <lcdMenuFinishedNotification>
			lcdMenuStart();
 8002594:	f7ff fd4c 	bl	8002030 <lcdMenuStart>
			selector = MENU_START;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <menuSelector+0x184>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
		}
		break;
 800259e:	e006      	b.n	80025ae <menuSelector+0x17a>
			puts("PRZYTRZYMAJ RIGHT aby zakończyć pomiar\n");
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <menuSelector+0x1b0>)
 80025a2:	f016 fd67 	bl	8019074 <puts>
		break;
 80025a6:	e002      	b.n	80025ae <menuSelector+0x17a>
		break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <menuSelector+0x17a>
		break;
 80025ac:	bf00      	nop

	default:
	}

}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20002848 	.word	0x20002848
 80025bc:	20002ee8 	.word	0x20002ee8
 80025c0:	0801d54c 	.word	0x0801d54c
 80025c4:	0801d580 	.word	0x0801d580
 80025c8:	0801d5a8 	.word	0x0801d5a8
 80025cc:	20002849 	.word	0x20002849
 80025d0:	20002860 	.word	0x20002860
 80025d4:	2000284c 	.word	0x2000284c
 80025d8:	0801d5d4 	.word	0x0801d5d4
 80025dc:	0801d610 	.word	0x0801d610
 80025e0:	0801d638 	.word	0x0801d638
 80025e4:	0801d648 	.word	0x0801d648

080025e8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 80025ee:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <MX_SDIO_SD_Init+0x3c>)
 80025f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <MX_SDIO_SD_Init+0x38>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20002874 	.word	0x20002874
 8002624:	40012c00 	.word	0x40012c00

08002628 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0a2      	sub	sp, #136	; 0x88
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	225c      	movs	r2, #92	; 0x5c
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f016 fe41 	bl	80192d0 <memset>
  if(sdHandle->Instance==SDIO)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a83      	ldr	r2, [pc, #524]	; (8002860 <HAL_SD_MspInit+0x238>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f040 80fe 	bne.w	8002856 <HAL_SD_MspInit+0x22e>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800265a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800265e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002664:	2300      	movs	r3, #0
 8002666:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4618      	mov	r0, r3
 800266e:	f005 f805 	bl	800767c <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002678:	f7ff feb0 	bl	80023dc <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <HAL_SD_MspInit+0x23c>)
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	4a77      	ldr	r2, [pc, #476]	; (8002864 <HAL_SD_MspInit+0x23c>)
 8002686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800268a:	6453      	str	r3, [r2, #68]	; 0x44
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_SD_MspInit+0x23c>)
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	4b71      	ldr	r3, [pc, #452]	; (8002864 <HAL_SD_MspInit+0x23c>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	4a70      	ldr	r2, [pc, #448]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	6313      	str	r3, [r2, #48]	; 0x30
 80026a8:	4b6e      	ldr	r3, [pc, #440]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6313      	str	r3, [r2, #48]	; 0x30
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4a62      	ldr	r2, [pc, #392]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6313      	str	r3, [r2, #48]	; 0x30
 80026e0:	4b60      	ldr	r3, [pc, #384]	; (8002864 <HAL_SD_MspInit+0x23c>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ec:	2304      	movs	r3, #4
 80026ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026fe:	230c      	movs	r3, #12
 8002700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002708:	4619      	mov	r1, r3
 800270a:	4857      	ldr	r0, [pc, #348]	; (8002868 <HAL_SD_MspInit+0x240>)
 800270c:	f002 fc62 	bl	8004fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002710:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002714:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800271a:	2301      	movs	r3, #1
 800271c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002724:	230c      	movs	r3, #12
 8002726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800272e:	4619      	mov	r1, r3
 8002730:	484e      	ldr	r0, [pc, #312]	; (800286c <HAL_SD_MspInit+0x244>)
 8002732:	f002 fc4f 	bl	8004fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002736:	2304      	movs	r3, #4
 8002738:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800273e:	2301      	movs	r3, #1
 8002740:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002748:	230c      	movs	r3, #12
 800274a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800274e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002752:	4619      	mov	r1, r3
 8002754:	4846      	ldr	r0, [pc, #280]	; (8002870 <HAL_SD_MspInit+0x248>)
 8002756:	f002 fc3d 	bl	8004fd4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_SD_MspInit+0x24c>)
 800275c:	4a46      	ldr	r2, [pc, #280]	; (8002878 <HAL_SD_MspInit+0x250>)
 800275e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002760:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_SD_MspInit+0x24c>)
 8002762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002766:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <HAL_SD_MspInit+0x24c>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_SD_MspInit+0x24c>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_SD_MspInit+0x24c>)
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_SD_MspInit+0x24c>)
 800277e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002782:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_SD_MspInit+0x24c>)
 8002786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800278a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800278c:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_SD_MspInit+0x24c>)
 800278e:	2220      	movs	r2, #32
 8002790:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_SD_MspInit+0x24c>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_SD_MspInit+0x24c>)
 800279a:	2204      	movs	r2, #4
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027a0:	2203      	movs	r2, #3
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027a4:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027ac:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80027b4:	482f      	ldr	r0, [pc, #188]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027b6:	f001 ffff 	bl	80047b8 <HAL_DMA_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 80027c0:	f7ff fe0c 	bl	80023dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <HAL_SD_MspInit+0x24c>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_SD_MspInit+0x254>)
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_SD_MspInit+0x258>)
 80027d4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_SD_MspInit+0x254>)
 80027d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027dc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_SD_MspInit+0x254>)
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_SD_MspInit+0x254>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_SD_MspInit+0x254>)
 80027ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_SD_MspInit+0x254>)
 80027f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_SD_MspInit+0x254>)
 80027fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002800:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_SD_MspInit+0x254>)
 8002804:	2220      	movs	r2, #32
 8002806:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_SD_MspInit+0x254>)
 800280a:	2200      	movs	r2, #0
 800280c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_SD_MspInit+0x254>)
 8002810:	2204      	movs	r2, #4
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_SD_MspInit+0x254>)
 8002816:	2203      	movs	r2, #3
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_SD_MspInit+0x254>)
 800281c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_SD_MspInit+0x254>)
 8002824:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800282a:	4814      	ldr	r0, [pc, #80]	; (800287c <HAL_SD_MspInit+0x254>)
 800282c:	f001 ffc4 	bl	80047b8 <HAL_DMA_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_SD_MspInit+0x212>
    {
      Error_Handler();
 8002836:	f7ff fdd1 	bl	80023dc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_SD_MspInit+0x254>)
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002840:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_SD_MspInit+0x254>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2105      	movs	r1, #5
 800284a:	2031      	movs	r0, #49	; 0x31
 800284c:	f001 ff8a 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002850:	2031      	movs	r0, #49	; 0x31
 8002852:	f001 ffa3 	bl	800479c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002856:	bf00      	nop
 8002858:	3788      	adds	r7, #136	; 0x88
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40023800 	.word	0x40023800
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	200028f8 	.word	0x200028f8
 8002878:	40026458 	.word	0x40026458
 800287c:	20002958 	.word	0x20002958
 8002880:	400264a0 	.word	0x400264a0

08002884 <SSD1306_Init>:
		}
	}
}

uint8_t SSD1306_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800288a:	f000 fa29 	bl	8002ce0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 800288e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002892:	2201      	movs	r2, #1
 8002894:	2178      	movs	r1, #120	; 0x78
 8002896:	485b      	ldr	r0, [pc, #364]	; (8002a04 <SSD1306_Init+0x180>)
 8002898:	f002 ff8a 	bl	80057b0 <HAL_I2C_IsDeviceReady>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <SSD1306_Init+0x22>
	{
		/* Return false */
		return 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e0a9      	b.n	80029fa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80028a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80028aa:	607b      	str	r3, [r7, #4]
	while (p > 0)
 80028ac:	e002      	b.n	80028b4 <SSD1306_Init+0x30>
		p--;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
	while (p > 0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80028ba:	22ae      	movs	r2, #174	; 0xae
 80028bc:	2100      	movs	r1, #0
 80028be:	2078      	movs	r0, #120	; 0x78
 80028c0:	f000 fa8a 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80028c4:	2220      	movs	r2, #32
 80028c6:	2100      	movs	r1, #0
 80028c8:	2078      	movs	r0, #120	; 0x78
 80028ca:	f000 fa85 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80028ce:	2210      	movs	r2, #16
 80028d0:	2100      	movs	r1, #0
 80028d2:	2078      	movs	r0, #120	; 0x78
 80028d4:	f000 fa80 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80028d8:	22b0      	movs	r2, #176	; 0xb0
 80028da:	2100      	movs	r1, #0
 80028dc:	2078      	movs	r0, #120	; 0x78
 80028de:	f000 fa7b 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80028e2:	22c8      	movs	r2, #200	; 0xc8
 80028e4:	2100      	movs	r1, #0
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f000 fa76 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	2078      	movs	r0, #120	; 0x78
 80028f2:	f000 fa71 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80028f6:	2210      	movs	r2, #16
 80028f8:	2100      	movs	r1, #0
 80028fa:	2078      	movs	r0, #120	; 0x78
 80028fc:	f000 fa6c 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	2100      	movs	r1, #0
 8002904:	2078      	movs	r0, #120	; 0x78
 8002906:	f000 fa67 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800290a:	2281      	movs	r2, #129	; 0x81
 800290c:	2100      	movs	r1, #0
 800290e:	2078      	movs	r0, #120	; 0x78
 8002910:	f000 fa62 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	2100      	movs	r1, #0
 8002918:	2078      	movs	r0, #120	; 0x78
 800291a:	f000 fa5d 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800291e:	22a1      	movs	r2, #161	; 0xa1
 8002920:	2100      	movs	r1, #0
 8002922:	2078      	movs	r0, #120	; 0x78
 8002924:	f000 fa58 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002928:	22a6      	movs	r2, #166	; 0xa6
 800292a:	2100      	movs	r1, #0
 800292c:	2078      	movs	r0, #120	; 0x78
 800292e:	f000 fa53 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002932:	22a8      	movs	r2, #168	; 0xa8
 8002934:	2100      	movs	r1, #0
 8002936:	2078      	movs	r0, #120	; 0x78
 8002938:	f000 fa4e 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	2100      	movs	r1, #0
 8002940:	2078      	movs	r0, #120	; 0x78
 8002942:	f000 fa49 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002946:	22a4      	movs	r2, #164	; 0xa4
 8002948:	2100      	movs	r1, #0
 800294a:	2078      	movs	r0, #120	; 0x78
 800294c:	f000 fa44 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002950:	22d3      	movs	r2, #211	; 0xd3
 8002952:	2100      	movs	r1, #0
 8002954:	2078      	movs	r0, #120	; 0x78
 8002956:	f000 fa3f 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	2078      	movs	r0, #120	; 0x78
 8002960:	f000 fa3a 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002964:	22d5      	movs	r2, #213	; 0xd5
 8002966:	2100      	movs	r1, #0
 8002968:	2078      	movs	r0, #120	; 0x78
 800296a:	f000 fa35 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800296e:	22f0      	movs	r2, #240	; 0xf0
 8002970:	2100      	movs	r1, #0
 8002972:	2078      	movs	r0, #120	; 0x78
 8002974:	f000 fa30 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002978:	22d9      	movs	r2, #217	; 0xd9
 800297a:	2100      	movs	r1, #0
 800297c:	2078      	movs	r0, #120	; 0x78
 800297e:	f000 fa2b 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002982:	2222      	movs	r2, #34	; 0x22
 8002984:	2100      	movs	r1, #0
 8002986:	2078      	movs	r0, #120	; 0x78
 8002988:	f000 fa26 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800298c:	22da      	movs	r2, #218	; 0xda
 800298e:	2100      	movs	r1, #0
 8002990:	2078      	movs	r0, #120	; 0x78
 8002992:	f000 fa21 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002996:	2212      	movs	r2, #18
 8002998:	2100      	movs	r1, #0
 800299a:	2078      	movs	r0, #120	; 0x78
 800299c:	f000 fa1c 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80029a0:	22db      	movs	r2, #219	; 0xdb
 80029a2:	2100      	movs	r1, #0
 80029a4:	2078      	movs	r0, #120	; 0x78
 80029a6:	f000 fa17 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80029aa:	2220      	movs	r2, #32
 80029ac:	2100      	movs	r1, #0
 80029ae:	2078      	movs	r0, #120	; 0x78
 80029b0:	f000 fa12 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80029b4:	228d      	movs	r2, #141	; 0x8d
 80029b6:	2100      	movs	r1, #0
 80029b8:	2078      	movs	r0, #120	; 0x78
 80029ba:	f000 fa0d 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80029be:	2214      	movs	r2, #20
 80029c0:	2100      	movs	r1, #0
 80029c2:	2078      	movs	r0, #120	; 0x78
 80029c4:	f000 fa08 	bl	8002dd8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80029c8:	22af      	movs	r2, #175	; 0xaf
 80029ca:	2100      	movs	r1, #0
 80029cc:	2078      	movs	r0, #120	; 0x78
 80029ce:	f000 fa03 	bl	8002dd8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80029d2:	222e      	movs	r2, #46	; 0x2e
 80029d4:	2100      	movs	r1, #0
 80029d6:	2078      	movs	r0, #120	; 0x78
 80029d8:	f000 f9fe 	bl	8002dd8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80029dc:	2000      	movs	r0, #0
 80029de:	f000 f843 	bl	8002a68 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80029e2:	f000 f813 	bl	8002a0c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <SSD1306_Init+0x184>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <SSD1306_Init+0x184>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SSD1306_Init+0x184>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80029f8:	2301      	movs	r3, #1
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200027f4 	.word	0x200027f4
 8002a08:	20002db8 	.word	0x20002db8

08002a0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	e01d      	b.n	8002a54 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	3b50      	subs	r3, #80	; 0x50
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2100      	movs	r1, #0
 8002a22:	2078      	movs	r0, #120	; 0x78
 8002a24:	f000 f9d8 	bl	8002dd8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2078      	movs	r0, #120	; 0x78
 8002a2e:	f000 f9d3 	bl	8002dd8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002a32:	2210      	movs	r2, #16
 8002a34:	2100      	movs	r1, #0
 8002a36:	2078      	movs	r0, #120	; 0x78
 8002a38:	f000 f9ce 	bl	8002dd8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <SSD1306_UpdateScreen+0x58>)
 8002a42:	441a      	add	r2, r3
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	2140      	movs	r1, #64	; 0x40
 8002a48:	2078      	movs	r0, #120	; 0x78
 8002a4a:	f000 f95f 	bl	8002d0c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++)
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	3301      	adds	r3, #1
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b07      	cmp	r3, #7
 8002a58:	d9de      	bls.n	8002a18 <SSD1306_UpdateScreen+0xc>
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200029b8 	.word	0x200029b8

08002a68 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <SSD1306_Fill+0x14>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e000      	b.n	8002a7e <SSD1306_Fill+0x16>
 8002a7c:	23ff      	movs	r3, #255	; 0xff
 8002a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a82:	4619      	mov	r1, r3
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <SSD1306_Fill+0x2c>)
 8002a86:	f016 fc23 	bl	80192d0 <memset>
			sizeof(SSD1306_Buffer));
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200029b8 	.word	0x200029b8

08002a98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	80bb      	strh	r3, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b7f      	cmp	r3, #127	; 0x7f
 8002aae:	d848      	bhi.n	8002b42 <SSD1306_DrawPixel+0xaa>
 8002ab0:	88bb      	ldrh	r3, [r7, #4]
 8002ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8002ab4:	d845      	bhi.n	8002b42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted)
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <SSD1306_DrawPixel+0xb8>)
 8002ab8:	791b      	ldrb	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <SSD1306_DrawPixel+0x34>
	{
		color = (SSD1306_COLOR_t) !color;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d11a      	bne.n	8002b08 <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	88bb      	ldrh	r3, [r7, #4]
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	b298      	uxth	r0, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	01db      	lsls	r3, r3, #7
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <SSD1306_DrawPixel+0xbc>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	b259      	sxtb	r1, r3
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	4603      	mov	r3, r0
 8002afc:	01db      	lsls	r3, r3, #7
 8002afe:	4413      	add	r3, r2
 8002b00:	b2c9      	uxtb	r1, r1
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <SSD1306_DrawPixel+0xbc>)
 8002b04:	54d1      	strb	r1, [r2, r3]
 8002b06:	e01d      	b.n	8002b44 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	88bb      	ldrh	r3, [r7, #4]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	b298      	uxth	r0, r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	01db      	lsls	r3, r3, #7
 8002b14:	4413      	add	r3, r2
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <SSD1306_DrawPixel+0xbc>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	b25a      	sxtb	r2, r3
 8002b1c:	88bb      	ldrh	r3, [r7, #4]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b259      	sxtb	r1, r3
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	4603      	mov	r3, r0
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4413      	add	r3, r2
 8002b3a:	b2c9      	uxtb	r1, r1
 8002b3c:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <SSD1306_DrawPixel+0xbc>)
 8002b3e:	54d1      	strb	r1, [r2, r3]
 8002b40:	e000      	b.n	8002b44 <SSD1306_DrawPixel+0xac>
		return;
 8002b42:	bf00      	nop
	}
}
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	20002db8 	.word	0x20002db8
 8002b54:	200029b8 	.word	0x200029b8

08002b58 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	80fb      	strh	r3, [r7, #6]
 8002b64:	4613      	mov	r3, r2
 8002b66:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <SSD1306_GotoXY+0x28>)
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <SSD1306_GotoXY+0x28>)
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	8053      	strh	r3, [r2, #2]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20002db8 	.word	0x20002db8

08002b84 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
	if (
 8002ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ba2:	dc07      	bgt.n	8002bb4 <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002ba6:	885b      	ldrh	r3, [r3, #2]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002bb0:	2b3f      	cmp	r3, #63	; 0x3f
 8002bb2:	dd01      	ble.n	8002bb8 <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e05e      	b.n	8002c76 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e04b      	b.n	8002c56 <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	3b20      	subs	r3, #32
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	7849      	ldrb	r1, [r1, #1]
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	440b      	add	r3, r1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e030      	b.n	8002c44 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b298      	uxth	r0, r3
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002c00:	885a      	ldrh	r2, [r3, #2]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	79ba      	ldrb	r2, [r7, #6]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7ff ff43 	bl	8002a98 <SSD1306_DrawPixel>
 8002c12:	e014      	b.n	8002c3e <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			}
			else
			{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b298      	uxth	r0, r3
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002c22:	885a      	ldrh	r2, [r3, #2]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	79bb      	ldrb	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f7ff ff2d 	bl	8002a98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3301      	adds	r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d3c8      	bcc.n	8002be2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d3ad      	bcc.n	8002bbe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <SSD1306_Putc+0xfc>)
 8002c72:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002c74:	79fb      	ldrb	r3, [r7, #7]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20002db8 	.word	0x20002db8

08002c84 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8002c92:	e012      	b.n	8002cba <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	79fa      	ldrb	r2, [r7, #7]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff71 	bl	8002b84 <SSD1306_Putc>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d002      	beq.n	8002cb4 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	e008      	b.n	8002cc6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e8      	bne.n	8002c94 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff fec8 	bl	8002a68 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002cd8:	f7ff fe98 	bl	8002a0c <SSD1306_UpdateScreen>
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <ssd1306_I2C_Init>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init()
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <ssd1306_I2C_Init+0x28>)
 8002ce8:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002cea:	e002      	b.n	8002cf2 <ssd1306_I2C_Init+0x12>
		p--;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <ssd1306_I2C_Init+0xc>
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	0003d090 	.word	0x0003d090

08002d0c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data,
		uint16_t count)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b0c7      	sub	sp, #284	; 0x11c
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d1a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002d1e:	600a      	str	r2, [r1, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d26:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d32:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002d36:	4602      	mov	r2, r0
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d42:	460a      	mov	r2, r1
 8002d44:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002d46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d52:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d60:	e015      	b.n	8002d8e <ssd1306_I2C_WriteMulti+0x82>
		dt[i + 1] = data[i];
 8002d62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d6a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	441a      	add	r2, r3
 8002d72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d76:	3301      	adds	r3, #1
 8002d78:	7811      	ldrb	r1, [r2, #0]
 8002d7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d7e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002d82:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 8002d84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d98:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002d9c:	8812      	ldrh	r2, [r2, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d8df      	bhi.n	8002d62 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 8002da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002da6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b299      	uxth	r1, r3
 8002dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f107 020c 	add.w	r2, r7, #12
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	9000      	str	r0, [sp, #0]
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <ssd1306_I2C_WriteMulti+0xc8>)
 8002dc6:	f002 fbf5 	bl	80055b4 <HAL_I2C_Master_Transmit>
}
 8002dca:	bf00      	nop
 8002dcc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	200027f4 	.word	0x200027f4

08002dd8 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	460b      	mov	r3, r1
 8002de4:	71bb      	strb	r3, [r7, #6]
 8002de6:	4613      	mov	r3, r2
 8002de8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002dee:	797b      	ldrb	r3, [r7, #5]
 8002df0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	b299      	uxth	r1, r3
 8002df6:	f107 020c 	add.w	r2, r7, #12
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <ssd1306_I2C_Write+0x38>)
 8002e02:	f002 fbd7 	bl	80055b4 <HAL_I2C_Master_Transmit>
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200027f4 	.word	0x200027f4

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_MspInit+0x54>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_MspInit+0x54>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_MspInit+0x54>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_MspInit+0x54>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_MspInit+0x54>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <HAL_MspInit+0x54>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	210f      	movs	r1, #15
 8002e56:	f06f 0001 	mvn.w	r0, #1
 8002e5a:	f001 fc83 	bl	8004764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_InitTick+0xe4>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a32      	ldr	r2, [pc, #200]	; (8002f50 <HAL_InitTick+0xe4>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_InitTick+0xe4>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e98:	f107 0210 	add.w	r2, r7, #16
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 fbb8 	bl	8007618 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002eb2:	f004 fb9d 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8002eb6:	6378      	str	r0, [r7, #52]	; 0x34
 8002eb8:	e004      	b.n	8002ec4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002eba:	f004 fb99 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_InitTick+0xe8>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_InitTick+0xec>)
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_InitTick+0xf0>)
 8002ed6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_InitTick+0xec>)
 8002eda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ede:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_InitTick+0xec>)
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_InitTick+0xec>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_InitTick+0xec>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_InitTick+0xec>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002ef8:	4817      	ldr	r0, [pc, #92]	; (8002f58 <HAL_InitTick+0xec>)
 8002efa:	f007 f833 	bl	8009f64 <HAL_TIM_Base_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11b      	bne.n	8002f44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002f0c:	4812      	ldr	r0, [pc, #72]	; (8002f58 <HAL_InitTick+0xec>)
 8002f0e:	f007 f909 	bl	800a124 <HAL_TIM_Base_Start_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f20:	201d      	movs	r0, #29
 8002f22:	f001 fc3b 	bl	800479c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d808      	bhi.n	8002f3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	201d      	movs	r0, #29
 8002f32:	f001 fc17 	bl	8004764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_InitTick+0xf4>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e002      	b.n	8002f44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3738      	adds	r7, #56	; 0x38
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	431bde83 	.word	0x431bde83
 8002f58:	20002dc0 	.word	0x20002dc0
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	2000000c 	.word	0x2000000c

08002f64 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <SDTimer_Handler+0x40>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <SDTimer_Handler+0x1c>
		Timer1--;
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <SDTimer_Handler+0x40>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <SDTimer_Handler+0x40>)
 8002f7e:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <SDTimer_Handler+0x44>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <SDTimer_Handler+0x34>
		Timer2--;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <SDTimer_Handler+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SDTimer_Handler+0x44>)
 8002f96:	701a      	strb	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20002e09 	.word	0x20002e09
 8002fa8:	20002e0a 	.word	0x20002e0a

08002fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <NMI_Handler+0x4>

08002fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <HardFault_Handler+0x4>

08002fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <MemManage_Handler+0x4>

08002fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc2:	e7fe      	b.n	8002fc2 <BusFault_Handler+0x4>

08002fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <UsageFault_Handler+0x4>

08002fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <TIM3_IRQHandler+0x30>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <TIM3_IRQHandler+0x30>)
 8002fe8:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <TIM3_IRQHandler+0x30>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d904      	bls.n	8002ffe <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <TIM3_IRQHandler+0x30>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002ffa:	f7ff ffb3 	bl	8002f64 <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ffe:	4803      	ldr	r0, [pc, #12]	; (800300c <TIM3_IRQHandler+0x34>)
 8003000:	f007 f959 	bl	800a2b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20002e08 	.word	0x20002e08
 800300c:	20002dc0 	.word	0x20002dc0

08003010 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <SDIO_IRQHandler+0x10>)
 8003016:	f006 f8fd 	bl	8009214 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20002874 	.word	0x20002874

08003024 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <DMA2_Stream2_IRQHandler+0x10>)
 800302a:	f001 fd5d 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000a6c 	.word	0x20000a6c

08003038 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <DMA2_Stream3_IRQHandler+0x10>)
 800303e:	f001 fd53 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200028f8 	.word	0x200028f8

0800304c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <OTG_FS_IRQHandler+0x10>)
 8003052:	f003 f83b 	bl	80060cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200074c4 	.word	0x200074c4

08003060 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <DMA2_Stream6_IRQHandler+0x10>)
 8003066:	f001 fd3f 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20002958 	.word	0x20002958

08003074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
	return 1;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800308e:	f016 f9e7 	bl	8019460 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2216      	movs	r2, #22
 8003096:	601a      	str	r2, [r3, #0]
	return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_exit>:

void _exit(int status)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ffe7 	bl	8003084 <_kill>
	while (1)
 80030b6:	e7fe      	b.n	80030b6 <_exit+0x12>

080030b8 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
	}

	return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e009      	b.n	8003118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f8ba 	bl	8002286 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf1      	blt.n	8003104 <_write+0x12>
	}
	return len;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_close>:

int _close(int file)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	605a      	str	r2, [r3, #4]
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_isatty>:

int _isatty(int file)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
	{
		errno = ENOMEM;
 80031c4:	f016 f94c 	bl	8019460 <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20020000 	.word	0x20020000
 80031f4:	00000800 	.word	0x00000800
 80031f8:	20002e0c 	.word	0x20002e0c
 80031fc:	20007d98 	.word	0x20007d98

08003200 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x20>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SystemInit+0x20>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	f107 0320 	add.w	r3, r7, #32
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	615a      	str	r2, [r3, #20]
 8003252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <MX_TIM2_Init+0xe0>)
 8003256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <MX_TIM2_Init+0xe0>)
 800325e:	f241 0267 	movw	r2, #4199	; 0x1067
 8003262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <MX_TIM2_Init+0xe0>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <MX_TIM2_Init+0xe0>)
 800326c:	2263      	movs	r2, #99	; 0x63
 800326e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <MX_TIM2_Init+0xe0>)
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <MX_TIM2_Init+0xe0>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800327c:	4821      	ldr	r0, [pc, #132]	; (8003304 <MX_TIM2_Init+0xe0>)
 800327e:	f006 fe71 	bl	8009f64 <HAL_TIM_Base_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003288:	f7ff f8a8 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003296:	4619      	mov	r1, r3
 8003298:	481a      	ldr	r0, [pc, #104]	; (8003304 <MX_TIM2_Init+0xe0>)
 800329a:	f007 f9d7 	bl	800a64c <HAL_TIM_ConfigClockSource>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80032a4:	f7ff f89a 	bl	80023dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032a8:	4816      	ldr	r0, [pc, #88]	; (8003304 <MX_TIM2_Init+0xe0>)
 80032aa:	f006 ffab 	bl	800a204 <HAL_TIM_PWM_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032b4:	f7ff f892 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032b8:	2320      	movs	r3, #32
 80032ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	4619      	mov	r1, r3
 80032c6:	480f      	ldr	r0, [pc, #60]	; (8003304 <MX_TIM2_Init+0xe0>)
 80032c8:	f007 fd9a 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032d2:	f7ff f883 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d6:	2360      	movs	r3, #96	; 0x60
 80032d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	; (8003304 <MX_TIM2_Init+0xe0>)
 80032ee:	f007 f8eb 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032f8:	f7ff f870 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032fc:	bf00      	nop
 80032fe:	3738      	adds	r7, #56	; 0x38
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20002e10 	.word	0x20002e10

08003308 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330e:	463b      	mov	r3, r7
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <MX_TIM6_Init+0x64>)
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <MX_TIM6_Init+0x68>)
 800331a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <MX_TIM6_Init+0x64>)
 800331e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003322:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <MX_TIM6_Init+0x64>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <MX_TIM6_Init+0x64>)
 800332c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003330:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <MX_TIM6_Init+0x64>)
 8003334:	2200      	movs	r2, #0
 8003336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <MX_TIM6_Init+0x64>)
 800333a:	f006 fe13 	bl	8009f64 <HAL_TIM_Base_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003344:	f7ff f84a 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003350:	463b      	mov	r3, r7
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	; (800336c <MX_TIM6_Init+0x64>)
 8003356:	f007 fd53 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003360:	f7ff f83c 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20002e58 	.word	0x20002e58
 8003370:	40001000 	.word	0x40001000

08003374 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b096      	sub	sp, #88	; 0x58
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	615a      	str	r2, [r3, #20]
 80033a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f015 ff8f 	bl	80192d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <MX_TIM8_Init+0x138>)
 80033b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 80033b8:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033ba:	f240 7207 	movw	r2, #1799	; 0x707
 80033be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033c8:	f240 120d 	movw	r2, #269	; 0x10d
 80033cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033d4:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80033e0:	4831      	ldr	r0, [pc, #196]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033e2:	f006 fdbf 	bl	8009f64 <HAL_TIM_Base_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80033ec:	f7fe fff6 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80033f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033fa:	4619      	mov	r1, r3
 80033fc:	482a      	ldr	r0, [pc, #168]	; (80034a8 <MX_TIM8_Init+0x134>)
 80033fe:	f007 f925 	bl	800a64c <HAL_TIM_ConfigClockSource>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003408:	f7fe ffe8 	bl	80023dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800340c:	4826      	ldr	r0, [pc, #152]	; (80034a8 <MX_TIM8_Init+0x134>)
 800340e:	f006 fef9 	bl	800a204 <HAL_TIM_PWM_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003418:	f7fe ffe0 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800341c:	2320      	movs	r3, #32
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003428:	4619      	mov	r1, r3
 800342a:	481f      	ldr	r0, [pc, #124]	; (80034a8 <MX_TIM8_Init+0x134>)
 800342c:	f007 fce8 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003436:	f7fe ffd1 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800343a:	2360      	movs	r3, #96	; 0x60
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	4812      	ldr	r0, [pc, #72]	; (80034a8 <MX_TIM8_Init+0x134>)
 8003460:	f007 f832 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800346a:	f7fe ffb7 	bl	80023dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003486:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_TIM8_Init+0x134>)
 8003492:	f007 fd31 	bl	800aef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 800349c:	f7fe ff9e 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80034a0:	bf00      	nop
 80034a2:	3758      	adds	r7, #88	; 0x58
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20002ea0 	.word	0x20002ea0
 80034ac:	40010400 	.word	0x40010400

080034b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80034de:	e026      	b.n	800352e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <HAL_TIM_Base_MspInit+0x90>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034f4:	f043 0310 	orr.w	r3, r3, #16
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
}
 8003506:	e012      	b.n	800352e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_TIM_Base_MspInit+0x94>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_TIM_Base_MspInit+0x8c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40001000 	.word	0x40001000
 8003544:	40010400 	.word	0x40010400

08003548 <startAdcDma>:
 */
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 800354c:	f011 f924 	bl	8014798 <osKernelSysTick>
 8003550:	4603      	mov	r3, r0
 8003552:	210a      	movs	r1, #10
 8003554:	4618      	mov	r0, r3
 8003556:	f011 fb35 	bl	8014bc4 <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 800355a:	22c0      	movs	r2, #192	; 0xc0
 800355c:	4905      	ldr	r1, [pc, #20]	; (8003574 <startAdcDma+0x2c>)
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <startAdcDma+0x30>)
 8003560:	f000 fc24 	bl	8003dac <HAL_ADC_Start_DMA>
	TRAVEL_SENSOR_BUFFER_SIZE);
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <startAdcDma+0x34>)
 8003566:	f006 fd4d 	bl	800a004 <HAL_TIM_Base_Start>
#endif
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <startAdcDma+0x38>)
 800356c:	f006 fd4a 	bl	800a004 <HAL_TIM_Base_Start>
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20002ef8 	.word	0x20002ef8
 8003578:	20000a24 	.word	0x20000a24
 800357c:	20002e58 	.word	0x20002e58
 8003580:	20002e10 	.word	0x20002e10

08003584 <stopAdcDma>:
void stopAdcDma(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <stopAdcDma+0x1c>)
 800358a:	f000 fd1f 	bl	8003fcc <HAL_ADC_Stop_DMA>
#ifdef CHECK_SAMPLE_TIME
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <stopAdcDma+0x20>)
 8003590:	f006 fda0 	bl	800a0d4 <HAL_TIM_Base_Stop>
#endif
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 8003594:	4804      	ldr	r0, [pc, #16]	; (80035a8 <stopAdcDma+0x24>)
 8003596:	f006 fd9d 	bl	800a0d4 <HAL_TIM_Base_Stop>
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000a24 	.word	0x20000a24
 80035a4:	20002e58 	.word	0x20002e58
 80035a8:	20002e10 	.word	0x20002e10

080035ac <travelPressureSensorCalibration>:
int travelPressureSensorCalibration(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
	int status;

		memset(&calibrationValues, 0, sizeof(calibration_t));
 80035b2:	2210      	movs	r2, #16
 80035b4:	2100      	movs	r1, #0
 80035b6:	4857      	ldr	r0, [pc, #348]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80035b8:	f015 fe8a 	bl	80192d0 <memset>
		normalizeTravelData(inBufPtr);
 80035bc:	4b56      	ldr	r3, [pc, #344]	; (8003718 <travelPressureSensorCalibration+0x16c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fa73 	bl	8003aac <normalizeTravelData>
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	e06d      	b.n	80036a8 <travelPressureSensorCalibration+0xfc>
				i += NUMBER_OF_SENSORS)
		{
			calibrationValues.rearTravelSensor += outBufPtr[i
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <travelPressureSensorCalibration+0x170>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b219      	sxth	r1, r3
 80035dc:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80035de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	b28b      	uxth	r3, r1
 80035e6:	4413      	add	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b21a      	sxth	r2, r3
 80035ec:	4b49      	ldr	r3, [pc, #292]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80035ee:	805a      	strh	r2, [r3, #2]
					+ REAR_TRAVEL_BUFFER_POSITION];
			calibrationValues.frontTravelSensor += outBufPtr[i
 80035f0:	4b4a      	ldr	r3, [pc, #296]	; (800371c <travelPressureSensorCalibration+0x170>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b219      	sxth	r1, r3
 80035fe:	4b45      	ldr	r3, [pc, #276]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003604:	b29a      	uxth	r2, r3
 8003606:	b28b      	uxth	r3, r1
 8003608:	4413      	add	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	b21a      	sxth	r2, r3
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003610:	801a      	strh	r2, [r3, #0]
					+ FRONT_TRAVEL_BUFFER_POSITION];
			calibrationValues.rearPressureSensor += outBufPtr[i
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <travelPressureSensorCalibration+0x170>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3303      	adds	r3, #3
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b219      	sxth	r1, r3
 8003622:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003624:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003628:	b29a      	uxth	r2, r3
 800362a:	b28b      	uxth	r3, r1
 800362c:	4413      	add	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	b21a      	sxth	r2, r3
 8003632:	4b38      	ldr	r3, [pc, #224]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003634:	80da      	strh	r2, [r3, #6]
					+ REAR_PRESSURE_BUFFER_POSITION];
			calibrationValues.frontPressureSensor += outBufPtr[i
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <travelPressureSensorCalibration+0x170>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3302      	adds	r3, #2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b219      	sxth	r1, r3
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003648:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800364c:	b29a      	uxth	r2, r3
 800364e:	b28b      	uxth	r3, r1
 8003650:	4413      	add	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	b21a      	sxth	r2, r3
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003658:	809a      	strh	r2, [r3, #4]
					+ FRONT_PRESSURE_BUFFER_POSITION];
			calibrationValues.leftBrakeSensor += outBufPtr[i
 800365a:	4b30      	ldr	r3, [pc, #192]	; (800371c <travelPressureSensorCalibration+0x170>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b219      	sxth	r1, r3
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <travelPressureSensorCalibration+0x168>)
 800366c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003670:	b29a      	uxth	r2, r3
 8003672:	b28b      	uxth	r3, r1
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	b21a      	sxth	r2, r3
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <travelPressureSensorCalibration+0x168>)
 800367c:	811a      	strh	r2, [r3, #8]
					+ LEFT_BRAKE_POSITION];
			calibrationValues.rightBrakeSensor += outBufPtr[i
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <travelPressureSensorCalibration+0x170>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3305      	adds	r3, #5
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b219      	sxth	r1, r3
 800368e:	4b21      	ldr	r3, [pc, #132]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003690:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003694:	b29a      	uxth	r2, r3
 8003696:	b28b      	uxth	r3, r1
 8003698:	4413      	add	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	b21a      	sxth	r2, r3
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036a0:	815a      	strh	r2, [r3, #10]
				i += NUMBER_OF_SENSORS)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3306      	adds	r3, #6
 80036a6:	607b      	str	r3, [r7, #4]
		for (int i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b5a      	cmp	r3, #90	; 0x5a
 80036ac:	d98e      	bls.n	80035cc <travelPressureSensorCalibration+0x20>
					+ RIGHT_BRAKE_POSITION];

		}
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036b4:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 80036b6:	b21a      	sxth	r2, r3
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036ba:	805a      	strh	r2, [r3, #2]
		calibrationValues.frontTravelSensor =
				calibrationValues.frontTravelSensor
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036be:	f9b3 3000 	ldrsh.w	r3, [r3]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036c2:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontTravelSensor =
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036c8:	801a      	strh	r2, [r3, #0]
		calibrationValues.rearPressureSensor =
				calibrationValues.rearPressureSensor
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036d0:	091b      	lsrs	r3, r3, #4
		calibrationValues.rearPressureSensor =
 80036d2:	b21a      	sxth	r2, r3
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036d6:	80da      	strh	r2, [r3, #6]
		calibrationValues.frontPressureSensor =
				calibrationValues.frontPressureSensor
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
						/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036de:	091b      	lsrs	r3, r3, #4
		calibrationValues.frontPressureSensor =
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036e4:	809a      	strh	r2, [r3, #4]
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036ec:	091b      	lsrs	r3, r3, #4
		calibrationValues.leftBrakeSensor = calibrationValues.leftBrakeSensor
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036f2:	811a      	strh	r2, [r3, #8]
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <travelPressureSensorCalibration+0x168>)
 80036f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
				/ (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 80036fa:	091b      	lsrs	r3, r3, #4
		calibrationValues.rightBrakeSensor = calibrationValues.rightBrakeSensor
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003700:	815a      	strh	r2, [r3, #10]

		status = writeCalibrationData(&calibrationValues);
 8003702:	4804      	ldr	r0, [pc, #16]	; (8003714 <travelPressureSensorCalibration+0x168>)
 8003704:	f7fd ff46 	bl	8001594 <writeCalibrationData>
 8003708:	6038      	str	r0, [r7, #0]


	return (status);
 800370a:	683b      	ldr	r3, [r7, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20002ee8 	.word	0x20002ee8
 8003718:	200031f8 	.word	0x200031f8
 800371c:	200031fc 	.word	0x200031fc

08003720 <processData>:

void processData(char *sensorsData)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	normalizeTravelData(inBufPtr);
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <processData+0x28>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f9bd 	bl	8003aac <normalizeTravelData>
	sendDataSD(sensorsData, outBufPtr);
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <processData+0x2c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fe27 	bl	800138c <sendDataSD>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200031f8 	.word	0x200031f8
 800374c:	200031fc 	.word	0x200031fc

08003750 <processDataSag>:

void processDataSag(int16_t *sagFrontRear, int16_t *pressureFrontRear)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	int numberOfElements = (TRAVEL_SENSOR_BUFFER_SIZE / HALF_BUFF_SINGLE_SENSOR);
 800375a:	2310      	movs	r3, #16
 800375c:	60bb      	str	r3, [r7, #8]
	int i;
	normalizeTravelData(inBufPtr);
 800375e:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <processDataSag+0x17c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f9a2 	bl	8003aac <normalizeTravelData>
	sagFrontRear[0] = 0;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = 0;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3302      	adds	r3, #2
 8003772:	2200      	movs	r2, #0
 8003774:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[0] = 0;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2200      	movs	r2, #0
 800377a:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[1] = 0;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	3302      	adds	r3, #2
 8003780:	2200      	movs	r2, #0
 8003782:	801a      	strh	r2, [r3, #0]
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e04d      	b.n	8003826 <processDataSag+0xd6>
	NUMBER_OF_SENSORS)
	{
		sagFrontRear[0] += outBufPtr[i + FRONT_TRAVEL_BUFFER_POSITION];
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <processDataSag+0x180>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b219      	sxth	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	b28b      	uxth	r3, r1
 80037a2:	4413      	add	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b21a      	sxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	801a      	strh	r2, [r3, #0]
		sagFrontRear[1] += outBufPtr[i + REAR_TRAVEL_BUFFER_POSITION];
 80037ac:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <processDataSag+0x180>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b219      	sxth	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3302      	adds	r3, #2
 80037c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	b28b      	uxth	r3, r1
 80037c8:	4413      	add	r3, r2
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3302      	adds	r3, #2
 80037d0:	b212      	sxth	r2, r2
 80037d2:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[0] += outBufPtr[i + FRONT_PRESSURE_BUFFER_POSITION];
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <processDataSag+0x180>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3302      	adds	r3, #2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b219      	sxth	r1, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	b28b      	uxth	r3, r1
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	801a      	strh	r2, [r3, #0]
		pressureFrontRear[1] += outBufPtr[i + REAR_PRESSURE_BUFFER_POSITION];
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <processDataSag+0x180>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3303      	adds	r3, #3
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b219      	sxth	r1, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	3302      	adds	r3, #2
 800380c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003810:	b29a      	uxth	r2, r3
 8003812:	b28b      	uxth	r3, r1
 8003814:	4413      	add	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	3302      	adds	r3, #2
 800381c:	b212      	sxth	r2, r2
 800381e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i <= TRAVEL_SENSOR_BUFFER_SIZE / 2 - NUMBER_OF_SENSORS; i +=
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3306      	adds	r3, #6
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b5a      	cmp	r3, #90	; 0x5a
 800382a:	d9ae      	bls.n	800378a <processDataSag+0x3a>

	}
	sagFrontRear[0] = sagFrontRear[0] / numberOfElements;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	fb92 f3f3 	sdiv	r3, r2, r3
 800383a:	b21a      	sxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = sagFrontRear[1] / numberOfElements;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3302      	adds	r3, #2
 8003844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3302      	adds	r3, #2
 8003854:	b212      	sxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[0] = pressureFrontRear[0] / numberOfElements;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	fb92 f3f3 	sdiv	r3, r2, r3
 8003866:	b21a      	sxth	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	801a      	strh	r2, [r3, #0]
	pressureFrontRear[1] = pressureFrontRear[1] / numberOfElements;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	3302      	adds	r3, #2
 8003870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	fb92 f2f3 	sdiv	r2, r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	3302      	adds	r3, #2
 8003880:	b212      	sxth	r2, r2
 8003882:	801a      	strh	r2, [r3, #0]

	sagFrontRear[0] = ((int16_t)CONVERT_TO_PERCENT * sagFrontRear[0]) / (calibrationValues.frontTravel);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388a:	461a      	mov	r2, r3
 800388c:	2364      	movs	r3, #100	; 0x64
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <processDataSag+0x184>)
 8003894:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003898:	fb93 f3f2 	sdiv	r3, r3, r2
 800389c:	b21a      	sxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	801a      	strh	r2, [r3, #0]
	sagFrontRear[1] = ((int16_t)CONVERT_TO_PERCENT * sagFrontRear[1]) / (calibrationValues.rearStroke);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3302      	adds	r3, #2
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	461a      	mov	r2, r3
 80038ac:	2364      	movs	r3, #100	; 0x64
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <processDataSag+0x184>)
 80038b4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80038b8:	fb93 f2f2 	sdiv	r2, r3, r2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3302      	adds	r3, #2
 80038c0:	b212      	sxth	r2, r2
 80038c2:	801a      	strh	r2, [r3, #0]
	UNUSED(0);
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200031f8 	.word	0x200031f8
 80038d0:	200031fc 	.word	0x200031fc
 80038d4:	20002ee8 	.word	0x20002ee8

080038d8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80038e4:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[0];
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80038ea:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f011 f841 	bl	8014978 <osSemaphoreRelease>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200031f8 	.word	0x200031f8
 8003904:	20002ef8 	.word	0x20002ef8
 8003908:	200031fc 	.word	0x200031fc
 800390c:	20003078 	.word	0x20003078
 8003910:	20002424 	.word	0x20002424

08003914 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_ADC_ConvCpltCallback+0x78>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003922:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_ADC_ConvCpltCallback+0x80>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	461a      	mov	r2, r3
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_ADC_ConvCpltCallback+0x78>)
 800392e:	601a      	str	r2, [r3, #0]
	sample_time = NUMBER_OF_SENSORS
			* ((time_end - previousTime)
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_ADC_ConvCpltCallback+0x78>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	1ad3      	subs	r3, r2, r3
					/ (2 * ((float) (TRAVEL_SENSOR_BUFFER_SIZE))));
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003942:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003998 <HAL_ADC_ConvCpltCallback+0x84>
 8003946:	eec7 7a26 	vdiv.f32	s15, s14, s13
			* ((time_end - previousTime)
 800394a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800394e:	ee67 7a87 	vmul.f32	s15, s15, s14
	sample_time = NUMBER_OF_SENSORS
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_ADC_ConvCpltCallback+0x88>)
 8003954:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_ADC_ConvCpltCallback+0x88>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fe23 	bl	80005a8 <__aeabi_f2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	480e      	ldr	r0, [pc, #56]	; (80039a0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003968:	f015 fb1e 	bl	8018fa8 <iprintf>
#endif

	inBufPtr = &adcDataWrite[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <HAL_ADC_ConvCpltCallback+0x90>)
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_ADC_ConvCpltCallback+0x94>)
 8003970:	601a      	str	r2, [r3, #0]
	outBufPtr = &adcDataRead[TRAVEL_SENSOR_BUFFER_SIZE / 2];
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_ADC_ConvCpltCallback+0x98>)
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003976:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(travelSensorSemHandle);
 8003978:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_ADC_ConvCpltCallback+0xa0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f010 fffb 	bl	8014978 <osSemaphoreRelease>

}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20003200 	.word	0x20003200
 8003990:	20003204 	.word	0x20003204
 8003994:	20002e58 	.word	0x20002e58
 8003998:	43c00000 	.word	0x43c00000
 800399c:	20003208 	.word	0x20003208
 80039a0:	0801d674 	.word	0x0801d674
 80039a4:	200031f8 	.word	0x200031f8
 80039a8:	20002fb8 	.word	0x20002fb8
 80039ac:	200031fc 	.word	0x200031fc
 80039b0:	20003138 	.word	0x20003138
 80039b4:	20002424 	.word	0x20002424

080039b8 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel /  (float)ADC_RESOLUTION);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80039fc <convertAdcToTravel+0x44>
 80039e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e8:	ee17 3a90 	vmov	r3, s15
 80039ec:	b21b      	sxth	r3, r3
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	45800000 	.word	0x45800000

08003a00 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]

	return ((2.5 * CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / (float)(ADC_RESOLUTION)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a24:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003a60 <convertAdcToPressure+0x60>
 8003a28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a2c:	ee16 0a90 	vmov	r0, s13
 8003a30:	f7fc fdba 	bl	80005a8 <__aeabi_f2d>
 8003a34:	a308      	add	r3, pc, #32	; (adr r3, 8003a58 <convertAdcToPressure+0x58>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f7fc fe0d 	bl	8000658 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	f7fd f8b7 	bl	8000bb8 <__aeabi_d2iz>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	b21b      	sxth	r3, r3
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	00000000 	.word	0x00000000
 8003a5c:	4076a800 	.word	0x4076a800
 8003a60:	45800000 	.word	0x45800000

08003a64 <convertAdcToBrakeForce>:

static int16_t convertAdcToBrakeForce(volatile int16_t *adcDataWrite,
		int16_t sensorBrakeMaxForce)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
	return (*adcDataWrite * sensorBrakeMaxForce /  (float)ADC_RESOLUTION);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a88:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003aa8 <convertAdcToBrakeForce+0x44>
 8003a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a94:	ee17 3a90 	vmov	r3, s15
 8003a98:	b21b      	sxth	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	45800000 	.word	0x45800000

08003aac <normalizeTravelData>:
static void normalizeTravelData(volatile int16_t *inBufPtr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e097      	b.n	8003bea <normalizeTravelData+0x13e>
			n += NUMBER_OF_SENSORS)
	{
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION],
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff76 	bl	80039b8 <convertAdcToTravel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003ad0:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <normalizeTravelData+0x150>)
 8003ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003adc:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <normalizeTravelData+0x154>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003ae6:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003ae8:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
				&inBufPtr[n + REAR_TRAVEL_BUFFER_POSITION], REAR_SENSOR_TRAVEL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	217d      	movs	r1, #125	; 0x7d
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff5e 	bl	80039b8 <convertAdcToTravel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	b29a      	uxth	r2, r3
				- calibrationValues.rearTravelSensor;
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <normalizeTravelData+0x150>)
 8003b02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <normalizeTravelData+0x154>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
				- calibrationValues.rearTravelSensor;
 8003b18:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_TRAVEL_BUFFER_POSITION] = convertAdcToTravel(
 8003b1a:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION],
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	005b      	lsls	r3, r3, #1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	2106      	movs	r1, #6
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff69 	bl	8003a00 <convertAdcToPressure>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003b32:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <normalizeTravelData+0x150>)
 8003b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	b299      	uxth	r1, r3
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b3e:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <normalizeTravelData+0x154>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3302      	adds	r3, #2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003b4a:	b20a      	sxth	r2, r1
		outBufPtr[n + FRONT_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b4c:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
				&inBufPtr[n + REAR_PRESSURE_BUFFER_POSITION],
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3303      	adds	r3, #3
 8003b52:	005b      	lsls	r3, r3, #1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	2106      	movs	r1, #6
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff50 	bl	8003a00 <convertAdcToPressure>
 8003b60:	4603      	mov	r3, r0
 8003b62:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <normalizeTravelData+0x150>)
 8003b66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	b299      	uxth	r1, r3
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <normalizeTravelData+0x154>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3303      	adds	r3, #3
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003b7c:	b20a      	sxth	r2, r1
		outBufPtr[n + REAR_PRESSURE_BUFFER_POSITION] = convertAdcToPressure(
 8003b7e:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + LEFT_BRAKE_POSITION],
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	005b      	lsls	r3, r3, #1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff69 	bl	8003a64 <convertAdcToBrakeForce>
 8003b92:	4603      	mov	r3, r0
 8003b94:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <normalizeTravelData+0x150>)
 8003b98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	b299      	uxth	r1, r3
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <normalizeTravelData+0x154>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.leftBrakeSensor;
 8003bae:	b20a      	sxth	r2, r1
		outBufPtr[n + LEFT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003bb0:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
				&inBufPtr[n + RIGHT_BRAKE_POSITION],
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3305      	adds	r3, #5
 8003bb6:	005b      	lsls	r3, r3, #1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	2164      	movs	r1, #100	; 0x64
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ff50 	bl	8003a64 <convertAdcToBrakeForce>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	b29a      	uxth	r2, r3
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <normalizeTravelData+0x150>)
 8003bca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	b299      	uxth	r1, r3
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <normalizeTravelData+0x154>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3305      	adds	r3, #5
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
				BRAKE_SENSOR_MAX_FORCE) - calibrationValues.rightBrakeSensor;
 8003be0:	b20a      	sxth	r2, r1
		outBufPtr[n + RIGHT_BRAKE_POSITION] = convertAdcToBrakeForce(
 8003be2:	801a      	strh	r2, [r3, #0]
			n += NUMBER_OF_SENSORS)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3306      	adds	r3, #6
 8003be8:	60fb      	str	r3, [r7, #12]
	for (int n = 0; n <= (TRAVEL_SENSOR_BUFFER_SIZE / 2) - NUMBER_OF_SENSORS;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b5a      	cmp	r3, #90	; 0x5a
 8003bee:	f67f af64 	bls.w	8003aba <normalizeTravelData+0xe>

	}
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20002ee8 	.word	0x20002ee8
 8003c00:	200031fc 	.word	0x200031fc

08003c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c0a:	490e      	ldr	r1, [pc, #56]	; (8003c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c10:	e002      	b.n	8003c18 <LoopCopyDataInit>

08003c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c16:	3304      	adds	r3, #4

08003c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c1c:	d3f9      	bcc.n	8003c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c20:	4c0b      	ldr	r4, [pc, #44]	; (8003c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c24:	e001      	b.n	8003c2a <LoopFillZerobss>

08003c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c28:	3204      	adds	r2, #4

08003c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c2c:	d3fb      	bcc.n	8003c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c2e:	f7ff fae7 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c32:	f015 fc1b 	bl	801946c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c36:	f7fe fb33 	bl	80022a0 <main>
  bx  lr    
 8003c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c44:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8003c48:	0801e3cc 	.word	0x0801e3cc
  ldr r2, =_sbss
 8003c4c:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8003c50:	20007d94 	.word	0x20007d94

08003c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c54:	e7fe      	b.n	8003c54 <ADC_IRQHandler>
	...

08003c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_Init+0x40>)
 8003c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_Init+0x40>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_Init+0x40>)
 8003c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_Init+0x40>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_Init+0x40>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c80:	2003      	movs	r0, #3
 8003c82:	f000 fd64 	bl	800474e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c86:	200f      	movs	r0, #15
 8003c88:	f7ff f8f0 	bl	8002e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c8c:	f7ff f8c2 	bl	8002e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_IncTick+0x20>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_IncTick+0x24>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HAL_IncTick+0x24>)
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000010 	.word	0x20000010
 8003cc0:	2000320c 	.word	0x2000320c

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_GetTick+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	2000320c 	.word	0x2000320c

08003cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce4:	f7ff ffee 	bl	8003cc4 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d005      	beq.n	8003d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_Delay+0x44>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d02:	bf00      	nop
 8003d04:	f7ff ffde 	bl	8003cc4 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d8f7      	bhi.n	8003d04 <HAL_Delay+0x28>
  {
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000010 	.word	0x20000010

08003d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e033      	b.n	8003da2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fd6c 	bl	8001820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d6a:	f023 0302 	bic.w	r3, r3, #2
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fabe 	bl	80042f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
 8003d92:	e001      	b.n	8003d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Start_DMA+0x1e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e0e9      	b.n	8003f9e <HAL_ADC_Start_DMA+0x1f2>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d018      	beq.n	8003e12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003df0:	4b6d      	ldr	r3, [pc, #436]	; (8003fa8 <HAL_ADC_Start_DMA+0x1fc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_ADC_Start_DMA+0x200>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0c9a      	lsrs	r2, r3, #18
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e04:	e002      	b.n	8003e0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f9      	bne.n	8003e06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e20:	d107      	bne.n	8003e32 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 80a1 	bne.w	8003f84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d106      	bne.n	8003e90 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f023 0206 	bic.w	r2, r3, #6
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e8e:	e002      	b.n	8003e96 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_ADC_Start_DMA+0x204>)
 8003ea0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	4a43      	ldr	r2, [pc, #268]	; (8003fb4 <HAL_ADC_Start_DMA+0x208>)
 8003ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	4a42      	ldr	r2, [pc, #264]	; (8003fb8 <HAL_ADC_Start_DMA+0x20c>)
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_ADC_Start_DMA+0x210>)
 8003eb8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ed2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	334c      	adds	r3, #76	; 0x4c
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f000 fd0e 	bl	8004914 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d12a      	bne.n	8003f5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	; (8003fc0 <HAL_ADC_Start_DMA+0x214>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d015      	beq.n	8003f3a <HAL_ADC_Start_DMA+0x18e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <HAL_ADC_Start_DMA+0x218>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_Start_DMA+0x178>
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_ADC_Start_DMA+0x204>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <HAL_ADC_Start_DMA+0x21c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d136      	bne.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_ADC_Start_DMA+0x204>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d130      	bne.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d129      	bne.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	e020      	b.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_ADC_Start_DMA+0x214>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d11b      	bne.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d114      	bne.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	e00b      	b.n	8003f9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	431bde83 	.word	0x431bde83
 8003fb0:	40012300 	.word	0x40012300
 8003fb4:	080044f1 	.word	0x080044f1
 8003fb8:	080045ab 	.word	0x080045ab
 8003fbc:	080045c7 	.word	0x080045c7
 8003fc0:	40012000 	.word	0x40012000
 8003fc4:	40012100 	.word	0x40012100
 8003fc8:	40012200 	.word	0x40012200

08003fcc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Stop_DMA+0x1a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e048      	b.n	8004078 <HAL_ADC_Stop_DMA+0xac>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d130      	bne.n	800406e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800401a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d10f      	bne.n	800404a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fcc8 	bl	80049c4 <HAL_DMA_Abort>
 8004034:	4603      	mov	r3, r0
 8004036:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004058:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e113      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x244>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b09      	cmp	r3, #9
 80040be:	d925      	bls.n	800410c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	3b1e      	subs	r3, #30
 80040d6:	2207      	movs	r2, #7
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43da      	mvns	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	400a      	ands	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4403      	add	r3, r0
 80040fe:	3b1e      	subs	r3, #30
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e022      	b.n	8004152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	2207      	movs	r2, #7
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	400a      	ands	r2, r1
 800412e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	4603      	mov	r3, r0
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4403      	add	r3, r0
 8004148:	409a      	lsls	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d824      	bhi.n	80041a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	3b05      	subs	r3, #5
 800416c:	221f      	movs	r2, #31
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	400a      	ands	r2, r1
 800417a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	4618      	mov	r0, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	3b05      	subs	r3, #5
 8004196:	fa00 f203 	lsl.w	r2, r0, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34
 80041a2:	e04c      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d824      	bhi.n	80041f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	3b23      	subs	r3, #35	; 0x23
 80041be:	221f      	movs	r2, #31
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43da      	mvns	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	400a      	ands	r2, r1
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	3b23      	subs	r3, #35	; 0x23
 80041e8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
 80041f4:	e023      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	3b41      	subs	r3, #65	; 0x41
 8004208:	221f      	movs	r2, #31
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	400a      	ands	r2, r1
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	3b41      	subs	r3, #65	; 0x41
 8004232:	fa00 f203 	lsl.w	r2, r0, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_ADC_ConfigChannel+0x250>)
 8004240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10f      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d10b      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d12b      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_ADC_ConfigChannel+0x258>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x1f4>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b11      	cmp	r3, #17
 8004286:	d122      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_ADC_ConfigChannel+0x258>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d111      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_ADC_ConfigChannel+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_ADC_ConfigChannel+0x260>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	0c9a      	lsrs	r2, r3, #18
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c0:	e002      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f9      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	40012000 	.word	0x40012000
 80042ec:	10000012 	.word	0x10000012
 80042f0:	20000008 	.word	0x20000008
 80042f4:	431bde83 	.word	0x431bde83

080042f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004300:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <ADC_Init+0x1f0>)
 8004302:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	4a58      	ldr	r2, [pc, #352]	; (80044ec <ADC_Init+0x1f4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800439e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e00f      	b.n	80043f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0202 	bic.w	r2, r2, #2
 8004404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	3b01      	subs	r3, #1
 8004450:	035a      	lsls	r2, r3, #13
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e007      	b.n	800446c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	3b01      	subs	r3, #1
 8004488:	051a      	lsls	r2, r3, #20
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ae:	025a      	lsls	r2, r3, #9
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	029a      	lsls	r2, r3, #10
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012300 	.word	0x40012300
 80044ec:	0f000001 	.word	0x0f000001

080044f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d13c      	bne.n	8004584 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d12b      	bne.n	800457c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004528:	2b00      	cmp	r3, #0
 800452a:	d127      	bne.n	800457c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004544:	2b00      	cmp	r3, #0
 8004546:	d119      	bne.n	800457c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0220 	bic.w	r2, r2, #32
 8004556:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff f9c9 	bl	8003914 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004582:	e00e      	b.n	80045a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7ff fd75 	bl	8004080 <HAL_ADC_ErrorCallback>
}
 8004596:	e004      	b.n	80045a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff f98d 	bl	80038d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff fd4a 	bl	8004080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <__NVIC_SetPriorityGrouping>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <__NVIC_SetPriorityGrouping+0x44>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800461c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <__NVIC_SetPriorityGrouping+0x44>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	60d3      	str	r3, [r2, #12]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <__NVIC_GetPriorityGrouping>:
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <__NVIC_GetPriorityGrouping+0x18>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 0307 	and.w	r3, r3, #7
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_EnableIRQ>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	2b00      	cmp	r3, #0
 8004668:	db0b      	blt.n	8004682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	4907      	ldr	r1, [pc, #28]	; (8004690 <__NVIC_EnableIRQ+0x38>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2001      	movs	r0, #1
 800467a:	fa00 f202 	lsl.w	r2, r0, r2
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e100 	.word	0xe000e100

08004694 <__NVIC_SetPriority>:
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	; (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	; (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	; 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ff4c 	bl	80045f4 <__NVIC_SetPriorityGrouping>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004776:	f7ff ff61 	bl	800463c <__NVIC_GetPriorityGrouping>
 800477a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f7ff ffb1 	bl	80046e8 <NVIC_EncodePriority>
 8004786:	4602      	mov	r2, r0
 8004788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff80 	bl	8004694 <__NVIC_SetPriority>
}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ff54 	bl	8004658 <__NVIC_EnableIRQ>
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7ff fa7e 	bl	8003cc4 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e099      	b.n	8004908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f4:	e00f      	b.n	8004816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f6:	f7ff fa65 	bl	8003cc4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b05      	cmp	r3, #5
 8004802:	d908      	bls.n	8004816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2203      	movs	r2, #3
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e078      	b.n	8004908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e8      	bne.n	80047f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_DMA_Init+0x158>)
 8004830:	4013      	ands	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4313      	orrs	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d117      	bne.n	80048da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb0d 	bl	8004edc <DMA_CheckFifoParam>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048d6:	2301      	movs	r3, #1
 80048d8:	e016      	b.n	8004908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fac4 	bl	8004e70 <DMA_CalcBaseAndBitshift>
 80048e8:	4603      	mov	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	223f      	movs	r2, #63	; 0x3f
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	f010803f 	.word	0xf010803f

08004914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_DMA_Start_IT+0x26>
 8004936:	2302      	movs	r3, #2
 8004938:	e040      	b.n	80049bc <HAL_DMA_Start_IT+0xa8>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12f      	bne.n	80049ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa56 	bl	8004e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	223f      	movs	r2, #63	; 0x3f
 800496e:	409a      	lsls	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0216 	orr.w	r2, r2, #22
 8004982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e005      	b.n	80049ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7ff f977 	bl	8003cc4 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d008      	beq.n	80049f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2280      	movs	r2, #128	; 0x80
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e052      	b.n	8004a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0216 	bic.w	r2, r2, #22
 8004a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_DMA_Abort+0x62>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0208 	bic.w	r2, r2, #8
 8004a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a46:	e013      	b.n	8004a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a48:	f7ff f93c 	bl	8003cc4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d90c      	bls.n	8004a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e015      	b.n	8004a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e4      	bne.n	8004a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	223f      	movs	r2, #63	; 0x3f
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00c      	b.n	8004adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004af4:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <HAL_DMA_IRQHandler+0x248>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a8e      	ldr	r2, [pc, #568]	; (8004d34 <HAL_DMA_IRQHandler+0x24c>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2208      	movs	r2, #8
 8004b14:	409a      	lsls	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01a      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	2208      	movs	r2, #8
 8004b42:	409a      	lsls	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0201 	orr.w	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d012      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	2201      	movs	r2, #1
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2204      	movs	r2, #4
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d012      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2204      	movs	r2, #4
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d043      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d03c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	2210      	movs	r2, #16
 8004be4:	409a      	lsls	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d024      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
 8004c16:	e01f      	b.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01b      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e016      	b.n	8004c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0208 	bic.w	r2, r2, #8
 8004c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 808f 	beq.w	8004d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8087 	beq.w	8004d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2220      	movs	r2, #32
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d136      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0216 	bic.w	r2, r2, #22
 8004ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x1da>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0208 	bic.w	r2, r2, #8
 8004cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	223f      	movs	r2, #63	; 0x3f
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d07e      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	4798      	blx	r3
        }
        return;
 8004cfe:	e079      	b.n	8004df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01d      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d031      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
 8004d2c:	e02c      	b.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
 8004d2e:	bf00      	nop
 8004d30:	20000008 	.word	0x20000008
 8004d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d023      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
 8004d48:	e01e      	b.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0210 	bic.w	r2, r2, #16
 8004d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d032      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d307      	bcc.n	8004dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f2      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x2cc>
 8004dce:	e000      	b.n	8004dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	e000      	b.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004df4:	bf00      	nop
    }
  }
}
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d108      	bne.n	8004e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e52:	e007      	b.n	8004e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	3b10      	subs	r3, #16
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d909      	bls.n	8004eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	659a      	str	r2, [r3, #88]	; 0x58
 8004eb0:	e007      	b.n	8004ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	aaaaaaab 	.word	0xaaaaaaab
 8004ed8:	0801deb8 	.word	0x0801deb8

08004edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d11f      	bne.n	8004f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d856      	bhi.n	8004faa <DMA_CheckFifoParam+0xce>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <DMA_CheckFifoParam+0x28>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f27 	.word	0x08004f27
 8004f0c:	08004f15 	.word	0x08004f15
 8004f10:	08004fab 	.word	0x08004fab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d046      	beq.n	8004fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f24:	e043      	b.n	8004fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f2e:	d140      	bne.n	8004fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f34:	e03d      	b.n	8004fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	d121      	bne.n	8004f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d837      	bhi.n	8004fb6 <DMA_CheckFifoParam+0xda>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <DMA_CheckFifoParam+0x70>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f63 	.word	0x08004f63
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004f75 	.word	0x08004f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e030      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d025      	beq.n	8004fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f72:	e022      	b.n	8004fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f7c:	d11f      	bne.n	8004fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f82:	e01c      	b.n	8004fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d903      	bls.n	8004f92 <DMA_CheckFifoParam+0xb6>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d003      	beq.n	8004f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f90:	e018      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      break;
 8004f96:	e015      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e00b      	b.n	8004fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004faa:	bf00      	nop
 8004fac:	e00a      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e008      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e006      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e004      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e002      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop

08004fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e165      	b.n	80052bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	429a      	cmp	r2, r3
 800500a:	f040 8154 	bne.w	80052b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d005      	beq.n	8005026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005022:	2b02      	cmp	r3, #2
 8005024:	d130      	bne.n	8005088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	2203      	movs	r2, #3
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800505c:	2201      	movs	r2, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 0201 	and.w	r2, r3, #1
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d017      	beq.n	80050c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2203      	movs	r2, #3
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	43db      	mvns	r3, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4013      	ands	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d123      	bne.n	8005118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	08da      	lsrs	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3208      	adds	r2, #8
 80050d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	220f      	movs	r2, #15
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 0203 	and.w	r2, r3, #3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80ae 	beq.w	80052b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_GPIO_Init+0x300>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	4a5c      	ldr	r2, [pc, #368]	; (80052d4 <HAL_GPIO_Init+0x300>)
 8005164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005168:	6453      	str	r3, [r2, #68]	; 0x44
 800516a:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_GPIO_Init+0x300>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005176:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <HAL_GPIO_Init+0x304>)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	3302      	adds	r3, #2
 800517e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	220f      	movs	r2, #15
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4f      	ldr	r2, [pc, #316]	; (80052dc <HAL_GPIO_Init+0x308>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d025      	beq.n	80051ee <HAL_GPIO_Init+0x21a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4e      	ldr	r2, [pc, #312]	; (80052e0 <HAL_GPIO_Init+0x30c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <HAL_GPIO_Init+0x216>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4d      	ldr	r2, [pc, #308]	; (80052e4 <HAL_GPIO_Init+0x310>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d019      	beq.n	80051e6 <HAL_GPIO_Init+0x212>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <HAL_GPIO_Init+0x314>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_GPIO_Init+0x20e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4b      	ldr	r2, [pc, #300]	; (80052ec <HAL_GPIO_Init+0x318>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00d      	beq.n	80051de <HAL_GPIO_Init+0x20a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a4a      	ldr	r2, [pc, #296]	; (80052f0 <HAL_GPIO_Init+0x31c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d007      	beq.n	80051da <HAL_GPIO_Init+0x206>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a49      	ldr	r2, [pc, #292]	; (80052f4 <HAL_GPIO_Init+0x320>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_GPIO_Init+0x202>
 80051d2:	2306      	movs	r3, #6
 80051d4:	e00c      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051d6:	2307      	movs	r3, #7
 80051d8:	e00a      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051da:	2305      	movs	r3, #5
 80051dc:	e008      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051de:	2304      	movs	r3, #4
 80051e0:	e006      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051e2:	2303      	movs	r3, #3
 80051e4:	e004      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e002      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <HAL_GPIO_Init+0x21c>
 80051ee:	2300      	movs	r3, #0
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	f002 0203 	and.w	r2, r2, #3
 80051f6:	0092      	lsls	r2, r2, #2
 80051f8:	4093      	lsls	r3, r2
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005200:	4935      	ldr	r1, [pc, #212]	; (80052d8 <HAL_GPIO_Init+0x304>)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	3302      	adds	r3, #2
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800520e:	4b3a      	ldr	r3, [pc, #232]	; (80052f8 <HAL_GPIO_Init+0x324>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005232:	4a31      	ldr	r2, [pc, #196]	; (80052f8 <HAL_GPIO_Init+0x324>)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_GPIO_Init+0x324>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800525c:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <HAL_GPIO_Init+0x324>)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005262:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <HAL_GPIO_Init+0x324>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <HAL_GPIO_Init+0x324>)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <HAL_GPIO_Init+0x324>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <HAL_GPIO_Init+0x324>)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	f67f ae96 	bls.w	8004ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40013800 	.word	0x40013800
 80052dc:	40020000 	.word	0x40020000
 80052e0:	40020400 	.word	0x40020400
 80052e4:	40020800 	.word	0x40020800
 80052e8:	40020c00 	.word	0x40020c00
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40021400 	.word	0x40021400
 80052f4:	40021800 	.word	0x40021800
 80052f8:	40013c00 	.word	0x40013c00

080052fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e001      	b.n	800531e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e12b      	b.n	8005596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fd80 	bl	8001e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800538e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005390:	f002 f92e 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8005394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4a81      	ldr	r2, [pc, #516]	; (80055a0 <HAL_I2C_Init+0x274>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d807      	bhi.n	80053b0 <HAL_I2C_Init+0x84>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a80      	ldr	r2, [pc, #512]	; (80055a4 <HAL_I2C_Init+0x278>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bf94      	ite	ls
 80053a8:	2301      	movls	r3, #1
 80053aa:	2300      	movhi	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e006      	b.n	80053be <HAL_I2C_Init+0x92>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a7d      	ldr	r2, [pc, #500]	; (80055a8 <HAL_I2C_Init+0x27c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bf94      	ite	ls
 80053b8:	2301      	movls	r3, #1
 80053ba:	2300      	movhi	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0e7      	b.n	8005596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a78      	ldr	r2, [pc, #480]	; (80055ac <HAL_I2C_Init+0x280>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	0c9b      	lsrs	r3, r3, #18
 80053d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a6a      	ldr	r2, [pc, #424]	; (80055a0 <HAL_I2C_Init+0x274>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d802      	bhi.n	8005400 <HAL_I2C_Init+0xd4>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3301      	adds	r3, #1
 80053fe:	e009      	b.n	8005414 <HAL_I2C_Init+0xe8>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	4a69      	ldr	r2, [pc, #420]	; (80055b0 <HAL_I2C_Init+0x284>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	3301      	adds	r3, #1
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	430b      	orrs	r3, r1
 800541a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	495c      	ldr	r1, [pc, #368]	; (80055a0 <HAL_I2C_Init+0x274>)
 8005430:	428b      	cmp	r3, r1
 8005432:	d819      	bhi.n	8005468 <HAL_I2C_Init+0x13c>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1e59      	subs	r1, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005448:	400b      	ands	r3, r1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_I2C_Init+0x138>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1e59      	subs	r1, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	fbb1 f3f3 	udiv	r3, r1, r3
 800545c:	3301      	adds	r3, #1
 800545e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005462:	e051      	b.n	8005508 <HAL_I2C_Init+0x1dc>
 8005464:	2304      	movs	r3, #4
 8005466:	e04f      	b.n	8005508 <HAL_I2C_Init+0x1dc>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d111      	bne.n	8005494 <HAL_I2C_Init+0x168>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1e58      	subs	r0, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6859      	ldr	r1, [r3, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	440b      	add	r3, r1
 800547e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005482:	3301      	adds	r3, #1
 8005484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e012      	b.n	80054ba <HAL_I2C_Init+0x18e>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1e58      	subs	r0, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	0099      	lsls	r1, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054aa:	3301      	adds	r3, #1
 80054ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_I2C_Init+0x196>
 80054be:	2301      	movs	r3, #1
 80054c0:	e022      	b.n	8005508 <HAL_I2C_Init+0x1dc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10e      	bne.n	80054e8 <HAL_I2C_Init+0x1bc>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1e58      	subs	r0, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	440b      	add	r3, r1
 80054d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	e00f      	b.n	8005508 <HAL_I2C_Init+0x1dc>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1e58      	subs	r0, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	0099      	lsls	r1, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	6809      	ldr	r1, [r1, #0]
 800550c:	4313      	orrs	r3, r2
 800550e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6911      	ldr	r1, [r2, #16]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68d2      	ldr	r2, [r2, #12]
 8005542:	4311      	orrs	r1, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	430b      	orrs	r3, r1
 800554a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	000186a0 	.word	0x000186a0
 80055a4:	001e847f 	.word	0x001e847f
 80055a8:	003d08ff 	.word	0x003d08ff
 80055ac:	431bde83 	.word	0x431bde83
 80055b0:	10624dd3 	.word	0x10624dd3

080055b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	460b      	mov	r3, r1
 80055c2:	817b      	strh	r3, [r7, #10]
 80055c4:	4613      	mov	r3, r2
 80055c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7fe fb7c 	bl	8003cc4 <HAL_GetTick>
 80055cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	f040 80e0 	bne.w	800579c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	2319      	movs	r3, #25
 80055e2:	2201      	movs	r2, #1
 80055e4:	4970      	ldr	r1, [pc, #448]	; (80057a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa92 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
 80055f4:	e0d3      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_I2C_Master_Transmit+0x50>
 8005600:	2302      	movs	r3, #2
 8005602:	e0cc      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d007      	beq.n	800562a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2221      	movs	r2, #33	; 0x21
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2210      	movs	r2, #16
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	893a      	ldrh	r2, [r7, #8]
 800565a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a50      	ldr	r2, [pc, #320]	; (80057ac <HAL_I2C_Master_Transmit+0x1f8>)
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800566c:	8979      	ldrh	r1, [r7, #10]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f9ca 	bl	8005a0c <I2C_MasterRequestWrite>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e08d      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005682:	2300      	movs	r3, #0
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005698:	e066      	b.n	8005768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	6a39      	ldr	r1, [r7, #32]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fb0c 	bl	8005cbc <I2C_WaitOnTXEFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d107      	bne.n	80056c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e06b      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	781a      	ldrb	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d11b      	bne.n	800573c <HAL_I2C_Master_Transmit+0x188>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	d017      	beq.n	800573c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	781a      	ldrb	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	6a39      	ldr	r1, [r7, #32]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fafc 	bl	8005d3e <I2C_WaitOnBTFFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	2b04      	cmp	r3, #4
 8005752:	d107      	bne.n	8005764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e01a      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d194      	bne.n	800569a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	00100002 	.word	0x00100002
 80057ac:	ffff0000 	.word	0xffff0000

080057b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	460b      	mov	r3, r1
 80057be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80057c0:	f7fe fa80 	bl	8003cc4 <HAL_GetTick>
 80057c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	f040 8111 	bne.w	80059fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2319      	movs	r3, #25
 80057de:	2201      	movs	r2, #1
 80057e0:	4988      	ldr	r1, [pc, #544]	; (8005a04 <HAL_I2C_IsDeviceReady+0x254>)
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f994 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
 80057f0:	e104      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_I2C_IsDeviceReady+0x50>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0fd      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d007      	beq.n	8005826 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2224      	movs	r2, #36	; 0x24
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <HAL_I2C_IsDeviceReady+0x258>)
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005858:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2200      	movs	r2, #0
 8005862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f952 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005880:	d103      	bne.n	800588a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0b6      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800589c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800589e:	f7fe fa11 	bl	8003cc4 <HAL_GetTick>
 80058a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	bf0c      	ite	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	2300      	movne	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058d2:	e025      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058d4:	f7fe f9f6 	bl	8003cc4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d302      	bcc.n	80058ea <HAL_I2C_IsDeviceReady+0x13a>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	22a0      	movs	r2, #160	; 0xa0
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2ba0      	cmp	r3, #160	; 0xa0
 800592a:	d005      	beq.n	8005938 <HAL_I2C_IsDeviceReady+0x188>
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_I2C_IsDeviceReady+0x188>
 8005932:	7dbb      	ldrb	r3, [r7, #22]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0cd      	beq.n	80058d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b02      	cmp	r3, #2
 800594c:	d129      	bne.n	80059a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595e:	2300      	movs	r3, #0
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2319      	movs	r3, #25
 800597a:	2201      	movs	r2, #1
 800597c:	4921      	ldr	r1, [pc, #132]	; (8005a04 <HAL_I2C_IsDeviceReady+0x254>)
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f8c6 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e036      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	e02c      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2319      	movs	r3, #25
 80059c2:	2201      	movs	r2, #1
 80059c4:	490f      	ldr	r1, [pc, #60]	; (8005a04 <HAL_I2C_IsDeviceReady+0x254>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f8a2 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e012      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	3301      	adds	r3, #1
 80059da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	f4ff af32 	bcc.w	800584a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	00100002 	.word	0x00100002
 8005a08:	ffff0000 	.word	0xffff0000

08005a0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d006      	beq.n	8005a36 <I2C_MasterRequestWrite+0x2a>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d003      	beq.n	8005a36 <I2C_MasterRequestWrite+0x2a>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a34:	d108      	bne.n	8005a48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e00b      	b.n	8005a60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	2b12      	cmp	r3, #18
 8005a4e:	d107      	bne.n	8005a60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f84f 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a86:	d103      	bne.n	8005a90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e035      	b.n	8005b00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a9c:	d108      	bne.n	8005ab0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	e01b      	b.n	8005ae8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ab0:	897b      	ldrh	r3, [r7, #10]
 8005ab2:	11db      	asrs	r3, r3, #7
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f063 030f 	orn	r3, r3, #15
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	490e      	ldr	r1, [pc, #56]	; (8005b08 <I2C_MasterRequestWrite+0xfc>)
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f875 	bl	8005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e010      	b.n	8005b00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4907      	ldr	r1, [pc, #28]	; (8005b0c <I2C_MasterRequestWrite+0x100>)
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f865 	bl	8005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	00010008 	.word	0x00010008
 8005b0c:	00010002 	.word	0x00010002

08005b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b20:	e025      	b.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d021      	beq.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fe f8cb 	bl	8003cc4 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d116      	bne.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f043 0220 	orr.w	r2, r3, #32
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e023      	b.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10d      	bne.n	8005b94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4013      	ands	r3, r2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	e00c      	b.n	8005bae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	43da      	mvns	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d0b6      	beq.n	8005b22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bcc:	e051      	b.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bdc:	d123      	bne.n	8005c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f043 0204 	orr.w	r2, r3, #4
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e046      	b.n	8005cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d021      	beq.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2e:	f7fe f849 	bl	8003cc4 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d302      	bcc.n	8005c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d116      	bne.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e020      	b.n	8005cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d10c      	bne.n	8005c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	43da      	mvns	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e00b      	b.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf14      	ite	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	2300      	moveq	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d18d      	bne.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cc8:	e02d      	b.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f878 	bl	8005dc0 <I2C_IsAcknowledgeFailed>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e02d      	b.n	8005d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d021      	beq.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fd ffef 	bl	8003cc4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d116      	bne.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f043 0220 	orr.w	r2, r3, #32
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e007      	b.n	8005d36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d1ca      	bne.n	8005cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d4a:	e02d      	b.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f837 	bl	8005dc0 <I2C_IsAcknowledgeFailed>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e02d      	b.n	8005db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d021      	beq.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d64:	f7fd ffae 	bl	8003cc4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d302      	bcc.n	8005d7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d116      	bne.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e007      	b.n	8005db8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d1ca      	bne.n	8005d4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	d11b      	bne.n	8005e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	f043 0204 	orr.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e20:	b08f      	sub	sp, #60	; 0x3c
 8005e22:	af0a      	add	r7, sp, #40	; 0x28
 8005e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e116      	b.n	800605e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f011 fd14 	bl	8017878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f005 feef 	bl	800bc52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	687e      	ldr	r6, [r7, #4]
 8005e7c:	466d      	mov	r5, sp
 8005e7e:	f106 0410 	add.w	r4, r6, #16
 8005e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e92:	1d33      	adds	r3, r6, #4
 8005e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e96:	6838      	ldr	r0, [r7, #0]
 8005e98:	f005 fdc6 	bl	800ba28 <USB_CoreInit>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e0d7      	b.n	800605e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f005 fedd 	bl	800bc74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e04a      	b.n	8005f56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	333d      	adds	r3, #61	; 0x3d
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	333c      	adds	r3, #60	; 0x3c
 8005ee4:	7bfa      	ldrb	r2, [r7, #15]
 8005ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	b298      	uxth	r0, r3
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3344      	adds	r3, #68	; 0x44
 8005efc:	4602      	mov	r2, r0
 8005efe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3340      	adds	r3, #64	; 0x40
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3348      	adds	r3, #72	; 0x48
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	334c      	adds	r3, #76	; 0x4c
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f3c:	7bfa      	ldrb	r2, [r7, #15]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	3354      	adds	r3, #84	; 0x54
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	3301      	adds	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3af      	bcc.n	8005ec0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e044      	b.n	8005ff0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f7c:	7bfa      	ldrb	r2, [r7, #15]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fbe:	7bfa      	ldrb	r2, [r7, #15]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	3301      	adds	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3b5      	bcc.n	8005f66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	687e      	ldr	r6, [r7, #4]
 8006002:	466d      	mov	r5, sp
 8006004:	f106 0410 	add.w	r4, r6, #16
 8006008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800600a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800600c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800600e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006014:	e885 0003 	stmia.w	r5, {r0, r1}
 8006018:	1d33      	adds	r3, r6, #4
 800601a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f005 fe75 	bl	800bd0c <USB_DevInit>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e014      	b.n	800605e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b01      	cmp	r3, #1
 800604a:	d102      	bne.n	8006052 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f9b9 	bl	80073c4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f006 ffb7 	bl	800cfca <USB_DevDisconnect>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006066 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_PCD_Start+0x1c>
 800607e:	2302      	movs	r3, #2
 8006080:	e020      	b.n	80060c4 <HAL_PCD_Start+0x5e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	2b01      	cmp	r3, #1
 8006090:	d109      	bne.n	80060a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006096:	2b01      	cmp	r3, #1
 8006098:	d005      	beq.n	80060a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f005 fdc0 	bl	800bc30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f006 ff67 	bl	800cf88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b08d      	sub	sp, #52	; 0x34
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f007 f825 	bl	800d132 <USB_GetMode>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 84b7 	bne.w	8006a5e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f006 ff89 	bl	800d00c <USB_ReadInterrupts>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 84ad 	beq.w	8006a5c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f006 ff76 	bl	800d00c <USB_ReadInterrupts>
 8006120:	4603      	mov	r3, r0
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d107      	bne.n	800613a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f002 0202 	and.w	r2, r2, #2
 8006138:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f006 ff64 	bl	800d00c <USB_ReadInterrupts>
 8006144:	4603      	mov	r3, r0
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d161      	bne.n	8006212 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0210 	bic.w	r2, r2, #16
 800615c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	3304      	adds	r3, #4
 800617c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	0c5b      	lsrs	r3, r3, #17
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	2b02      	cmp	r3, #2
 8006188:	d124      	bne.n	80061d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d035      	beq.n	8006202 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80061a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	6a38      	ldr	r0, [r7, #32]
 80061aa:	f006 fd9b 	bl	800cce4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ba:	441a      	add	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	091b      	lsrs	r3, r3, #4
 80061c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061cc:	441a      	add	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	e016      	b.n	8006202 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	0c5b      	lsrs	r3, r3, #17
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d110      	bne.n	8006202 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061e6:	2208      	movs	r2, #8
 80061e8:	4619      	mov	r1, r3
 80061ea:	6a38      	ldr	r0, [r7, #32]
 80061ec:	f006 fd7a 	bl	800cce4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fc:	441a      	add	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0210 	orr.w	r2, r2, #16
 8006210:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f006 fef8 	bl	800d00c <USB_ReadInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006222:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006226:	f040 80a7 	bne.w	8006378 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f006 fefd 	bl	800d032 <USB_ReadDevAllOutEpInterrupt>
 8006238:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800623a:	e099      	b.n	8006370 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 808e 	beq.w	8006364 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f006 ff21 	bl	800d09a <USB_ReadDevOutEPInterrupt>
 8006258:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	461a      	mov	r2, r3
 8006272:	2301      	movs	r3, #1
 8006274:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 ff1d 	bl	80070b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00c      	beq.n	80062a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	2308      	movs	r3, #8
 8006298:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800629a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fff3 	bl	8007288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	461a      	mov	r2, r3
 80062ba:	2310      	movs	r3, #16
 80062bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d030      	beq.n	800632a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d109      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	3304      	adds	r3, #4
 80062fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	78db      	ldrb	r3, [r3, #3]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d108      	bne.n	8006318 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	b2db      	uxtb	r3, r3
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f011 fbcc 	bl	8017ab0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	461a      	mov	r2, r3
 8006326:	2302      	movs	r3, #2
 8006328:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	461a      	mov	r2, r3
 8006342:	2320      	movs	r3, #32
 8006344:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	461a      	mov	r2, r3
 800635e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006362:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	3301      	adds	r3, #1
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f af62 	bne.w	800623c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f006 fe45 	bl	800d00c <USB_ReadInterrupts>
 8006382:	4603      	mov	r3, r0
 8006384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006388:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800638c:	f040 80db 	bne.w	8006546 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f006 fe66 	bl	800d066 <USB_ReadDevAllInEpInterrupt>
 800639a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063a0:	e0cd      	b.n	800653e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80c2 	beq.w	8006532 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f006 fe8c 	bl	800d0d6 <USB_ReadDevInEPInterrupt>
 80063be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d057      	beq.n	800647a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2201      	movs	r2, #1
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ea:	4013      	ands	r3, r2
 80063ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fa:	461a      	mov	r2, r3
 80063fc:	2301      	movs	r3, #1
 80063fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d132      	bne.n	800646e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	334c      	adds	r3, #76	; 0x4c
 8006418:	6819      	ldr	r1, [r3, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4403      	add	r3, r0
 8006428:	3348      	adds	r3, #72	; 0x48
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4419      	add	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4403      	add	r3, r0
 800643c:	334c      	adds	r3, #76	; 0x4c
 800643e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <HAL_PCD_IRQHandler+0x3a2>
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	4613      	mov	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3354      	adds	r3, #84	; 0x54
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006466:	461a      	mov	r2, r3
 8006468:	2101      	movs	r1, #1
 800646a:	f006 fe93 	bl	800d194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f011 fa96 	bl	80179a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	461a      	mov	r2, r3
 8006492:	2308      	movs	r3, #8
 8006494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d008      	beq.n	80064b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	461a      	mov	r2, r3
 80064ae:	2310      	movs	r3, #16
 80064b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	461a      	mov	r2, r3
 80064ca:	2340      	movs	r3, #64	; 0x40
 80064cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d023      	beq.n	8006520 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80064d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064da:	6a38      	ldr	r0, [r7, #32]
 80064dc:	f005 fd74 	bl	800bfc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	3338      	adds	r3, #56	; 0x38
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	78db      	ldrb	r3, [r3, #3]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d108      	bne.n	800650e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f011 fae3 	bl	8017ad4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	2302      	movs	r3, #2
 800651e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800652a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fd35 	bl	8006f9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	3301      	adds	r3, #1
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	f47f af2e 	bne.w	80063a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f006 fd5e 	bl	800d00c <USB_ReadInterrupts>
 8006550:	4603      	mov	r3, r0
 8006552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655a:	d122      	bne.n	80065a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006576:	2b01      	cmp	r3, #1
 8006578:	d108      	bne.n	800658c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006582:	2100      	movs	r1, #0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f011 fc7d 	bl	8017e84 <HAL_PCDEx_LPM_Callback>
 800658a:	e002      	b.n	8006592 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f011 fa81 	bl	8017a94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f006 fd30 	bl	800d00c <USB_ReadInterrupts>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b6:	d112      	bne.n	80065de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f011 fa3d 	bl	8017a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695a      	ldr	r2, [r3, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065dc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f006 fd12 	bl	800d00c <USB_ReadInterrupts>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f2:	d121      	bne.n	8006638 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006602:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d111      	bne.n	8006632 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f011 fc2a 	bl	8017e84 <HAL_PCDEx_LPM_Callback>
 8006630:	e002      	b.n	8006638 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f011 fa08 	bl	8017a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f006 fce5 	bl	800d00c <USB_ReadInterrupts>
 8006642:	4603      	mov	r3, r0
 8006644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664c:	f040 80b7 	bne.w	80067be <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2110      	movs	r1, #16
 800666a:	4618      	mov	r0, r3
 800666c:	f005 fcac 	bl	800bfc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006670:	2300      	movs	r3, #0
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006674:	e046      	b.n	8006704 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	461a      	mov	r2, r3
 8006684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	461a      	mov	r2, r3
 80066b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	3301      	adds	r3, #1
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d3b3      	bcc.n	8006676 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006720:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673a:	f043 030b 	orr.w	r3, r3, #11
 800673e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006750:	f043 030b 	orr.w	r3, r3, #11
 8006754:	6453      	str	r3, [r2, #68]	; 0x44
 8006756:	e015      	b.n	8006784 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800676a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800676e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677e:	f043 030b 	orr.w	r3, r3, #11
 8006782:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006792:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006796:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067a8:	461a      	mov	r2, r3
 80067aa:	f006 fcf3 	bl	800d194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f006 fc22 	bl	800d00c <USB_ReadInterrupts>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d2:	d124      	bne.n	800681e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f006 fcb8 	bl	800d14e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f005 fc6d 	bl	800c0c2 <USB_GetDevSpeed>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681c      	ldr	r4, [r3, #0]
 80067f4:	f000 fef0 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 80067f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	4620      	mov	r0, r4
 8006804:	f005 f972 	bl	800baec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f011 f8f4 	bl	80179f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800681c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f006 fbf2 	bl	800d00c <USB_ReadInterrupts>
 8006828:	4603      	mov	r3, r0
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b08      	cmp	r3, #8
 8006830:	d10a      	bne.n	8006848 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f011 f8d1 	bl	80179da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f002 0208 	and.w	r2, r2, #8
 8006846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f006 fbdd 	bl	800d00c <USB_ReadInterrupts>
 8006852:	4603      	mov	r3, r0
 8006854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d122      	bne.n	80068a2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006868:	2301      	movs	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
 800686c:	e014      	b.n	8006898 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d105      	bne.n	8006892 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	b2db      	uxtb	r3, r3
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fb27 	bl	8006ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	3301      	adds	r3, #1
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689e:	429a      	cmp	r2, r3
 80068a0:	d3e5      	bcc.n	800686e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f006 fbb0 	bl	800d00c <USB_ReadInterrupts>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b6:	d13b      	bne.n	8006930 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	e02b      	b.n	8006916 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	3340      	adds	r3, #64	; 0x40
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d115      	bne.n	8006910 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80068e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da12      	bge.n	8006910 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	333f      	adds	r3, #63	; 0x3f
 80068fa:	2201      	movs	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fae8 	bl	8006ee0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	3301      	adds	r3, #1
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	429a      	cmp	r2, r3
 800691e:	d3ce      	bcc.n	80068be <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800692e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f006 fb69 	bl	800d00c <USB_ReadInterrupts>
 800693a:	4603      	mov	r3, r0
 800693c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006944:	d155      	bne.n	80069f2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006946:	2301      	movs	r3, #1
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	e045      	b.n	80069d8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d12e      	bne.n	80069d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006974:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006976:	2b00      	cmp	r3, #0
 8006978:	da2b      	bge.n	80069d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006986:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800698a:	429a      	cmp	r2, r3
 800698c:	d121      	bne.n	80069d2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069ce:	6053      	str	r3, [r2, #4]
            break;
 80069d0:	e007      	b.n	80069e2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	3301      	adds	r3, #1
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069de:	429a      	cmp	r2, r3
 80069e0:	d3b4      	bcc.n	800694c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80069f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f006 fb08 	bl	800d00c <USB_ReadInterrupts>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d10a      	bne.n	8006a1e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f011 f875 	bl	8017af8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f006 faf2 	bl	800d00c <USB_ReadInterrupts>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d115      	bne.n	8006a5e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f011 f865 	bl	8017b14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	e000      	b.n	8006a5e <HAL_PCD_IRQHandler+0x992>
      return;
 8006a5c:	bf00      	nop
    }
  }
}
 8006a5e:	3734      	adds	r7, #52	; 0x34
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd90      	pop	{r4, r7, pc}

08006a64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_PCD_SetAddress+0x1a>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e013      	b.n	8006aa6 <HAL_PCD_SetAddress+0x42>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f006 fa50 	bl	800cf3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	4611      	mov	r1, r2
 8006aba:	461a      	mov	r2, r3
 8006abc:	4603      	mov	r3, r0
 8006abe:	70fb      	strb	r3, [r7, #3]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	803b      	strh	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da0f      	bge.n	8006af4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	4613      	mov	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	3338      	adds	r3, #56	; 0x38
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3304      	adds	r3, #4
 8006aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	705a      	strb	r2, [r3, #1]
 8006af2:	e00f      	b.n	8006b14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 020f 	and.w	r2, r3, #15
 8006afa:	4613      	mov	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006b20:	883a      	ldrh	r2, [r7, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	78ba      	ldrb	r2, [r7, #2]
 8006b2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006b3e:	78bb      	ldrb	r3, [r7, #2]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d102      	bne.n	8006b4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_PCD_EP_Open+0xaa>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e00e      	b.n	8006b76 <HAL_PCD_EP_Open+0xc8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f005 fad0 	bl	800c10c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da0f      	bge.n	8006bb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	3338      	adds	r3, #56	; 0x38
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	705a      	strb	r2, [r3, #1]
 8006bb0:	e00f      	b.n	8006bd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3304      	adds	r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_PCD_EP_Close+0x6e>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e00e      	b.n	8006c0a <HAL_PCD_EP_Close+0x8c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68f9      	ldr	r1, [r7, #12]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f005 fb0e 	bl	800c21c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	3304      	adds	r3, #4
 8006c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2200      	movs	r2, #0
 8006c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c54:	7afb      	ldrb	r3, [r7, #11]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d102      	bne.n	8006c6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	f005 fded 	bl	800c864 <USB_EP0StartXfer>
 8006c8a:	e008      	b.n	8006c9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	f005 fb9b 	bl	800c3d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	f003 020f 	and.w	r2, r3, #15
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006cca:	681b      	ldr	r3, [r3, #0]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	4613      	mov	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	3338      	adds	r3, #56	; 0x38
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2201      	movs	r2, #1
 8006d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d102      	bne.n	8006d32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	f005 fd8b 	bl	800c864 <USB_EP0StartXfer>
 8006d4e:	e008      	b.n	8006d62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	f005 fb39 	bl	800c3d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d901      	bls.n	8006d8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e050      	b.n	8006e2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da0f      	bge.n	8006db2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	3338      	adds	r3, #56	; 0x38
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	3304      	adds	r3, #4
 8006da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	705a      	strb	r2, [r3, #1]
 8006db0:	e00d      	b.n	8006dce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4613      	mov	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_PCD_EP_SetStall+0x82>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e01e      	b.n	8006e2c <HAL_PCD_EP_SetStall+0xc0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f005 ffc9 	bl	800cd94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	b2d9      	uxtb	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f006 f9b9 	bl	800d194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	f003 020f 	and.w	r2, r3, #15
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d901      	bls.n	8006e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e042      	b.n	8006ed8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da0f      	bge.n	8006e7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3338      	adds	r3, #56	; 0x38
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3304      	adds	r3, #4
 8006e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	705a      	strb	r2, [r3, #1]
 8006e78:	e00f      	b.n	8006e9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	4413      	add	r3, r2
 8006e90:	3304      	adds	r3, #4
 8006e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_PCD_EP_ClrStall+0x86>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e00e      	b.n	8006ed8 <HAL_PCD_EP_ClrStall+0xa4>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68f9      	ldr	r1, [r7, #12]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f005 ffd1 	bl	800ce70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da0c      	bge.n	8006f0e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	3338      	adds	r3, #56	; 0x38
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	3304      	adds	r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e00c      	b.n	8006f28 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f005 fdf0 	bl	800cb14 <USB_EPStopXfer>
 8006f34:	4603      	mov	r3, r0
 8006f36:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_PCD_EP_Flush+0x1a>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e01b      	b.n	8006f94 <HAL_PCD_EP_Flush+0x52>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da09      	bge.n	8006f80 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f005 f825 	bl	800bfc8 <USB_FlushTxFifo>
 8006f7e:	e004      	b.n	8006f8a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f005 f853 	bl	800c030 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	3338      	adds	r3, #56	; 0x38
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d901      	bls.n	8006fd4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e06c      	b.n	80070ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	699a      	ldr	r2, [r3, #24]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d902      	bls.n	8006ff0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ff8:	e02b      	b.n	8007052 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	429a      	cmp	r2, r3
 800700e:	d902      	bls.n	8007016 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3303      	adds	r3, #3
 800701a:	089b      	lsrs	r3, r3, #2
 800701c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6919      	ldr	r1, [r3, #16]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800702e:	b2db      	uxtb	r3, r3
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4603      	mov	r3, r0
 8007034:	6978      	ldr	r0, [r7, #20]
 8007036:	f005 fe17 	bl	800cc68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1a      	ldr	r2, [r3, #32]
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	d809      	bhi.n	800707c <PCD_WriteEmptyTxFifo+0xe0>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007070:	429a      	cmp	r2, r3
 8007072:	d203      	bcs.n	800707c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1be      	bne.n	8006ffa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	429a      	cmp	r2, r3
 8007086:	d811      	bhi.n	80070ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	2201      	movs	r2, #1
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	6939      	ldr	r1, [r7, #16]
 80070a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070a8:	4013      	ands	r3, r2
 80070aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	333c      	adds	r3, #60	; 0x3c
 80070d0:	3304      	adds	r3, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d17b      	bne.n	80071e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d015      	beq.n	8007124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4a61      	ldr	r2, [pc, #388]	; (8007280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	f240 80b9 	bls.w	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80b3 	beq.w	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	461a      	mov	r2, r3
 800711c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007120:	6093      	str	r3, [r2, #8]
 8007122:	e0a7      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	2320      	movs	r3, #32
 800713e:	6093      	str	r3, [r2, #8]
 8007140:	e098      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 8093 	bne.w	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	4a4b      	ldr	r2, [pc, #300]	; (8007280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d90f      	bls.n	8007176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	461a      	mov	r2, r3
 800716e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007172:	6093      	str	r3, [r2, #8]
 8007174:	e07e      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	3304      	adds	r3, #4
 800718a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	0159      	lsls	r1, r3, #5
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	440b      	add	r3, r1
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d114      	bne.n	80071d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071c0:	461a      	mov	r2, r3
 80071c2:	2101      	movs	r1, #1
 80071c4:	f005 ffe6 	bl	800d194 <USB_EP0_OutStart>
 80071c8:	e006      	b.n	80071d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f010 fbc6 	bl	8017970 <HAL_PCD_DataOutStageCallback>
 80071e4:	e046      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4a26      	ldr	r2, [pc, #152]	; (8007284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d124      	bne.n	8007238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720a:	6093      	str	r3, [r2, #8]
 800720c:	e032      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	461a      	mov	r2, r3
 8007226:	2320      	movs	r3, #32
 8007228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f010 fb9d 	bl	8017970 <HAL_PCD_DataOutStageCallback>
 8007236:	e01d      	b.n	8007274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d114      	bne.n	8007268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007260:	461a      	mov	r2, r3
 8007262:	2100      	movs	r1, #0
 8007264:	f005 ff96 	bl	800d194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f010 fb7e 	bl	8017970 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	4f54300a 	.word	0x4f54300a
 8007284:	4f54310a 	.word	0x4f54310a

08007288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	333c      	adds	r3, #60	; 0x3c
 80072a0:	3304      	adds	r3, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a15      	ldr	r2, [pc, #84]	; (8007310 <PCD_EP_OutSetupPacket_int+0x88>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d90e      	bls.n	80072dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f010 fb35 	bl	801794c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <PCD_EP_OutSetupPacket_int+0x88>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d90c      	bls.n	8007304 <PCD_EP_OutSetupPacket_int+0x7c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d108      	bne.n	8007304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072fc:	461a      	mov	r2, r3
 80072fe:	2101      	movs	r1, #1
 8007300:	f005 ff48 	bl	800d194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	4f54300a 	.word	0x4f54300a

08007314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
 8007320:	4613      	mov	r3, r2
 8007322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d107      	bne.n	8007342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007332:	883b      	ldrh	r3, [r7, #0]
 8007334:	0419      	lsls	r1, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	430a      	orrs	r2, r1
 800733e:	629a      	str	r2, [r3, #40]	; 0x28
 8007340:	e028      	b.n	8007394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
 8007354:	e00d      	b.n	8007372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	3340      	adds	r3, #64	; 0x40
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	3301      	adds	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
 8007372:	7bfa      	ldrb	r2, [r7, #15]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	3b01      	subs	r3, #1
 8007378:	429a      	cmp	r2, r3
 800737a:	d3ec      	bcc.n	8007356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800737c:	883b      	ldrh	r3, [r7, #0]
 800737e:	0418      	lsls	r0, r3, #16
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	3b01      	subs	r3, #1
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	4302      	orrs	r2, r0
 800738c:	3340      	adds	r3, #64	; 0x40
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	887a      	ldrh	r2, [r7, #2]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f6:	f043 0303 	orr.w	r3, r3, #3
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0cc      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007420:	4b68      	ldr	r3, [pc, #416]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d90c      	bls.n	8007448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742e:	4b65      	ldr	r3, [pc, #404]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007436:	4b63      	ldr	r3, [pc, #396]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e0b8      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d020      	beq.n	8007496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007460:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4a58      	ldr	r2, [pc, #352]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800746a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007478:	4b53      	ldr	r3, [pc, #332]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a52      	ldr	r2, [pc, #328]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800747e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007484:	4b50      	ldr	r3, [pc, #320]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	494d      	ldr	r1, [pc, #308]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d044      	beq.n	800752c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074aa:	4b47      	ldr	r3, [pc, #284]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d119      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e07f      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d003      	beq.n	80074ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ca:	4b3f      	ldr	r3, [pc, #252]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e06f      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074da:	4b3b      	ldr	r3, [pc, #236]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e067      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ea:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f023 0203 	bic.w	r2, r3, #3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4934      	ldr	r1, [pc, #208]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074fc:	f7fc fbe2 	bl	8003cc4 <HAL_GetTick>
 8007500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	e00a      	b.n	800751a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007504:	f7fc fbde 	bl	8003cc4 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007512:	4293      	cmp	r3, r2
 8007514:	d901      	bls.n	800751a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e04f      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751a:	4b2b      	ldr	r3, [pc, #172]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 020c 	and.w	r2, r3, #12
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	429a      	cmp	r2, r3
 800752a:	d1eb      	bne.n	8007504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d20c      	bcs.n	8007554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753a:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d001      	beq.n	8007554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e032      	b.n	80075ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d008      	beq.n	8007572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007560:	4b19      	ldr	r3, [pc, #100]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4916      	ldr	r1, [pc, #88]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	4313      	orrs	r3, r2
 8007570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	490e      	ldr	r1, [pc, #56]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800758e:	4313      	orrs	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007592:	f000 fb9d 	bl	8007cd0 <HAL_RCC_GetSysClockFreq>
 8007596:	4602      	mov	r2, r0
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_RCC_ClockConfig+0x1bc>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	091b      	lsrs	r3, r3, #4
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	490a      	ldr	r1, [pc, #40]	; (80075cc <HAL_RCC_ClockConfig+0x1c0>)
 80075a4:	5ccb      	ldrb	r3, [r1, r3]
 80075a6:	fa22 f303 	lsr.w	r3, r2, r3
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <HAL_RCC_ClockConfig+0x1c8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fb fc5a 	bl	8002e6c <HAL_InitTick>

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40023c00 	.word	0x40023c00
 80075c8:	40023800 	.word	0x40023800
 80075cc:	0801dea0 	.word	0x0801dea0
 80075d0:	20000008 	.word	0x20000008
 80075d4:	2000000c 	.word	0x2000000c

080075d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <HAL_RCC_GetHCLKFreq+0x14>)
 80075de:	681b      	ldr	r3, [r3, #0]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000008 	.word	0x20000008

080075f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075f4:	f7ff fff0 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	0a9b      	lsrs	r3, r3, #10
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	4903      	ldr	r1, [pc, #12]	; (8007614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007606:	5ccb      	ldrb	r3, [r1, r3]
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40023800 	.word	0x40023800
 8007614:	0801deb0 	.word	0x0801deb0

08007618 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	220f      	movs	r2, #15
 8007626:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007628:	4b12      	ldr	r3, [pc, #72]	; (8007674 <HAL_RCC_GetClockConfig+0x5c>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0203 	and.w	r2, r3, #3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_RCC_GetClockConfig+0x5c>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007640:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <HAL_RCC_GetClockConfig+0x5c>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <HAL_RCC_GetClockConfig+0x5c>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	08db      	lsrs	r3, r3, #3
 8007652:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <HAL_RCC_GetClockConfig+0x60>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 020f 	and.w	r2, r3, #15
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	601a      	str	r2, [r3, #0]
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40023800 	.word	0x40023800
 8007678:	40023c00 	.word	0x40023c00

0800767c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80076b4:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	496c      	ldr	r1, [pc, #432]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80076d2:	2301      	movs	r3, #1
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80076e2:	4b64      	ldr	r3, [pc, #400]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f0:	4960      	ldr	r1, [pc, #384]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007700:	2301      	movs	r3, #1
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007710:	4b58      	ldr	r3, [pc, #352]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	4955      	ldr	r1, [pc, #340]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772e:	d101      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007730:	2301      	movs	r3, #1
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800773c:	2301      	movs	r3, #1
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800774c:	4b49      	ldr	r3, [pc, #292]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800774e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	4946      	ldr	r1, [pc, #280]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800776a:	d101      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800776c:	2301      	movs	r3, #1
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007778:	2301      	movs	r3, #1
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 808a 	beq.w	800789e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	4b39      	ldr	r3, [pc, #228]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	4a38      	ldr	r2, [pc, #224]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007798:	6413      	str	r3, [r2, #64]	; 0x40
 800779a:	4b36      	ldr	r3, [pc, #216]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077a6:	4b34      	ldr	r3, [pc, #208]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a33      	ldr	r2, [pc, #204]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077b2:	f7fc fa87 	bl	8003cc4 <HAL_GetTick>
 80077b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077b8:	e008      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077ba:	f7fc fa83 	bl	8003cc4 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d901      	bls.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e278      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077cc:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0f0      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077d8:	4b26      	ldr	r3, [pc, #152]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02f      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d028      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077f6:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007800:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007802:	2201      	movs	r2, #1
 8007804:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800780c:	4a19      	ldr	r2, [pc, #100]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b01      	cmp	r3, #1
 800781c:	d114      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800781e:	f7fc fa51 	bl	8003cc4 <HAL_GetTick>
 8007822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007824:	e00a      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007826:	f7fc fa4d 	bl	8003cc4 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	f241 3288 	movw	r2, #5000	; 0x1388
 8007834:	4293      	cmp	r3, r2
 8007836:	d901      	bls.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e240      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0ee      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007854:	d114      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786a:	4902      	ldr	r1, [pc, #8]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800786c:	4313      	orrs	r3, r2
 800786e:	608b      	str	r3, [r1, #8]
 8007870:	e00c      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007872:	bf00      	nop
 8007874:	40023800 	.word	0x40023800
 8007878:	40007000 	.word	0x40007000
 800787c:	42470e40 	.word	0x42470e40
 8007880:	4b4a      	ldr	r3, [pc, #296]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	4a49      	ldr	r2, [pc, #292]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007886:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800788a:	6093      	str	r3, [r2, #8]
 800788c:	4b47      	ldr	r3, [pc, #284]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800788e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007898:	4944      	ldr	r1, [pc, #272]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800789a:	4313      	orrs	r3, r2
 800789c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80078b0:	4b3f      	ldr	r3, [pc, #252]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80078b2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80078c0:	4b3a      	ldr	r3, [pc, #232]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ce:	4937      	ldr	r1, [pc, #220]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078e2:	4b32      	ldr	r3, [pc, #200]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078e8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f0:	492e      	ldr	r1, [pc, #184]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d011      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007904:	4b29      	ldr	r3, [pc, #164]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007912:	4926      	ldr	r1, [pc, #152]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007922:	d101      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007924:	2301      	movs	r3, #1
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007934:	4b1d      	ldr	r3, [pc, #116]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800793a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	491a      	ldr	r1, [pc, #104]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800795c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	4911      	ldr	r1, [pc, #68]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007974:	d101      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007976:	2301      	movs	r3, #1
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d005      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007988:	f040 80ff 	bne.w	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007992:	f7fc f997 	bl	8003cc4 <HAL_GetTick>
 8007996:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007998:	e00e      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800799a:	f7fc f993 	bl	8003cc4 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d907      	bls.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e188      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80079ac:	40023800 	.word	0x40023800
 80079b0:	424711e0 	.word	0x424711e0
 80079b4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079b8:	4b7e      	ldr	r3, [pc, #504]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ea      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d028      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d124      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80079ec:	4b71      	ldr	r3, [pc, #452]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	3301      	adds	r3, #1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079fe:	4b6d      	ldr	r3, [pc, #436]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	019b      	lsls	r3, r3, #6
 8007a16:	431a      	orrs	r2, r3
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	431a      	orrs	r2, r3
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	071b      	lsls	r3, r3, #28
 8007a2e:	4961      	ldr	r1, [pc, #388]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d035      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a60:	d130      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a62:	4b54      	ldr	r3, [pc, #336]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	3301      	adds	r3, #1
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a74:	4b4f      	ldr	r3, [pc, #316]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7a:	0f1b      	lsrs	r3, r3, #28
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	019b      	lsls	r3, r3, #6
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	3b01      	subs	r3, #1
 8007a94:	041b      	lsls	r3, r3, #16
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	061b      	lsls	r3, r3, #24
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	071b      	lsls	r3, r3, #28
 8007aa4:	4943      	ldr	r1, [pc, #268]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007aac:	4b41      	ldr	r3, [pc, #260]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab2:	f023 021f 	bic.w	r2, r3, #31
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	3b01      	subs	r3, #1
 8007abc:	493d      	ldr	r1, [pc, #244]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d029      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad8:	d124      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ada:	4b36      	ldr	r3, [pc, #216]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aec:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af2:	0f1b      	lsrs	r3, r3, #28
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	019b      	lsls	r3, r3, #6
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	041b      	lsls	r3, r3, #16
 8007b10:	431a      	orrs	r2, r3
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	061b      	lsls	r3, r3, #24
 8007b16:	431a      	orrs	r2, r3
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	071b      	lsls	r3, r3, #28
 8007b1c:	4925      	ldr	r1, [pc, #148]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	019b      	lsls	r3, r3, #6
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	3b01      	subs	r3, #1
 8007b44:	041b      	lsls	r3, r3, #16
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	061b      	lsls	r3, r3, #24
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	071b      	lsls	r3, r3, #28
 8007b56:	4917      	ldr	r1, [pc, #92]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b5e:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b64:	f7fc f8ae 	bl	8003cc4 <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b6c:	f7fc f8aa 	bl	8003cc4 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e09f      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0f0      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f040 8095 	bne.w	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b98:	f7fc f894 	bl	8003cc4 <HAL_GetTick>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b9e:	e00f      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007ba0:	f7fc f890 	bl	8003cc4 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d908      	bls.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e085      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007bb2:	bf00      	nop
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	42470068 	.word	0x42470068
 8007bbc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bc0:	4b41      	ldr	r3, [pc, #260]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d0e8      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d02b      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d127      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bf6:	4b34      	ldr	r3, [pc, #208]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	3301      	adds	r3, #1
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699a      	ldr	r2, [r3, #24]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	019b      	lsls	r3, r3, #6
 8007c12:	431a      	orrs	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	061b      	lsls	r3, r3, #24
 8007c24:	4928      	ldr	r1, [pc, #160]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c2c:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	4922      	ldr	r1, [pc, #136]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01d      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5a:	d118      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	019b      	lsls	r3, r3, #6
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	085b      	lsrs	r3, r3, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	041b      	lsls	r3, r3, #16
 8007c80:	431a      	orrs	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	4910      	ldr	r1, [pc, #64]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c94:	f7fc f816 	bl	8003cc4 <HAL_GetTick>
 8007c98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c9a:	e008      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c9c:	f7fc f812 	bl	8003cc4 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e007      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cae:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cba:	d1ef      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3730      	adds	r7, #48	; 0x30
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	42470070 	.word	0x42470070

08007cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cd4:	b0ae      	sub	sp, #184	; 0xb8
 8007cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cf6:	4bcb      	ldr	r3, [pc, #812]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 030c 	and.w	r3, r3, #12
 8007cfe:	2b0c      	cmp	r3, #12
 8007d00:	f200 8204 	bhi.w	800810c <HAL_RCC_GetSysClockFreq+0x43c>
 8007d04:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	0800810d 	.word	0x0800810d
 8007d14:	0800810d 	.word	0x0800810d
 8007d18:	0800810d 	.word	0x0800810d
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	0800810d 	.word	0x0800810d
 8007d24:	0800810d 	.word	0x0800810d
 8007d28:	0800810d 	.word	0x0800810d
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	0800810d 	.word	0x0800810d
 8007d34:	0800810d 	.word	0x0800810d
 8007d38:	0800810d 	.word	0x0800810d
 8007d3c:	08007f41 	.word	0x08007f41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d40:	4bb9      	ldr	r3, [pc, #740]	; (8008028 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007d46:	e1e5      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d48:	4bb7      	ldr	r3, [pc, #732]	; (8008028 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d4e:	e1e1      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d50:	4bb4      	ldr	r3, [pc, #720]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d5c:	4bb1      	ldr	r3, [pc, #708]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d071      	beq.n	8007e4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d68:	4bae      	ldr	r3, [pc, #696]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d74:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d84:	2300      	movs	r3, #0
 8007d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d8e:	4622      	mov	r2, r4
 8007d90:	462b      	mov	r3, r5
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	0159      	lsls	r1, r3, #5
 8007d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007da0:	0150      	lsls	r0, r2, #5
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4621      	mov	r1, r4
 8007da8:	1a51      	subs	r1, r2, r1
 8007daa:	6439      	str	r1, [r7, #64]	; 0x40
 8007dac:	4629      	mov	r1, r5
 8007dae:	eb63 0301 	sbc.w	r3, r3, r1
 8007db2:	647b      	str	r3, [r7, #68]	; 0x44
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	018b      	lsls	r3, r1, #6
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dca:	4641      	mov	r1, r8
 8007dcc:	018a      	lsls	r2, r1, #6
 8007dce:	4641      	mov	r1, r8
 8007dd0:	1a51      	subs	r1, r2, r1
 8007dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007de8:	4649      	mov	r1, r9
 8007dea:	00cb      	lsls	r3, r1, #3
 8007dec:	4641      	mov	r1, r8
 8007dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007df2:	4641      	mov	r1, r8
 8007df4:	00ca      	lsls	r2, r1, #3
 8007df6:	4610      	mov	r0, r2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30
 8007e02:	462b      	mov	r3, r5
 8007e04:	460a      	mov	r2, r1
 8007e06:	eb42 0303 	adc.w	r3, r2, r3
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e18:	4629      	mov	r1, r5
 8007e1a:	028b      	lsls	r3, r1, #10
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e22:	4621      	mov	r1, r4
 8007e24:	028a      	lsls	r2, r1, #10
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e3c:	f7f8 ff54 	bl	8000ce8 <__aeabi_uldivmod>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4613      	mov	r3, r2
 8007e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e4a:	e067      	b.n	8007f1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e4c:	4b75      	ldr	r3, [pc, #468]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	099b      	lsrs	r3, r3, #6
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e66:	2300      	movs	r3, #0
 8007e68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f04f 0100 	mov.w	r1, #0
 8007e7a:	0159      	lsls	r1, r3, #5
 8007e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e80:	0150      	lsls	r0, r2, #5
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4621      	mov	r1, r4
 8007e88:	1a51      	subs	r1, r2, r1
 8007e8a:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	018b      	lsls	r3, r1, #6
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eaa:	4641      	mov	r1, r8
 8007eac:	018a      	lsls	r2, r1, #6
 8007eae:	4641      	mov	r1, r8
 8007eb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ec6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ece:	4692      	mov	sl, r2
 8007ed0:	469b      	mov	fp, r3
 8007ed2:	4623      	mov	r3, r4
 8007ed4:	eb1a 0303 	adds.w	r3, sl, r3
 8007ed8:	623b      	str	r3, [r7, #32]
 8007eda:	462b      	mov	r3, r5
 8007edc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007eee:	4629      	mov	r1, r5
 8007ef0:	028b      	lsls	r3, r1, #10
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ef8:	4621      	mov	r1, r4
 8007efa:	028a      	lsls	r2, r1, #10
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f04:	2200      	movs	r2, #0
 8007f06:	673b      	str	r3, [r7, #112]	; 0x70
 8007f08:	677a      	str	r2, [r7, #116]	; 0x74
 8007f0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f0e:	f7f8 feeb 	bl	8000ce8 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4613      	mov	r3, r2
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f1c:	4b41      	ldr	r3, [pc, #260]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	0c1b      	lsrs	r3, r3, #16
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	3301      	adds	r3, #1
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f3e:	e0e9      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f4c:	4b35      	ldr	r3, [pc, #212]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d069      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f58:	4b32      	ldr	r3, [pc, #200]	; (8008024 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	099b      	lsrs	r3, r3, #6
 8007f5e:	2200      	movs	r2, #0
 8007f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007f70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f04f 0000 	mov.w	r0, #0
 8007f7c:	f04f 0100 	mov.w	r1, #0
 8007f80:	0159      	lsls	r1, r3, #5
 8007f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f86:	0150      	lsls	r0, r2, #5
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	1a51      	subs	r1, r2, r1
 8007f90:	61b9      	str	r1, [r7, #24]
 8007f92:	4629      	mov	r1, r5
 8007f94:	eb63 0301 	sbc.w	r3, r3, r1
 8007f98:	61fb      	str	r3, [r7, #28]
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	018b      	lsls	r3, r1, #6
 8007faa:	4651      	mov	r1, sl
 8007fac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fb0:	4651      	mov	r1, sl
 8007fb2:	018a      	lsls	r2, r1, #6
 8007fb4:	4651      	mov	r1, sl
 8007fb6:	ebb2 0801 	subs.w	r8, r2, r1
 8007fba:	4659      	mov	r1, fp
 8007fbc:	eb63 0901 	sbc.w	r9, r3, r1
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fd4:	4690      	mov	r8, r2
 8007fd6:	4699      	mov	r9, r3
 8007fd8:	4623      	mov	r3, r4
 8007fda:	eb18 0303 	adds.w	r3, r8, r3
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	eb49 0303 	adc.w	r3, r9, r3
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	028b      	lsls	r3, r1, #10
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ffe:	4621      	mov	r1, r4
 8008000:	028a      	lsls	r2, r1, #10
 8008002:	4610      	mov	r0, r2
 8008004:	4619      	mov	r1, r3
 8008006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800800a:	2200      	movs	r2, #0
 800800c:	65bb      	str	r3, [r7, #88]	; 0x58
 800800e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008014:	f7f8 fe68 	bl	8000ce8 <__aeabi_uldivmod>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4613      	mov	r3, r2
 800801e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008022:	e063      	b.n	80080ec <HAL_RCC_GetSysClockFreq+0x41c>
 8008024:	40023800 	.word	0x40023800
 8008028:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800802c:	4b3d      	ldr	r3, [pc, #244]	; (8008124 <HAL_RCC_GetSysClockFreq+0x454>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	099b      	lsrs	r3, r3, #6
 8008032:	2200      	movs	r2, #0
 8008034:	4618      	mov	r0, r3
 8008036:	4611      	mov	r1, r2
 8008038:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800803c:	653b      	str	r3, [r7, #80]	; 0x50
 800803e:	2300      	movs	r3, #0
 8008040:	657b      	str	r3, [r7, #84]	; 0x54
 8008042:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008046:	4642      	mov	r2, r8
 8008048:	464b      	mov	r3, r9
 800804a:	f04f 0000 	mov.w	r0, #0
 800804e:	f04f 0100 	mov.w	r1, #0
 8008052:	0159      	lsls	r1, r3, #5
 8008054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008058:	0150      	lsls	r0, r2, #5
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4641      	mov	r1, r8
 8008060:	1a51      	subs	r1, r2, r1
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	4649      	mov	r1, r9
 8008066:	eb63 0301 	sbc.w	r3, r3, r1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008078:	4659      	mov	r1, fp
 800807a:	018b      	lsls	r3, r1, #6
 800807c:	4651      	mov	r1, sl
 800807e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008082:	4651      	mov	r1, sl
 8008084:	018a      	lsls	r2, r1, #6
 8008086:	4651      	mov	r1, sl
 8008088:	1a54      	subs	r4, r2, r1
 800808a:	4659      	mov	r1, fp
 800808c:	eb63 0501 	sbc.w	r5, r3, r1
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	00eb      	lsls	r3, r5, #3
 800809a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800809e:	00e2      	lsls	r2, r4, #3
 80080a0:	4614      	mov	r4, r2
 80080a2:	461d      	mov	r5, r3
 80080a4:	4643      	mov	r3, r8
 80080a6:	18e3      	adds	r3, r4, r3
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	464b      	mov	r3, r9
 80080ac:	eb45 0303 	adc.w	r3, r5, r3
 80080b0:	607b      	str	r3, [r7, #4]
 80080b2:	f04f 0200 	mov.w	r2, #0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080be:	4629      	mov	r1, r5
 80080c0:	028b      	lsls	r3, r1, #10
 80080c2:	4621      	mov	r1, r4
 80080c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080c8:	4621      	mov	r1, r4
 80080ca:	028a      	lsls	r2, r1, #10
 80080cc:	4610      	mov	r0, r2
 80080ce:	4619      	mov	r1, r3
 80080d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080d4:	2200      	movs	r2, #0
 80080d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80080d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80080da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080de:	f7f8 fe03 	bl	8000ce8 <__aeabi_uldivmod>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4613      	mov	r3, r2
 80080e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <HAL_RCC_GetSysClockFreq+0x454>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	0f1b      	lsrs	r3, r3, #28
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80080fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008102:	fbb2 f3f3 	udiv	r3, r2, r3
 8008106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800810a:	e003      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCC_GetSysClockFreq+0x458>)
 800810e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008118:	4618      	mov	r0, r3
 800811a:	37b8      	adds	r7, #184	; 0xb8
 800811c:	46bd      	mov	sp, r7
 800811e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008122:	bf00      	nop
 8008124:	40023800 	.word	0x40023800
 8008128:	00f42400 	.word	0x00f42400

0800812c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e28d      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8083 	beq.w	8008252 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800814c:	4b94      	ldr	r3, [pc, #592]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 030c 	and.w	r3, r3, #12
 8008154:	2b04      	cmp	r3, #4
 8008156:	d019      	beq.n	800818c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008158:	4b91      	ldr	r3, [pc, #580]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008160:	2b08      	cmp	r3, #8
 8008162:	d106      	bne.n	8008172 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008164:	4b8e      	ldr	r3, [pc, #568]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008170:	d00c      	beq.n	800818c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008172:	4b8b      	ldr	r3, [pc, #556]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800817a:	2b0c      	cmp	r3, #12
 800817c:	d112      	bne.n	80081a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800817e:	4b88      	ldr	r3, [pc, #544]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818a:	d10b      	bne.n	80081a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800818c:	4b84      	ldr	r3, [pc, #528]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d05b      	beq.n	8008250 <HAL_RCC_OscConfig+0x124>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d157      	bne.n	8008250 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e25a      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ac:	d106      	bne.n	80081bc <HAL_RCC_OscConfig+0x90>
 80081ae:	4b7c      	ldr	r3, [pc, #496]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a7b      	ldr	r2, [pc, #492]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	e01d      	b.n	80081f8 <HAL_RCC_OscConfig+0xcc>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c4:	d10c      	bne.n	80081e0 <HAL_RCC_OscConfig+0xb4>
 80081c6:	4b76      	ldr	r3, [pc, #472]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a75      	ldr	r2, [pc, #468]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	4b73      	ldr	r3, [pc, #460]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a72      	ldr	r2, [pc, #456]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	e00b      	b.n	80081f8 <HAL_RCC_OscConfig+0xcc>
 80081e0:	4b6f      	ldr	r3, [pc, #444]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a6e      	ldr	r2, [pc, #440]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4b6c      	ldr	r3, [pc, #432]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a6b      	ldr	r2, [pc, #428]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80081f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d013      	beq.n	8008228 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008200:	f7fb fd60 	bl	8003cc4 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008208:	f7fb fd5c 	bl	8003cc4 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b64      	cmp	r3, #100	; 0x64
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e21f      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800821a:	4b61      	ldr	r3, [pc, #388]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0f0      	beq.n	8008208 <HAL_RCC_OscConfig+0xdc>
 8008226:	e014      	b.n	8008252 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008228:	f7fb fd4c 	bl	8003cc4 <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008230:	f7fb fd48 	bl	8003cc4 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b64      	cmp	r3, #100	; 0x64
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e20b      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008242:	4b57      	ldr	r3, [pc, #348]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f0      	bne.n	8008230 <HAL_RCC_OscConfig+0x104>
 800824e:	e000      	b.n	8008252 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d06f      	beq.n	800833e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800825e:	4b50      	ldr	r3, [pc, #320]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 030c 	and.w	r3, r3, #12
 8008266:	2b00      	cmp	r3, #0
 8008268:	d017      	beq.n	800829a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800826a:	4b4d      	ldr	r3, [pc, #308]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008272:	2b08      	cmp	r3, #8
 8008274:	d105      	bne.n	8008282 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008276:	4b4a      	ldr	r3, [pc, #296]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008282:	4b47      	ldr	r3, [pc, #284]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800828a:	2b0c      	cmp	r3, #12
 800828c:	d11c      	bne.n	80082c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800828e:	4b44      	ldr	r3, [pc, #272]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d116      	bne.n	80082c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800829a:	4b41      	ldr	r3, [pc, #260]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_RCC_OscConfig+0x186>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d001      	beq.n	80082b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e1d3      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b2:	4b3b      	ldr	r3, [pc, #236]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4937      	ldr	r1, [pc, #220]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082c6:	e03a      	b.n	800833e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d020      	beq.n	8008312 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082d0:	4b34      	ldr	r3, [pc, #208]	; (80083a4 <HAL_RCC_OscConfig+0x278>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d6:	f7fb fcf5 	bl	8003cc4 <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082de:	f7fb fcf1 	bl	8003cc4 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e1b4      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f0:	4b2b      	ldr	r3, [pc, #172]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0f0      	beq.n	80082de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082fc:	4b28      	ldr	r3, [pc, #160]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4925      	ldr	r1, [pc, #148]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 800830c:	4313      	orrs	r3, r2
 800830e:	600b      	str	r3, [r1, #0]
 8008310:	e015      	b.n	800833e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <HAL_RCC_OscConfig+0x278>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008318:	f7fb fcd4 	bl	8003cc4 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008320:	f7fb fcd0 	bl	8003cc4 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e193      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008332:	4b1b      	ldr	r3, [pc, #108]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f0      	bne.n	8008320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d036      	beq.n	80083b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d016      	beq.n	8008380 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <HAL_RCC_OscConfig+0x27c>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008358:	f7fb fcb4 	bl	8003cc4 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008360:	f7fb fcb0 	bl	8003cc4 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e173      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <HAL_RCC_OscConfig+0x274>)
 8008374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f0      	beq.n	8008360 <HAL_RCC_OscConfig+0x234>
 800837e:	e01b      	b.n	80083b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <HAL_RCC_OscConfig+0x27c>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008386:	f7fb fc9d 	bl	8003cc4 <HAL_GetTick>
 800838a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800838c:	e00e      	b.n	80083ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800838e:	f7fb fc99 	bl	8003cc4 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d907      	bls.n	80083ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e15c      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
 80083a0:	40023800 	.word	0x40023800
 80083a4:	42470000 	.word	0x42470000
 80083a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ac:	4b8a      	ldr	r3, [pc, #552]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80083ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ea      	bne.n	800838e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8097 	beq.w	80084f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ca:	4b83      	ldr	r3, [pc, #524]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10f      	bne.n	80083f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	4b7f      	ldr	r3, [pc, #508]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	4a7e      	ldr	r2, [pc, #504]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80083e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e4:	6413      	str	r3, [r2, #64]	; 0x40
 80083e6:	4b7c      	ldr	r3, [pc, #496]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ee:	60bb      	str	r3, [r7, #8]
 80083f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f6:	4b79      	ldr	r3, [pc, #484]	; (80085dc <HAL_RCC_OscConfig+0x4b0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d118      	bne.n	8008434 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008402:	4b76      	ldr	r3, [pc, #472]	; (80085dc <HAL_RCC_OscConfig+0x4b0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a75      	ldr	r2, [pc, #468]	; (80085dc <HAL_RCC_OscConfig+0x4b0>)
 8008408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800840c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800840e:	f7fb fc59 	bl	8003cc4 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008416:	f7fb fc55 	bl	8003cc4 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e118      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008428:	4b6c      	ldr	r3, [pc, #432]	; (80085dc <HAL_RCC_OscConfig+0x4b0>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0f0      	beq.n	8008416 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d106      	bne.n	800844a <HAL_RCC_OscConfig+0x31e>
 800843c:	4b66      	ldr	r3, [pc, #408]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	4a65      	ldr	r2, [pc, #404]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	6713      	str	r3, [r2, #112]	; 0x70
 8008448:	e01c      	b.n	8008484 <HAL_RCC_OscConfig+0x358>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b05      	cmp	r3, #5
 8008450:	d10c      	bne.n	800846c <HAL_RCC_OscConfig+0x340>
 8008452:	4b61      	ldr	r3, [pc, #388]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008456:	4a60      	ldr	r2, [pc, #384]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008458:	f043 0304 	orr.w	r3, r3, #4
 800845c:	6713      	str	r3, [r2, #112]	; 0x70
 800845e:	4b5e      	ldr	r3, [pc, #376]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	4a5d      	ldr	r2, [pc, #372]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008464:	f043 0301 	orr.w	r3, r3, #1
 8008468:	6713      	str	r3, [r2, #112]	; 0x70
 800846a:	e00b      	b.n	8008484 <HAL_RCC_OscConfig+0x358>
 800846c:	4b5a      	ldr	r3, [pc, #360]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 800846e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008470:	4a59      	ldr	r2, [pc, #356]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	6713      	str	r3, [r2, #112]	; 0x70
 8008478:	4b57      	ldr	r3, [pc, #348]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 800847a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847c:	4a56      	ldr	r2, [pc, #344]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 800847e:	f023 0304 	bic.w	r3, r3, #4
 8008482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d015      	beq.n	80084b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800848c:	f7fb fc1a 	bl	8003cc4 <HAL_GetTick>
 8008490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008492:	e00a      	b.n	80084aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008494:	f7fb fc16 	bl	8003cc4 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e0d7      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084aa:	4b4b      	ldr	r3, [pc, #300]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0ee      	beq.n	8008494 <HAL_RCC_OscConfig+0x368>
 80084b6:	e014      	b.n	80084e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b8:	f7fb fc04 	bl	8003cc4 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084be:	e00a      	b.n	80084d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084c0:	f7fb fc00 	bl	8003cc4 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e0c1      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084d6:	4b40      	ldr	r3, [pc, #256]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1ee      	bne.n	80084c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d105      	bne.n	80084f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084e8:	4b3b      	ldr	r3, [pc, #236]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	4a3a      	ldr	r2, [pc, #232]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80084ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80ad 	beq.w	8008658 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084fe:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 030c 	and.w	r3, r3, #12
 8008506:	2b08      	cmp	r3, #8
 8008508:	d060      	beq.n	80085cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d145      	bne.n	800859e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008512:	4b33      	ldr	r3, [pc, #204]	; (80085e0 <HAL_RCC_OscConfig+0x4b4>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008518:	f7fb fbd4 	bl	8003cc4 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008520:	f7fb fbd0 	bl	8003cc4 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e093      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008532:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f0      	bne.n	8008520 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	019b      	lsls	r3, r3, #6
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	3b01      	subs	r3, #1
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	491b      	ldr	r1, [pc, #108]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 800856c:	4313      	orrs	r3, r2
 800856e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008570:	4b1b      	ldr	r3, [pc, #108]	; (80085e0 <HAL_RCC_OscConfig+0x4b4>)
 8008572:	2201      	movs	r2, #1
 8008574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008576:	f7fb fba5 	bl	8003cc4 <HAL_GetTick>
 800857a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800857e:	f7fb fba1 	bl	8003cc4 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e064      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <HAL_RCC_OscConfig+0x452>
 800859c:	e05c      	b.n	8008658 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <HAL_RCC_OscConfig+0x4b4>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fb fb8e 	bl	8003cc4 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ac:	f7fb fb8a 	bl	8003cc4 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e04d      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <HAL_RCC_OscConfig+0x4ac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x480>
 80085ca:	e045      	b.n	8008658 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d107      	bne.n	80085e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e040      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
 80085d8:	40023800 	.word	0x40023800
 80085dc:	40007000 	.word	0x40007000
 80085e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085e4:	4b1f      	ldr	r3, [pc, #124]	; (8008664 <HAL_RCC_OscConfig+0x538>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d030      	beq.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d129      	bne.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800860a:	429a      	cmp	r2, r3
 800860c:	d122      	bne.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008614:	4013      	ands	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800861a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800861c:	4293      	cmp	r3, r2
 800861e:	d119      	bne.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	3b01      	subs	r3, #1
 800862e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d10f      	bne.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008640:	429a      	cmp	r2, r3
 8008642:	d107      	bne.n	8008654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008650:	429a      	cmp	r2, r3
 8008652:	d001      	beq.n	8008658 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40023800 	.word	0x40023800

08008668 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e022      	b.n	80086c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7f9 ffcb 	bl	8002628 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2203      	movs	r2, #3
 8008696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f814 	bl	80086c8 <HAL_SD_InitCard>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e00a      	b.n	80086c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b08e      	sub	sp, #56	; 0x38
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80086e4:	2376      	movs	r3, #118	; 0x76
 80086e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681d      	ldr	r5, [r3, #0]
 80086ec:	466c      	mov	r4, sp
 80086ee:	f107 0314 	add.w	r3, r7, #20
 80086f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086fa:	f107 0308 	add.w	r3, r7, #8
 80086fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008700:	4628      	mov	r0, r5
 8008702:	f002 fc5f 	bl	800afc4 <SDIO_Init>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800870c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e04f      	b.n	80087b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008718:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <HAL_SD_InitCard+0xf8>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f002 fc97 	bl	800b056 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <HAL_SD_InitCard+0xf8>)
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800872e:	2002      	movs	r0, #2
 8008730:	f7fb fad4 	bl	8003cdc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fab9 	bl	8009cac <SD_PowerON>
 800873a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e02e      	b.n	80087b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 f9d8 	bl	8009b10 <SD_InitCard>
 8008760:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e01b      	b.n	80087b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008788:	4618      	mov	r0, r3
 800878a:	f002 fcf6 	bl	800b17a <SDMMC_CmdBlockLength>
 800878e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00f      	beq.n	80087b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_SD_InitCard+0xfc>)
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3728      	adds	r7, #40	; 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bdb0      	pop	{r4, r5, r7, pc}
 80087c0:	422580a0 	.word	0x422580a0
 80087c4:	004005ff 	.word	0x004005ff

080087c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b092      	sub	sp, #72	; 0x48
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087d6:	f7fb fa75 	bl	8003cc4 <HAL_GetTick>
 80087da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e1bd      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	f040 81b0 	bne.w	8008b68 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800880e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	441a      	add	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008818:	429a      	cmp	r2, r3
 800881a:	d907      	bls.n	800882c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e1a4      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2203      	movs	r2, #3
 8008830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	2b01      	cmp	r3, #1
 8008842:	d002      	beq.n	800884a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	025b      	lsls	r3, r3, #9
 8008848:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800884a:	f04f 33ff 	mov.w	r3, #4294967295
 800884e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	025b      	lsls	r3, r3, #9
 8008854:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008856:	2390      	movs	r3, #144	; 0x90
 8008858:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800885a:	2302      	movs	r3, #2
 800885c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008862:	2301      	movs	r3, #1
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f107 0214 	add.w	r2, r7, #20
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fc56 	bl	800b122 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d90a      	bls.n	8008892 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2202      	movs	r2, #2
 8008880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008888:	4618      	mov	r0, r3
 800888a:	f002 fcba 	bl	800b202 <SDMMC_CmdReadMultiBlock>
 800888e:	6478      	str	r0, [r7, #68]	; 0x44
 8008890:	e009      	b.n	80088a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 fc8d 	bl	800b1be <SDMMC_CmdReadSingleBlock>
 80088a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d012      	beq.n	80088d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a7a      	ldr	r2, [pc, #488]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ba:	431a      	orrs	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e151      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80088d6:	e061      	b.n	800899c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d03c      	beq.n	8008960 <HAL_SD_ReadBlocks+0x198>
 80088e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d039      	beq.n	8008960 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	643b      	str	r3, [r7, #64]	; 0x40
 80088f0:	e033      	b.n	800895a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f002 fb8f 	bl	800b01a <SDIO_ReadFIFO>
 80088fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	3301      	adds	r3, #1
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	3b01      	subs	r3, #1
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	0a1b      	lsrs	r3, r3, #8
 8008916:	b2da      	uxtb	r2, r3
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	3301      	adds	r3, #1
 8008920:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008924:	3b01      	subs	r3, #1
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	b2da      	uxtb	r2, r3
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	3301      	adds	r3, #1
 8008936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	3b01      	subs	r3, #1
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	0e1b      	lsrs	r3, r3, #24
 8008942:	b2da      	uxtb	r2, r3
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894a:	3301      	adds	r3, #1
 800894c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008950:	3b01      	subs	r3, #1
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008956:	3301      	adds	r3, #1
 8008958:	643b      	str	r3, [r7, #64]	; 0x40
 800895a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895c:	2b07      	cmp	r3, #7
 800895e:	d9c8      	bls.n	80088f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008960:	f7fb f9b0 	bl	8003cc4 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800896c:	429a      	cmp	r2, r3
 800896e:	d902      	bls.n	8008976 <HAL_SD_ReadBlocks+0x1ae>
 8008970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008972:	2b00      	cmp	r3, #0
 8008974:	d112      	bne.n	800899c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a48      	ldr	r2, [pc, #288]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e0ec      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d096      	beq.n	80088d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d022      	beq.n	80089fe <HAL_SD_ReadBlocks+0x236>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d91f      	bls.n	80089fe <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d01b      	beq.n	80089fe <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 fc80 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 80089d0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80089d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a2f      	ldr	r2, [pc, #188]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 80089de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e6:	431a      	orrs	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e0bb      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	f043 0208 	orr.w	r2, r3, #8
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0a1      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d012      	beq.n	8008a66 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	f043 0202 	orr.w	r2, r3, #2
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e087      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d064      	beq.n	8008b3e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <HAL_SD_ReadBlocks+0x2d4>)
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	f043 0220 	orr.w	r2, r3, #32
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e06d      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
 8008a9a:	bf00      	nop
 8008a9c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f002 fab8 	bl	800b01a <SDIO_ReadFIFO>
 8008aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abc:	3b01      	subs	r3, #1
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008acc:	3301      	adds	r3, #1
 8008ace:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	0c1b      	lsrs	r3, r3, #16
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	3301      	adds	r3, #1
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afe:	3b01      	subs	r3, #1
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008b02:	f7fb f8df 	bl	8003cc4 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d902      	bls.n	8008b18 <HAL_SD_ReadBlocks+0x350>
 8008b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d112      	bne.n	8008b3e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <HAL_SD_ReadBlocks+0x3b8>)
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e01b      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_SD_ReadBlocks+0x38a>
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1a6      	bne.n	8008aa0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e006      	b.n	8008b76 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3748      	adds	r7, #72	; 0x48
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	004005ff 	.word	0x004005ff

08008b84 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b092      	sub	sp, #72	; 0x48
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b92:	f7fb f897 	bl	8003cc4 <HAL_GetTick>
 8008b96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d107      	bne.n	8008bb6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e165      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	f040 8158 	bne.w	8008e74 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	441a      	add	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d907      	bls.n	8008be8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e14c      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d002      	beq.n	8008c06 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	025b      	lsls	r3, r3, #9
 8008c04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	025b      	lsls	r3, r3, #9
 8008c10:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008c12:	2390      	movs	r3, #144	; 0x90
 8008c14:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008c16:	2300      	movs	r3, #0
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f107 0218 	add.w	r2, r7, #24
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 fa78 	bl	800b122 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d90a      	bls.n	8008c4e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c44:	4618      	mov	r0, r3
 8008c46:	f002 fb20 	bl	800b28a <SDMMC_CmdWriteMultiBlock>
 8008c4a:	6478      	str	r0, [r7, #68]	; 0x44
 8008c4c:	e009      	b.n	8008c62 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2210      	movs	r2, #16
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 faf3 	bl	800b246 <SDMMC_CmdWriteSingleBlock>
 8008c60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d012      	beq.n	8008c8e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a87      	ldr	r2, [pc, #540]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c76:	431a      	orrs	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e0f9      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008c92:	e065      	b.n	8008d60 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d040      	beq.n	8008d24 <HAL_SD_WriteBlocks+0x1a0>
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d03d      	beq.n	8008d24 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	643b      	str	r3, [r7, #64]	; 0x40
 8008cac:	e037      	b.n	8008d1e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	021a      	lsls	r2, r3, #8
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cce:	3301      	adds	r3, #1
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	041a      	lsls	r2, r3, #16
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	3b01      	subs	r3, #1
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	061a      	lsls	r2, r3, #24
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfe:	3301      	adds	r3, #1
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	3b01      	subs	r3, #1
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f107 0214 	add.w	r2, r7, #20
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 f98e 	bl	800b034 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d20:	2b07      	cmp	r3, #7
 8008d22:	d9c4      	bls.n	8008cae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d24:	f7fa ffce 	bl	8003cc4 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d902      	bls.n	8008d3a <HAL_SD_WriteBlocks+0x1b6>
 8008d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d112      	bne.n	8008d60 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a53      	ldr	r2, [pc, #332]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e090      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d092      	beq.n	8008c94 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d022      	beq.n	8008dc2 <HAL_SD_WriteBlocks+0x23e>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d91f      	bls.n	8008dc2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d01b      	beq.n	8008dc2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f002 fa9e 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 8008d94:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d012      	beq.n	8008dc2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a3a      	ldr	r2, [pc, #232]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008daa:	431a      	orrs	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e05f      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d012      	beq.n	8008df6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a2d      	ldr	r2, [pc, #180]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	f043 0208 	orr.w	r2, r3, #8
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e045      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d012      	beq.n	8008e2a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a20      	ldr	r2, [pc, #128]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	f043 0202 	orr.w	r2, r3, #2
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e02b      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d012      	beq.n	8008e5e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <HAL_SD_WriteBlocks+0x308>)
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	f043 0210 	orr.w	r2, r3, #16
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e011      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e006      	b.n	8008e82 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
  }
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3748      	adds	r7, #72	; 0x48
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	004005ff 	.word	0x004005ff

08008e90 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	; 0x30
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0be      	b.n	8009036 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	f040 80b7 	bne.w	8009034 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	441a      	add	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d907      	bls.n	8008eea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e0a5      	b.n	8009036 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	4a4c      	ldr	r2, [pc, #304]	; (8009040 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8008f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	4a4b      	ldr	r2, [pc, #300]	; (8009044 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008f18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	2200      	movs	r2, #0
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2200      	movs	r2, #0
 8008f28:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3380      	adds	r3, #128	; 0x80
 8008f50:	4619      	mov	r1, r3
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	025b      	lsls	r3, r3, #9
 8008f58:	089b      	lsrs	r3, r3, #2
 8008f5a:	f7fb fcdb 	bl	8004914 <HAL_DMA_Start_IT>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d017      	beq.n	8008f94 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f72:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a33      	ldr	r2, [pc, #204]	; (8009048 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e050      	b.n	8009036 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f94:	4b2d      	ldr	r3, [pc, #180]	; (800904c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d002      	beq.n	8008fa8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	025b      	lsls	r3, r3, #9
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	025b      	lsls	r3, r3, #9
 8008fb2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008fb4:	2390      	movs	r3, #144	; 0x90
 8008fb6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f107 0210 	add.w	r2, r7, #16
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 f8a7 	bl	800b122 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d90a      	bls.n	8008ff0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2282      	movs	r2, #130	; 0x82
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 f90b 	bl	800b202 <SDMMC_CmdReadMultiBlock>
 8008fec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fee:	e009      	b.n	8009004 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2281      	movs	r2, #129	; 0x81
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 f8de 	bl	800b1be <SDMMC_CmdReadSingleBlock>
 8009002:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d012      	beq.n	8009030 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a0e      	ldr	r2, [pc, #56]	; (8009048 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009010:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	431a      	orrs	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e002      	b.n	8009036 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	e000      	b.n	8009036 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009034:	2302      	movs	r3, #2
  }
}
 8009036:	4618      	mov	r0, r3
 8009038:	3730      	adds	r7, #48	; 0x30
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	0800991f 	.word	0x0800991f
 8009044:	08009991 	.word	0x08009991
 8009048:	004005ff 	.word	0x004005ff
 800904c:	4225858c 	.word	0x4225858c

08009050 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	; 0x30
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d107      	bne.n	8009078 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0c1      	b.n	80091fc <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b01      	cmp	r3, #1
 8009082:	f040 80ba 	bne.w	80091fa <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800908c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009096:	429a      	cmp	r2, r3
 8009098:	d907      	bls.n	80090aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e0a8      	b.n	80091fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2203      	movs	r2, #3
 80090ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 021a 	orr.w	r2, r2, #26
 80090c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	4a4d      	ldr	r2, [pc, #308]	; (8009204 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 80090d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	4a4c      	ldr	r2, [pc, #304]	; (8009208 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80090d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090de:	2200      	movs	r2, #0
 80090e0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d002      	beq.n	80090f0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	025b      	lsls	r3, r3, #9
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d90a      	bls.n	800910c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	22a0      	movs	r2, #160	; 0xa0
 80090fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009102:	4618      	mov	r0, r3
 8009104:	f002 f8c1 	bl	800b28a <SDMMC_CmdWriteMultiBlock>
 8009108:	62f8      	str	r0, [r7, #44]	; 0x2c
 800910a:	e009      	b.n	8009120 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2290      	movs	r2, #144	; 0x90
 8009110:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009118:	4618      	mov	r0, r3
 800911a:	f002 f894 	bl	800b246 <SDMMC_CmdWriteSingleBlock>
 800911e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d012      	beq.n	800914c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a38      	ldr	r2, [pc, #224]	; (800920c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	431a      	orrs	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e057      	b.n	80091fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800914c:	4b30      	ldr	r3, [pc, #192]	; (8009210 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009156:	2240      	movs	r2, #64	; 0x40
 8009158:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3380      	adds	r3, #128	; 0x80
 8009182:	461a      	mov	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	025b      	lsls	r3, r3, #9
 8009188:	089b      	lsrs	r3, r3, #2
 800918a:	f7fb fbc3 	bl	8004914 <HAL_DMA_Start_IT>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01a      	beq.n	80091ca <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 021a 	bic.w	r2, r2, #26
 80091a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a18      	ldr	r2, [pc, #96]	; (800920c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e018      	b.n	80091fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295
 80091ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	025b      	lsls	r3, r3, #9
 80091d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80091d6:	2390      	movs	r3, #144	; 0x90
 80091d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091de:	2300      	movs	r3, #0
 80091e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80091e2:	2301      	movs	r3, #1
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f107 0210 	add.w	r2, r7, #16
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 ff96 	bl	800b122 <SDIO_ConfigData>

      return HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e000      	b.n	80091fc <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3730      	adds	r7, #48	; 0x30
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	080098f5 	.word	0x080098f5
 8009208:	08009991 	.word	0x08009991
 800920c:	004005ff 	.word	0x004005ff
 8009210:	4225858c 	.word	0x4225858c

08009214 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <HAL_SD_IRQHandler+0x2e>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fdec 	bl	8009e18 <SD_Read_IT>
 8009240:	e155      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 808f 	beq.w	8009370 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6812      	ldr	r2, [r2, #0]
 8009266:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800926a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800926e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0201 	bic.w	r2, r2, #1
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d039      	beq.n	80092fe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <HAL_SD_IRQHandler+0x8a>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d011      	beq.n	80092c2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f814 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 80092a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d008      	beq.n	80092c2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f91f 	bl	8009500 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <HAL_SD_IRQHandler+0xda>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f004 f87a 	bl	800d3e8 <HAL_SD_RxCpltCallback>
 80092f4:	e0fb      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f004 f86c 	bl	800d3d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80092fc:	e0f7      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80f2 	beq.w	80094ee <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f001 ffd9 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 800931e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f8e4 	bl	8009500 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	f040 80d5 	bne.w	80094ee <HAL_SD_IRQHandler+0x2da>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 80cf 	bne.w	80094ee <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0208 	bic.w	r2, r2, #8
 800935e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f004 f833 	bl	800d3d4 <HAL_SD_TxCpltCallback>
}
 800936e:	e0be      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d008      	beq.n	8009390 <HAL_SD_IRQHandler+0x17c>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fd96 	bl	8009eba <SD_Write_IT>
 800938e:	e0ae      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009396:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80a7 	beq.w	80094ee <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	f043 0202 	orr.w	r2, r3, #2
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	f043 0208 	orr.w	r2, r3, #8
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	f043 0220 	orr.w	r2, r3, #32
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	f043 0210 	orr.w	r2, r3, #16
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009410:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009420:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f001 ff52 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 800942c:	4602      	mov	r2, r0
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f855 	bl	8009500 <HAL_SD_ErrorCallback>
}
 8009456:	e04a      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d045      	beq.n	80094ee <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <HAL_SD_IRQHandler+0x262>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d011      	beq.n	800949a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	4a1f      	ldr	r2, [pc, #124]	; (80094f8 <HAL_SD_IRQHandler+0x2e4>)
 800947c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	4618      	mov	r0, r3
 8009484:	f7fb fb0e 	bl	8004aa4 <HAL_DMA_Abort_IT>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d02f      	beq.n	80094ee <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009492:	4618      	mov	r0, r3
 8009494:	f000 face 	bl	8009a34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009498:	e029      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <HAL_SD_IRQHandler+0x29a>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d011      	beq.n	80094d2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	4a12      	ldr	r2, [pc, #72]	; (80094fc <HAL_SD_IRQHandler+0x2e8>)
 80094b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fb faf2 	bl	8004aa4 <HAL_DMA_Abort_IT>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d013      	beq.n	80094ee <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 fae9 	bl	8009aa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80094d0:	e00d      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f003 ff6a 	bl	800d3c0 <HAL_SD_AbortCallback>
}
 80094ec:	e7ff      	b.n	80094ee <HAL_SD_IRQHandler+0x2da>
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	08009a35 	.word	0x08009a35
 80094fc:	08009aa3 	.word	0x08009aa3

08009500 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009522:	0f9b      	lsrs	r3, r3, #30
 8009524:	b2da      	uxtb	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800952e:	0e9b      	lsrs	r3, r3, #26
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	b2da      	uxtb	r2, r3
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009540:	0e1b      	lsrs	r3, r3, #24
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	b2da      	uxtb	r2, r3
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	b2da      	uxtb	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800956a:	b2da      	uxtb	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009574:	0d1b      	lsrs	r3, r3, #20
 8009576:	b29a      	uxth	r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009580:	0c1b      	lsrs	r3, r3, #16
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	b2da      	uxtb	r2, r3
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009592:	0bdb      	lsrs	r3, r3, #15
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095a4:	0b9b      	lsrs	r3, r3, #14
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b6:	0b5b      	lsrs	r3, r3, #13
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c8:	0b1b      	lsrs	r3, r3, #12
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2200      	movs	r2, #0
 80095da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d163      	bne.n	80096ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e8:	009a      	lsls	r2, r3, #2
 80095ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095ee:	4013      	ands	r3, r2
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095f4:	0f92      	lsrs	r2, r2, #30
 80095f6:	431a      	orrs	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009600:	0edb      	lsrs	r3, r3, #27
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	b2da      	uxtb	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009612:	0e1b      	lsrs	r3, r3, #24
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009624:	0d5b      	lsrs	r3, r3, #21
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	b2da      	uxtb	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	0c9b      	lsrs	r3, r3, #18
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	b2da      	uxtb	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009648:	0bdb      	lsrs	r3, r3, #15
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 0307 	and.w	r3, r3, #7
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	7e1b      	ldrb	r3, [r3, #24]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	3302      	adds	r3, #2
 800966c:	2201      	movs	r2, #1
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009676:	fb03 f202 	mul.w	r2, r3, r2
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	7a1b      	ldrb	r3, [r3, #8]
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	2201      	movs	r2, #1
 800968a:	409a      	lsls	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009698:	0a52      	lsrs	r2, r2, #9
 800969a:	fb03 f202 	mul.w	r2, r3, r2
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096a8:	661a      	str	r2, [r3, #96]	; 0x60
 80096aa:	e031      	b.n	8009710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11d      	bne.n	80096f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	431a      	orrs	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	3301      	adds	r3, #1
 80096d0:	029a      	lsls	r2, r3, #10
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	661a      	str	r2, [r3, #96]	; 0x60
 80096ee:	e00f      	b.n	8009710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a58      	ldr	r2, [pc, #352]	; (8009858 <HAL_SD_GetCardCSD+0x344>)
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e09d      	b.n	800984c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	0b9b      	lsrs	r3, r3, #14
 8009716:	b2db      	uxtb	r3, r3
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	b2da      	uxtb	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	09db      	lsrs	r3, r3, #7
 8009728:	b2db      	uxtb	r3, r3
 800972a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972e:	b2da      	uxtb	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973e:	b2da      	uxtb	r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	0fdb      	lsrs	r3, r3, #31
 800974a:	b2da      	uxtb	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009754:	0f5b      	lsrs	r3, r3, #29
 8009756:	b2db      	uxtb	r3, r3
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	b2da      	uxtb	r2, r3
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009766:	0e9b      	lsrs	r3, r3, #26
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	b2da      	uxtb	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009778:	0d9b      	lsrs	r3, r3, #22
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 030f 	and.w	r3, r3, #15
 8009780:	b2da      	uxtb	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978a:	0d5b      	lsrs	r3, r3, #21
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	b2da      	uxtb	r2, r3
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a6:	0c1b      	lsrs	r3, r3, #16
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	0bdb      	lsrs	r3, r3, #15
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ce:	0b9b      	lsrs	r3, r3, #14
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	0b5b      	lsrs	r3, r3, #13
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	0b1b      	lsrs	r3, r3, #12
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	0a9b      	lsrs	r3, r3, #10
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	b2da      	uxtb	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	0a1b      	lsrs	r3, r3, #8
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	b2da      	uxtb	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983a:	b2da      	uxtb	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	004005ff 	.word	0x004005ff

0800985c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098c0:	f107 030c 	add.w	r3, r7, #12
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa7e 	bl	8009dc8 <SD_SendStatus>
 80098cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0a5b      	lsrs	r3, r3, #9
 80098e4:	f003 030f 	and.w	r3, r3, #15
 80098e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80098ea:	693b      	ldr	r3, [r7, #16]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009910:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	2b82      	cmp	r3, #130	; 0x82
 8009932:	d111      	bne.n	8009958 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fcc9 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 800993e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d008      	beq.n	8009958 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	431a      	orrs	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fdd4 	bl	8009500 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0208 	bic.w	r2, r2, #8
 8009966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009970:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f003 fd31 	bl	800d3e8 <HAL_SD_RxCpltCallback>
#endif
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7fb fa2c 	bl	8004dfc <HAL_DMA_GetError>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d03e      	beq.n	8009a28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d002      	beq.n	80099c6 <SD_DMAError+0x36>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d12d      	bne.n	8009a22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a19      	ldr	r2, [pc, #100]	; (8009a30 <SD_DMAError+0xa0>)
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80099dc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80099ea:	6978      	ldr	r0, [r7, #20]
 80099ec:	f7ff ff62 	bl	80098b4 <HAL_SD_GetCardState>
 80099f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b06      	cmp	r3, #6
 80099f6:	d002      	beq.n	80099fe <SD_DMAError+0x6e>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b05      	cmp	r3, #5
 80099fc:	d10a      	bne.n	8009a14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fc64 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009a22:	6978      	ldr	r0, [r7, #20]
 8009a24:	f7ff fd6c 	bl	8009500 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009a28:	bf00      	nop
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	004005ff 	.word	0x004005ff

08009a34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff ff31 	bl	80098b4 <HAL_SD_GetCardState>
 8009a52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b06      	cmp	r3, #6
 8009a66:	d002      	beq.n	8009a6e <SD_DMATxAbort+0x3a>
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b05      	cmp	r3, #5
 8009a6c:	d10a      	bne.n	8009a84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fc2c 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f003 fc97 	bl	800d3c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a92:	e002      	b.n	8009a9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff fd33 	bl	8009500 <HAL_SD_ErrorCallback>
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f7ff fefa 	bl	80098b4 <HAL_SD_GetCardState>
 8009ac0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2b06      	cmp	r3, #6
 8009ad4:	d002      	beq.n	8009adc <SD_DMARxAbort+0x3a>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b05      	cmp	r3, #5
 8009ada:	d10a      	bne.n	8009af2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f001 fbf5 	bl	800b2d0 <SDMMC_CmdStopTransfer>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	431a      	orrs	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d103      	bne.n	8009b02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f003 fc60 	bl	800d3c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b00:	e002      	b.n	8009b08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff fcfc 	bl	8009500 <HAL_SD_ErrorCallback>
}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b10:	b5b0      	push	{r4, r5, r7, lr}
 8009b12:	b094      	sub	sp, #80	; 0x50
 8009b14:	af04      	add	r7, sp, #16
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 faa6 	bl	800b072 <SDIO_GetPowerState>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b30:	e0b8      	b.n	8009ca4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d02f      	beq.n	8009b9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fc8d 	bl	800b45e <SDMMC_CmdSendCID>
 8009b44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	e0a9      	b.n	8009ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 fad0 	bl	800b0fc <SDIO_GetResponse>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2104      	movs	r1, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 fac7 	bl	800b0fc <SDIO_GetResponse>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2108      	movs	r1, #8
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fabe 	bl	800b0fc <SDIO_GetResponse>
 8009b80:	4602      	mov	r2, r0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	210c      	movs	r1, #12
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 fab5 	bl	800b0fc <SDIO_GetResponse>
 8009b92:	4602      	mov	r2, r0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d00d      	beq.n	8009bbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f107 020e 	add.w	r2, r7, #14
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fc93 	bl	800b4d8 <SDMMC_CmdSetRelAdd>
 8009bb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <SD_InitCard+0xae>
    {
      return errorstate;
 8009bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bbc:	e072      	b.n	8009ca4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d036      	beq.n	8009c34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bc6:	89fb      	ldrh	r3, [r7, #14]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd6:	041b      	lsls	r3, r3, #16
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f001 fc5d 	bl	800b49a <SDMMC_CmdSendCSD>
 8009be0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <SD_InitCard+0xdc>
    {
      return errorstate;
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	e05b      	b.n	8009ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fa82 	bl	800b0fc <SDIO_GetResponse>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2104      	movs	r1, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fa79 	bl	800b0fc <SDIO_GetResponse>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2108      	movs	r1, #8
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fa70 	bl	800b0fc <SDIO_GetResponse>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	210c      	movs	r1, #12
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 fa67 	bl	800b0fc <SDIO_GetResponse>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2104      	movs	r1, #4
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 fa5e 	bl	800b0fc <SDIO_GetResponse>
 8009c40:	4603      	mov	r3, r0
 8009c42:	0d1a      	lsrs	r2, r3, #20
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c48:	f107 0310 	add.w	r3, r7, #16
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fc60 	bl	8009514 <HAL_SD_GetCardCSD>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c5e:	e021      	b.n	8009ca4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	461c      	mov	r4, r3
 8009c6e:	4615      	mov	r5, r2
 8009c70:	4622      	mov	r2, r4
 8009c72:	462b      	mov	r3, r5
 8009c74:	4608      	mov	r0, r1
 8009c76:	f001 fb4d 	bl	800b314 <SDMMC_CmdSelDesel>
 8009c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <SD_InitCard+0x176>
  {
    return errorstate;
 8009c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c84:	e00e      	b.n	8009ca4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	466c      	mov	r4, sp
 8009c8e:	f103 0210 	add.w	r2, r3, #16
 8009c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c98:	3304      	adds	r3, #4
 8009c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f001 f991 	bl	800afc4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3740      	adds	r7, #64	; 0x40
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bdb0      	pop	{r4, r5, r7, pc}

08009cac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 fb48 	bl	800b35a <SDMMC_CmdGoIdleState>
 8009cca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	e072      	b.n	8009dbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fb5b 	bl	800b396 <SDMMC_CmdOperCond>
 8009ce0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00d      	beq.n	8009d04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fb31 	bl	800b35a <SDMMC_CmdGoIdleState>
 8009cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	e05b      	b.n	8009dbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d137      	bne.n	8009d82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 fb5b 	bl	800b3d4 <SDMMC_CmdAppCommand>
 8009d1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d02d      	beq.n	8009d82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d2a:	e047      	b.n	8009dbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fb4e 	bl	800b3d4 <SDMMC_CmdAppCommand>
 8009d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	e03b      	b.n	8009dbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	491e      	ldr	r1, [pc, #120]	; (8009dc4 <SD_PowerON+0x118>)
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fb64 	bl	800b418 <SDMMC_CmdAppOperCommand>
 8009d50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d5c:	e02e      	b.n	8009dbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2100      	movs	r1, #0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 f9c9 	bl	800b0fc <SDIO_GetResponse>
 8009d6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	0fdb      	lsrs	r3, r3, #31
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <SD_PowerON+0xcc>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <SD_PowerON+0xce>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]

    count++;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d802      	bhi.n	8009d92 <SD_PowerON+0xe6>
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0cc      	beq.n	8009d2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d902      	bls.n	8009da2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009da0:	e00c      	b.n	8009dbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	645a      	str	r2, [r3, #68]	; 0x44
 8009db2:	e002      	b.n	8009dba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	c1100000 	.word	0xc1100000

08009dc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009dd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ddc:	e018      	b.n	8009e10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f001 fb95 	bl	800b51a <SDMMC_CmdSendStatus>
 8009df0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	e009      	b.n	8009e10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f001 f97a 	bl	800b0fc <SDIO_GetResponse>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d03f      	beq.n	8009eb2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e32:	2300      	movs	r3, #0
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	e033      	b.n	8009ea0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f8ec 	bl	800b01a <SDIO_ReadFIFO>
 8009e42:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	0c1b      	lsrs	r3, r3, #16
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	0e1b      	lsrs	r3, r3, #24
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2b07      	cmp	r3, #7
 8009ea4:	d9c8      	bls.n	8009e38 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b086      	sub	sp, #24
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d043      	beq.n	8009f5c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e037      	b.n	8009f4a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	021a      	lsls	r2, r3, #8
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	041a      	lsls	r2, r3, #16
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	061a      	lsls	r2, r3, #24
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f107 0208 	add.w	r2, r7, #8
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f878 	bl	800b034 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	3301      	adds	r3, #1
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b07      	cmp	r3, #7
 8009f4e:	d9c4      	bls.n	8009eda <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e041      	b.n	8009ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7f9 fa90 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f000 fc42 	bl	800a82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b01      	cmp	r3, #1
 800a016:	d001      	beq.n	800a01c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e046      	b.n	800a0aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a23      	ldr	r2, [pc, #140]	; (800a0b8 <HAL_TIM_Base_Start+0xb4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d022      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a036:	d01d      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1f      	ldr	r2, [pc, #124]	; (800a0bc <HAL_TIM_Base_Start+0xb8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d018      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <HAL_TIM_Base_Start+0xbc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d013      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1c      	ldr	r2, [pc, #112]	; (800a0c4 <HAL_TIM_Base_Start+0xc0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00e      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1b      	ldr	r2, [pc, #108]	; (800a0c8 <HAL_TIM_Base_Start+0xc4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d009      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <HAL_TIM_Base_Start+0xc8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d004      	beq.n	800a074 <HAL_TIM_Base_Start+0x70>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a18      	ldr	r2, [pc, #96]	; (800a0d0 <HAL_TIM_Base_Start+0xcc>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d111      	bne.n	800a098 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b06      	cmp	r3, #6
 800a084:	d010      	beq.n	800a0a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0201 	orr.w	r2, r2, #1
 800a094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a096:	e007      	b.n	800a0a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0201 	orr.w	r2, r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40010400 	.word	0x40010400
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40001800 	.word	0x40001800

0800a0d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10f      	bne.n	800a10c <HAL_TIM_Base_Stop+0x38>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6a1a      	ldr	r2, [r3, #32]
 800a0f2:	f240 4344 	movw	r3, #1092	; 0x444
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d107      	bne.n	800a10c <HAL_TIM_Base_Stop+0x38>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0201 	bic.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b01      	cmp	r3, #1
 800a136:	d001      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e04e      	b.n	800a1da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2202      	movs	r2, #2
 800a140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a23      	ldr	r2, [pc, #140]	; (800a1e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d022      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a166:	d01d      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a1f      	ldr	r2, [pc, #124]	; (800a1ec <HAL_TIM_Base_Start_IT+0xc8>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d018      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a1e      	ldr	r2, [pc, #120]	; (800a1f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d013      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a1c      	ldr	r2, [pc, #112]	; (800a1f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00e      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a1b      	ldr	r2, [pc, #108]	; (800a1f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d009      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a19      	ldr	r2, [pc, #100]	; (800a1fc <HAL_TIM_Base_Start_IT+0xd8>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x80>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d111      	bne.n	800a1c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b06      	cmp	r3, #6
 800a1b4:	d010      	beq.n	800a1d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0201 	orr.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1c6:	e007      	b.n	800a1d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	40010000 	.word	0x40010000
 800a1ec:	40000400 	.word	0x40000400
 800a1f0:	40000800 	.word	0x40000800
 800a1f4:	40000c00 	.word	0x40000c00
 800a1f8:	40010400 	.word	0x40010400
 800a1fc:	40014000 	.word	0x40014000
 800a200:	40001800 	.word	0x40001800

0800a204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e041      	b.n	800a29a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f839 	bl	800a2a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f000 faf2 	bl	800a82c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d122      	bne.n	800a312 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d11b      	bne.n	800a312 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f06f 0202 	mvn.w	r2, #2
 800a2e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fa78 	bl	800a7ee <HAL_TIM_IC_CaptureCallback>
 800a2fe:	e005      	b.n	800a30c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa6a 	bl	800a7da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa7b 	bl	800a802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d122      	bne.n	800a366 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d11b      	bne.n	800a366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f06f 0204 	mvn.w	r2, #4
 800a336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa4e 	bl	800a7ee <HAL_TIM_IC_CaptureCallback>
 800a352:	e005      	b.n	800a360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fa40 	bl	800a7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa51 	bl	800a802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b08      	cmp	r3, #8
 800a372:	d122      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d11b      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f06f 0208 	mvn.w	r2, #8
 800a38a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2204      	movs	r2, #4
 800a390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fa24 	bl	800a7ee <HAL_TIM_IC_CaptureCallback>
 800a3a6:	e005      	b.n	800a3b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fa16 	bl	800a7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa27 	bl	800a802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0310 	and.w	r3, r3, #16
 800a3c4:	2b10      	cmp	r3, #16
 800a3c6:	d122      	bne.n	800a40e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d11b      	bne.n	800a40e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f06f 0210 	mvn.w	r2, #16
 800a3de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f9fa 	bl	800a7ee <HAL_TIM_IC_CaptureCallback>
 800a3fa:	e005      	b.n	800a408 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f9ec 	bl	800a7da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f9fd 	bl	800a802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10e      	bne.n	800a43a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b01      	cmp	r3, #1
 800a428:	d107      	bne.n	800a43a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f06f 0201 	mvn.w	r2, #1
 800a432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7f7 ffbf 	bl	80023b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a444:	2b80      	cmp	r3, #128	; 0x80
 800a446:	d10e      	bne.n	800a466 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	d107      	bne.n	800a466 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fda5 	bl	800afb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a470:	2b40      	cmp	r3, #64	; 0x40
 800a472:	d10e      	bne.n	800a492 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d107      	bne.n	800a492 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a48a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f9c2 	bl	800a816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	f003 0320 	and.w	r3, r3, #32
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d10e      	bne.n	800a4be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d107      	bne.n	800a4be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f06f 0220 	mvn.w	r2, #32
 800a4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fd6f 	bl	800af9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e0ae      	b.n	800a644 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b0c      	cmp	r3, #12
 800a4f2:	f200 809f 	bhi.w	800a634 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a531 	.word	0x0800a531
 800a500:	0800a635 	.word	0x0800a635
 800a504:	0800a635 	.word	0x0800a635
 800a508:	0800a635 	.word	0x0800a635
 800a50c:	0800a571 	.word	0x0800a571
 800a510:	0800a635 	.word	0x0800a635
 800a514:	0800a635 	.word	0x0800a635
 800a518:	0800a635 	.word	0x0800a635
 800a51c:	0800a5b3 	.word	0x0800a5b3
 800a520:	0800a635 	.word	0x0800a635
 800a524:	0800a635 	.word	0x0800a635
 800a528:	0800a635 	.word	0x0800a635
 800a52c:	0800a5f3 	.word	0x0800a5f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fa18 	bl	800a96c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0208 	orr.w	r2, r2, #8
 800a54a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0204 	bic.w	r2, r2, #4
 800a55a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6999      	ldr	r1, [r3, #24]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	691a      	ldr	r2, [r3, #16]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	619a      	str	r2, [r3, #24]
      break;
 800a56e:	e064      	b.n	800a63a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fa68 	bl	800aa4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	699a      	ldr	r2, [r3, #24]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6999      	ldr	r1, [r3, #24]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	021a      	lsls	r2, r3, #8
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	619a      	str	r2, [r3, #24]
      break;
 800a5b0:	e043      	b.n	800a63a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fabd 	bl	800ab38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69da      	ldr	r2, [r3, #28]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0208 	orr.w	r2, r2, #8
 800a5cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0204 	bic.w	r2, r2, #4
 800a5dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69d9      	ldr	r1, [r3, #28]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	691a      	ldr	r2, [r3, #16]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	61da      	str	r2, [r3, #28]
      break;
 800a5f0:	e023      	b.n	800a63a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fb11 	bl	800ac20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69da      	ldr	r2, [r3, #28]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69d9      	ldr	r1, [r3, #28]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	021a      	lsls	r2, r3, #8
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	430a      	orrs	r2, r1
 800a630:	61da      	str	r2, [r3, #28]
      break;
 800a632:	e002      	b.n	800a63a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	75fb      	strb	r3, [r7, #23]
      break;
 800a638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a642:	7dfb      	ldrb	r3, [r7, #23]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_TIM_ConfigClockSource+0x1c>
 800a664:	2302      	movs	r3, #2
 800a666:	e0b4      	b.n	800a7d2 <HAL_TIM_ConfigClockSource+0x186>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a68e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a0:	d03e      	beq.n	800a720 <HAL_TIM_ConfigClockSource+0xd4>
 800a6a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a6:	f200 8087 	bhi.w	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ae:	f000 8086 	beq.w	800a7be <HAL_TIM_ConfigClockSource+0x172>
 800a6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b6:	d87f      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6b8:	2b70      	cmp	r3, #112	; 0x70
 800a6ba:	d01a      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0xa6>
 800a6bc:	2b70      	cmp	r3, #112	; 0x70
 800a6be:	d87b      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c0:	2b60      	cmp	r3, #96	; 0x60
 800a6c2:	d050      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0x11a>
 800a6c4:	2b60      	cmp	r3, #96	; 0x60
 800a6c6:	d877      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6c8:	2b50      	cmp	r3, #80	; 0x50
 800a6ca:	d03c      	beq.n	800a746 <HAL_TIM_ConfigClockSource+0xfa>
 800a6cc:	2b50      	cmp	r3, #80	; 0x50
 800a6ce:	d873      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d0:	2b40      	cmp	r3, #64	; 0x40
 800a6d2:	d058      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0x13a>
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d86f      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d8:	2b30      	cmp	r3, #48	; 0x30
 800a6da:	d064      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6dc:	2b30      	cmp	r3, #48	; 0x30
 800a6de:	d86b      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d060      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d867      	bhi.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d05c      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d05a      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6f0:	e062      	b.n	800a7b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6899      	ldr	r1, [r3, #8]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f000 fb5d 	bl	800adc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a714:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	609a      	str	r2, [r3, #8]
      break;
 800a71e:	e04f      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	6899      	ldr	r1, [r3, #8]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f000 fb46 	bl	800adc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a742:	609a      	str	r2, [r3, #8]
      break;
 800a744:	e03c      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6859      	ldr	r1, [r3, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	461a      	mov	r2, r3
 800a754:	f000 faba 	bl	800accc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2150      	movs	r1, #80	; 0x50
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fb13 	bl	800ad8a <TIM_ITRx_SetConfig>
      break;
 800a764:	e02c      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6859      	ldr	r1, [r3, #4]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	461a      	mov	r2, r3
 800a774:	f000 fad9 	bl	800ad2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2160      	movs	r1, #96	; 0x60
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb03 	bl	800ad8a <TIM_ITRx_SetConfig>
      break;
 800a784:	e01c      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	461a      	mov	r2, r3
 800a794:	f000 fa9a 	bl	800accc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2140      	movs	r1, #64	; 0x40
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 faf3 	bl	800ad8a <TIM_ITRx_SetConfig>
      break;
 800a7a4:	e00c      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f000 faea 	bl	800ad8a <TIM_ITRx_SetConfig>
      break;
 800a7b6:	e003      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a7bc:	e000      	b.n	800a7c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a40      	ldr	r2, [pc, #256]	; (800a940 <TIM_Base_SetConfig+0x114>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d013      	beq.n	800a86c <TIM_Base_SetConfig+0x40>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84a:	d00f      	beq.n	800a86c <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3d      	ldr	r2, [pc, #244]	; (800a944 <TIM_Base_SetConfig+0x118>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00b      	beq.n	800a86c <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a3c      	ldr	r2, [pc, #240]	; (800a948 <TIM_Base_SetConfig+0x11c>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d007      	beq.n	800a86c <TIM_Base_SetConfig+0x40>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a3b      	ldr	r2, [pc, #236]	; (800a94c <TIM_Base_SetConfig+0x120>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d003      	beq.n	800a86c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a3a      	ldr	r2, [pc, #232]	; (800a950 <TIM_Base_SetConfig+0x124>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d108      	bne.n	800a87e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2f      	ldr	r2, [pc, #188]	; (800a940 <TIM_Base_SetConfig+0x114>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d02b      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a88c:	d027      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a2c      	ldr	r2, [pc, #176]	; (800a944 <TIM_Base_SetConfig+0x118>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d023      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a2b      	ldr	r2, [pc, #172]	; (800a948 <TIM_Base_SetConfig+0x11c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d01f      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a2a      	ldr	r2, [pc, #168]	; (800a94c <TIM_Base_SetConfig+0x120>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d01b      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a29      	ldr	r2, [pc, #164]	; (800a950 <TIM_Base_SetConfig+0x124>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d017      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a28      	ldr	r2, [pc, #160]	; (800a954 <TIM_Base_SetConfig+0x128>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d013      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a27      	ldr	r2, [pc, #156]	; (800a958 <TIM_Base_SetConfig+0x12c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d00f      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a26      	ldr	r2, [pc, #152]	; (800a95c <TIM_Base_SetConfig+0x130>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00b      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a25      	ldr	r2, [pc, #148]	; (800a960 <TIM_Base_SetConfig+0x134>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d007      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a24      	ldr	r2, [pc, #144]	; (800a964 <TIM_Base_SetConfig+0x138>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d003      	beq.n	800a8de <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a23      	ldr	r2, [pc, #140]	; (800a968 <TIM_Base_SetConfig+0x13c>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d108      	bne.n	800a8f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a0a      	ldr	r2, [pc, #40]	; (800a940 <TIM_Base_SetConfig+0x114>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d003      	beq.n	800a924 <TIM_Base_SetConfig+0xf8>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a0c      	ldr	r2, [pc, #48]	; (800a950 <TIM_Base_SetConfig+0x124>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d103      	bne.n	800a92c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	691a      	ldr	r2, [r3, #16]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	615a      	str	r2, [r3, #20]
}
 800a932:	bf00      	nop
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	40010000 	.word	0x40010000
 800a944:	40000400 	.word	0x40000400
 800a948:	40000800 	.word	0x40000800
 800a94c:	40000c00 	.word	0x40000c00
 800a950:	40010400 	.word	0x40010400
 800a954:	40014000 	.word	0x40014000
 800a958:	40014400 	.word	0x40014400
 800a95c:	40014800 	.word	0x40014800
 800a960:	40001800 	.word	0x40001800
 800a964:	40001c00 	.word	0x40001c00
 800a968:	40002000 	.word	0x40002000

0800a96c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	f023 0201 	bic.w	r2, r3, #1
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f023 0302 	bic.w	r3, r3, #2
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a20      	ldr	r2, [pc, #128]	; (800aa44 <TIM_OC1_SetConfig+0xd8>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d003      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x64>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a1f      	ldr	r2, [pc, #124]	; (800aa48 <TIM_OC1_SetConfig+0xdc>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10c      	bne.n	800a9ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0308 	bic.w	r3, r3, #8
 800a9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f023 0304 	bic.w	r3, r3, #4
 800a9e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a15      	ldr	r2, [pc, #84]	; (800aa44 <TIM_OC1_SetConfig+0xd8>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d003      	beq.n	800a9fa <TIM_OC1_SetConfig+0x8e>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a14      	ldr	r2, [pc, #80]	; (800aa48 <TIM_OC1_SetConfig+0xdc>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d111      	bne.n	800aa1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	621a      	str	r2, [r3, #32]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	40010000 	.word	0x40010000
 800aa48:	40010400 	.word	0x40010400

0800aa4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f023 0210 	bic.w	r2, r3, #16
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	f023 0320 	bic.w	r3, r3, #32
 800aa96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <TIM_OC2_SetConfig+0xe4>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d003      	beq.n	800aab4 <TIM_OC2_SetConfig+0x68>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a21      	ldr	r2, [pc, #132]	; (800ab34 <TIM_OC2_SetConfig+0xe8>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d10d      	bne.n	800aad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	011b      	lsls	r3, r3, #4
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a17      	ldr	r2, [pc, #92]	; (800ab30 <TIM_OC2_SetConfig+0xe4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d003      	beq.n	800aae0 <TIM_OC2_SetConfig+0x94>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a16      	ldr	r2, [pc, #88]	; (800ab34 <TIM_OC2_SetConfig+0xe8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d113      	bne.n	800ab08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	621a      	str	r2, [r3, #32]
}
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40010400 	.word	0x40010400

0800ab38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 0303 	bic.w	r3, r3, #3
 800ab6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	021b      	lsls	r3, r3, #8
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a21      	ldr	r2, [pc, #132]	; (800ac18 <TIM_OC3_SetConfig+0xe0>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC3_SetConfig+0x66>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a20      	ldr	r2, [pc, #128]	; (800ac1c <TIM_OC3_SetConfig+0xe4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d10d      	bne.n	800abba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a16      	ldr	r2, [pc, #88]	; (800ac18 <TIM_OC3_SetConfig+0xe0>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_OC3_SetConfig+0x92>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a15      	ldr	r2, [pc, #84]	; (800ac1c <TIM_OC3_SetConfig+0xe4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d113      	bne.n	800abf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	011b      	lsls	r3, r3, #4
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	621a      	str	r2, [r3, #32]
}
 800ac0c:	bf00      	nop
 800ac0e:	371c      	adds	r7, #28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	40010000 	.word	0x40010000
 800ac1c:	40010400 	.word	0x40010400

0800ac20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	031b      	lsls	r3, r3, #12
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a12      	ldr	r2, [pc, #72]	; (800acc4 <TIM_OC4_SetConfig+0xa4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d003      	beq.n	800ac88 <TIM_OC4_SetConfig+0x68>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a11      	ldr	r2, [pc, #68]	; (800acc8 <TIM_OC4_SetConfig+0xa8>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d109      	bne.n	800ac9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	019b      	lsls	r3, r3, #6
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	621a      	str	r2, [r3, #32]
}
 800acb6:	bf00      	nop
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	40010000 	.word	0x40010000
 800acc8:	40010400 	.word	0x40010400

0800accc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6a1b      	ldr	r3, [r3, #32]
 800acdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	f023 0201 	bic.w	r2, r3, #1
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f023 030a 	bic.w	r3, r3, #10
 800ad08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	621a      	str	r2, [r3, #32]
}
 800ad1e:	bf00      	nop
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b087      	sub	sp, #28
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f023 0210 	bic.w	r2, r3, #16
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	031b      	lsls	r3, r3, #12
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	011b      	lsls	r3, r3, #4
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	621a      	str	r2, [r3, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	f043 0307 	orr.w	r3, r3, #7
 800adac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	609a      	str	r2, [r3, #8]
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	021a      	lsls	r2, r3, #8
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	609a      	str	r2, [r3, #8]
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae14:	2302      	movs	r3, #2
 800ae16:	e05a      	b.n	800aece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a21      	ldr	r2, [pc, #132]	; (800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d022      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae64:	d01d      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a1d      	ldr	r2, [pc, #116]	; (800aee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d018      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a1b      	ldr	r2, [pc, #108]	; (800aee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a1a      	ldr	r2, [pc, #104]	; (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d00e      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a18      	ldr	r2, [pc, #96]	; (800aeec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d009      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a17      	ldr	r2, [pc, #92]	; (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d004      	beq.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a15      	ldr	r2, [pc, #84]	; (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d10c      	bne.n	800aebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40010400 	.word	0x40010400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40001800 	.word	0x40001800

0800aef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af10:	2302      	movs	r3, #2
 800af12:	e03d      	b.n	800af90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	4313      	orrs	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	4313      	orrs	r3, r2
 800af44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800afc4:	b084      	sub	sp, #16
 800afc6:	b480      	push	{r7}
 800afc8:	b085      	sub	sp, #20
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	f107 001c 	add.w	r0, r7, #28
 800afd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800afda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800afdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800afde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800afe2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800afe6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800afea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800afee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800affe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	431a      	orrs	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	b004      	add	sp, #16
 800b018:	4770      	bx	lr

0800b01a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2203      	movs	r2, #3
 800b062:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0303 	and.w	r3, r3, #3
}
 800b082:	4618      	mov	r0, r3
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b08e:	b480      	push	{r7}
 800b090:	b085      	sub	sp, #20
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0ac:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b0b2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b0b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0c8:	f023 030f 	bic.w	r3, r3, #15
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	b2db      	uxtb	r3, r3
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3314      	adds	r3, #20
 800b10a:	461a      	mov	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	4413      	add	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
}  
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b148:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b14e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b154:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4313      	orrs	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b16c:	2300      	movs	r3, #0

}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b088      	sub	sp, #32
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b188:	2310      	movs	r3, #16
 800b18a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b18c:	2340      	movs	r3, #64	; 0x40
 800b18e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b19a:	f107 0308 	add.w	r3, r7, #8
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff ff74 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1aa:	2110      	movs	r1, #16
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f9d7 	bl	800b560 <SDMMC_GetCmdResp1>
 800b1b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b4:	69fb      	ldr	r3, [r7, #28]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3720      	adds	r7, #32
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b088      	sub	sp, #32
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b1cc:	2311      	movs	r3, #17
 800b1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1de:	f107 0308 	add.w	r3, r7, #8
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff52 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ee:	2111      	movs	r1, #17
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f9b5 	bl	800b560 <SDMMC_GetCmdResp1>
 800b1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3720      	adds	r7, #32
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b088      	sub	sp, #32
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b210:	2312      	movs	r3, #18
 800b212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff ff30 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b232:	2112      	movs	r1, #18
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f993 	bl	800b560 <SDMMC_GetCmdResp1>
 800b23a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b23c:	69fb      	ldr	r3, [r7, #28]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3720      	adds	r7, #32
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b088      	sub	sp, #32
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b254:	2318      	movs	r3, #24
 800b256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff0e 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b272:	f241 3288 	movw	r2, #5000	; 0x1388
 800b276:	2118      	movs	r1, #24
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f971 	bl	800b560 <SDMMC_GetCmdResp1>
 800b27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b280:	69fb      	ldr	r3, [r7, #28]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b088      	sub	sp, #32
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b298:	2319      	movs	r3, #25
 800b29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b29c:	2340      	movs	r3, #64	; 0x40
 800b29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2aa:	f107 0308 	add.w	r3, r7, #8
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff feec 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ba:	2119      	movs	r1, #25
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f94f 	bl	800b560 <SDMMC_GetCmdResp1>
 800b2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b2dc:	230c      	movs	r3, #12
 800b2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff feca 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b2fa:	4a05      	ldr	r2, [pc, #20]	; (800b310 <SDMMC_CmdStopTransfer+0x40>)
 800b2fc:	210c      	movs	r1, #12
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f92e 	bl	800b560 <SDMMC_GetCmdResp1>
 800b304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b306:	69fb      	ldr	r3, [r7, #28]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3720      	adds	r7, #32
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	05f5e100 	.word	0x05f5e100

0800b314 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08a      	sub	sp, #40	; 0x28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b324:	2307      	movs	r3, #7
 800b326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b328:	2340      	movs	r3, #64	; 0x40
 800b32a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b32c:	2300      	movs	r3, #0
 800b32e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b334:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b336:	f107 0310 	add.w	r3, r7, #16
 800b33a:	4619      	mov	r1, r3
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff fea6 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b342:	f241 3288 	movw	r2, #5000	; 0x1388
 800b346:	2107      	movs	r1, #7
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 f909 	bl	800b560 <SDMMC_GetCmdResp1>
 800b34e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b352:	4618      	mov	r0, r3
 800b354:	3728      	adds	r7, #40	; 0x28
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b088      	sub	sp, #32
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b36a:	2300      	movs	r3, #0
 800b36c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b376:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b378:	f107 0308 	add.w	r3, r7, #8
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff fe85 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fb23 	bl	800b9d0 <SDMMC_GetCmdError>
 800b38a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38c:	69fb      	ldr	r3, [r7, #28]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3720      	adds	r7, #32
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b088      	sub	sp, #32
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b39e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b3a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b3a4:	2308      	movs	r3, #8
 800b3a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3b6:	f107 0308 	add.w	r3, r7, #8
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fe66 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fab6 	bl	800b934 <SDMMC_GetCmdResp7>
 800b3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ca:	69fb      	ldr	r3, [r7, #28]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3e2:	2337      	movs	r3, #55	; 0x37
 800b3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3e6:	2340      	movs	r3, #64	; 0x40
 800b3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fe47 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b400:	f241 3288 	movw	r2, #5000	; 0x1388
 800b404:	2137      	movs	r1, #55	; 0x37
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f8aa 	bl	800b560 <SDMMC_GetCmdResp1>
 800b40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40e:	69fb      	ldr	r3, [r7, #28]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3720      	adds	r7, #32
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b42e:	2329      	movs	r3, #41	; 0x29
 800b430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b432:	2340      	movs	r3, #64	; 0x40
 800b434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b43e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b440:	f107 0308 	add.w	r3, r7, #8
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff fe21 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f9bd 	bl	800b7cc <SDMMC_GetCmdResp3>
 800b452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b454:	69fb      	ldr	r3, [r7, #28]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b088      	sub	sp, #32
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b46a:	2302      	movs	r3, #2
 800b46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b46e:	23c0      	movs	r3, #192	; 0xc0
 800b470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b47a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fe03 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 f957 	bl	800b73c <SDMMC_GetCmdResp2>
 800b48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b490:	69fb      	ldr	r3, [r7, #28]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b4a8:	2309      	movs	r3, #9
 800b4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b4ac:	23c0      	movs	r3, #192	; 0xc0
 800b4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4ba:	f107 0308 	add.w	r3, r7, #8
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff fde4 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f938 	bl	800b73c <SDMMC_GetCmdResp2>
 800b4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ce:	69fb      	ldr	r3, [r7, #28]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3720      	adds	r7, #32
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4ea:	2340      	movs	r3, #64	; 0x40
 800b4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f8:	f107 0308 	add.w	r3, r7, #8
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff fdc5 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	2103      	movs	r1, #3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f99d 	bl	800b848 <SDMMC_GetCmdResp6>
 800b50e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b510:	69fb      	ldr	r3, [r7, #28]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b088      	sub	sp, #32
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b528:	230d      	movs	r3, #13
 800b52a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b52c:	2340      	movs	r3, #64	; 0x40
 800b52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fda4 	bl	800b08e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b546:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54a:	210d      	movs	r1, #13
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f807 	bl	800b560 <SDMMC_GetCmdResp1>
 800b552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b554:	69fb      	ldr	r3, [r7, #28]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	460b      	mov	r3, r1
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b56e:	4b70      	ldr	r3, [pc, #448]	; (800b730 <SDMMC_GetCmdResp1+0x1d0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a70      	ldr	r2, [pc, #448]	; (800b734 <SDMMC_GetCmdResp1+0x1d4>)
 800b574:	fba2 2303 	umull	r2, r3, r2, r3
 800b578:	0a5a      	lsrs	r2, r3, #9
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	1e5a      	subs	r2, r3, #1
 800b586:	61fa      	str	r2, [r7, #28]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d102      	bne.n	800b592 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b590:	e0c9      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b596:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0ef      	beq.n	800b582 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1ea      	bne.n	800b582 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2204      	movs	r2, #4
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5be:	2304      	movs	r3, #4
 800b5c0:	e0b1      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d004      	beq.n	800b5d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e0a6      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	22c5      	movs	r2, #197	; 0xc5
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7ff fd7f 	bl	800b0e2 <SDIO_GetCommandResponse>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d001      	beq.n	800b5f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e099      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff fd81 	bl	800b0fc <SDIO_GetResponse>
 800b5fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	4b4e      	ldr	r3, [pc, #312]	; (800b738 <SDMMC_GetCmdResp1+0x1d8>)
 800b600:	4013      	ands	r3, r2
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b606:	2300      	movs	r3, #0
 800b608:	e08d      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da02      	bge.n	800b616 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b614:	e087      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	e080      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b62e:	2380      	movs	r3, #128	; 0x80
 800b630:	e079      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b640:	e071      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b650:	e069      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b660:	e061      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b66c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b670:	e059      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b680:	e051      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b68c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b690:	e049      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b69c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6a0:	e041      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b6ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b0:	e039      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6c0:	e031      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6d0:	e029      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6e0:	e021      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6f0:	e019      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b700:	e011      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b70c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b710:	e009      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f003 0308 	and.w	r3, r3, #8
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b71c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b720:	e001      	b.n	800b726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b726:	4618      	mov	r0, r3
 800b728:	3720      	adds	r7, #32
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000008 	.word	0x20000008
 800b734:	10624dd3 	.word	0x10624dd3
 800b738:	fdffe008 	.word	0xfdffe008

0800b73c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b744:	4b1f      	ldr	r3, [pc, #124]	; (800b7c4 <SDMMC_GetCmdResp2+0x88>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <SDMMC_GetCmdResp2+0x8c>)
 800b74a:	fba2 2303 	umull	r2, r3, r2, r3
 800b74e:	0a5b      	lsrs	r3, r3, #9
 800b750:	f241 3288 	movw	r2, #5000	; 0x1388
 800b754:	fb02 f303 	mul.w	r3, r2, r3
 800b758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	1e5a      	subs	r2, r3, #1
 800b75e:	60fa      	str	r2, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d102      	bne.n	800b76a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b768:	e026      	b.n	800b7b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0ef      	beq.n	800b75a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1ea      	bne.n	800b75a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d004      	beq.n	800b79a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2204      	movs	r2, #4
 800b794:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b796:	2304      	movs	r3, #4
 800b798:	e00e      	b.n	800b7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d004      	beq.n	800b7b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e003      	b.n	800b7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	22c5      	movs	r2, #197	; 0xc5
 800b7b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	20000008 	.word	0x20000008
 800b7c8:	10624dd3 	.word	0x10624dd3

0800b7cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <SDMMC_GetCmdResp3+0x74>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a1a      	ldr	r2, [pc, #104]	; (800b844 <SDMMC_GetCmdResp3+0x78>)
 800b7da:	fba2 2303 	umull	r2, r3, r2, r3
 800b7de:	0a5b      	lsrs	r3, r3, #9
 800b7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	1e5a      	subs	r2, r3, #1
 800b7ee:	60fa      	str	r2, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f8:	e01b      	b.n	800b832 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ef      	beq.n	800b7ea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1ea      	bne.n	800b7ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2204      	movs	r2, #4
 800b824:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b826:	2304      	movs	r3, #4
 800b828:	e003      	b.n	800b832 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	22c5      	movs	r2, #197	; 0xc5
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20000008 	.word	0x20000008
 800b844:	10624dd3 	.word	0x10624dd3

0800b848 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	460b      	mov	r3, r1
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b856:	4b35      	ldr	r3, [pc, #212]	; (800b92c <SDMMC_GetCmdResp6+0xe4>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a35      	ldr	r2, [pc, #212]	; (800b930 <SDMMC_GetCmdResp6+0xe8>)
 800b85c:	fba2 2303 	umull	r2, r3, r2, r3
 800b860:	0a5b      	lsrs	r3, r3, #9
 800b862:	f241 3288 	movw	r2, #5000	; 0x1388
 800b866:	fb02 f303 	mul.w	r3, r2, r3
 800b86a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	61fa      	str	r2, [r7, #28]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b87a:	e052      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b880:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d0ef      	beq.n	800b86c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1ea      	bne.n	800b86c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2204      	movs	r2, #4
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	e03a      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e02f      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fc0d 	bl	800b0e2 <SDIO_GetCommandResponse>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d001      	beq.n	800b8d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e025      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	22c5      	movs	r2, #197	; 0xc5
 800b8da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8dc:	2100      	movs	r1, #0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fc0c 	bl	800b0fc <SDIO_GetResponse>
 800b8e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d106      	bne.n	800b8fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	0c1b      	lsrs	r3, r3, #16
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e011      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b90c:	e009      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b91c:	e001      	b.n	800b922 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b91e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b922:	4618      	mov	r0, r3
 800b924:	3720      	adds	r7, #32
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000008 	.word	0x20000008
 800b930:	10624dd3 	.word	0x10624dd3

0800b934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b93c:	4b22      	ldr	r3, [pc, #136]	; (800b9c8 <SDMMC_GetCmdResp7+0x94>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a22      	ldr	r2, [pc, #136]	; (800b9cc <SDMMC_GetCmdResp7+0x98>)
 800b942:	fba2 2303 	umull	r2, r3, r2, r3
 800b946:	0a5b      	lsrs	r3, r3, #9
 800b948:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94c:	fb02 f303 	mul.w	r3, r2, r3
 800b950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1e5a      	subs	r2, r3, #1
 800b956:	60fa      	str	r2, [r7, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b95c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b960:	e02c      	b.n	800b9bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0ef      	beq.n	800b952 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1ea      	bne.n	800b952 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b980:	f003 0304 	and.w	r3, r3, #4
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2204      	movs	r2, #4
 800b98c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b98e:	2304      	movs	r3, #4
 800b990:	e014      	b.n	800b9bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d004      	beq.n	800b9a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e009      	b.n	800b9bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2240      	movs	r2, #64	; 0x40
 800b9b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9ba:	2300      	movs	r3, #0
  
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	20000008 	.word	0x20000008
 800b9cc:	10624dd3 	.word	0x10624dd3

0800b9d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9d8:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <SDMMC_GetCmdError+0x50>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a11      	ldr	r2, [pc, #68]	; (800ba24 <SDMMC_GetCmdError+0x54>)
 800b9de:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e2:	0a5b      	lsrs	r3, r3, #9
 800b9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	1e5a      	subs	r2, r3, #1
 800b9f2:	60fa      	str	r2, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9fc:	e009      	b.n	800ba12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f1      	beq.n	800b9ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	22c5      	movs	r2, #197	; 0xc5
 800ba0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20000008 	.word	0x20000008
 800ba24:	10624dd3 	.word	0x10624dd3

0800ba28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba28:	b084      	sub	sp, #16
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	f107 001c 	add.w	r0, r7, #28
 800ba36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d122      	bne.n	800ba86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ba54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d105      	bne.n	800ba7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fbe8 	bl	800d250 <USB_CoreReset>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
 800ba84:	e01a      	b.n	800babc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f001 fbdc 	bl	800d250 <USB_CoreReset>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	639a      	str	r2, [r3, #56]	; 0x38
 800baae:	e005      	b.n	800babc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d10b      	bne.n	800bada <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	f043 0206 	orr.w	r2, r3, #6
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f043 0220 	orr.w	r2, r3, #32
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bae6:	b004      	add	sp, #16
 800bae8:	4770      	bx	lr
	...

0800baec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d165      	bne.n	800bbcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	4a41      	ldr	r2, [pc, #260]	; (800bc08 <USB_SetTurnaroundTime+0x11c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d906      	bls.n	800bb16 <USB_SetTurnaroundTime+0x2a>
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4a40      	ldr	r2, [pc, #256]	; (800bc0c <USB_SetTurnaroundTime+0x120>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d202      	bcs.n	800bb16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bb10:	230f      	movs	r3, #15
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e062      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	4a3c      	ldr	r2, [pc, #240]	; (800bc0c <USB_SetTurnaroundTime+0x120>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d306      	bcc.n	800bb2c <USB_SetTurnaroundTime+0x40>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	4a3b      	ldr	r2, [pc, #236]	; (800bc10 <USB_SetTurnaroundTime+0x124>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d202      	bcs.n	800bb2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bb26:	230e      	movs	r3, #14
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e057      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4a38      	ldr	r2, [pc, #224]	; (800bc10 <USB_SetTurnaroundTime+0x124>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d306      	bcc.n	800bb42 <USB_SetTurnaroundTime+0x56>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4a37      	ldr	r2, [pc, #220]	; (800bc14 <USB_SetTurnaroundTime+0x128>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d202      	bcs.n	800bb42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bb3c:	230d      	movs	r3, #13
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e04c      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	4a33      	ldr	r2, [pc, #204]	; (800bc14 <USB_SetTurnaroundTime+0x128>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d306      	bcc.n	800bb58 <USB_SetTurnaroundTime+0x6c>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4a32      	ldr	r2, [pc, #200]	; (800bc18 <USB_SetTurnaroundTime+0x12c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d802      	bhi.n	800bb58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bb52:	230c      	movs	r3, #12
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	e041      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	4a2f      	ldr	r2, [pc, #188]	; (800bc18 <USB_SetTurnaroundTime+0x12c>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d906      	bls.n	800bb6e <USB_SetTurnaroundTime+0x82>
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4a2e      	ldr	r2, [pc, #184]	; (800bc1c <USB_SetTurnaroundTime+0x130>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d802      	bhi.n	800bb6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bb68:	230b      	movs	r3, #11
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e036      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	4a2a      	ldr	r2, [pc, #168]	; (800bc1c <USB_SetTurnaroundTime+0x130>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d906      	bls.n	800bb84 <USB_SetTurnaroundTime+0x98>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	4a29      	ldr	r2, [pc, #164]	; (800bc20 <USB_SetTurnaroundTime+0x134>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d802      	bhi.n	800bb84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bb7e:	230a      	movs	r3, #10
 800bb80:	617b      	str	r3, [r7, #20]
 800bb82:	e02b      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	4a26      	ldr	r2, [pc, #152]	; (800bc20 <USB_SetTurnaroundTime+0x134>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d906      	bls.n	800bb9a <USB_SetTurnaroundTime+0xae>
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	4a25      	ldr	r2, [pc, #148]	; (800bc24 <USB_SetTurnaroundTime+0x138>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d202      	bcs.n	800bb9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bb94:	2309      	movs	r3, #9
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	e020      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4a21      	ldr	r2, [pc, #132]	; (800bc24 <USB_SetTurnaroundTime+0x138>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d306      	bcc.n	800bbb0 <USB_SetTurnaroundTime+0xc4>
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	4a20      	ldr	r2, [pc, #128]	; (800bc28 <USB_SetTurnaroundTime+0x13c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d802      	bhi.n	800bbb0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bbaa:	2308      	movs	r3, #8
 800bbac:	617b      	str	r3, [r7, #20]
 800bbae:	e015      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4a1d      	ldr	r2, [pc, #116]	; (800bc28 <USB_SetTurnaroundTime+0x13c>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d906      	bls.n	800bbc6 <USB_SetTurnaroundTime+0xda>
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4a1c      	ldr	r2, [pc, #112]	; (800bc2c <USB_SetTurnaroundTime+0x140>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d202      	bcs.n	800bbc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bbc0:	2307      	movs	r3, #7
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	e00a      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bbc6:	2306      	movs	r3, #6
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	e007      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bbd2:	2309      	movs	r3, #9
 800bbd4:	617b      	str	r3, [r7, #20]
 800bbd6:	e001      	b.n	800bbdc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bbd8:	2309      	movs	r3, #9
 800bbda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	029b      	lsls	r3, r3, #10
 800bbf0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	371c      	adds	r7, #28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	00d8acbf 	.word	0x00d8acbf
 800bc0c:	00e4e1c0 	.word	0x00e4e1c0
 800bc10:	00f42400 	.word	0x00f42400
 800bc14:	01067380 	.word	0x01067380
 800bc18:	011a499f 	.word	0x011a499f
 800bc1c:	01312cff 	.word	0x01312cff
 800bc20:	014ca43f 	.word	0x014ca43f
 800bc24:	016e3600 	.word	0x016e3600
 800bc28:	01a6ab1f 	.word	0x01a6ab1f
 800bc2c:	01e84800 	.word	0x01e84800

0800bc30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f043 0201 	orr.w	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f023 0201 	bic.w	r2, r3, #1
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d115      	bne.n	800bcc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bca2:	2001      	movs	r0, #1
 800bca4:	f7f8 f81a 	bl	8003cdc <HAL_Delay>
      ms++;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 fa3f 	bl	800d132 <USB_GetMode>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d01e      	beq.n	800bcf8 <USB_SetCurrentMode+0x84>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b31      	cmp	r3, #49	; 0x31
 800bcbe:	d9f0      	bls.n	800bca2 <USB_SetCurrentMode+0x2e>
 800bcc0:	e01a      	b.n	800bcf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bcc2:	78fb      	ldrb	r3, [r7, #3]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d115      	bne.n	800bcf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7f8 f801 	bl	8003cdc <HAL_Delay>
      ms++;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 fa26 	bl	800d132 <USB_GetMode>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d005      	beq.n	800bcf8 <USB_SetCurrentMode+0x84>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b31      	cmp	r3, #49	; 0x31
 800bcf0:	d9f0      	bls.n	800bcd4 <USB_SetCurrentMode+0x60>
 800bcf2:	e001      	b.n	800bcf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e005      	b.n	800bd04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b32      	cmp	r3, #50	; 0x32
 800bcfc:	d101      	bne.n	800bd02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b086      	sub	sp, #24
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
 800bd2a:	e009      	b.n	800bd40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	3340      	adds	r3, #64	; 0x40
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	613b      	str	r3, [r7, #16]
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b0e      	cmp	r3, #14
 800bd44:	d9f2      	bls.n	800bd2c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d11c      	bne.n	800bd86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd5a:	f043 0302 	orr.w	r3, r3, #2
 800bd5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	e005      	b.n	800bd92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda4:	4619      	mov	r1, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdac:	461a      	mov	r2, r3
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d10c      	bne.n	800bdd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d104      	bne.n	800bdc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f965 	bl	800c090 <USB_SetDevSpeed>
 800bdc6:	e008      	b.n	800bdda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bdc8:	2101      	movs	r1, #1
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f960 	bl	800c090 <USB_SetDevSpeed>
 800bdd0:	e003      	b.n	800bdda <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bdd2:	2103      	movs	r1, #3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f95b 	bl	800c090 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bdda:	2110      	movs	r1, #16
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f8f3 	bl	800bfc8 <USB_FlushTxFifo>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f91f 	bl	800c030 <USB_FlushRxFifo>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be02:	461a      	mov	r2, r3
 800be04:	2300      	movs	r3, #0
 800be06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be0e:	461a      	mov	r2, r3
 800be10:	2300      	movs	r3, #0
 800be12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	461a      	mov	r2, r3
 800be1c:	2300      	movs	r3, #0
 800be1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be20:	2300      	movs	r3, #0
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	e043      	b.n	800beae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	015a      	lsls	r2, r3, #5
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	4413      	add	r3, r2
 800be2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be3c:	d118      	bne.n	800be70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	015a      	lsls	r2, r3, #5
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be50:	461a      	mov	r2, r3
 800be52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	e013      	b.n	800be82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be66:	461a      	mov	r2, r3
 800be68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	e008      	b.n	800be82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	015a      	lsls	r2, r3, #5
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	4413      	add	r3, r2
 800be78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be7c:	461a      	mov	r2, r3
 800be7e:	2300      	movs	r3, #0
 800be80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8e:	461a      	mov	r2, r3
 800be90:	2300      	movs	r3, #0
 800be92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea0:	461a      	mov	r2, r3
 800bea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	3301      	adds	r3, #1
 800beac:	613b      	str	r3, [r7, #16]
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d3b7      	bcc.n	800be26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	e043      	b.n	800bf44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bed2:	d118      	bne.n	800bf06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10a      	bne.n	800bef0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee6:	461a      	mov	r2, r3
 800bee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	e013      	b.n	800bf18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befc:	461a      	mov	r2, r3
 800befe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	e008      	b.n	800bf18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf12:	461a      	mov	r2, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf24:	461a      	mov	r2, r3
 800bf26:	2300      	movs	r3, #0
 800bf28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	015a      	lsls	r2, r3, #5
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf36:	461a      	mov	r2, r3
 800bf38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	3301      	adds	r3, #1
 800bf42:	613b      	str	r3, [r7, #16]
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d3b7      	bcc.n	800bebc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bf6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	f043 0210 	orr.w	r2, r3, #16
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	4b0f      	ldr	r3, [pc, #60]	; (800bfc4 <USB_DevInit+0x2b8>)
 800bf86:	4313      	orrs	r3, r2
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	f043 0208 	orr.w	r2, r3, #8
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d107      	bne.n	800bfb4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfac:	f043 0304 	orr.w	r3, r3, #4
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3718      	adds	r7, #24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfc0:	b004      	add	sp, #16
 800bfc2:	4770      	bx	lr
 800bfc4:	803c3800 	.word	0x803c3800

0800bfc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4a13      	ldr	r2, [pc, #76]	; (800c02c <USB_FlushTxFifo+0x64>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d901      	bls.n	800bfe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e01b      	b.n	800c020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	daf2      	bge.n	800bfd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	019b      	lsls	r3, r3, #6
 800bff8:	f043 0220 	orr.w	r2, r3, #32
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3301      	adds	r3, #1
 800c004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a08      	ldr	r2, [pc, #32]	; (800c02c <USB_FlushTxFifo+0x64>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d901      	bls.n	800c012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e006      	b.n	800c020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	d0f0      	beq.n	800c000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	00030d40 	.word	0x00030d40

0800c030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3301      	adds	r3, #1
 800c040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	4a11      	ldr	r2, [pc, #68]	; (800c08c <USB_FlushRxFifo+0x5c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d901      	bls.n	800c04e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e018      	b.n	800c080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	daf2      	bge.n	800c03c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2210      	movs	r2, #16
 800c05e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3301      	adds	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	4a08      	ldr	r2, [pc, #32]	; (800c08c <USB_FlushRxFifo+0x5c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d901      	bls.n	800c072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e006      	b.n	800c080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	f003 0310 	and.w	r3, r3, #16
 800c07a:	2b10      	cmp	r3, #16
 800c07c:	d0f0      	beq.n	800c060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	00030d40 	.word	0x00030d40

0800c090 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	68f9      	ldr	r1, [r7, #12]
 800c0ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b087      	sub	sp, #28
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f003 0306 	and.w	r3, r3, #6
 800c0da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75fb      	strb	r3, [r7, #23]
 800c0e6:	e00a      	b.n	800c0fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d002      	beq.n	800c0f4 <USB_GetDevSpeed+0x32>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b06      	cmp	r3, #6
 800c0f2:	d102      	bne.n	800c0fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	75fb      	strb	r3, [r7, #23]
 800c0f8:	e001      	b.n	800c0fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c0fa:	230f      	movs	r3, #15
 800c0fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c100:	4618      	mov	r0, r3
 800c102:	371c      	adds	r7, #28
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	785b      	ldrb	r3, [r3, #1]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d13a      	bne.n	800c19e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	69da      	ldr	r2, [r3, #28]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	2101      	movs	r1, #1
 800c13a:	fa01 f303 	lsl.w	r3, r1, r3
 800c13e:	b29b      	uxth	r3, r3
 800c140:	68f9      	ldr	r1, [r7, #12]
 800c142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c146:	4313      	orrs	r3, r2
 800c148:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d155      	bne.n	800c20c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	791b      	ldrb	r3, [r3, #4]
 800c17a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c17c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	059b      	lsls	r3, r3, #22
 800c182:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c184:	4313      	orrs	r3, r2
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	0151      	lsls	r1, r2, #5
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	440a      	add	r2, r1
 800c18e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	e036      	b.n	800c20c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a4:	69da      	ldr	r2, [r3, #28]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	f003 030f 	and.w	r3, r3, #15
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1b4:	041b      	lsls	r3, r3, #16
 800c1b6:	68f9      	ldr	r1, [r7, #12]
 800c1b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d11a      	bne.n	800c20c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	791b      	ldrb	r3, [r3, #4]
 800c1f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c1f2:	430b      	orrs	r3, r1
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	0151      	lsls	r1, r2, #5
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	440a      	add	r2, r1
 800c1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c20a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
	...

0800c21c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d161      	bne.n	800c2fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c24a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c24e:	d11f      	bne.n	800c290 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c26a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c26e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	0151      	lsls	r1, r2, #5
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	440a      	add	r2, r1
 800c286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c28a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c28e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 030f 	and.w	r3, r3, #15
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ba:	69da      	ldr	r2, [r3, #28]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 030f 	and.w	r3, r3, #15
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	43db      	mvns	r3, r3
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	0159      	lsls	r1, r3, #5
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	440b      	add	r3, r1
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	4b35      	ldr	r3, [pc, #212]	; (800c3cc <USB_DeactivateEndpoint+0x1b0>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	600b      	str	r3, [r1, #0]
 800c2fa:	e060      	b.n	800c3be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c30e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c312:	d11f      	bne.n	800c354 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	0151      	lsls	r1, r2, #5
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	440a      	add	r2, r1
 800c32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c32e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c332:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c35a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	f003 030f 	and.w	r3, r3, #15
 800c364:	2101      	movs	r1, #1
 800c366:	fa01 f303 	lsl.w	r3, r1, r3
 800c36a:	041b      	lsls	r3, r3, #16
 800c36c:	43db      	mvns	r3, r3
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c374:	4013      	ands	r3, r2
 800c376:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	f003 030f 	and.w	r3, r3, #15
 800c388:	2101      	movs	r1, #1
 800c38a:	fa01 f303 	lsl.w	r3, r1, r3
 800c38e:	041b      	lsls	r3, r3, #16
 800c390:	43db      	mvns	r3, r3
 800c392:	68f9      	ldr	r1, [r7, #12]
 800c394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c398:	4013      	ands	r3, r2
 800c39a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	0159      	lsls	r1, r3, #5
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	440b      	add	r3, r1
 800c3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <USB_DeactivateEndpoint+0x1b4>)
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	ec337800 	.word	0xec337800
 800c3d0:	eff37800 	.word	0xeff37800

0800c3d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08a      	sub	sp, #40	; 0x28
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	f040 815c 	bne.w	800c6ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d132      	bne.n	800c464 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	015a      	lsls	r2, r3, #5
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	4413      	add	r3, r2
 800c406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	69ba      	ldr	r2, [r7, #24]
 800c40e:	0151      	lsls	r1, r2, #5
 800c410:	69fa      	ldr	r2, [r7, #28]
 800c412:	440a      	add	r2, r1
 800c414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c418:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c41c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	015a      	lsls	r2, r3, #5
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	4413      	add	r3, r2
 800c42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	0151      	lsls	r1, r2, #5
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	440a      	add	r2, r1
 800c438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c43c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	015a      	lsls	r2, r3, #5
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	4413      	add	r3, r2
 800c44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	0151      	lsls	r1, r2, #5
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	440a      	add	r2, r1
 800c458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c45c:	0cdb      	lsrs	r3, r3, #19
 800c45e:	04db      	lsls	r3, r3, #19
 800c460:	6113      	str	r3, [r2, #16]
 800c462:	e074      	b.n	800c54e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	015a      	lsls	r2, r3, #5
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	4413      	add	r3, r2
 800c46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	69ba      	ldr	r2, [r7, #24]
 800c474:	0151      	lsls	r1, r2, #5
 800c476:	69fa      	ldr	r2, [r7, #28]
 800c478:	440a      	add	r2, r1
 800c47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c47e:	0cdb      	lsrs	r3, r3, #19
 800c480:	04db      	lsls	r3, r3, #19
 800c482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	69ba      	ldr	r2, [r7, #24]
 800c494:	0151      	lsls	r1, r2, #5
 800c496:	69fa      	ldr	r2, [r7, #28]
 800c498:	440a      	add	r2, r1
 800c49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c49e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	6999      	ldr	r1, [r3, #24]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	440b      	add	r3, r1
 800c4c0:	1e59      	subs	r1, r3, #1
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c4cc:	4b9d      	ldr	r3, [pc, #628]	; (800c744 <USB_EPStartXfer+0x370>)
 800c4ce:	400b      	ands	r3, r1
 800c4d0:	69b9      	ldr	r1, [r7, #24]
 800c4d2:	0148      	lsls	r0, r1, #5
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	4401      	add	r1, r0
 800c4d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ec:	691a      	ldr	r2, [r3, #16]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4f6:	69b9      	ldr	r1, [r7, #24]
 800c4f8:	0148      	lsls	r0, r1, #5
 800c4fa:	69f9      	ldr	r1, [r7, #28]
 800c4fc:	4401      	add	r1, r0
 800c4fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c502:	4313      	orrs	r3, r2
 800c504:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	791b      	ldrb	r3, [r3, #4]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d11f      	bne.n	800c54e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	0151      	lsls	r1, r2, #5
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	440a      	add	r2, r1
 800c524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c528:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c52c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	015a      	lsls	r2, r3, #5
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	4413      	add	r3, r2
 800c536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	0151      	lsls	r1, r2, #5
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	440a      	add	r2, r1
 800c544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c54c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d14b      	bne.n	800c5ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d009      	beq.n	800c570 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	4413      	add	r3, r2
 800c564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c568:	461a      	mov	r2, r3
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	791b      	ldrb	r3, [r3, #4]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d128      	bne.n	800c5ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c584:	2b00      	cmp	r3, #0
 800c586:	d110      	bne.n	800c5aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	015a      	lsls	r2, r3, #5
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	4413      	add	r3, r2
 800c590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	69ba      	ldr	r2, [r7, #24]
 800c598:	0151      	lsls	r1, r2, #5
 800c59a:	69fa      	ldr	r2, [r7, #28]
 800c59c:	440a      	add	r2, r1
 800c59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	e00f      	b.n	800c5ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	015a      	lsls	r2, r3, #5
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	0151      	lsls	r1, r2, #5
 800c5bc:	69fa      	ldr	r2, [r7, #28]
 800c5be:	440a      	add	r2, r1
 800c5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	015a      	lsls	r2, r3, #5
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	0151      	lsls	r1, r2, #5
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	440a      	add	r2, r1
 800c5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	e133      	b.n	800c854 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	69ba      	ldr	r2, [r7, #24]
 800c5fc:	0151      	lsls	r1, r2, #5
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	440a      	add	r2, r1
 800c602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c60a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	791b      	ldrb	r3, [r3, #4]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d015      	beq.n	800c640 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 811b 	beq.w	800c854 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	f003 030f 	and.w	r3, r3, #15
 800c62e:	2101      	movs	r1, #1
 800c630:	fa01 f303 	lsl.w	r3, r1, r3
 800c634:	69f9      	ldr	r1, [r7, #28]
 800c636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c63a:	4313      	orrs	r3, r2
 800c63c:	634b      	str	r3, [r1, #52]	; 0x34
 800c63e:	e109      	b.n	800c854 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d110      	bne.n	800c672 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	4413      	add	r3, r2
 800c658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	69ba      	ldr	r2, [r7, #24]
 800c660:	0151      	lsls	r1, r2, #5
 800c662:	69fa      	ldr	r2, [r7, #28]
 800c664:	440a      	add	r2, r1
 800c666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	e00f      	b.n	800c692 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	0151      	lsls	r1, r2, #5
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	440a      	add	r2, r1
 800c688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c68c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c690:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	6919      	ldr	r1, [r3, #16]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	b298      	uxth	r0, r3
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f000 fade 	bl	800cc68 <USB_WritePacket>
 800c6ac:	e0d2      	b.n	800c854 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	0151      	lsls	r1, r2, #5
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	440a      	add	r2, r1
 800c6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c8:	0cdb      	lsrs	r3, r3, #19
 800c6ca:	04db      	lsls	r3, r3, #19
 800c6cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	0151      	lsls	r1, r2, #5
 800c6e0:	69fa      	ldr	r2, [r7, #28]
 800c6e2:	440a      	add	r2, r1
 800c6e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d126      	bne.n	800c748 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c706:	691a      	ldr	r2, [r3, #16]
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c710:	69b9      	ldr	r1, [r7, #24]
 800c712:	0148      	lsls	r0, r1, #5
 800c714:	69f9      	ldr	r1, [r7, #28]
 800c716:	4401      	add	r1, r0
 800c718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c71c:	4313      	orrs	r3, r2
 800c71e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	0151      	lsls	r1, r2, #5
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	440a      	add	r2, r1
 800c736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c73a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c73e:	6113      	str	r3, [r2, #16]
 800c740:	e03a      	b.n	800c7b8 <USB_EPStartXfer+0x3e4>
 800c742:	bf00      	nop
 800c744:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	4413      	add	r3, r2
 800c752:	1e5a      	subs	r2, r3, #1
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	fbb2 f3f3 	udiv	r3, r2, r3
 800c75c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	8afa      	ldrh	r2, [r7, #22]
 800c764:	fb03 f202 	mul.w	r2, r3, r2
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	4413      	add	r3, r2
 800c774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c778:	691a      	ldr	r2, [r3, #16]
 800c77a:	8afb      	ldrh	r3, [r7, #22]
 800c77c:	04d9      	lsls	r1, r3, #19
 800c77e:	4b38      	ldr	r3, [pc, #224]	; (800c860 <USB_EPStartXfer+0x48c>)
 800c780:	400b      	ands	r3, r1
 800c782:	69b9      	ldr	r1, [r7, #24]
 800c784:	0148      	lsls	r0, r1, #5
 800c786:	69f9      	ldr	r1, [r7, #28]
 800c788:	4401      	add	r1, r0
 800c78a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c78e:	4313      	orrs	r3, r2
 800c790:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	015a      	lsls	r2, r3, #5
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	4413      	add	r3, r2
 800c79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79e:	691a      	ldr	r2, [r3, #16]
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7a8:	69b9      	ldr	r1, [r7, #24]
 800c7aa:	0148      	lsls	r0, r1, #5
 800c7ac:	69f9      	ldr	r1, [r7, #28]
 800c7ae:	4401      	add	r1, r0
 800c7b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d10d      	bne.n	800c7da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d009      	beq.n	800c7da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	6919      	ldr	r1, [r3, #16]
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d6:	460a      	mov	r2, r1
 800c7d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	791b      	ldrb	r3, [r3, #4]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d128      	bne.n	800c834 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d110      	bne.n	800c814 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	015a      	lsls	r2, r3, #5
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	0151      	lsls	r1, r2, #5
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	440a      	add	r2, r1
 800c808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c80c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	e00f      	b.n	800c834 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	0151      	lsls	r1, r2, #5
 800c826:	69fa      	ldr	r2, [r7, #28]
 800c828:	440a      	add	r2, r1
 800c82a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c82e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c832:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	0151      	lsls	r1, r2, #5
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	440a      	add	r2, r1
 800c84a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c84e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	1ff80000 	.word	0x1ff80000

0800c864 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c864:	b480      	push	{r7}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	4613      	mov	r3, r2
 800c870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	785b      	ldrb	r3, [r3, #1]
 800c880:	2b01      	cmp	r3, #1
 800c882:	f040 80ce 	bne.w	800ca22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d132      	bne.n	800c8f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	015a      	lsls	r2, r3, #5
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	0151      	lsls	r1, r2, #5
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	440a      	add	r2, r1
 800c8c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	015a      	lsls	r2, r3, #5
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	0151      	lsls	r1, r2, #5
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	440a      	add	r2, r1
 800c8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ec:	0cdb      	lsrs	r3, r3, #19
 800c8ee:	04db      	lsls	r3, r3, #19
 800c8f0:	6113      	str	r3, [r2, #16]
 800c8f2:	e04e      	b.n	800c992 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	0151      	lsls	r1, r2, #5
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	440a      	add	r2, r1
 800c90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90e:	0cdb      	lsrs	r3, r3, #19
 800c910:	04db      	lsls	r3, r3, #19
 800c912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	0151      	lsls	r1, r2, #5
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	440a      	add	r2, r1
 800c92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c92e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c932:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c936:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	699a      	ldr	r2, [r3, #24]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	429a      	cmp	r2, r3
 800c942:	d903      	bls.n	800c94c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	4413      	add	r3, r2
 800c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	0151      	lsls	r1, r2, #5
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	440a      	add	r2, r1
 800c962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c96a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c978:	691a      	ldr	r2, [r3, #16]
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c982:	6939      	ldr	r1, [r7, #16]
 800c984:	0148      	lsls	r0, r1, #5
 800c986:	6979      	ldr	r1, [r7, #20]
 800c988:	4401      	add	r1, r0
 800c98a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c98e:	4313      	orrs	r3, r2
 800c990:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d11e      	bne.n	800c9d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d009      	beq.n	800c9b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	015a      	lsls	r2, r3, #5
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	0151      	lsls	r1, r2, #5
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	440a      	add	r2, r1
 800c9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	e097      	b.n	800cb06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	015a      	lsls	r2, r3, #5
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	0151      	lsls	r1, r2, #5
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	440a      	add	r2, r1
 800c9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 8083 	beq.w	800cb06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	f003 030f 	and.w	r3, r3, #15
 800ca10:	2101      	movs	r1, #1
 800ca12:	fa01 f303 	lsl.w	r3, r1, r3
 800ca16:	6979      	ldr	r1, [r7, #20]
 800ca18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	634b      	str	r3, [r1, #52]	; 0x34
 800ca20:	e071      	b.n	800cb06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	0151      	lsls	r1, r2, #5
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	440a      	add	r2, r1
 800ca38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca3c:	0cdb      	lsrs	r3, r3, #19
 800ca3e:	04db      	lsls	r3, r3, #19
 800ca40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	0151      	lsls	r1, r2, #5
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	440a      	add	r2, r1
 800ca58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ca60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ca64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	68da      	ldr	r2, [r3, #12]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	015a      	lsls	r2, r3, #5
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	4413      	add	r3, r2
 800ca86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	0151      	lsls	r1, r2, #5
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	440a      	add	r2, r1
 800ca94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caaa:	691a      	ldr	r2, [r3, #16]
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cab4:	6939      	ldr	r1, [r7, #16]
 800cab6:	0148      	lsls	r0, r1, #5
 800cab8:	6979      	ldr	r1, [r7, #20]
 800caba:	4401      	add	r1, r0
 800cabc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cac0:	4313      	orrs	r3, r2
 800cac2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cac4:	79fb      	ldrb	r3, [r7, #7]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d10d      	bne.n	800cae6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d009      	beq.n	800cae6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	6919      	ldr	r1, [r3, #16]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae2:	460a      	mov	r2, r1
 800cae4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	4413      	add	r3, r2
 800caee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	0151      	lsls	r1, r2, #5
 800caf8:	697a      	ldr	r2, [r7, #20]
 800cafa:	440a      	add	r2, r1
 800cafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	371c      	adds	r7, #28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d14a      	bne.n	800cbc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb4a:	f040 8086 	bne.w	800cc5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	7812      	ldrb	r2, [r2, #0]
 800cb62:	0151      	lsls	r1, r2, #5
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	440a      	add	r2, r1
 800cb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	7812      	ldrb	r2, [r2, #0]
 800cb86:	0151      	lsls	r1, r2, #5
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	440a      	add	r2, r1
 800cb8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f242 7210 	movw	r2, #10000	; 0x2710
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d902      	bls.n	800cbac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbaa:	e056      	b.n	800cc5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	015a      	lsls	r2, r3, #5
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbc4:	d0e7      	beq.n	800cb96 <USB_EPStopXfer+0x82>
 800cbc6:	e048      	b.n	800cc5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	015a      	lsls	r2, r3, #5
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbe0:	d13b      	bne.n	800cc5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	015a      	lsls	r2, r3, #5
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	7812      	ldrb	r2, [r2, #0]
 800cbf6:	0151      	lsls	r1, r2, #5
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	440a      	add	r2, r1
 800cbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	7812      	ldrb	r2, [r2, #0]
 800cc1a:	0151      	lsls	r1, r2, #5
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	440a      	add	r2, r1
 800cc20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d902      	bls.n	800cc40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc3e:	e00c      	b.n	800cc5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	015a      	lsls	r2, r3, #5
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	4413      	add	r3, r2
 800cc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc58:	d0e7      	beq.n	800cc2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	371c      	adds	r7, #28
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b089      	sub	sp, #36	; 0x24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	4611      	mov	r1, r2
 800cc74:	461a      	mov	r2, r3
 800cc76:	460b      	mov	r3, r1
 800cc78:	71fb      	strb	r3, [r7, #7]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cc86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d123      	bne.n	800ccd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc8e:	88bb      	ldrh	r3, [r7, #4]
 800cc90:	3303      	adds	r3, #3
 800cc92:	089b      	lsrs	r3, r3, #2
 800cc94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc96:	2300      	movs	r3, #0
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	e018      	b.n	800ccce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	031a      	lsls	r2, r3, #12
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cca8:	461a      	mov	r2, r3
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	3301      	adds	r3, #1
 800cccc:	61bb      	str	r3, [r7, #24]
 800ccce:	69ba      	ldr	r2, [r7, #24]
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d3e2      	bcc.n	800cc9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3724      	adds	r7, #36	; 0x24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b08b      	sub	sp, #44	; 0x2c
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ccfa:	88fb      	ldrh	r3, [r7, #6]
 800ccfc:	089b      	lsrs	r3, r3, #2
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd02:	88fb      	ldrh	r3, [r7, #6]
 800cd04:	f003 0303 	and.w	r3, r3, #3
 800cd08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	623b      	str	r3, [r7, #32]
 800cd0e:	e014      	b.n	800cd3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	3301      	adds	r3, #1
 800cd20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	3301      	adds	r3, #1
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	3301      	adds	r3, #1
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	3301      	adds	r3, #1
 800cd38:	623b      	str	r3, [r7, #32]
 800cd3a:	6a3a      	ldr	r2, [r7, #32]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d3e6      	bcc.n	800cd10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd42:	8bfb      	ldrh	r3, [r7, #30]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01e      	beq.n	800cd86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd52:	461a      	mov	r2, r3
 800cd54:	f107 0310 	add.w	r3, r7, #16
 800cd58:	6812      	ldr	r2, [r2, #0]
 800cd5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cd5c:	693a      	ldr	r2, [r7, #16]
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	fa22 f303 	lsr.w	r3, r2, r3
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6c:	701a      	strb	r2, [r3, #0]
      i++;
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	3301      	adds	r3, #1
 800cd72:	623b      	str	r3, [r7, #32]
      pDest++;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	3301      	adds	r3, #1
 800cd78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cd7a:	8bfb      	ldrh	r3, [r7, #30]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cd80:	8bfb      	ldrh	r3, [r7, #30]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1ea      	bne.n	800cd5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	372c      	adds	r7, #44	; 0x2c
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	785b      	ldrb	r3, [r3, #1]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d12c      	bne.n	800ce0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	db12      	blt.n	800cde8 <USB_EPSetStall+0x54>
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00f      	beq.n	800cde8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	015a      	lsls	r2, r3, #5
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	0151      	lsls	r1, r2, #5
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	440a      	add	r2, r1
 800cdde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cde2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cde6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	0151      	lsls	r1, r2, #5
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	440a      	add	r2, r1
 800cdfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	e02b      	b.n	800ce62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	015a      	lsls	r2, r3, #5
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	4413      	add	r3, r2
 800ce12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	db12      	blt.n	800ce42 <USB_EPSetStall+0xae>
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00f      	beq.n	800ce42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	015a      	lsls	r2, r3, #5
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	4413      	add	r3, r2
 800ce2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	0151      	lsls	r1, r2, #5
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	440a      	add	r2, r1
 800ce38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	015a      	lsls	r2, r3, #5
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	4413      	add	r3, r2
 800ce4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	0151      	lsls	r1, r2, #5
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	440a      	add	r2, r1
 800ce58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	785b      	ldrb	r3, [r3, #1]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d128      	bne.n	800cede <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	015a      	lsls	r2, r3, #5
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	0151      	lsls	r1, r2, #5
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	440a      	add	r2, r1
 800cea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	791b      	ldrb	r3, [r3, #4]
 800ceb0:	2b03      	cmp	r3, #3
 800ceb2:	d003      	beq.n	800cebc <USB_EPClearStall+0x4c>
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	791b      	ldrb	r3, [r3, #4]
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d138      	bne.n	800cf2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ced6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	e027      	b.n	800cf2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	015a      	lsls	r2, r3, #5
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	0151      	lsls	r1, r2, #5
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	440a      	add	r2, r1
 800cef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cefc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	791b      	ldrb	r3, [r3, #4]
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d003      	beq.n	800cf0e <USB_EPClearStall+0x9e>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	791b      	ldrb	r3, [r3, #4]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d10f      	bne.n	800cf2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	0151      	lsls	r1, r2, #5
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	440a      	add	r2, r1
 800cf24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	011b      	lsls	r3, r3, #4
 800cf6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf70:	68f9      	ldr	r1, [r7, #12]
 800cf72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf76:	4313      	orrs	r3, r2
 800cf78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfa2:	f023 0303 	bic.w	r3, r3, #3
 800cfa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfb6:	f023 0302 	bic.w	r3, r3, #2
 800cfba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b085      	sub	sp, #20
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfe4:	f023 0303 	bic.w	r3, r3, #3
 800cfe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cff8:	f043 0302 	orr.w	r3, r3, #2
 800cffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	695b      	ldr	r3, [r3, #20]
 800d018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4013      	ands	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d024:	68fb      	ldr	r3, [r7, #12]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3714      	adds	r7, #20
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d032:	b480      	push	{r7}
 800d034:	b085      	sub	sp, #20
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d04e:	69db      	ldr	r3, [r3, #28]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	4013      	ands	r3, r2
 800d054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	0c1b      	lsrs	r3, r3, #16
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d082:	69db      	ldr	r3, [r3, #28]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	4013      	ands	r3, r2
 800d088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	b29b      	uxth	r3, r3
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d09a:	b480      	push	{r7}
 800d09c:	b085      	sub	sp, #20
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0aa:	78fb      	ldrb	r3, [r7, #3]
 800d0ac:	015a      	lsls	r2, r3, #5
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b087      	sub	sp, #28
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0fa:	78fb      	ldrb	r3, [r7, #3]
 800d0fc:	f003 030f 	and.w	r3, r3, #15
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	fa22 f303 	lsr.w	r3, r2, r3
 800d106:	01db      	lsls	r3, r3, #7
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	693a      	ldr	r2, [r7, #16]
 800d10c:	4313      	orrs	r3, r2
 800d10e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d110:	78fb      	ldrb	r3, [r7, #3]
 800d112:	015a      	lsls	r2, r3, #5
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	4413      	add	r3, r2
 800d118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	4013      	ands	r3, r2
 800d122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d124:	68bb      	ldr	r3, [r7, #8]
}
 800d126:	4618      	mov	r0, r3
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d132:	b480      	push	{r7}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	f003 0301 	and.w	r3, r3, #1
}
 800d142:	4618      	mov	r0, r3
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d14e:	b480      	push	{r7}
 800d150:	b085      	sub	sp, #20
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d168:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d16c:	f023 0307 	bic.w	r3, r3, #7
 800d170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	460b      	mov	r3, r1
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	333c      	adds	r3, #60	; 0x3c
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	4a26      	ldr	r2, [pc, #152]	; (800d24c <USB_EP0_OutStart+0xb8>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d90a      	bls.n	800d1ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1c8:	d101      	bne.n	800d1ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e037      	b.n	800d23e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	691b      	ldr	r3, [r3, #16]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1fc:	f043 0318 	orr.w	r3, r3, #24
 800d200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d210:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d216:	7afb      	ldrb	r3, [r7, #11]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d10f      	bne.n	800d23c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d222:	461a      	mov	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d236:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d23a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	371c      	adds	r7, #28
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	4f54300a 	.word	0x4f54300a

0800d250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d258:	2300      	movs	r3, #0
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4a13      	ldr	r2, [pc, #76]	; (800d2b4 <USB_CoreReset+0x64>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d901      	bls.n	800d26e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e01b      	b.n	800d2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	daf2      	bge.n	800d25c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f043 0201 	orr.w	r2, r3, #1
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3301      	adds	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	4a09      	ldr	r2, [pc, #36]	; (800d2b4 <USB_CoreReset+0x64>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d901      	bls.n	800d298 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e006      	b.n	800d2a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d0f0      	beq.n	800d286 <USB_CoreReset+0x36>

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	00030d40 	.word	0x00030d40

0800d2b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2bc:	4904      	ldr	r1, [pc, #16]	; (800d2d0 <MX_FATFS_Init+0x18>)
 800d2be:	4805      	ldr	r0, [pc, #20]	; (800d2d4 <MX_FATFS_Init+0x1c>)
 800d2c0:	f007 f9d2 	bl	8014668 <FATFS_LinkDriver>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4b03      	ldr	r3, [pc, #12]	; (800d2d8 <MX_FATFS_Init+0x20>)
 800d2ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */

  /* USER CODE END Init */
}
 800d2cc:	bf00      	nop
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20003214 	.word	0x20003214
 800d2d4:	0801dec0 	.word	0x0801dec0
 800d2d8:	20003210 	.word	0x20003210

0800d2dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800d2e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d2f6:	f000 f888 	bl	800d40a <BSP_SD_IsDetected>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d001      	beq.n	800d304 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e005      	b.n	800d310 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d304:	4804      	ldr	r0, [pc, #16]	; (800d318 <BSP_SD_Init+0x2c>)
 800d306:	f7fb f9af 	bl	8008668 <HAL_SD_Init>
 800d30a:	4603      	mov	r3, r0
 800d30c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d30e:	79fb      	ldrb	r3, [r7, #7]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20002874 	.word	0x20002874

0800d31c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	68f9      	ldr	r1, [r7, #12]
 800d332:	4806      	ldr	r0, [pc, #24]	; (800d34c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d334:	f7fb fdac 	bl	8008e90 <HAL_SD_ReadBlocks_DMA>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d342:	7dfb      	ldrb	r3, [r7, #23]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20002874 	.word	0x20002874

0800d350 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	68f9      	ldr	r1, [r7, #12]
 800d366:	4806      	ldr	r0, [pc, #24]	; (800d380 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d368:	f7fb fe72 	bl	8009050 <HAL_SD_WriteBlocks_DMA>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d376:	7dfb      	ldrb	r3, [r7, #23]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	20002874 	.word	0x20002874

0800d384 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d388:	4805      	ldr	r0, [pc, #20]	; (800d3a0 <BSP_SD_GetCardState+0x1c>)
 800d38a:	f7fc fa93 	bl	80098b4 <HAL_SD_GetCardState>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b04      	cmp	r3, #4
 800d392:	bf14      	ite	ne
 800d394:	2301      	movne	r3, #1
 800d396:	2300      	moveq	r3, #0
 800d398:	b2db      	uxtb	r3, r3
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20002874 	.word	0x20002874

0800d3a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	4803      	ldr	r0, [pc, #12]	; (800d3bc <BSP_SD_GetCardInfo+0x18>)
 800d3b0:	f7fc fa54 	bl	800985c <HAL_SD_GetCardInfo>
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	20002874 	.word	0x20002874

0800d3c0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d3c8:	f000 f818 	bl	800d3fc <BSP_SD_AbortCallback>
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d3dc:	f000 f9c4 	bl	800d768 <BSP_SD_WriteCpltCallback>
}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d3f0:	f000 f9c8 	bl	800d784 <BSP_SD_ReadCpltCallback>
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <BSP_SD_AbortCallback>:
 * @brief BSP SD Abort callback
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void BSP_SD_AbortCallback(void)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0

}
 800d400:	bf00      	nop
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d410:	2301      	movs	r3, #1
 800d412:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d414:	f000 f80c 	bl	800d430 <BSP_PlatformIsDetected>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d41e:	2300      	movs	r3, #0
 800d420:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	b2db      	uxtb	r3, r3
}
 800d426:	4618      	mov	r0, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
	...

0800d430 <BSP_PlatformIsDetected>:
 ******************************************************************************
 */
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d436:	2301      	movs	r3, #1
 800d438:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d43a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d43e:	4806      	ldr	r0, [pc, #24]	; (800d458 <BSP_PlatformIsDetected+0x28>)
 800d440:	f7f7 ff5c 	bl	80052fc <HAL_GPIO_ReadPin>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d44a:	2300      	movs	r3, #0
 800d44c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
	/* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d44e:	79fb      	ldrb	r3, [r7, #7]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	40020000 	.word	0x40020000

0800d45c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d464:	f007 f998 	bl	8014798 <osKernelSysTick>
 800d468:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d46a:	e006      	b.n	800d47a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d46c:	f7ff ff8a 	bl	800d384 <BSP_SD_GetCardState>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d476:	2300      	movs	r3, #0
 800d478:	e009      	b.n	800d48e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d47a:	f007 f98d 	bl	8014798 <osKernelSysTick>
 800d47e:	4602      	mov	r2, r0
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	429a      	cmp	r2, r3
 800d488:	d8f0      	bhi.n	800d46c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d48a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
	...

0800d498 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d4a2:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <SD_CheckStatus+0x38>)
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4a8:	f7ff ff6c 	bl	800d384 <BSP_SD_GetCardState>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d107      	bne.n	800d4c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d4b2:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <SD_CheckStatus+0x38>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f023 0301 	bic.w	r3, r3, #1
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <SD_CheckStatus+0x38>)
 800d4c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4c2:	4b03      	ldr	r3, [pc, #12]	; (800d4d0 <SD_CheckStatus+0x38>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b2db      	uxtb	r3, r3
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20000011 	.word	0x20000011

0800d4d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d4d4:	b590      	push	{r4, r7, lr}
 800d4d6:	b087      	sub	sp, #28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d4de:	4b20      	ldr	r3, [pc, #128]	; (800d560 <SD_initialize+0x8c>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d4e4:	f007 f94c 	bl	8014780 <osKernelRunning>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d030      	beq.n	800d550 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d4ee:	f7ff fefd 	bl	800d2ec <BSP_SD_Init>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d107      	bne.n	800d508 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d4f8:	79fb      	ldrb	r3, [r7, #7]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff ffcc 	bl	800d498 <SD_CheckStatus>
 800d500:	4603      	mov	r3, r0
 800d502:	461a      	mov	r2, r3
 800d504:	4b16      	ldr	r3, [pc, #88]	; (800d560 <SD_initialize+0x8c>)
 800d506:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d508:	4b15      	ldr	r3, [pc, #84]	; (800d560 <SD_initialize+0x8c>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d01e      	beq.n	800d550 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d512:	4b14      	ldr	r3, [pc, #80]	; (800d564 <SD_initialize+0x90>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10e      	bne.n	800d538 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d51a:	4b13      	ldr	r3, [pc, #76]	; (800d568 <SD_initialize+0x94>)
 800d51c:	f107 0408 	add.w	r4, r7, #8
 800d520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d526:	f107 0308 	add.w	r3, r7, #8
 800d52a:	2100      	movs	r1, #0
 800d52c:	4618      	mov	r0, r3
 800d52e:	f007 fa6c 	bl	8014a0a <osMessageCreate>
 800d532:	4603      	mov	r3, r0
 800d534:	4a0b      	ldr	r2, [pc, #44]	; (800d564 <SD_initialize+0x90>)
 800d536:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d538:	4b0a      	ldr	r3, [pc, #40]	; (800d564 <SD_initialize+0x90>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d107      	bne.n	800d550 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <SD_initialize+0x8c>)
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	b2db      	uxtb	r3, r3
 800d546:	f043 0301 	orr.w	r3, r3, #1
 800d54a:	b2da      	uxtb	r2, r3
 800d54c:	4b04      	ldr	r3, [pc, #16]	; (800d560 <SD_initialize+0x8c>)
 800d54e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d550:	4b03      	ldr	r3, [pc, #12]	; (800d560 <SD_initialize+0x8c>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	b2db      	uxtb	r3, r3
}
 800d556:	4618      	mov	r0, r3
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd90      	pop	{r4, r7, pc}
 800d55e:	bf00      	nop
 800d560:	20000011 	.word	0x20000011
 800d564:	20003218 	.word	0x20003218
 800d568:	0801d688 	.word	0x0801d688

0800d56c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	4618      	mov	r0, r3
 800d57a:	f7ff ff8d 	bl	800d498 <SD_CheckStatus>
 800d57e:	4603      	mov	r3, r0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	607a      	str	r2, [r7, #4]
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d59e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d5a2:	f7ff ff5b 	bl	800d45c <SD_CheckStatusWithTimeout>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	da02      	bge.n	800d5b2 <SD_read+0x2a>
  {
    return res;
 800d5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5b0:	e032      	b.n	800d618 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	68b8      	ldr	r0, [r7, #8]
 800d5b8:	f7ff feb0 	bl	800d31c <BSP_SD_ReadBlocks_DMA>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d124      	bne.n	800d614 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d5ca:	4b15      	ldr	r3, [pc, #84]	; (800d620 <SD_read+0x98>)
 800d5cc:	6819      	ldr	r1, [r3, #0]
 800d5ce:	f107 0314 	add.w	r3, r7, #20
 800d5d2:	f247 5230 	movw	r2, #30000	; 0x7530
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f007 fa80 	bl	8014adc <osMessageGet>

    if (event.status == osEventMessage)
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b10      	cmp	r3, #16
 800d5e0:	d118      	bne.n	800d614 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d115      	bne.n	800d614 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d5e8:	f007 f8d6 	bl	8014798 <osKernelSysTick>
 800d5ec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d5ee:	e008      	b.n	800d602 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5f0:	f7ff fec8 	bl	800d384 <BSP_SD_GetCardState>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <SD_read+0x7a>
              {
                res = RES_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d600:	e008      	b.n	800d614 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d602:	f007 f8c9 	bl	8014798 <osKernelSysTick>
 800d606:	4602      	mov	r2, r0
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d610:	4293      	cmp	r3, r2
 800d612:	d9ed      	bls.n	800d5f0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3728      	adds	r7, #40	; 0x28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	20003218 	.word	0x20003218

0800d624 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08a      	sub	sp, #40	; 0x28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	603b      	str	r3, [r7, #0]
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d63a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d63e:	f7ff ff0d 	bl	800d45c <SD_CheckStatusWithTimeout>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	da02      	bge.n	800d64e <SD_write+0x2a>
  {
    return res;
 800d648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64c:	e02e      	b.n	800d6ac <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	68b8      	ldr	r0, [r7, #8]
 800d654:	f7ff fe7c 	bl	800d350 <BSP_SD_WriteBlocks_DMA>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d124      	bne.n	800d6a8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d65e:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <SD_write+0x90>)
 800d660:	6819      	ldr	r1, [r3, #0]
 800d662:	f107 0314 	add.w	r3, r7, #20
 800d666:	f247 5230 	movw	r2, #30000	; 0x7530
 800d66a:	4618      	mov	r0, r3
 800d66c:	f007 fa36 	bl	8014adc <osMessageGet>

    if (event.status == osEventMessage)
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2b10      	cmp	r3, #16
 800d674:	d118      	bne.n	800d6a8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d115      	bne.n	800d6a8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d67c:	f007 f88c 	bl	8014798 <osKernelSysTick>
 800d680:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d682:	e008      	b.n	800d696 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d684:	f7ff fe7e 	bl	800d384 <BSP_SD_GetCardState>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d103      	bne.n	800d696 <SD_write+0x72>
          {
            res = RES_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d694:	e008      	b.n	800d6a8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d696:	f007 f87f 	bl	8014798 <osKernelSysTick>
 800d69a:	4602      	mov	r2, r0
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d9ed      	bls.n	800d684 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3728      	adds	r7, #40	; 0x28
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20003218 	.word	0x20003218

0800d6b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08c      	sub	sp, #48	; 0x30
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	603a      	str	r2, [r7, #0]
 800d6c2:	71fb      	strb	r3, [r7, #7]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6ce:	4b25      	ldr	r3, [pc, #148]	; (800d764 <SD_ioctl+0xac>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <SD_ioctl+0x28>
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e03c      	b.n	800d75a <SD_ioctl+0xa2>

  switch (cmd)
 800d6e0:	79bb      	ldrb	r3, [r7, #6]
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d834      	bhi.n	800d750 <SD_ioctl+0x98>
 800d6e6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ec <SD_ioctl+0x34>)
 800d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ec:	0800d6fd 	.word	0x0800d6fd
 800d6f0:	0800d705 	.word	0x0800d705
 800d6f4:	0800d71d 	.word	0x0800d71d
 800d6f8:	0800d737 	.word	0x0800d737
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d702:	e028      	b.n	800d756 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d704:	f107 030c 	add.w	r3, r7, #12
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fe4b 	bl	800d3a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d70e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d71a:	e01c      	b.n	800d756 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d71c:	f107 030c 	add.w	r3, r7, #12
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff fe3f 	bl	800d3a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	b29a      	uxth	r2, r3
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d734:	e00f      	b.n	800d756 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d736:	f107 030c 	add.w	r3, r7, #12
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff fe32 	bl	800d3a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	0a5a      	lsrs	r2, r3, #9
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d74e:	e002      	b.n	800d756 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d750:	2304      	movs	r3, #4
 800d752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3730      	adds	r7, #48	; 0x30
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	20000011 	.word	0x20000011

0800d768 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d76c:	4b04      	ldr	r3, [pc, #16]	; (800d780 <BSP_SD_WriteCpltCallback+0x18>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2200      	movs	r2, #0
 800d772:	2102      	movs	r1, #2
 800d774:	4618      	mov	r0, r3
 800d776:	f007 f971 	bl	8014a5c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d77a:	bf00      	nop
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20003218 	.word	0x20003218

0800d784 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d788:	4b04      	ldr	r3, [pc, #16]	; (800d79c <BSP_SD_ReadCpltCallback+0x18>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2200      	movs	r2, #0
 800d78e:	2101      	movs	r1, #1
 800d790:	4618      	mov	r0, r3
 800d792:	f007 f963 	bl	8014a5c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d796:	bf00      	nop
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20003218 	.word	0x20003218

0800d7a0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d7ac:	f44f 701d 	mov.w	r0, #628	; 0x274
 800d7b0:	f00a fbb6 	bl	8017f20 <USBD_static_malloc>
 800d7b4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d109      	bne.n	800d7d0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	32b0      	adds	r2, #176	; 0xb0
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	e06e      	b.n	800d8ae <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	32b0      	adds	r2, #176	; 0xb0
 800d7da:	68f9      	ldr	r1, [r7, #12]
 800d7dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	32b0      	adds	r2, #176	; 0xb0
 800d7ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7c1b      	ldrb	r3, [r3, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d12b      	bne.n	800d854 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d7fc:	4b2e      	ldr	r3, [pc, #184]	; (800d8b8 <USBD_MSC_Init+0x118>)
 800d7fe:	7819      	ldrb	r1, [r3, #0]
 800d800:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d804:	2202      	movs	r2, #2
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f00a f9f9 	bl	8017bfe <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d80c:	4b2a      	ldr	r3, [pc, #168]	; (800d8b8 <USBD_MSC_Init+0x118>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	f003 020f 	and.w	r2, r3, #15
 800d814:	6879      	ldr	r1, [r7, #4]
 800d816:	4613      	mov	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	440b      	add	r3, r1
 800d820:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d824:	2201      	movs	r2, #1
 800d826:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d828:	4b24      	ldr	r3, [pc, #144]	; (800d8bc <USBD_MSC_Init+0x11c>)
 800d82a:	7819      	ldrb	r1, [r3, #0]
 800d82c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d830:	2202      	movs	r2, #2
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f00a f9e3 	bl	8017bfe <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d838:	4b20      	ldr	r3, [pc, #128]	; (800d8bc <USBD_MSC_Init+0x11c>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	f003 020f 	and.w	r2, r3, #15
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	4613      	mov	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4413      	add	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	440b      	add	r3, r1
 800d84c:	3324      	adds	r3, #36	; 0x24
 800d84e:	2201      	movs	r2, #1
 800d850:	801a      	strh	r2, [r3, #0]
 800d852:	e028      	b.n	800d8a6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d854:	4b18      	ldr	r3, [pc, #96]	; (800d8b8 <USBD_MSC_Init+0x118>)
 800d856:	7819      	ldrb	r1, [r3, #0]
 800d858:	2340      	movs	r3, #64	; 0x40
 800d85a:	2202      	movs	r2, #2
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f00a f9ce 	bl	8017bfe <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <USBD_MSC_Init+0x118>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	f003 020f 	and.w	r2, r3, #15
 800d86a:	6879      	ldr	r1, [r7, #4]
 800d86c:	4613      	mov	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	4413      	add	r3, r2
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	440b      	add	r3, r1
 800d876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d87a:	2201      	movs	r2, #1
 800d87c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d87e:	4b0f      	ldr	r3, [pc, #60]	; (800d8bc <USBD_MSC_Init+0x11c>)
 800d880:	7819      	ldrb	r1, [r3, #0]
 800d882:	2340      	movs	r3, #64	; 0x40
 800d884:	2202      	movs	r2, #2
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f00a f9b9 	bl	8017bfe <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d88c:	4b0b      	ldr	r3, [pc, #44]	; (800d8bc <USBD_MSC_Init+0x11c>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	f003 020f 	and.w	r2, r3, #15
 800d894:	6879      	ldr	r1, [r7, #4]
 800d896:	4613      	mov	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	440b      	add	r3, r1
 800d8a0:	3324      	adds	r3, #36	; 0x24
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fa2c 	bl	800dd04 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20000077 	.word	0x20000077
 800d8bc:	20000076 	.word	0x20000076

0800d8c0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d8cc:	4b26      	ldr	r3, [pc, #152]	; (800d968 <USBD_MSC_DeInit+0xa8>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f00a f9b9 	bl	8017c4a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d8d8:	4b23      	ldr	r3, [pc, #140]	; (800d968 <USBD_MSC_DeInit+0xa8>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	f003 020f 	and.w	r2, r3, #15
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	440b      	add	r3, r1
 800d8ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d8f4:	4b1d      	ldr	r3, [pc, #116]	; (800d96c <USBD_MSC_DeInit+0xac>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f00a f9a5 	bl	8017c4a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d900:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <USBD_MSC_DeInit+0xac>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	f003 020f 	and.w	r2, r3, #15
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	4613      	mov	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4413      	add	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	440b      	add	r3, r1
 800d914:	3324      	adds	r3, #36	; 0x24
 800d916:	2200      	movs	r2, #0
 800d918:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	32b0      	adds	r2, #176	; 0xb0
 800d924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d018      	beq.n	800d95e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa67 	bl	800de00 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	32b0      	adds	r2, #176	; 0xb0
 800d93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d940:	4618      	mov	r0, r3
 800d942:	f00a fafb 	bl	8017f3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	32b0      	adds	r2, #176	; 0xb0
 800d950:	2100      	movs	r1, #0
 800d952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	20000077 	.word	0x20000077
 800d96c:	20000076 	.word	0x20000076

0800d970 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	32b0      	adds	r2, #176	; 0xb0
 800d984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d988:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d998:	2303      	movs	r3, #3
 800d99a:	e0e1      	b.n	800db60 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d053      	beq.n	800da50 <USBD_MSC_Setup+0xe0>
 800d9a8:	2b20      	cmp	r3, #32
 800d9aa:	f040 80d1 	bne.w	800db50 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	785b      	ldrb	r3, [r3, #1]
 800d9b2:	2bfe      	cmp	r3, #254	; 0xfe
 800d9b4:	d002      	beq.n	800d9bc <USBD_MSC_Setup+0x4c>
 800d9b6:	2bff      	cmp	r3, #255	; 0xff
 800d9b8:	d02a      	beq.n	800da10 <USBD_MSC_Setup+0xa0>
 800d9ba:	e041      	b.n	800da40 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d11e      	bne.n	800da02 <USBD_MSC_Setup+0x92>
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	88db      	ldrh	r3, [r3, #6]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d11a      	bne.n	800da02 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da15      	bge.n	800da02 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	33b0      	adds	r3, #176	; 0xb0
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	4798      	blx	r3
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f003 f923 	bl	8010c44 <USBD_CtlSendData>
 800d9fe:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da00:	e025      	b.n	800da4e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f003 f8ac 	bl	8010b62 <USBD_CtlError>
            ret = USBD_FAIL;
 800da0a:	2303      	movs	r3, #3
 800da0c:	75fb      	strb	r3, [r7, #23]
          break;
 800da0e:	e01e      	b.n	800da4e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	885b      	ldrh	r3, [r3, #2]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10c      	bne.n	800da32 <USBD_MSC_Setup+0xc2>
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	88db      	ldrh	r3, [r3, #6]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d108      	bne.n	800da32 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800da26:	2b00      	cmp	r3, #0
 800da28:	db03      	blt.n	800da32 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9b4 	bl	800dd98 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da30:	e00d      	b.n	800da4e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f003 f894 	bl	8010b62 <USBD_CtlError>
            ret = USBD_FAIL;
 800da3a:	2303      	movs	r3, #3
 800da3c:	75fb      	strb	r3, [r7, #23]
          break;
 800da3e:	e006      	b.n	800da4e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f003 f88d 	bl	8010b62 <USBD_CtlError>
          ret = USBD_FAIL;
 800da48:	2303      	movs	r3, #3
 800da4a:	75fb      	strb	r3, [r7, #23]
          break;
 800da4c:	bf00      	nop
      }
      break;
 800da4e:	e086      	b.n	800db5e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	785b      	ldrb	r3, [r3, #1]
 800da54:	2b0b      	cmp	r3, #11
 800da56:	d872      	bhi.n	800db3e <USBD_MSC_Setup+0x1ce>
 800da58:	a201      	add	r2, pc, #4	; (adr r2, 800da60 <USBD_MSC_Setup+0xf0>)
 800da5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5e:	bf00      	nop
 800da60:	0800da91 	.word	0x0800da91
 800da64:	0800db0d 	.word	0x0800db0d
 800da68:	0800db3f 	.word	0x0800db3f
 800da6c:	0800db3f 	.word	0x0800db3f
 800da70:	0800db3f 	.word	0x0800db3f
 800da74:	0800db3f 	.word	0x0800db3f
 800da78:	0800db3f 	.word	0x0800db3f
 800da7c:	0800db3f 	.word	0x0800db3f
 800da80:	0800db3f 	.word	0x0800db3f
 800da84:	0800db3f 	.word	0x0800db3f
 800da88:	0800dabb 	.word	0x0800dabb
 800da8c:	0800dae5 	.word	0x0800dae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b03      	cmp	r3, #3
 800da9a:	d107      	bne.n	800daac <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800da9c:	f107 030e 	add.w	r3, r7, #14
 800daa0:	2202      	movs	r2, #2
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f003 f8cd 	bl	8010c44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800daaa:	e050      	b.n	800db4e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800daac:	6839      	ldr	r1, [r7, #0]
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f003 f857 	bl	8010b62 <USBD_CtlError>
            ret = USBD_FAIL;
 800dab4:	2303      	movs	r3, #3
 800dab6:	75fb      	strb	r3, [r7, #23]
          break;
 800dab8:	e049      	b.n	800db4e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d107      	bne.n	800dad6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	3304      	adds	r3, #4
 800daca:	2201      	movs	r2, #1
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f003 f8b8 	bl	8010c44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dad4:	e03b      	b.n	800db4e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f003 f842 	bl	8010b62 <USBD_CtlError>
            ret = USBD_FAIL;
 800dade:	2303      	movs	r3, #3
 800dae0:	75fb      	strb	r3, [r7, #23]
          break;
 800dae2:	e034      	b.n	800db4e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b03      	cmp	r3, #3
 800daee:	d106      	bne.n	800dafe <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	885b      	ldrh	r3, [r3, #2]
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	461a      	mov	r2, r3
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dafc:	e027      	b.n	800db4e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f003 f82e 	bl	8010b62 <USBD_CtlError>
            ret = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	75fb      	strb	r3, [r7, #23]
          break;
 800db0a:	e020      	b.n	800db4e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b03      	cmp	r3, #3
 800db16:	d119      	bne.n	800db4c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	885b      	ldrh	r3, [r3, #2]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d115      	bne.n	800db4c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	889b      	ldrh	r3, [r3, #4]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f00a f8ad 	bl	8017c88 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	889b      	ldrh	r3, [r3, #4]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fb2e 	bl	800e198 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800db3c:	e006      	b.n	800db4c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800db3e:	6839      	ldr	r1, [r7, #0]
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f003 f80e 	bl	8010b62 <USBD_CtlError>
          ret = USBD_FAIL;
 800db46:	2303      	movs	r3, #3
 800db48:	75fb      	strb	r3, [r7, #23]
          break;
 800db4a:	e000      	b.n	800db4e <USBD_MSC_Setup+0x1de>
          break;
 800db4c:	bf00      	nop
      }
      break;
 800db4e:	e006      	b.n	800db5e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f003 f805 	bl	8010b62 <USBD_CtlError>
      ret = USBD_FAIL;
 800db58:	2303      	movs	r3, #3
 800db5a:	75fb      	strb	r3, [r7, #23]
      break;
 800db5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800db74:	78fb      	ldrb	r3, [r7, #3]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f959 	bl	800de30 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800db94:	78fb      	ldrb	r3, [r7, #3]
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f983 	bl	800dea4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dbb0:	2181      	movs	r1, #129	; 0x81
 800dbb2:	4812      	ldr	r0, [pc, #72]	; (800dbfc <USBD_MSC_GetHSCfgDesc+0x54>)
 800dbb4:	f002 f972 	bl	800fe9c <USBD_GetEpDesc>
 800dbb8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dbba:	2101      	movs	r1, #1
 800dbbc:	480f      	ldr	r0, [pc, #60]	; (800dbfc <USBD_MSC_GetHSCfgDesc+0x54>)
 800dbbe:	f002 f96d 	bl	800fe9c <USBD_GetEpDesc>
 800dbc2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d006      	beq.n	800dbd8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	711a      	strb	r2, [r3, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f042 0202 	orr.w	r2, r2, #2
 800dbd6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d006      	beq.n	800dbec <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	711a      	strb	r2, [r3, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f042 0202 	orr.w	r2, r2, #2
 800dbea:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2220      	movs	r2, #32
 800dbf0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dbf2:	4b02      	ldr	r3, [pc, #8]	; (800dbfc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	2000004c 	.word	0x2000004c

0800dc00 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dc08:	2181      	movs	r1, #129	; 0x81
 800dc0a:	4812      	ldr	r0, [pc, #72]	; (800dc54 <USBD_MSC_GetFSCfgDesc+0x54>)
 800dc0c:	f002 f946 	bl	800fe9c <USBD_GetEpDesc>
 800dc10:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dc12:	2101      	movs	r1, #1
 800dc14:	480f      	ldr	r0, [pc, #60]	; (800dc54 <USBD_MSC_GetFSCfgDesc+0x54>)
 800dc16:	f002 f941 	bl	800fe9c <USBD_GetEpDesc>
 800dc1a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc2a:	711a      	strb	r2, [r3, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc3e:	711a      	strb	r2, [r3, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2220      	movs	r2, #32
 800dc48:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dc4a:	4b02      	ldr	r3, [pc, #8]	; (800dc54 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	2000004c 	.word	0x2000004c

0800dc58 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800dc60:	2181      	movs	r1, #129	; 0x81
 800dc62:	4812      	ldr	r0, [pc, #72]	; (800dcac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc64:	f002 f91a 	bl	800fe9c <USBD_GetEpDesc>
 800dc68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	480f      	ldr	r0, [pc, #60]	; (800dcac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800dc6e:	f002 f915 	bl	800fe9c <USBD_GetEpDesc>
 800dc72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc82:	711a      	strb	r2, [r3, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc96:	711a      	strb	r2, [r3, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2220      	movs	r2, #32
 800dca0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800dca2:	4b02      	ldr	r3, [pc, #8]	; (800dcac <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	2000004c 	.word	0x2000004c

0800dcb0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	220a      	movs	r2, #10
 800dcbc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800dcbe:	4b03      	ldr	r3, [pc, #12]	; (800dccc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	2000006c 	.word	0x2000006c

0800dcd0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dce0:	2303      	movs	r3, #3
 800dce2:	e009      	b.n	800dcf8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	33b0      	adds	r3, #176	; 0xb0
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	32b0      	adds	r2, #176	; 0xb0
 800dd16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd1a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d032      	beq.n	800dd88 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	33b0      	adds	r3, #176	; 0xb0
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2000      	movs	r0, #0
 800dd5a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800dd5c:	4b0c      	ldr	r3, [pc, #48]	; (800dd90 <MSC_BOT_Init+0x8c>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f009 ff90 	bl	8017c88 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800dd68:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <MSC_BOT_Init+0x90>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f009 ff8a 	bl	8017c88 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800dd74:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <MSC_BOT_Init+0x8c>)
 800dd76:	7819      	ldrb	r1, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dd7e:	231f      	movs	r3, #31
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f00a f84a 	bl	8017e1a <USBD_LL_PrepareReceive>
 800dd86:	e000      	b.n	800dd8a <MSC_BOT_Init+0x86>
    return;
 800dd88:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20000077 	.word	0x20000077
 800dd94:	20000076 	.word	0x20000076

0800dd98 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	32b0      	adds	r2, #176	; 0xb0
 800ddaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01b      	beq.n	800ddee <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800ddc2:	4b0d      	ldr	r3, [pc, #52]	; (800ddf8 <MSC_BOT_Reset+0x60>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f009 ff9b 	bl	8017d04 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800ddce:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <MSC_BOT_Reset+0x64>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f009 ff95 	bl	8017d04 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ddda:	4b08      	ldr	r3, [pc, #32]	; (800ddfc <MSC_BOT_Reset+0x64>)
 800dddc:	7819      	ldrb	r1, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800dde4:	231f      	movs	r3, #31
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f00a f817 	bl	8017e1a <USBD_LL_PrepareReceive>
 800ddec:	e000      	b.n	800ddf0 <MSC_BOT_Reset+0x58>
    return;
 800ddee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000076 	.word	0x20000076
 800ddfc:	20000077 	.word	0x20000077

0800de00 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	32b0      	adds	r2, #176	; 0xb0
 800de12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de16:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	721a      	strb	r2, [r3, #8]
  }
}
 800de24:	bf00      	nop
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	32b0      	adds	r2, #176	; 0xb0
 800de46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de4a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d020      	beq.n	800de94 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	7a1b      	ldrb	r3, [r3, #8]
 800de56:	2b02      	cmp	r3, #2
 800de58:	d005      	beq.n	800de66 <MSC_BOT_DataIn+0x36>
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	db1c      	blt.n	800de98 <MSC_BOT_DataIn+0x68>
 800de5e:	3b03      	subs	r3, #3
 800de60:	2b01      	cmp	r3, #1
 800de62:	d819      	bhi.n	800de98 <MSC_BOT_DataIn+0x68>
 800de64:	e011      	b.n	800de8a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800de72:	461a      	mov	r2, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f9c9 	bl	800e20c <SCSI_ProcessCmd>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da0d      	bge.n	800de9c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de80:	2101      	movs	r1, #1
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f90c 	bl	800e0a0 <MSC_BOT_SendCSW>
      }
      break;
 800de88:	e008      	b.n	800de9c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800de8a:	2100      	movs	r1, #0
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f907 	bl	800e0a0 <MSC_BOT_SendCSW>
      break;
 800de92:	e004      	b.n	800de9e <MSC_BOT_DataIn+0x6e>
    return;
 800de94:	bf00      	nop
 800de96:	e002      	b.n	800de9e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800de98:	bf00      	nop
 800de9a:	e000      	b.n	800de9e <MSC_BOT_DataIn+0x6e>
      break;
 800de9c:	bf00      	nop
  }
}
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	32b0      	adds	r2, #176	; 0xb0
 800deba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d01c      	beq.n	800df00 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	7a1b      	ldrb	r3, [r3, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d002      	beq.n	800ded4 <MSC_BOT_DataOut+0x30>
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d004      	beq.n	800dedc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800ded2:	e018      	b.n	800df06 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f819 	bl	800df0c <MSC_BOT_CBW_Decode>
      break;
 800deda:	e014      	b.n	800df06 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800dee8:	461a      	mov	r2, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f98e 	bl	800e20c <SCSI_ProcessCmd>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	da06      	bge.n	800df04 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800def6:	2101      	movs	r1, #1
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f8d1 	bl	800e0a0 <MSC_BOT_SendCSW>
      break;
 800defe:	e001      	b.n	800df04 <MSC_BOT_DataOut+0x60>
    return;
 800df00:	bf00      	nop
 800df02:	e000      	b.n	800df06 <MSC_BOT_DataOut+0x62>
      break;
 800df04:	bf00      	nop
  }
}
 800df06:	3710      	adds	r7, #16
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	32b0      	adds	r2, #176	; 0xb0
 800df1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df22:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d079      	beq.n	800e01e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800df42:	4b3a      	ldr	r3, [pc, #232]	; (800e02c <MSC_BOT_CBW_Decode+0x120>)
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f009 ff87 	bl	8017e5c <USBD_LL_GetRxDataSize>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b1f      	cmp	r3, #31
 800df52:	d114      	bne.n	800df7e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800df5a:	4a35      	ldr	r2, [pc, #212]	; (800e030 <MSC_BOT_CBW_Decode+0x124>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d10e      	bne.n	800df7e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800df66:	2b01      	cmp	r3, #1
 800df68:	d809      	bhi.n	800df7e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800df7a:	2b10      	cmp	r3, #16
 800df7c:	d90e      	bls.n	800df9c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df84:	2320      	movs	r3, #32
 800df86:	2205      	movs	r2, #5
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fe28 	bl	800ebde <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2202      	movs	r2, #2
 800df92:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f8bd 	bl	800e114 <MSC_BOT_Abort>
 800df9a:	e043      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f92e 	bl	800e20c <SCSI_ProcessCmd>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	da0c      	bge.n	800dfd0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	7a1b      	ldrb	r3, [r3, #8]
 800dfba:	2b05      	cmp	r3, #5
 800dfbc:	d104      	bne.n	800dfc8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 f86d 	bl	800e0a0 <MSC_BOT_SendCSW>
 800dfc6:	e02d      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f8a3 	bl	800e114 <MSC_BOT_Abort>
 800dfce:	e029      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	7a1b      	ldrb	r3, [r3, #8]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d024      	beq.n	800e022 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d020      	beq.n	800e022 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d01c      	beq.n	800e022 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d009      	beq.n	800e004 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f103 0110 	add.w	r1, r3, #16
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f819 	bl	800e034 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e002:	e00f      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d104      	bne.n	800e016 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e00c:	2100      	movs	r1, #0
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f846 	bl	800e0a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e014:	e006      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f87c 	bl	800e114 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e01c:	e002      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
    return;
 800e01e:	bf00      	nop
 800e020:	e000      	b.n	800e024 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800e022:	bf00      	nop
    }
  }
}
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000077 	.word	0x20000077
 800e030:	43425355 	.word	0x43425355

0800e034 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	32b0      	adds	r2, #176	; 0xb0
 800e04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d01e      	beq.n	800e094 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	4293      	cmp	r3, r2
 800e060:	bf28      	it	cs
 800e062:	4613      	movcs	r3, r2
 800e064:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	1ad2      	subs	r2, r2, r3
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2204      	movs	r2, #4
 800e082:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800e084:	4b05      	ldr	r3, [pc, #20]	; (800e09c <MSC_BOT_SendData+0x68>)
 800e086:	7819      	ldrb	r1, [r3, #0]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	68ba      	ldr	r2, [r7, #8]
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f009 fea3 	bl	8017dd8 <USBD_LL_Transmit>
 800e092:	e000      	b.n	800e096 <MSC_BOT_SendData+0x62>
    return;
 800e094:	bf00      	nop
}
 800e096:	3718      	adds	r7, #24
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20000076 	.word	0x20000076

0800e0a0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	32b0      	adds	r2, #176	; 0xb0
 800e0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d01d      	beq.n	800e0fe <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	4a10      	ldr	r2, [pc, #64]	; (800e108 <MSC_BOT_SendCSW+0x68>)
 800e0c6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	78fa      	ldrb	r2, [r7, #3]
 800e0ce:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800e0d8:	4b0c      	ldr	r3, [pc, #48]	; (800e10c <MSC_BOT_SendCSW+0x6c>)
 800e0da:	7819      	ldrb	r1, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e0e2:	230d      	movs	r3, #13
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f009 fe77 	bl	8017dd8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800e0ea:	4b09      	ldr	r3, [pc, #36]	; (800e110 <MSC_BOT_SendCSW+0x70>)
 800e0ec:	7819      	ldrb	r1, [r3, #0]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e0f4:	231f      	movs	r3, #31
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f009 fe8f 	bl	8017e1a <USBD_LL_PrepareReceive>
 800e0fc:	e000      	b.n	800e100 <MSC_BOT_SendCSW+0x60>
    return;
 800e0fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	53425355 	.word	0x53425355
 800e10c:	20000076 	.word	0x20000076
 800e110:	20000077 	.word	0x20000077

0800e114 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	32b0      	adds	r2, #176	; 0xb0
 800e126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d02a      	beq.n	800e188 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10e      	bne.n	800e15a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e142:	2b00      	cmp	r3, #0
 800e144:	d009      	beq.n	800e15a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d105      	bne.n	800e15a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e14e:	4b10      	ldr	r3, [pc, #64]	; (800e190 <MSC_BOT_Abort+0x7c>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f009 fdb6 	bl	8017cc6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <MSC_BOT_Abort+0x80>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f009 fdb0 	bl	8017cc6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	7a5b      	ldrb	r3, [r3, #9]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d10d      	bne.n	800e18a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e16e:	4b09      	ldr	r3, [pc, #36]	; (800e194 <MSC_BOT_Abort+0x80>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f009 fda6 	bl	8017cc6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e17a:	4b05      	ldr	r3, [pc, #20]	; (800e190 <MSC_BOT_Abort+0x7c>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f009 fda0 	bl	8017cc6 <USBD_LL_StallEP>
 800e186:	e000      	b.n	800e18a <MSC_BOT_Abort+0x76>
    return;
 800e188:	bf00      	nop
  }
}
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20000077 	.word	0x20000077
 800e194:	20000076 	.word	0x20000076

0800e198 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	32b0      	adds	r2, #176	; 0xb0
 800e1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d01d      	beq.n	800e1f6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	7a5b      	ldrb	r3, [r3, #9]
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d10c      	bne.n	800e1dc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800e1c2:	4b10      	ldr	r3, [pc, #64]	; (800e204 <MSC_BOT_CplClrFeature+0x6c>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f009 fd7c 	bl	8017cc6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <MSC_BOT_CplClrFeature+0x70>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f009 fd76 	bl	8017cc6 <USBD_LL_StallEP>
 800e1da:	e00f      	b.n	800e1fc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	da0a      	bge.n	800e1fa <MSC_BOT_CplClrFeature+0x62>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	7a5b      	ldrb	r3, [r3, #9]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d006      	beq.n	800e1fa <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ff56 	bl	800e0a0 <MSC_BOT_SendCSW>
 800e1f4:	e002      	b.n	800e1fc <MSC_BOT_CplClrFeature+0x64>
    return;
 800e1f6:	bf00      	nop
 800e1f8:	e000      	b.n	800e1fc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800e1fa:	bf00      	nop
  }
}
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	20000076 	.word	0x20000076
 800e208:	20000077 	.word	0x20000077

0800e20c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	460b      	mov	r3, r1
 800e216:	607a      	str	r2, [r7, #4]
 800e218:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	32b0      	adds	r2, #176	; 0xb0
 800e224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e228:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800e230:	f04f 33ff 	mov.w	r3, #4294967295
 800e234:	e168      	b.n	800e508 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2baa      	cmp	r3, #170	; 0xaa
 800e23c:	f000 8144 	beq.w	800e4c8 <SCSI_ProcessCmd+0x2bc>
 800e240:	2baa      	cmp	r3, #170	; 0xaa
 800e242:	f300 8153 	bgt.w	800e4ec <SCSI_ProcessCmd+0x2e0>
 800e246:	2ba8      	cmp	r3, #168	; 0xa8
 800e248:	f000 812c 	beq.w	800e4a4 <SCSI_ProcessCmd+0x298>
 800e24c:	2ba8      	cmp	r3, #168	; 0xa8
 800e24e:	f300 814d 	bgt.w	800e4ec <SCSI_ProcessCmd+0x2e0>
 800e252:	2b5a      	cmp	r3, #90	; 0x5a
 800e254:	f300 80c0 	bgt.w	800e3d8 <SCSI_ProcessCmd+0x1cc>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f2c0 8147 	blt.w	800e4ec <SCSI_ProcessCmd+0x2e0>
 800e25e:	2b5a      	cmp	r3, #90	; 0x5a
 800e260:	f200 8144 	bhi.w	800e4ec <SCSI_ProcessCmd+0x2e0>
 800e264:	a201      	add	r2, pc, #4	; (adr r2, 800e26c <SCSI_ProcessCmd+0x60>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e3df 	.word	0x0800e3df
 800e270:	0800e4ed 	.word	0x0800e4ed
 800e274:	0800e4ed 	.word	0x0800e4ed
 800e278:	0800e3f1 	.word	0x0800e3f1
 800e27c:	0800e4ed 	.word	0x0800e4ed
 800e280:	0800e4ed 	.word	0x0800e4ed
 800e284:	0800e4ed 	.word	0x0800e4ed
 800e288:	0800e4ed 	.word	0x0800e4ed
 800e28c:	0800e4ed 	.word	0x0800e4ed
 800e290:	0800e4ed 	.word	0x0800e4ed
 800e294:	0800e4ed 	.word	0x0800e4ed
 800e298:	0800e4ed 	.word	0x0800e4ed
 800e29c:	0800e4ed 	.word	0x0800e4ed
 800e2a0:	0800e4ed 	.word	0x0800e4ed
 800e2a4:	0800e4ed 	.word	0x0800e4ed
 800e2a8:	0800e4ed 	.word	0x0800e4ed
 800e2ac:	0800e4ed 	.word	0x0800e4ed
 800e2b0:	0800e4ed 	.word	0x0800e4ed
 800e2b4:	0800e403 	.word	0x0800e403
 800e2b8:	0800e4ed 	.word	0x0800e4ed
 800e2bc:	0800e4ed 	.word	0x0800e4ed
 800e2c0:	0800e4ed 	.word	0x0800e4ed
 800e2c4:	0800e4ed 	.word	0x0800e4ed
 800e2c8:	0800e4ed 	.word	0x0800e4ed
 800e2cc:	0800e4ed 	.word	0x0800e4ed
 800e2d0:	0800e4ed 	.word	0x0800e4ed
 800e2d4:	0800e439 	.word	0x0800e439
 800e2d8:	0800e415 	.word	0x0800e415
 800e2dc:	0800e4ed 	.word	0x0800e4ed
 800e2e0:	0800e4ed 	.word	0x0800e4ed
 800e2e4:	0800e427 	.word	0x0800e427
 800e2e8:	0800e4ed 	.word	0x0800e4ed
 800e2ec:	0800e4ed 	.word	0x0800e4ed
 800e2f0:	0800e4ed 	.word	0x0800e4ed
 800e2f4:	0800e4ed 	.word	0x0800e4ed
 800e2f8:	0800e45d 	.word	0x0800e45d
 800e2fc:	0800e4ed 	.word	0x0800e4ed
 800e300:	0800e46f 	.word	0x0800e46f
 800e304:	0800e4ed 	.word	0x0800e4ed
 800e308:	0800e4ed 	.word	0x0800e4ed
 800e30c:	0800e493 	.word	0x0800e493
 800e310:	0800e4ed 	.word	0x0800e4ed
 800e314:	0800e4b7 	.word	0x0800e4b7
 800e318:	0800e4ed 	.word	0x0800e4ed
 800e31c:	0800e4ed 	.word	0x0800e4ed
 800e320:	0800e4ed 	.word	0x0800e4ed
 800e324:	0800e4ed 	.word	0x0800e4ed
 800e328:	0800e4db 	.word	0x0800e4db
 800e32c:	0800e4ed 	.word	0x0800e4ed
 800e330:	0800e4ed 	.word	0x0800e4ed
 800e334:	0800e4ed 	.word	0x0800e4ed
 800e338:	0800e4ed 	.word	0x0800e4ed
 800e33c:	0800e4ed 	.word	0x0800e4ed
 800e340:	0800e4ed 	.word	0x0800e4ed
 800e344:	0800e4ed 	.word	0x0800e4ed
 800e348:	0800e4ed 	.word	0x0800e4ed
 800e34c:	0800e4ed 	.word	0x0800e4ed
 800e350:	0800e4ed 	.word	0x0800e4ed
 800e354:	0800e4ed 	.word	0x0800e4ed
 800e358:	0800e4ed 	.word	0x0800e4ed
 800e35c:	0800e4ed 	.word	0x0800e4ed
 800e360:	0800e4ed 	.word	0x0800e4ed
 800e364:	0800e4ed 	.word	0x0800e4ed
 800e368:	0800e4ed 	.word	0x0800e4ed
 800e36c:	0800e4ed 	.word	0x0800e4ed
 800e370:	0800e4ed 	.word	0x0800e4ed
 800e374:	0800e4ed 	.word	0x0800e4ed
 800e378:	0800e4ed 	.word	0x0800e4ed
 800e37c:	0800e4ed 	.word	0x0800e4ed
 800e380:	0800e4ed 	.word	0x0800e4ed
 800e384:	0800e4ed 	.word	0x0800e4ed
 800e388:	0800e4ed 	.word	0x0800e4ed
 800e38c:	0800e4ed 	.word	0x0800e4ed
 800e390:	0800e4ed 	.word	0x0800e4ed
 800e394:	0800e4ed 	.word	0x0800e4ed
 800e398:	0800e4ed 	.word	0x0800e4ed
 800e39c:	0800e4ed 	.word	0x0800e4ed
 800e3a0:	0800e4ed 	.word	0x0800e4ed
 800e3a4:	0800e4ed 	.word	0x0800e4ed
 800e3a8:	0800e4ed 	.word	0x0800e4ed
 800e3ac:	0800e4ed 	.word	0x0800e4ed
 800e3b0:	0800e4ed 	.word	0x0800e4ed
 800e3b4:	0800e4ed 	.word	0x0800e4ed
 800e3b8:	0800e4ed 	.word	0x0800e4ed
 800e3bc:	0800e4ed 	.word	0x0800e4ed
 800e3c0:	0800e4ed 	.word	0x0800e4ed
 800e3c4:	0800e4ed 	.word	0x0800e4ed
 800e3c8:	0800e4ed 	.word	0x0800e4ed
 800e3cc:	0800e4ed 	.word	0x0800e4ed
 800e3d0:	0800e4ed 	.word	0x0800e4ed
 800e3d4:	0800e44b 	.word	0x0800e44b
 800e3d8:	2b9e      	cmp	r3, #158	; 0x9e
 800e3da:	d051      	beq.n	800e480 <SCSI_ProcessCmd+0x274>
 800e3dc:	e086      	b.n	800e4ec <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f000 f893 	bl	800e510 <SCSI_TestUnitReady>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ee:	e089      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 fb6e 	bl	800ead8 <SCSI_RequestSense>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800e400:	e080      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4619      	mov	r1, r3
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 f8db 	bl	800e5c4 <SCSI_Inquiry>
 800e40e:	4603      	mov	r3, r0
 800e410:	75fb      	strb	r3, [r7, #23]
      break;
 800e412:	e077      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e414:	7afb      	ldrb	r3, [r7, #11]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	4619      	mov	r1, r3
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 fc2a 	bl	800ec74 <SCSI_StartStopUnit>
 800e420:	4603      	mov	r3, r0
 800e422:	75fb      	strb	r3, [r7, #23]
      break;
 800e424:	e06e      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	4619      	mov	r1, r3
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 fc76 	bl	800ed1e <SCSI_AllowPreventRemovable>
 800e432:	4603      	mov	r3, r0
 800e434:	75fb      	strb	r3, [r7, #23]
      break;
 800e436:	e065      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f000 faea 	bl	800ea18 <SCSI_ModeSense6>
 800e444:	4603      	mov	r3, r0
 800e446:	75fb      	strb	r3, [r7, #23]
      break;
 800e448:	e05c      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 fb11 	bl	800ea78 <SCSI_ModeSense10>
 800e456:	4603      	mov	r3, r0
 800e458:	75fb      	strb	r3, [r7, #23]
      break;
 800e45a:	e053      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e45c:	7afb      	ldrb	r3, [r7, #11]
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4619      	mov	r1, r3
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 fa5d 	bl	800e922 <SCSI_ReadFormatCapacity>
 800e468:	4603      	mov	r3, r0
 800e46a:	75fb      	strb	r3, [r7, #23]
      break;
 800e46c:	e04a      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e46e:	7afb      	ldrb	r3, [r7, #11]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4619      	mov	r1, r3
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 f923 	bl	800e6c0 <SCSI_ReadCapacity10>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75fb      	strb	r3, [r7, #23]
      break;
 800e47e:	e041      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e480:	7afb      	ldrb	r3, [r7, #11]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4619      	mov	r1, r3
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 f998 	bl	800e7bc <SCSI_ReadCapacity16>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75fb      	strb	r3, [r7, #23]
      break;
 800e490:	e038      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e492:	7afb      	ldrb	r3, [r7, #11]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4619      	mov	r1, r3
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f000 fc6d 	bl	800ed78 <SCSI_Read10>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e4a2:	e02f      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e4a4:	7afb      	ldrb	r3, [r7, #11]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fd0e 	bl	800eecc <SCSI_Read12>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800e4b4:	e026      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e4b6:	7afb      	ldrb	r3, [r7, #11]
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f000 fdb9 	bl	800f034 <SCSI_Write10>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c6:	e01d      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 fe86 	bl	800f1e0 <SCSI_Write12>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800e4d8:	e014      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e4da:	7afb      	ldrb	r3, [r7, #11]
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 ff63 	bl	800f3ac <SCSI_Verify10>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ea:	e00b      	b.n	800e504 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e4ec:	7af9      	ldrb	r1, [r7, #11]
 800e4ee:	2320      	movs	r3, #32
 800e4f0:	2205      	movs	r2, #5
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f000 fb73 	bl	800ebde <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e4fe:	23ff      	movs	r3, #255	; 0xff
 800e500:	75fb      	strb	r3, [r7, #23]
      break;
 800e502:	bf00      	nop
  }

  return ret;
 800e504:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	460b      	mov	r3, r1
 800e51a:	607a      	str	r2, [r7, #4]
 800e51c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	32b0      	adds	r2, #176	; 0xb0
 800e528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e52c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800e534:	f04f 33ff 	mov.w	r3, #4294967295
 800e538:	e03f      	b.n	800e5ba <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00a      	beq.n	800e55a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e54a:	2320      	movs	r3, #32
 800e54c:	2205      	movs	r2, #5
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 fb45 	bl	800ebde <SCSI_SenseCode>

    return -1;
 800e554:	f04f 33ff 	mov.w	r3, #4294967295
 800e558:	e02f      	b.n	800e5ba <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e560:	2b02      	cmp	r3, #2
 800e562:	d10b      	bne.n	800e57c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e564:	7af9      	ldrb	r1, [r7, #11]
 800e566:	233a      	movs	r3, #58	; 0x3a
 800e568:	2202      	movs	r2, #2
 800e56a:	68f8      	ldr	r0, [r7, #12]
 800e56c:	f000 fb37 	bl	800ebde <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2205      	movs	r2, #5
 800e574:	721a      	strb	r2, [r3, #8]
    return -1;
 800e576:	f04f 33ff 	mov.w	r3, #4294967295
 800e57a:	e01e      	b.n	800e5ba <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	33b0      	adds	r3, #176	; 0xb0
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	7afa      	ldrb	r2, [r7, #11]
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00b      	beq.n	800e5b2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e59a:	7af9      	ldrb	r1, [r7, #11]
 800e59c:	233a      	movs	r3, #58	; 0x3a
 800e59e:	2202      	movs	r2, #2
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f000 fb1c 	bl	800ebde <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2205      	movs	r2, #5
 800e5aa:	721a      	strb	r2, [r3, #8]

    return -1;
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	e003      	b.n	800e5ba <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	60da      	str	r2, [r3, #12]

  return 0;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
	...

0800e5c4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	607a      	str	r2, [r7, #4]
 800e5d0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	32b0      	adds	r2, #176	; 0xb0
 800e5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <SCSI_Inquiry+0x2a>
  {
    return -1;
 800e5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ec:	e05f      	b.n	800e6ae <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10a      	bne.n	800e60e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e5fe:	2320      	movs	r3, #32
 800e600:	2205      	movs	r2, #5
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f000 faeb 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800e608:	f04f 33ff 	mov.w	r3, #4294967295
 800e60c:	e04f      	b.n	800e6ae <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3301      	adds	r3, #1
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	f003 0301 	and.w	r3, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d020      	beq.n	800e65e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3302      	adds	r3, #2
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d105      	bne.n	800e632 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e626:	2206      	movs	r2, #6
 800e628:	4923      	ldr	r1, [pc, #140]	; (800e6b8 <SCSI_Inquiry+0xf4>)
 800e62a:	69b8      	ldr	r0, [r7, #24]
 800e62c:	f001 f844 	bl	800f6b8 <SCSI_UpdateBotData>
 800e630:	e03c      	b.n	800e6ac <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3302      	adds	r3, #2
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b80      	cmp	r3, #128	; 0x80
 800e63a:	d105      	bne.n	800e648 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e63c:	2208      	movs	r2, #8
 800e63e:	491f      	ldr	r1, [pc, #124]	; (800e6bc <SCSI_Inquiry+0xf8>)
 800e640:	69b8      	ldr	r0, [r7, #24]
 800e642:	f001 f839 	bl	800f6b8 <SCSI_UpdateBotData>
 800e646:	e031      	b.n	800e6ac <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e64e:	2324      	movs	r3, #36	; 0x24
 800e650:	2205      	movs	r2, #5
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f000 fac3 	bl	800ebde <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e658:	f04f 33ff 	mov.w	r3, #4294967295
 800e65c:	e027      	b.n	800e6ae <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	33b0      	adds	r3, #176	; 0xb0
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	69d9      	ldr	r1, [r3, #28]
 800e670:	7afa      	ldrb	r2, [r7, #11]
 800e672:	4613      	mov	r3, r2
 800e674:	00db      	lsls	r3, r3, #3
 800e676:	4413      	add	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	440b      	add	r3, r1
 800e67c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	3304      	adds	r3, #4
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	b29b      	uxth	r3, r3
 800e686:	3305      	adds	r3, #5
 800e688:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	3304      	adds	r3, #4
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b29b      	uxth	r3, r3
 800e692:	8bfa      	ldrh	r2, [r7, #30]
 800e694:	429a      	cmp	r2, r3
 800e696:	d303      	bcc.n	800e6a0 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	3304      	adds	r3, #4
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e6a0:	8bfb      	ldrh	r3, [r7, #30]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	69b8      	ldr	r0, [r7, #24]
 800e6a8:	f001 f806 	bl	800f6b8 <SCSI_UpdateBotData>
  }

  return 0;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000078 	.word	0x20000078
 800e6bc:	20000080 	.word	0x20000080

0800e6c0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	607a      	str	r2, [r7, #4]
 800e6cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	32b0      	adds	r2, #176	; 0xb0
 800e6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6dc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800e6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e8:	e064      	b.n	800e7b4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	33b0      	adds	r3, #176	; 0xb0
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	697a      	ldr	r2, [r7, #20]
 800e6fe:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e708:	7af8      	ldrb	r0, [r7, #11]
 800e70a:	4798      	blx	r3
 800e70c:	4603      	mov	r3, r0
 800e70e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d104      	bne.n	800e722 <SCSI_ReadCapacity10+0x62>
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d108      	bne.n	800e734 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e722:	7af9      	ldrb	r1, [r7, #11]
 800e724:	233a      	movs	r3, #58	; 0x3a
 800e726:	2202      	movs	r2, #2
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f000 fa58 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800e72e:	f04f 33ff 	mov.w	r3, #4294967295
 800e732:	e03f      	b.n	800e7b4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e73a:	3b01      	subs	r3, #1
 800e73c:	0e1b      	lsrs	r3, r3, #24
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e74a:	3b01      	subs	r3, #1
 800e74c:	0c1b      	lsrs	r3, r3, #16
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e75a:	3b01      	subs	r3, #1
 800e75c:	0a1b      	lsrs	r3, r3, #8
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	3b01      	subs	r3, #1
 800e76e:	b2da      	uxtb	r2, r3
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e77a:	161b      	asrs	r3, r3, #24
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e788:	141b      	asrs	r3, r3, #16
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e796:	0a1b      	lsrs	r3, r3, #8
 800e798:	b29b      	uxth	r3, r3
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	2208      	movs	r2, #8
 800e7b0:	60da      	str	r2, [r3, #12]

  return 0;
 800e7b2:	2300      	movs	r3, #0

}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b088      	sub	sp, #32
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	32b0      	adds	r2, #176	; 0xb0
 800e7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7d8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d102      	bne.n	800e7e6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800e7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7e4:	e099      	b.n	800e91a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	33b0      	adds	r3, #176	; 0xb0
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4413      	add	r3, r2
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e804:	7af8      	ldrb	r0, [r7, #11]
 800e806:	4798      	blx	r3
 800e808:	4603      	mov	r3, r0
 800e80a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e80c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d104      	bne.n	800e81e <SCSI_ReadCapacity16+0x62>
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	d108      	bne.n	800e830 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e81e:	7af9      	ldrb	r1, [r7, #11]
 800e820:	233a      	movs	r3, #58	; 0x3a
 800e822:	2202      	movs	r2, #2
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	f000 f9da 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800e82a:	f04f 33ff 	mov.w	r3, #4294967295
 800e82e:	e074      	b.n	800e91a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	330a      	adds	r3, #10
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	330b      	adds	r3, #11
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e840:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	330c      	adds	r3, #12
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e84a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	320d      	adds	r2, #13
 800e850:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e852:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e858:	2300      	movs	r3, #0
 800e85a:	77fb      	strb	r3, [r7, #31]
 800e85c:	e007      	b.n	800e86e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800e85e:	7ffb      	ldrb	r3, [r7, #31]
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	4413      	add	r3, r2
 800e864:	2200      	movs	r2, #0
 800e866:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e868:	7ffb      	ldrb	r3, [r7, #31]
 800e86a:	3301      	adds	r3, #1
 800e86c:	77fb      	strb	r3, [r7, #31]
 800e86e:	7ffa      	ldrb	r2, [r7, #31]
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	429a      	cmp	r2, r3
 800e876:	d3f2      	bcc.n	800e85e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e87e:	3b01      	subs	r3, #1
 800e880:	0e1b      	lsrs	r3, r3, #24
 800e882:	b2da      	uxtb	r2, r3
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e88e:	3b01      	subs	r3, #1
 800e890:	0c1b      	lsrs	r3, r3, #16
 800e892:	b2da      	uxtb	r2, r3
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	0a1b      	lsrs	r3, r3, #8
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8be:	161b      	asrs	r3, r3, #24
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8cc:	141b      	asrs	r3, r3, #16
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8da:	0a1b      	lsrs	r3, r3, #8
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	330a      	adds	r3, #10
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	330b      	adds	r3, #11
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e900:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	330c      	adds	r3, #12
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e90a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	320d      	adds	r2, #13
 800e910:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e912:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	60da      	str	r2, [r3, #12]

  return 0;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b088      	sub	sp, #32
 800e926:	af00      	add	r7, sp, #0
 800e928:	60f8      	str	r0, [r7, #12]
 800e92a:	460b      	mov	r3, r1
 800e92c:	607a      	str	r2, [r7, #4]
 800e92e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	32b0      	adds	r2, #176	; 0xb0
 800e93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e93e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800e946:	f04f 33ff 	mov.w	r3, #4294967295
 800e94a:	e061      	b.n	800ea10 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	33b0      	adds	r3, #176	; 0xb0
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4413      	add	r3, r2
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f107 0214 	add.w	r2, r7, #20
 800e962:	f107 0110 	add.w	r1, r7, #16
 800e966:	7af8      	ldrb	r0, [r7, #11]
 800e968:	4798      	blx	r3
 800e96a:	4603      	mov	r3, r0
 800e96c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e96e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d104      	bne.n	800e980 <SCSI_ReadFormatCapacity+0x5e>
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d108      	bne.n	800e992 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e980:	7af9      	ldrb	r1, [r7, #11]
 800e982:	233a      	movs	r3, #58	; 0x3a
 800e984:	2202      	movs	r2, #2
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f000 f929 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295
 800e990:	e03e      	b.n	800ea10 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800e992:	2300      	movs	r3, #0
 800e994:	83fb      	strh	r3, [r7, #30]
 800e996:	e007      	b.n	800e9a8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800e998:	8bfb      	ldrh	r3, [r7, #30]
 800e99a:	69ba      	ldr	r2, [r7, #24]
 800e99c:	4413      	add	r3, r2
 800e99e:	2200      	movs	r2, #0
 800e9a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e9a2:	8bfb      	ldrh	r3, [r7, #30]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	83fb      	strh	r3, [r7, #30]
 800e9a8:	8bfb      	ldrh	r3, [r7, #30]
 800e9aa:	2b0b      	cmp	r3, #11
 800e9ac:	d9f4      	bls.n	800e998 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	2208      	movs	r2, #8
 800e9b2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	0e1b      	lsrs	r3, r3, #24
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	0c1b      	lsrs	r3, r3, #16
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	0a1b      	lsrs	r3, r3, #8
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e9ea:	8abb      	ldrh	r3, [r7, #20]
 800e9ec:	141b      	asrs	r3, r3, #16
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e9f4:	8abb      	ldrh	r3, [r7, #20]
 800e9f6:	0a1b      	lsrs	r3, r3, #8
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800ea00:	8abb      	ldrh	r3, [r7, #20]
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	220c      	movs	r2, #12
 800ea0c:	60da      	str	r2, [r3, #12]

  return 0;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3720      	adds	r7, #32
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	460b      	mov	r3, r1
 800ea22:	607a      	str	r2, [r7, #4]
 800ea24:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	32b0      	adds	r2, #176	; 0xb0
 800ea30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea34:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ea36:	2317      	movs	r3, #23
 800ea38:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800ea40:	f04f 33ff 	mov.w	r3, #4294967295
 800ea44:	e011      	b.n	800ea6a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	8afa      	ldrh	r2, [r7, #22]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d303      	bcc.n	800ea5c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3304      	adds	r3, #4
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ea5c:	8afb      	ldrh	r3, [r7, #22]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	4904      	ldr	r1, [pc, #16]	; (800ea74 <SCSI_ModeSense6+0x5c>)
 800ea62:	6938      	ldr	r0, [r7, #16]
 800ea64:	f000 fe28 	bl	800f6b8 <SCSI_UpdateBotData>

  return 0;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20000088 	.word	0x20000088

0800ea78 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	460b      	mov	r3, r1
 800ea82:	607a      	str	r2, [r7, #4]
 800ea84:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	32b0      	adds	r2, #176	; 0xb0
 800ea90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea94:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800ea96:	231b      	movs	r3, #27
 800ea98:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800eaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa4:	e011      	b.n	800eaca <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	3308      	adds	r3, #8
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	8afa      	ldrh	r2, [r7, #22]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d303      	bcc.n	800eabc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3308      	adds	r3, #8
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800eabc:	8afb      	ldrh	r3, [r7, #22]
 800eabe:	461a      	mov	r2, r3
 800eac0:	4904      	ldr	r1, [pc, #16]	; (800ead4 <SCSI_ModeSense10+0x5c>)
 800eac2:	6938      	ldr	r0, [r7, #16]
 800eac4:	f000 fdf8 	bl	800f6b8 <SCSI_UpdateBotData>

  return 0;
 800eac8:	2300      	movs	r3, #0
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	200000a0 	.word	0x200000a0

0800ead8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	460b      	mov	r3, r1
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	32b0      	adds	r2, #176	; 0xb0
 800eaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295
 800eb00:	e069      	b.n	800ebd6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10a      	bne.n	800eb22 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eb12:	2320      	movs	r3, #32
 800eb14:	2205      	movs	r2, #5
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f000 f861 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb20:	e059      	b.n	800ebd6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eb22:	2300      	movs	r3, #0
 800eb24:	75fb      	strb	r3, [r7, #23]
 800eb26:	e007      	b.n	800eb38 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	2200      	movs	r2, #0
 800eb30:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800eb32:	7dfb      	ldrb	r3, [r7, #23]
 800eb34:	3301      	adds	r3, #1
 800eb36:	75fb      	strb	r3, [r7, #23]
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
 800eb3a:	2b11      	cmp	r3, #17
 800eb3c:	d9f4      	bls.n	800eb28 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	2270      	movs	r2, #112	; 0x70
 800eb42:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	220c      	movs	r2, #12
 800eb48:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d02e      	beq.n	800ebb8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb60:	461a      	mov	r2, r3
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	3248      	adds	r2, #72	; 0x48
 800eb66:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	3348      	adds	r3, #72	; 0x48
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	4413      	add	r3, r2
 800eb7c:	791a      	ldrb	r2, [r3, #4]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	3348      	adds	r3, #72	; 0x48
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	4413      	add	r3, r2
 800eb90:	795a      	ldrb	r2, [r3, #5]
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	d103      	bne.n	800ebb8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	2212      	movs	r2, #18
 800ebbc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	2b12      	cmp	r3, #18
 800ebc6:	d805      	bhi.n	800ebd4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3304      	adds	r3, #4
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	b085      	sub	sp, #20
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	4608      	mov	r0, r1
 800ebe8:	4611      	mov	r1, r2
 800ebea:	461a      	mov	r2, r3
 800ebec:	4603      	mov	r3, r0
 800ebee:	70fb      	strb	r3, [r7, #3]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	70bb      	strb	r3, [r7, #2]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	32b0      	adds	r2, #176	; 0xb0
 800ec02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec06:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d02c      	beq.n	800ec68 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec14:	461a      	mov	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	3248      	adds	r2, #72	; 0x48
 800ec1a:	78b9      	ldrb	r1, [r7, #2]
 800ec1c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	3348      	adds	r3, #72	; 0x48
 800ec2a:	00db      	lsls	r3, r3, #3
 800ec2c:	4413      	add	r3, r2
 800ec2e:	787a      	ldrb	r2, [r7, #1]
 800ec30:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	3348      	adds	r3, #72	; 0x48
 800ec3c:	00db      	lsls	r3, r3, #3
 800ec3e:	4413      	add	r3, r2
 800ec40:	2200      	movs	r2, #0
 800ec42:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ec5a:	2b04      	cmp	r3, #4
 800ec5c:	d105      	bne.n	800ec6a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800ec66:	e000      	b.n	800ec6a <SCSI_SenseCode+0x8c>
    return;
 800ec68:	bf00      	nop
  }
}
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b086      	sub	sp, #24
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	32b0      	adds	r2, #176	; 0xb0
 800ec8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec90:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d102      	bne.n	800ec9e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800ec98:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9c:	e03b      	b.n	800ed16 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d10f      	bne.n	800ecc8 <SCSI_StartStopUnit+0x54>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	f003 0303 	and.w	r3, r3, #3
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d108      	bne.n	800ecc8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ecb6:	7af9      	ldrb	r1, [r7, #11]
 800ecb8:	2324      	movs	r3, #36	; 0x24
 800ecba:	2205      	movs	r2, #5
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7ff ff8e 	bl	800ebde <SCSI_SenseCode>

    return -1;
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	e026      	b.n	800ed16 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3304      	adds	r3, #4
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 0303 	and.w	r3, r3, #3
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d104      	bne.n	800ece0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ecde:	e016      	b.n	800ed0e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0303 	and.w	r3, r3, #3
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d104      	bne.n	800ecf8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ecf6:	e00a      	b.n	800ed0e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	f003 0303 	and.w	r3, r3, #3
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d103      	bne.n	800ed0e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2200      	movs	r2, #0
 800ed12:	60da      	str	r2, [r3, #12]

  return 0;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed1e:	b480      	push	{r7}
 800ed20:	b087      	sub	sp, #28
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	60f8      	str	r0, [r7, #12]
 800ed26:	460b      	mov	r3, r1
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	32b0      	adds	r2, #176	; 0xb0
 800ed36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed3a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d102      	bne.n	800ed48 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800ed42:	f04f 33ff 	mov.w	r3, #4294967295
 800ed46:	e011      	b.n	800ed6c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d104      	bne.n	800ed5c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ed5a:	e003      	b.n	800ed64 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	2200      	movs	r2, #0
 800ed68:	60da      	str	r2, [r3, #12]

  return 0;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	371c      	adds	r7, #28
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	460b      	mov	r3, r1
 800ed82:	607a      	str	r2, [r7, #4]
 800ed84:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	32b0      	adds	r2, #176	; 0xb0
 800ed90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d102      	bne.n	800eda2 <SCSI_Read10+0x2a>
  {
    return -1;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	e090      	b.n	800eec4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	7a1b      	ldrb	r3, [r3, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f040 8082 	bne.w	800eeb0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800edb2:	b25b      	sxtb	r3, r3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	db0a      	blt.n	800edce <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800edbe:	2320      	movs	r3, #32
 800edc0:	2205      	movs	r2, #5
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff ff0b 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800edc8:	f04f 33ff 	mov.w	r3, #4294967295
 800edcc:	e07a      	b.n	800eec4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d108      	bne.n	800edea <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800edd8:	7af9      	ldrb	r1, [r7, #11]
 800edda:	233a      	movs	r3, #58	; 0x3a
 800eddc:	2202      	movs	r2, #2
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7ff fefd 	bl	800ebde <SCSI_SenseCode>

      return -1;
 800ede4:	f04f 33ff 	mov.w	r3, #4294967295
 800ede8:	e06c      	b.n	800eec4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	33b0      	adds	r3, #176	; 0xb0
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4413      	add	r3, r2
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	7afa      	ldrb	r2, [r7, #11]
 800edfe:	4610      	mov	r0, r2
 800ee00:	4798      	blx	r3
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d008      	beq.n	800ee1a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee08:	7af9      	ldrb	r1, [r7, #11]
 800ee0a:	233a      	movs	r3, #58	; 0x3a
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff fee5 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800ee14:	f04f 33ff 	mov.w	r3, #4294967295
 800ee18:	e054      	b.n	800eec4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3302      	adds	r3, #2
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3303      	adds	r3, #3
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee2a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3304      	adds	r3, #4
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ee34:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	3205      	adds	r2, #5
 800ee3a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ee3c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3307      	adds	r3, #7
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	021b      	lsls	r3, r3, #8
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	3208      	adds	r2, #8
 800ee50:	7812      	ldrb	r2, [r2, #0]
 800ee52:	431a      	orrs	r2, r3
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee66:	7af9      	ldrb	r1, [r7, #11]
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f000 fadc 	bl	800f426 <SCSI_CheckAddressRange>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	da02      	bge.n	800ee7a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ee74:	f04f 33ff 	mov.w	r3, #4294967295
 800ee78:	e024      	b.n	800eec4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ee86:	6979      	ldr	r1, [r7, #20]
 800ee88:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ee8c:	fb01 f303 	mul.w	r3, r1, r3
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d00a      	beq.n	800eeaa <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee9a:	2320      	movs	r3, #32
 800ee9c:	2205      	movs	r2, #5
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7ff fe9d 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800eea4:	f04f 33ff 	mov.w	r3, #4294967295
 800eea8:	e00c      	b.n	800eec4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2202      	movs	r2, #2
 800eeae:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eeb6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800eeb8:	7afb      	ldrb	r3, [r7, #11]
 800eeba:	4619      	mov	r1, r3
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 fadf 	bl	800f480 <SCSI_ProcessRead>
 800eec2:	4603      	mov	r3, r0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	460b      	mov	r3, r1
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	32b0      	adds	r2, #176	; 0xb0
 800eee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d102      	bne.n	800eef6 <SCSI_Read12+0x2a>
  {
    return -1;
 800eef0:	f04f 33ff 	mov.w	r3, #4294967295
 800eef4:	e09a      	b.n	800f02c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	7a1b      	ldrb	r3, [r3, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f040 808c 	bne.w	800f018 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ef06:	b25b      	sxtb	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	db0a      	blt.n	800ef22 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef12:	2320      	movs	r3, #32
 800ef14:	2205      	movs	r2, #5
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fe61 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef20:	e084      	b.n	800f02c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d108      	bne.n	800ef3e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef2c:	7af9      	ldrb	r1, [r7, #11]
 800ef2e:	233a      	movs	r3, #58	; 0x3a
 800ef30:	2202      	movs	r2, #2
 800ef32:	68f8      	ldr	r0, [r7, #12]
 800ef34:	f7ff fe53 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800ef38:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3c:	e076      	b.n	800f02c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	33b0      	adds	r3, #176	; 0xb0
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	7afa      	ldrb	r2, [r7, #11]
 800ef52:	4610      	mov	r0, r2
 800ef54:	4798      	blx	r3
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d008      	beq.n	800ef6e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ef5c:	7af9      	ldrb	r1, [r7, #11]
 800ef5e:	233a      	movs	r3, #58	; 0x3a
 800ef60:	2202      	movs	r2, #2
 800ef62:	68f8      	ldr	r0, [r7, #12]
 800ef64:	f7ff fe3b 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800ef68:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6c:	e05e      	b.n	800f02c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3302      	adds	r3, #2
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3303      	adds	r3, #3
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef7e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3304      	adds	r3, #4
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef88:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	3205      	adds	r2, #5
 800ef8e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ef90:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	3306      	adds	r3, #6
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3307      	adds	r3, #7
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800efa8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	3308      	adds	r3, #8
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800efb2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	3209      	adds	r2, #9
 800efb8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800efba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efce:	7af9      	ldrb	r1, [r7, #11]
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f000 fa28 	bl	800f426 <SCSI_CheckAddressRange>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	da02      	bge.n	800efe2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800efdc:	f04f 33ff 	mov.w	r3, #4294967295
 800efe0:	e024      	b.n	800f02c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800efee:	6979      	ldr	r1, [r7, #20]
 800eff0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800eff4:	fb01 f303 	mul.w	r3, r1, r3
 800eff8:	429a      	cmp	r2, r3
 800effa:	d00a      	beq.n	800f012 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f002:	2320      	movs	r3, #32
 800f004:	2205      	movs	r2, #5
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff fde9 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f00c:	f04f 33ff 	mov.w	r3, #4294967295
 800f010:	e00c      	b.n	800f02c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	2202      	movs	r2, #2
 800f016:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f01e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800f020:	7afb      	ldrb	r3, [r7, #11]
 800f022:	4619      	mov	r1, r3
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 fa2b 	bl	800f480 <SCSI_ProcessRead>
 800f02a:	4603      	mov	r3, r0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	460b      	mov	r3, r1
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	32b0      	adds	r2, #176	; 0xb0
 800f04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f050:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <SCSI_Write10+0x2a>
  {
    return -1;
 800f058:	f04f 33ff 	mov.w	r3, #4294967295
 800f05c:	e0ba      	b.n	800f1d4 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	7a1b      	ldrb	r3, [r3, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f040 80b0 	bne.w	800f1c8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10a      	bne.n	800f088 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f078:	2320      	movs	r3, #32
 800f07a:	2205      	movs	r2, #5
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f7ff fdae 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	e0a5      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f08e:	b25b      	sxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	da0a      	bge.n	800f0aa <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f09a:	2320      	movs	r3, #32
 800f09c:	2205      	movs	r2, #5
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff fd9d 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a8:	e094      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	33b0      	adds	r3, #176	; 0xb0
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	4413      	add	r3, r2
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	7afa      	ldrb	r2, [r7, #11]
 800f0be:	4610      	mov	r0, r2
 800f0c0:	4798      	blx	r3
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d008      	beq.n	800f0da <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f0c8:	7af9      	ldrb	r1, [r7, #11]
 800f0ca:	233a      	movs	r3, #58	; 0x3a
 800f0cc:	2202      	movs	r2, #2
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff fd85 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d8:	e07c      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	33b0      	adds	r3, #176	; 0xb0
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4413      	add	r3, r2
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	7afa      	ldrb	r2, [r7, #11]
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	4798      	blx	r3
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d008      	beq.n	800f10a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f0f8:	7af9      	ldrb	r1, [r7, #11]
 800f0fa:	2327      	movs	r3, #39	; 0x27
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff fd6d 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	e064      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3302      	adds	r3, #2
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	3303      	adds	r3, #3
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f11a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3304      	adds	r3, #4
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f124:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	3205      	adds	r2, #5
 800f12a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f12c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3307      	adds	r3, #7
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	3208      	adds	r2, #8
 800f140:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800f142:	431a      	orrs	r2, r3
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f156:	7af9      	ldrb	r1, [r7, #11]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 f964 	bl	800f426 <SCSI_CheckAddressRange>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	da02      	bge.n	800f16a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f164:	f04f 33ff 	mov.w	r3, #4294967295
 800f168:	e034      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f176:	fb02 f303 	mul.w	r3, r2, r3
 800f17a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f182:	693a      	ldr	r2, [r7, #16]
 800f184:	429a      	cmp	r2, r3
 800f186:	d00a      	beq.n	800f19e <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f18e:	2320      	movs	r3, #32
 800f190:	2205      	movs	r2, #5
 800f192:	68f8      	ldr	r0, [r7, #12]
 800f194:	f7ff fd23 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f198:	f04f 33ff 	mov.w	r3, #4294967295
 800f19c:	e01a      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1a4:	bf28      	it	cs
 800f1a6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f1aa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f1b2:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <SCSI_Write10+0x1a8>)
 800f1b4:	7819      	ldrb	r1, [r3, #0]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f103 0210 	add.w	r2, r3, #16
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f008 fe2b 	bl	8017e1a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e005      	b.n	800f1d4 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800f1c8:	7afb      	ldrb	r3, [r7, #11]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 f9dd 	bl	800f58c <SCSI_ProcessWrite>
 800f1d2:	4603      	mov	r3, r0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3718      	adds	r7, #24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	20000077 	.word	0x20000077

0800f1e0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	32b0      	adds	r2, #176	; 0xb0
 800f1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <SCSI_Write12+0x2a>
  {
    return -1;
 800f204:	f04f 33ff 	mov.w	r3, #4294967295
 800f208:	e0ca      	b.n	800f3a0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	7a1b      	ldrb	r3, [r3, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f040 80c0 	bne.w	800f394 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10a      	bne.n	800f234 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f224:	2320      	movs	r3, #32
 800f226:	2205      	movs	r2, #5
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7ff fcd8 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f22e:	f04f 33ff 	mov.w	r3, #4294967295
 800f232:	e0b5      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800f23a:	b25b      	sxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	da0a      	bge.n	800f256 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f246:	2320      	movs	r3, #32
 800f248:	2205      	movs	r2, #5
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fcc7 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f250:	f04f 33ff 	mov.w	r3, #4294967295
 800f254:	e0a4      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	33b0      	adds	r3, #176	; 0xb0
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	7afa      	ldrb	r2, [r7, #11]
 800f26a:	4610      	mov	r0, r2
 800f26c:	4798      	blx	r3
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00b      	beq.n	800f28c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f274:	7af9      	ldrb	r1, [r7, #11]
 800f276:	233a      	movs	r3, #58	; 0x3a
 800f278:	2202      	movs	r2, #2
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f7ff fcaf 	bl	800ebde <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	2205      	movs	r2, #5
 800f284:	721a      	strb	r2, [r3, #8]
      return -1;
 800f286:	f04f 33ff 	mov.w	r3, #4294967295
 800f28a:	e089      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	33b0      	adds	r3, #176	; 0xb0
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	7afa      	ldrb	r2, [r7, #11]
 800f2a0:	4610      	mov	r0, r2
 800f2a2:	4798      	blx	r3
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f2aa:	7af9      	ldrb	r1, [r7, #11]
 800f2ac:	2327      	movs	r3, #39	; 0x27
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fc94 	bl	800ebde <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2205      	movs	r2, #5
 800f2ba:	721a      	strb	r2, [r3, #8]
      return -1;
 800f2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c0:	e06e      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3302      	adds	r3, #2
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3303      	adds	r3, #3
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f2dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	3205      	adds	r2, #5
 800f2e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f2e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3306      	adds	r3, #6
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	3307      	adds	r3, #7
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f2fc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3308      	adds	r3, #8
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f306:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	3209      	adds	r2, #9
 800f30c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f30e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f322:	7af9      	ldrb	r1, [r7, #11]
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 f87e 	bl	800f426 <SCSI_CheckAddressRange>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	da02      	bge.n	800f336 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f330:	f04f 33ff 	mov.w	r3, #4294967295
 800f334:	e034      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f342:	fb02 f303 	mul.w	r3, r2, r3
 800f346:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f34e:	693a      	ldr	r2, [r7, #16]
 800f350:	429a      	cmp	r2, r3
 800f352:	d00a      	beq.n	800f36a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f35a:	2320      	movs	r3, #32
 800f35c:	2205      	movs	r2, #5
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f7ff fc3d 	bl	800ebde <SCSI_SenseCode>
      return -1;
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
 800f368:	e01a      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f370:	bf28      	it	cs
 800f372:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f376:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2201      	movs	r2, #1
 800f37c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f37e:	4b0a      	ldr	r3, [pc, #40]	; (800f3a8 <SCSI_Write12+0x1c8>)
 800f380:	7819      	ldrb	r1, [r3, #0]
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f103 0210 	add.w	r2, r3, #16
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f008 fd45 	bl	8017e1a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f390:	2300      	movs	r3, #0
 800f392:	e005      	b.n	800f3a0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f394:	7afb      	ldrb	r3, [r7, #11]
 800f396:	4619      	mov	r1, r3
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f8f7 	bl	800f58c <SCSI_ProcessWrite>
 800f39e:	4603      	mov	r3, r0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3718      	adds	r7, #24
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	20000077 	.word	0x20000077

0800f3ac <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	32b0      	adds	r2, #176	; 0xb0
 800f3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d102      	bne.n	800f3d6 <SCSI_Verify10+0x2a>
  {
    return -1;
 800f3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d4:	e023      	b.n	800f41e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	f003 0302 	and.w	r3, r3, #2
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d008      	beq.n	800f3f6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f3e4:	7af9      	ldrb	r1, [r7, #11]
 800f3e6:	2324      	movs	r3, #36	; 0x24
 800f3e8:	2205      	movs	r2, #5
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7ff fbf7 	bl	800ebde <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f4:	e013      	b.n	800f41e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f402:	7af9      	ldrb	r1, [r7, #11]
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 f80e 	bl	800f426 <SCSI_CheckAddressRange>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da02      	bge.n	800f416 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f410:	f04f 33ff 	mov.w	r3, #4294967295
 800f414:	e003      	b.n	800f41e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2200      	movs	r2, #0
 800f41a:	60da      	str	r2, [r3, #12]

  return 0;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3718      	adds	r7, #24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b086      	sub	sp, #24
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	607a      	str	r2, [r7, #4]
 800f430:	603b      	str	r3, [r7, #0]
 800f432:	460b      	mov	r3, r1
 800f434:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	32b0      	adds	r2, #176	; 0xb0
 800f440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f444:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d102      	bne.n	800f452 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f44c:	f04f 33ff 	mov.w	r3, #4294967295
 800f450:	e011      	b.n	800f476 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	441a      	add	r2, r3
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f45e:	429a      	cmp	r2, r3
 800f460:	d908      	bls.n	800f474 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f462:	7af9      	ldrb	r1, [r7, #11]
 800f464:	2321      	movs	r3, #33	; 0x21
 800f466:	2205      	movs	r2, #5
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7ff fbb8 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800f46e:	f04f 33ff 	mov.w	r3, #4294967295
 800f472:	e000      	b.n	800f476 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
	...

0800f480 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f480:	b590      	push	{r4, r7, lr}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	32b0      	adds	r2, #176	; 0xb0
 800f496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f49a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d102      	bne.n	800f4a8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a6:	e06a      	b.n	800f57e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f4b4:	fb02 f303 	mul.w	r3, r2, r3
 800f4b8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4c0:	bf28      	it	cs
 800f4c2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f4c6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	33b0      	adds	r3, #176	; 0xb0
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	691c      	ldr	r4, [r3, #16]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f103 0110 	add.w	r1, r3, #16
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	78f8      	ldrb	r0, [r7, #3]
 800f4f8:	47a0      	blx	r4
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	da08      	bge.n	800f512 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f500:	78f9      	ldrb	r1, [r7, #3]
 800f502:	2311      	movs	r3, #17
 800f504:	2204      	movs	r2, #4
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fb69 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295
 800f510:	e035      	b.n	800f57e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f512:	4b1d      	ldr	r3, [pc, #116]	; (800f588 <SCSI_ProcessRead+0x108>)
 800f514:	7819      	ldrb	r1, [r3, #0]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f103 0210 	add.w	r2, r3, #16
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f008 fc5a 	bl	8017dd8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f530:	4619      	mov	r1, r3
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	fbb3 f3f1 	udiv	r3, r3, r1
 800f538:	441a      	add	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f54c:	4619      	mov	r1, r3
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	fbb3 f3f1 	udiv	r3, r3, r1
 800f554:	1ad2      	subs	r2, r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	1ad2      	subs	r2, r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2203      	movs	r2, #3
 800f57a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	bd90      	pop	{r4, r7, pc}
 800f586:	bf00      	nop
 800f588:	20000076 	.word	0x20000076

0800f58c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f58c:	b590      	push	{r4, r7, lr}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	460b      	mov	r3, r1
 800f596:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	32b0      	adds	r2, #176	; 0xb0
 800f5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d102      	bne.n	800f5b4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	e07a      	b.n	800f6aa <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f5c0:	fb02 f303 	mul.w	r3, r2, r3
 800f5c4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5cc:	bf28      	it	cs
 800f5ce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f5d2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	33b0      	adds	r3, #176	; 0xb0
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4413      	add	r3, r2
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	695c      	ldr	r4, [r3, #20]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f103 0110 	add.w	r1, r3, #16
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f600:	b29b      	uxth	r3, r3
 800f602:	78f8      	ldrb	r0, [r7, #3]
 800f604:	47a0      	blx	r4
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	da08      	bge.n	800f61e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f60c:	78f9      	ldrb	r1, [r7, #3]
 800f60e:	2303      	movs	r3, #3
 800f610:	2204      	movs	r2, #4
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff fae3 	bl	800ebde <SCSI_SenseCode>
    return -1;
 800f618:	f04f 33ff 	mov.w	r3, #4294967295
 800f61c:	e045      	b.n	800f6aa <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f62a:	4619      	mov	r1, r3
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f632:	441a      	add	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f646:	4619      	mov	r1, r3
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f64e:	1ad2      	subs	r2, r2, r3
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	1ad2      	subs	r2, r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d104      	bne.n	800f67a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f670:	2100      	movs	r1, #0
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7fe fd14 	bl	800e0a0 <MSC_BOT_SendCSW>
 800f678:	e016      	b.n	800f6a8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f680:	68fa      	ldr	r2, [r7, #12]
 800f682:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f686:	fb02 f303 	mul.w	r3, r2, r3
 800f68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f68e:	bf28      	it	cs
 800f690:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f694:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f696:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <SCSI_ProcessWrite+0x128>)
 800f698:	7819      	ldrb	r1, [r3, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f103 0210 	add.w	r2, r3, #16
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f008 fbb9 	bl	8017e1a <USBD_LL_PrepareReceive>
  }

  return 0;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd90      	pop	{r4, r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	20000077 	.word	0x20000077

0800f6b8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f6c6:	88fb      	ldrh	r3, [r7, #6]
 800f6c8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d4:	e013      	b.n	800f6fe <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f6d6:	8afa      	ldrh	r2, [r7, #22]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f6dc:	e00b      	b.n	800f6f6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f6de:	8afb      	ldrh	r3, [r7, #22]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f6e4:	8afb      	ldrh	r3, [r7, #22]
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	441a      	add	r2, r3
 800f6ea:	8afb      	ldrh	r3, [r7, #22]
 800f6ec:	7811      	ldrb	r1, [r2, #0]
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	460a      	mov	r2, r1
 800f6f4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f6f6:	8afb      	ldrh	r3, [r7, #22]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1f0      	bne.n	800f6de <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f6fc:	2300      	movs	r3, #0
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	371c      	adds	r7, #28
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr

0800f70a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b086      	sub	sp, #24
 800f70e:	af00      	add	r7, sp, #0
 800f710:	60f8      	str	r0, [r7, #12]
 800f712:	60b9      	str	r1, [r7, #8]
 800f714:	4613      	mov	r3, r2
 800f716:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f71e:	2303      	movs	r3, #3
 800f720:	e01f      	b.n	800f762 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2200      	movs	r2, #0
 800f726:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	79fa      	ldrb	r2, [r7, #7]
 800f754:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f008 f9ea 	bl	8017b30 <USBD_LL_Init>
 800f75c:	4603      	mov	r3, r0
 800f75e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f760:	7dfb      	ldrb	r3, [r7, #23]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f774:	2300      	movs	r3, #0
 800f776:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d101      	bne.n	800f782 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f77e:	2303      	movs	r3, #3
 800f780:	e025      	b.n	800f7ce <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	32ae      	adds	r2, #174	; 0xae
 800f794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00f      	beq.n	800f7be <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	32ae      	adds	r2, #174	; 0xae
 800f7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ae:	f107 020e 	add.w	r2, r7, #14
 800f7b2:	4610      	mov	r0, r2
 800f7b4:	4798      	blx	r3
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b082      	sub	sp, #8
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f008 f9f2 	bl	8017bc8 <USBD_LL_Start>
 800f7e4:	4603      	mov	r3, r0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7f6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	460b      	mov	r3, r1
 800f80e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d009      	beq.n	800f832 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	78fa      	ldrb	r2, [r7, #3]
 800f828:	4611      	mov	r1, r2
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	4798      	blx	r3
 800f82e:	4603      	mov	r3, r0
 800f830:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f832:	7bfb      	ldrb	r3, [r7, #15]
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	460b      	mov	r3, r1
 800f846:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	78fa      	ldrb	r2, [r7, #3]
 800f856:	4611      	mov	r1, r2
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f862:	2303      	movs	r3, #3
 800f864:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f866:	7bfb      	ldrb	r3, [r7, #15]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	4618      	mov	r0, r3
 800f884:	f001 f933 	bl	8010aee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f896:	461a      	mov	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8a4:	f003 031f 	and.w	r3, r3, #31
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d01a      	beq.n	800f8e2 <USBD_LL_SetupStage+0x72>
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d822      	bhi.n	800f8f6 <USBD_LL_SetupStage+0x86>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <USBD_LL_SetupStage+0x4a>
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d00a      	beq.n	800f8ce <USBD_LL_SetupStage+0x5e>
 800f8b8:	e01d      	b.n	800f8f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 fb60 	bl	800ff88 <USBD_StdDevReq>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f8cc:	e020      	b.n	800f910 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fbc8 	bl	801006c <USBD_StdItfReq>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	73fb      	strb	r3, [r7, #15]
      break;
 800f8e0:	e016      	b.n	800f910 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fc2a 	bl	8010144 <USBD_StdEPReq>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8f4:	e00c      	b.n	800f910 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f900:	b2db      	uxtb	r3, r3
 800f902:	4619      	mov	r1, r3
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f008 f9de 	bl	8017cc6 <USBD_LL_StallEP>
 800f90a:	4603      	mov	r3, r0
 800f90c:	73fb      	strb	r3, [r7, #15]
      break;
 800f90e:	bf00      	nop
  }

  return ret;
 800f910:	7bfb      	ldrb	r3, [r7, #15]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b086      	sub	sp, #24
 800f91e:	af00      	add	r7, sp, #0
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	460b      	mov	r3, r1
 800f924:	607a      	str	r2, [r7, #4]
 800f926:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f928:	2300      	movs	r3, #0
 800f92a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f92c:	7afb      	ldrb	r3, [r7, #11]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d16e      	bne.n	800fa10 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f938:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f940:	2b03      	cmp	r3, #3
 800f942:	f040 8098 	bne.w	800fa76 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	689a      	ldr	r2, [r3, #8]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d913      	bls.n	800f97a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	689a      	ldr	r2, [r3, #8]
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	1ad2      	subs	r2, r2, r3
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	68da      	ldr	r2, [r3, #12]
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	4293      	cmp	r3, r2
 800f96a:	bf28      	it	cs
 800f96c:	4613      	movcs	r3, r2
 800f96e:	461a      	mov	r2, r3
 800f970:	6879      	ldr	r1, [r7, #4]
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f001 f992 	bl	8010c9c <USBD_CtlContinueRx>
 800f978:	e07d      	b.n	800fa76 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f980:	f003 031f 	and.w	r3, r3, #31
 800f984:	2b02      	cmp	r3, #2
 800f986:	d014      	beq.n	800f9b2 <USBD_LL_DataOutStage+0x98>
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d81d      	bhi.n	800f9c8 <USBD_LL_DataOutStage+0xae>
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <USBD_LL_DataOutStage+0x7c>
 800f990:	2b01      	cmp	r3, #1
 800f992:	d003      	beq.n	800f99c <USBD_LL_DataOutStage+0x82>
 800f994:	e018      	b.n	800f9c8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f996:	2300      	movs	r3, #0
 800f998:	75bb      	strb	r3, [r7, #22]
            break;
 800f99a:	e018      	b.n	800f9ce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f000 fa5e 	bl	800fe68 <USBD_CoreFindIF>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	75bb      	strb	r3, [r7, #22]
            break;
 800f9b0:	e00d      	b.n	800f9ce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f000 fa60 	bl	800fe82 <USBD_CoreFindEP>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	75bb      	strb	r3, [r7, #22]
            break;
 800f9c6:	e002      	b.n	800f9ce <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	75bb      	strb	r3, [r7, #22]
            break;
 800f9cc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f9ce:	7dbb      	ldrb	r3, [r7, #22]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d119      	bne.n	800fa08 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b03      	cmp	r3, #3
 800f9de:	d113      	bne.n	800fa08 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f9e0:	7dba      	ldrb	r2, [r7, #22]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	32ae      	adds	r2, #174	; 0xae
 800f9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ea:	691b      	ldr	r3, [r3, #16]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00b      	beq.n	800fa08 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f9f0:	7dba      	ldrb	r2, [r7, #22]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f9f8:	7dba      	ldrb	r2, [r7, #22]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	32ae      	adds	r2, #174	; 0xae
 800f9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa02:	691b      	ldr	r3, [r3, #16]
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f001 f958 	bl	8010cbe <USBD_CtlSendStatus>
 800fa0e:	e032      	b.n	800fa76 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fa10:	7afb      	ldrb	r3, [r7, #11]
 800fa12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	4619      	mov	r1, r3
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 fa31 	bl	800fe82 <USBD_CoreFindEP>
 800fa20:	4603      	mov	r3, r0
 800fa22:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa24:	7dbb      	ldrb	r3, [r7, #22]
 800fa26:	2bff      	cmp	r3, #255	; 0xff
 800fa28:	d025      	beq.n	800fa76 <USBD_LL_DataOutStage+0x15c>
 800fa2a:	7dbb      	ldrb	r3, [r7, #22]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d122      	bne.n	800fa76 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	d117      	bne.n	800fa6c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fa3c:	7dba      	ldrb	r2, [r7, #22]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	32ae      	adds	r2, #174	; 0xae
 800fa42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00f      	beq.n	800fa6c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fa4c:	7dba      	ldrb	r2, [r7, #22]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fa54:	7dba      	ldrb	r2, [r7, #22]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	32ae      	adds	r2, #174	; 0xae
 800fa5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	7afa      	ldrb	r2, [r7, #11]
 800fa62:	4611      	mov	r1, r2
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	4798      	blx	r3
 800fa68:	4603      	mov	r3, r0
 800fa6a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fa6c:	7dfb      	ldrb	r3, [r7, #23]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	e000      	b.n	800fa78 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fa76:	2300      	movs	r3, #0
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	607a      	str	r2, [r7, #4]
 800fa8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fa8e:	7afb      	ldrb	r3, [r7, #11]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d16f      	bne.n	800fb74 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	3314      	adds	r3, #20
 800fa98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d15a      	bne.n	800fb5a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	689a      	ldr	r2, [r3, #8]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	429a      	cmp	r2, r3
 800faae:	d914      	bls.n	800fada <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	689a      	ldr	r2, [r3, #8]
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	1ad2      	subs	r2, r2, r3
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	461a      	mov	r2, r3
 800fac4:	6879      	ldr	r1, [r7, #4]
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f001 f8d7 	bl	8010c7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800facc:	2300      	movs	r3, #0
 800face:	2200      	movs	r2, #0
 800fad0:	2100      	movs	r1, #0
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f008 f9a1 	bl	8017e1a <USBD_LL_PrepareReceive>
 800fad8:	e03f      	b.n	800fb5a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	68da      	ldr	r2, [r3, #12]
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	689b      	ldr	r3, [r3, #8]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d11c      	bne.n	800fb20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800faee:	429a      	cmp	r2, r3
 800faf0:	d316      	bcc.n	800fb20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	685a      	ldr	r2, [r3, #4]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d20f      	bcs.n	800fb20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fb00:	2200      	movs	r2, #0
 800fb02:	2100      	movs	r1, #0
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f001 f8b8 	bl	8010c7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb12:	2300      	movs	r3, #0
 800fb14:	2200      	movs	r2, #0
 800fb16:	2100      	movs	r1, #0
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f008 f97e 	bl	8017e1a <USBD_LL_PrepareReceive>
 800fb1e:	e01c      	b.n	800fb5a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	d10f      	bne.n	800fb4c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d009      	beq.n	800fb4c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb4c:	2180      	movs	r1, #128	; 0x80
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f008 f8b9 	bl	8017cc6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f001 f8c5 	bl	8010ce4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d03a      	beq.n	800fbda <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7ff fe42 	bl	800f7ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fb72:	e032      	b.n	800fbda <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fb74:	7afb      	ldrb	r3, [r7, #11]
 800fb76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f000 f97f 	bl	800fe82 <USBD_CoreFindEP>
 800fb84:	4603      	mov	r3, r0
 800fb86:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
 800fb8a:	2bff      	cmp	r3, #255	; 0xff
 800fb8c:	d025      	beq.n	800fbda <USBD_LL_DataInStage+0x15a>
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d122      	bne.n	800fbda <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b03      	cmp	r3, #3
 800fb9e:	d11c      	bne.n	800fbda <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fba0:	7dfa      	ldrb	r2, [r7, #23]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	32ae      	adds	r2, #174	; 0xae
 800fba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d014      	beq.n	800fbda <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fbb0:	7dfa      	ldrb	r2, [r7, #23]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fbb8:	7dfa      	ldrb	r2, [r7, #23]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	32ae      	adds	r2, #174	; 0xae
 800fbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	7afa      	ldrb	r2, [r7, #11]
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	4798      	blx	r3
 800fbcc:	4603      	mov	r3, r0
 800fbce:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fbd0:	7dbb      	ldrb	r3, [r7, #22]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fbd6:	7dbb      	ldrb	r3, [r7, #22]
 800fbd8:	e000      	b.n	800fbdc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d014      	beq.n	800fc4a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00e      	beq.n	800fc4a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	6852      	ldr	r2, [r2, #4]
 800fc38:	b2d2      	uxtb	r2, r2
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	4798      	blx	r3
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fc46:	2303      	movs	r3, #3
 800fc48:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc4a:	2340      	movs	r3, #64	; 0x40
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2100      	movs	r1, #0
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f007 ffd4 	bl	8017bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2240      	movs	r2, #64	; 0x40
 800fc62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc66:	2340      	movs	r3, #64	; 0x40
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2180      	movs	r1, #128	; 0x80
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f007 ffc6 	bl	8017bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2240      	movs	r2, #64	; 0x40
 800fc7c:	621a      	str	r2, [r3, #32]

  return ret;
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	460b      	mov	r3, r1
 800fc92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	78fa      	ldrb	r2, [r7, #3]
 800fc98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2204      	movs	r2, #4
 800fcc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b04      	cmp	r3, #4
 800fce6:	d106      	bne.n	800fcf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b03      	cmp	r3, #3
 800fd16:	d110      	bne.n	800fd3a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00b      	beq.n	800fd3a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd28:	69db      	ldr	r3, [r3, #28]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd34:	69db      	ldr	r3, [r3, #28]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	32ae      	adds	r2, #174	; 0xae
 800fd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d101      	bne.n	800fd66 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e01c      	b.n	800fda0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d115      	bne.n	800fd9e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	32ae      	adds	r2, #174	; 0xae
 800fd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00b      	beq.n	800fd9e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	32ae      	adds	r2, #174	; 0xae
 800fd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd94:	6a1b      	ldr	r3, [r3, #32]
 800fd96:	78fa      	ldrb	r2, [r7, #3]
 800fd98:	4611      	mov	r1, r2
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	32ae      	adds	r2, #174	; 0xae
 800fdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fdc6:	2303      	movs	r3, #3
 800fdc8:	e01c      	b.n	800fe04 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	2b03      	cmp	r3, #3
 800fdd4:	d115      	bne.n	800fe02 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	32ae      	adds	r2, #174	; 0xae
 800fde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00b      	beq.n	800fe02 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	32ae      	adds	r2, #174	; 0xae
 800fdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfa:	78fa      	ldrb	r2, [r7, #3]
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00e      	beq.n	800fe5e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	6852      	ldr	r2, [r2, #4]
 800fe4c:	b2d2      	uxtb	r2, r2
 800fe4e:	4611      	mov	r1, r2
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	4798      	blx	r3
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d001      	beq.n	800fe5e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	460b      	mov	r3, r1
 800fe72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr

0800fe82 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fe82:	b480      	push	{r7}
 800fe84:	b083      	sub	sp, #12
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fe8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800feb0:	2300      	movs	r3, #0
 800feb2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	885b      	ldrh	r3, [r3, #2]
 800feb8:	b29a      	uxth	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d920      	bls.n	800ff06 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fecc:	e013      	b.n	800fef6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fece:	f107 030a 	add.w	r3, r7, #10
 800fed2:	4619      	mov	r1, r3
 800fed4:	6978      	ldr	r0, [r7, #20]
 800fed6:	f000 f81b 	bl	800ff10 <USBD_GetNextDesc>
 800feda:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	785b      	ldrb	r3, [r3, #1]
 800fee0:	2b05      	cmp	r3, #5
 800fee2:	d108      	bne.n	800fef6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	789b      	ldrb	r3, [r3, #2]
 800feec:	78fa      	ldrb	r2, [r7, #3]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d008      	beq.n	800ff04 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	885b      	ldrh	r3, [r3, #2]
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	897b      	ldrh	r3, [r7, #10]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d8e5      	bhi.n	800fece <USBD_GetEpDesc+0x32>
 800ff02:	e000      	b.n	800ff06 <USBD_GetEpDesc+0x6a>
          break;
 800ff04:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ff06:	693b      	ldr	r3, [r7, #16]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3718      	adds	r7, #24
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	881a      	ldrh	r2, [r3, #0]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	4413      	add	r3, r2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4413      	add	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b087      	sub	sp, #28
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff68:	8a3b      	ldrh	r3, [r7, #16]
 800ff6a:	021b      	lsls	r3, r3, #8
 800ff6c:	b21a      	sxth	r2, r3
 800ff6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	b21b      	sxth	r3, r3
 800ff76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ff78:	89fb      	ldrh	r3, [r7, #14]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	371c      	adds	r7, #28
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
	...

0800ff88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff92:	2300      	movs	r3, #0
 800ff94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff9e:	2b40      	cmp	r3, #64	; 0x40
 800ffa0:	d005      	beq.n	800ffae <USBD_StdDevReq+0x26>
 800ffa2:	2b40      	cmp	r3, #64	; 0x40
 800ffa4:	d857      	bhi.n	8010056 <USBD_StdDevReq+0xce>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00f      	beq.n	800ffca <USBD_StdDevReq+0x42>
 800ffaa:	2b20      	cmp	r3, #32
 800ffac:	d153      	bne.n	8010056 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	32ae      	adds	r2, #174	; 0xae
 800ffb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	4798      	blx	r3
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ffc8:	e04a      	b.n	8010060 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	785b      	ldrb	r3, [r3, #1]
 800ffce:	2b09      	cmp	r3, #9
 800ffd0:	d83b      	bhi.n	801004a <USBD_StdDevReq+0xc2>
 800ffd2:	a201      	add	r2, pc, #4	; (adr r2, 800ffd8 <USBD_StdDevReq+0x50>)
 800ffd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd8:	0801002d 	.word	0x0801002d
 800ffdc:	08010041 	.word	0x08010041
 800ffe0:	0801004b 	.word	0x0801004b
 800ffe4:	08010037 	.word	0x08010037
 800ffe8:	0801004b 	.word	0x0801004b
 800ffec:	0801000b 	.word	0x0801000b
 800fff0:	08010001 	.word	0x08010001
 800fff4:	0801004b 	.word	0x0801004b
 800fff8:	08010023 	.word	0x08010023
 800fffc:	08010015 	.word	0x08010015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fa3c 	bl	8010480 <USBD_GetDescriptor>
          break;
 8010008:	e024      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fbcb 	bl	80107a8 <USBD_SetAddress>
          break;
 8010012:	e01f      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010014:	6839      	ldr	r1, [r7, #0]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fc0a 	bl	8010830 <USBD_SetConfig>
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]
          break;
 8010020:	e018      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010022:	6839      	ldr	r1, [r7, #0]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 fcad 	bl	8010984 <USBD_GetConfig>
          break;
 801002a:	e013      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801002c:	6839      	ldr	r1, [r7, #0]
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fcde 	bl	80109f0 <USBD_GetStatus>
          break;
 8010034:	e00e      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010036:	6839      	ldr	r1, [r7, #0]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fd0d 	bl	8010a58 <USBD_SetFeature>
          break;
 801003e:	e009      	b.n	8010054 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fd31 	bl	8010aaa <USBD_ClrFeature>
          break;
 8010048:	e004      	b.n	8010054 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801004a:	6839      	ldr	r1, [r7, #0]
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 fd88 	bl	8010b62 <USBD_CtlError>
          break;
 8010052:	bf00      	nop
      }
      break;
 8010054:	e004      	b.n	8010060 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fd82 	bl	8010b62 <USBD_CtlError>
      break;
 801005e:	bf00      	nop
  }

  return ret;
 8010060:	7bfb      	ldrb	r3, [r7, #15]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop

0801006c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b084      	sub	sp, #16
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010082:	2b40      	cmp	r3, #64	; 0x40
 8010084:	d005      	beq.n	8010092 <USBD_StdItfReq+0x26>
 8010086:	2b40      	cmp	r3, #64	; 0x40
 8010088:	d852      	bhi.n	8010130 <USBD_StdItfReq+0xc4>
 801008a:	2b00      	cmp	r3, #0
 801008c:	d001      	beq.n	8010092 <USBD_StdItfReq+0x26>
 801008e:	2b20      	cmp	r3, #32
 8010090:	d14e      	bne.n	8010130 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010098:	b2db      	uxtb	r3, r3
 801009a:	3b01      	subs	r3, #1
 801009c:	2b02      	cmp	r3, #2
 801009e:	d840      	bhi.n	8010122 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	889b      	ldrh	r3, [r3, #4]
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d836      	bhi.n	8010118 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	889b      	ldrh	r3, [r3, #4]
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff fed8 	bl	800fe68 <USBD_CoreFindIF>
 80100b8:	4603      	mov	r3, r0
 80100ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100bc:	7bbb      	ldrb	r3, [r7, #14]
 80100be:	2bff      	cmp	r3, #255	; 0xff
 80100c0:	d01d      	beq.n	80100fe <USBD_StdItfReq+0x92>
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d11a      	bne.n	80100fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80100c8:	7bba      	ldrb	r2, [r7, #14]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	32ae      	adds	r2, #174	; 0xae
 80100ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00f      	beq.n	80100f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80100d8:	7bba      	ldrb	r2, [r7, #14]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100e0:	7bba      	ldrb	r2, [r7, #14]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	32ae      	adds	r2, #174	; 0xae
 80100e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	6839      	ldr	r1, [r7, #0]
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	4798      	blx	r3
 80100f2:	4603      	mov	r3, r0
 80100f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100f6:	e004      	b.n	8010102 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80100f8:	2303      	movs	r3, #3
 80100fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80100fc:	e001      	b.n	8010102 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80100fe:	2303      	movs	r3, #3
 8010100:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	88db      	ldrh	r3, [r3, #6]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d110      	bne.n	801012c <USBD_StdItfReq+0xc0>
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10d      	bne.n	801012c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fdd4 	bl	8010cbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010116:	e009      	b.n	801012c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fd21 	bl	8010b62 <USBD_CtlError>
          break;
 8010120:	e004      	b.n	801012c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f000 fd1c 	bl	8010b62 <USBD_CtlError>
          break;
 801012a:	e000      	b.n	801012e <USBD_StdItfReq+0xc2>
          break;
 801012c:	bf00      	nop
      }
      break;
 801012e:	e004      	b.n	801013a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 fd15 	bl	8010b62 <USBD_CtlError>
      break;
 8010138:	bf00      	nop
  }

  return ret;
 801013a:	7bfb      	ldrb	r3, [r7, #15]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	889b      	ldrh	r3, [r3, #4]
 8010156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010160:	2b40      	cmp	r3, #64	; 0x40
 8010162:	d007      	beq.n	8010174 <USBD_StdEPReq+0x30>
 8010164:	2b40      	cmp	r3, #64	; 0x40
 8010166:	f200 817f 	bhi.w	8010468 <USBD_StdEPReq+0x324>
 801016a:	2b00      	cmp	r3, #0
 801016c:	d02a      	beq.n	80101c4 <USBD_StdEPReq+0x80>
 801016e:	2b20      	cmp	r3, #32
 8010170:	f040 817a 	bne.w	8010468 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010174:	7bbb      	ldrb	r3, [r7, #14]
 8010176:	4619      	mov	r1, r3
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f7ff fe82 	bl	800fe82 <USBD_CoreFindEP>
 801017e:	4603      	mov	r3, r0
 8010180:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010182:	7b7b      	ldrb	r3, [r7, #13]
 8010184:	2bff      	cmp	r3, #255	; 0xff
 8010186:	f000 8174 	beq.w	8010472 <USBD_StdEPReq+0x32e>
 801018a:	7b7b      	ldrb	r3, [r7, #13]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f040 8170 	bne.w	8010472 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010192:	7b7a      	ldrb	r2, [r7, #13]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801019a:	7b7a      	ldrb	r2, [r7, #13]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	32ae      	adds	r2, #174	; 0xae
 80101a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 8163 	beq.w	8010472 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80101ac:	7b7a      	ldrb	r2, [r7, #13]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	32ae      	adds	r2, #174	; 0xae
 80101b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	4798      	blx	r3
 80101be:	4603      	mov	r3, r0
 80101c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80101c2:	e156      	b.n	8010472 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	785b      	ldrb	r3, [r3, #1]
 80101c8:	2b03      	cmp	r3, #3
 80101ca:	d008      	beq.n	80101de <USBD_StdEPReq+0x9a>
 80101cc:	2b03      	cmp	r3, #3
 80101ce:	f300 8145 	bgt.w	801045c <USBD_StdEPReq+0x318>
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f000 809b 	beq.w	801030e <USBD_StdEPReq+0x1ca>
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d03c      	beq.n	8010256 <USBD_StdEPReq+0x112>
 80101dc:	e13e      	b.n	801045c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d002      	beq.n	80101f0 <USBD_StdEPReq+0xac>
 80101ea:	2b03      	cmp	r3, #3
 80101ec:	d016      	beq.n	801021c <USBD_StdEPReq+0xd8>
 80101ee:	e02c      	b.n	801024a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101f0:	7bbb      	ldrb	r3, [r7, #14]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00d      	beq.n	8010212 <USBD_StdEPReq+0xce>
 80101f6:	7bbb      	ldrb	r3, [r7, #14]
 80101f8:	2b80      	cmp	r3, #128	; 0x80
 80101fa:	d00a      	beq.n	8010212 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80101fc:	7bbb      	ldrb	r3, [r7, #14]
 80101fe:	4619      	mov	r1, r3
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f007 fd60 	bl	8017cc6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010206:	2180      	movs	r1, #128	; 0x80
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f007 fd5c 	bl	8017cc6 <USBD_LL_StallEP>
 801020e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010210:	e020      	b.n	8010254 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010212:	6839      	ldr	r1, [r7, #0]
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 fca4 	bl	8010b62 <USBD_CtlError>
              break;
 801021a:	e01b      	b.n	8010254 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	885b      	ldrh	r3, [r3, #2]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10e      	bne.n	8010242 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010224:	7bbb      	ldrb	r3, [r7, #14]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00b      	beq.n	8010242 <USBD_StdEPReq+0xfe>
 801022a:	7bbb      	ldrb	r3, [r7, #14]
 801022c:	2b80      	cmp	r3, #128	; 0x80
 801022e:	d008      	beq.n	8010242 <USBD_StdEPReq+0xfe>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	88db      	ldrh	r3, [r3, #6]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d104      	bne.n	8010242 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010238:	7bbb      	ldrb	r3, [r7, #14]
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f007 fd42 	bl	8017cc6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 fd3b 	bl	8010cbe <USBD_CtlSendStatus>

              break;
 8010248:	e004      	b.n	8010254 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fc88 	bl	8010b62 <USBD_CtlError>
              break;
 8010252:	bf00      	nop
          }
          break;
 8010254:	e107      	b.n	8010466 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801025c:	b2db      	uxtb	r3, r3
 801025e:	2b02      	cmp	r3, #2
 8010260:	d002      	beq.n	8010268 <USBD_StdEPReq+0x124>
 8010262:	2b03      	cmp	r3, #3
 8010264:	d016      	beq.n	8010294 <USBD_StdEPReq+0x150>
 8010266:	e04b      	b.n	8010300 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010268:	7bbb      	ldrb	r3, [r7, #14]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00d      	beq.n	801028a <USBD_StdEPReq+0x146>
 801026e:	7bbb      	ldrb	r3, [r7, #14]
 8010270:	2b80      	cmp	r3, #128	; 0x80
 8010272:	d00a      	beq.n	801028a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010274:	7bbb      	ldrb	r3, [r7, #14]
 8010276:	4619      	mov	r1, r3
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f007 fd24 	bl	8017cc6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801027e:	2180      	movs	r1, #128	; 0x80
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f007 fd20 	bl	8017cc6 <USBD_LL_StallEP>
 8010286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010288:	e040      	b.n	801030c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801028a:	6839      	ldr	r1, [r7, #0]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 fc68 	bl	8010b62 <USBD_CtlError>
              break;
 8010292:	e03b      	b.n	801030c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	885b      	ldrh	r3, [r3, #2]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d136      	bne.n	801030a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801029c:	7bbb      	ldrb	r3, [r7, #14]
 801029e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d004      	beq.n	80102b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80102a6:	7bbb      	ldrb	r3, [r7, #14]
 80102a8:	4619      	mov	r1, r3
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f007 fd2a 	bl	8017d04 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fd04 	bl	8010cbe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80102b6:	7bbb      	ldrb	r3, [r7, #14]
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff fde1 	bl	800fe82 <USBD_CoreFindEP>
 80102c0:	4603      	mov	r3, r0
 80102c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102c4:	7b7b      	ldrb	r3, [r7, #13]
 80102c6:	2bff      	cmp	r3, #255	; 0xff
 80102c8:	d01f      	beq.n	801030a <USBD_StdEPReq+0x1c6>
 80102ca:	7b7b      	ldrb	r3, [r7, #13]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d11c      	bne.n	801030a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80102d0:	7b7a      	ldrb	r2, [r7, #13]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80102d8:	7b7a      	ldrb	r2, [r7, #13]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	32ae      	adds	r2, #174	; 0xae
 80102de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d010      	beq.n	801030a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80102e8:	7b7a      	ldrb	r2, [r7, #13]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	32ae      	adds	r2, #174	; 0xae
 80102ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	6839      	ldr	r1, [r7, #0]
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	4798      	blx	r3
 80102fa:	4603      	mov	r3, r0
 80102fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80102fe:	e004      	b.n	801030a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fc2d 	bl	8010b62 <USBD_CtlError>
              break;
 8010308:	e000      	b.n	801030c <USBD_StdEPReq+0x1c8>
              break;
 801030a:	bf00      	nop
          }
          break;
 801030c:	e0ab      	b.n	8010466 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b02      	cmp	r3, #2
 8010318:	d002      	beq.n	8010320 <USBD_StdEPReq+0x1dc>
 801031a:	2b03      	cmp	r3, #3
 801031c:	d032      	beq.n	8010384 <USBD_StdEPReq+0x240>
 801031e:	e097      	b.n	8010450 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010320:	7bbb      	ldrb	r3, [r7, #14]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d007      	beq.n	8010336 <USBD_StdEPReq+0x1f2>
 8010326:	7bbb      	ldrb	r3, [r7, #14]
 8010328:	2b80      	cmp	r3, #128	; 0x80
 801032a:	d004      	beq.n	8010336 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fc17 	bl	8010b62 <USBD_CtlError>
                break;
 8010334:	e091      	b.n	801045a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801033a:	2b00      	cmp	r3, #0
 801033c:	da0b      	bge.n	8010356 <USBD_StdEPReq+0x212>
 801033e:	7bbb      	ldrb	r3, [r7, #14]
 8010340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	3310      	adds	r3, #16
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4413      	add	r3, r2
 8010352:	3304      	adds	r3, #4
 8010354:	e00b      	b.n	801036e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010356:	7bbb      	ldrb	r3, [r7, #14]
 8010358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801035c:	4613      	mov	r3, r2
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4413      	add	r3, r2
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	4413      	add	r3, r2
 801036c:	3304      	adds	r3, #4
 801036e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2200      	movs	r2, #0
 8010374:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	2202      	movs	r2, #2
 801037a:	4619      	mov	r1, r3
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fc61 	bl	8010c44 <USBD_CtlSendData>
              break;
 8010382:	e06a      	b.n	801045a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010388:	2b00      	cmp	r3, #0
 801038a:	da11      	bge.n	80103b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801038c:	7bbb      	ldrb	r3, [r7, #14]
 801038e:	f003 020f 	and.w	r2, r3, #15
 8010392:	6879      	ldr	r1, [r7, #4]
 8010394:	4613      	mov	r3, r2
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4413      	add	r3, r2
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	440b      	add	r3, r1
 801039e:	3324      	adds	r3, #36	; 0x24
 80103a0:	881b      	ldrh	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d117      	bne.n	80103d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80103a6:	6839      	ldr	r1, [r7, #0]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fbda 	bl	8010b62 <USBD_CtlError>
                  break;
 80103ae:	e054      	b.n	801045a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80103b0:	7bbb      	ldrb	r3, [r7, #14]
 80103b2:	f003 020f 	and.w	r2, r3, #15
 80103b6:	6879      	ldr	r1, [r7, #4]
 80103b8:	4613      	mov	r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	4413      	add	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	440b      	add	r3, r1
 80103c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d104      	bne.n	80103d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80103cc:	6839      	ldr	r1, [r7, #0]
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fbc7 	bl	8010b62 <USBD_CtlError>
                  break;
 80103d4:	e041      	b.n	801045a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	da0b      	bge.n	80103f6 <USBD_StdEPReq+0x2b2>
 80103de:	7bbb      	ldrb	r3, [r7, #14]
 80103e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103e4:	4613      	mov	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	3310      	adds	r3, #16
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	4413      	add	r3, r2
 80103f2:	3304      	adds	r3, #4
 80103f4:	e00b      	b.n	801040e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103f6:	7bbb      	ldrb	r3, [r7, #14]
 80103f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103fc:	4613      	mov	r3, r2
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4413      	add	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	4413      	add	r3, r2
 801040c:	3304      	adds	r3, #4
 801040e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010410:	7bbb      	ldrb	r3, [r7, #14]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d002      	beq.n	801041c <USBD_StdEPReq+0x2d8>
 8010416:	7bbb      	ldrb	r3, [r7, #14]
 8010418:	2b80      	cmp	r3, #128	; 0x80
 801041a:	d103      	bne.n	8010424 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	2200      	movs	r2, #0
 8010420:	601a      	str	r2, [r3, #0]
 8010422:	e00e      	b.n	8010442 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010424:	7bbb      	ldrb	r3, [r7, #14]
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f007 fc8a 	bl	8017d42 <USBD_LL_IsStallEP>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d003      	beq.n	801043c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	2201      	movs	r2, #1
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	e002      	b.n	8010442 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	2200      	movs	r2, #0
 8010440:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	2202      	movs	r2, #2
 8010446:	4619      	mov	r1, r3
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fbfb 	bl	8010c44 <USBD_CtlSendData>
              break;
 801044e:	e004      	b.n	801045a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fb85 	bl	8010b62 <USBD_CtlError>
              break;
 8010458:	bf00      	nop
          }
          break;
 801045a:	e004      	b.n	8010466 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801045c:	6839      	ldr	r1, [r7, #0]
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fb7f 	bl	8010b62 <USBD_CtlError>
          break;
 8010464:	bf00      	nop
      }
      break;
 8010466:	e005      	b.n	8010474 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010468:	6839      	ldr	r1, [r7, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 fb79 	bl	8010b62 <USBD_CtlError>
      break;
 8010470:	e000      	b.n	8010474 <USBD_StdEPReq+0x330>
      break;
 8010472:	bf00      	nop
  }

  return ret;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801048a:	2300      	movs	r3, #0
 801048c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801048e:	2300      	movs	r3, #0
 8010490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	885b      	ldrh	r3, [r3, #2]
 801049a:	0a1b      	lsrs	r3, r3, #8
 801049c:	b29b      	uxth	r3, r3
 801049e:	3b01      	subs	r3, #1
 80104a0:	2b0e      	cmp	r3, #14
 80104a2:	f200 8152 	bhi.w	801074a <USBD_GetDescriptor+0x2ca>
 80104a6:	a201      	add	r2, pc, #4	; (adr r2, 80104ac <USBD_GetDescriptor+0x2c>)
 80104a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ac:	0801051d 	.word	0x0801051d
 80104b0:	08010535 	.word	0x08010535
 80104b4:	08010575 	.word	0x08010575
 80104b8:	0801074b 	.word	0x0801074b
 80104bc:	0801074b 	.word	0x0801074b
 80104c0:	080106eb 	.word	0x080106eb
 80104c4:	08010717 	.word	0x08010717
 80104c8:	0801074b 	.word	0x0801074b
 80104cc:	0801074b 	.word	0x0801074b
 80104d0:	0801074b 	.word	0x0801074b
 80104d4:	0801074b 	.word	0x0801074b
 80104d8:	0801074b 	.word	0x0801074b
 80104dc:	0801074b 	.word	0x0801074b
 80104e0:	0801074b 	.word	0x0801074b
 80104e4:	080104e9 	.word	0x080104e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00b      	beq.n	801050c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104fa:	69db      	ldr	r3, [r3, #28]
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	7c12      	ldrb	r2, [r2, #16]
 8010500:	f107 0108 	add.w	r1, r7, #8
 8010504:	4610      	mov	r0, r2
 8010506:	4798      	blx	r3
 8010508:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801050a:	e126      	b.n	801075a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 fb27 	bl	8010b62 <USBD_CtlError>
        err++;
 8010514:	7afb      	ldrb	r3, [r7, #11]
 8010516:	3301      	adds	r3, #1
 8010518:	72fb      	strb	r3, [r7, #11]
      break;
 801051a:	e11e      	b.n	801075a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	7c12      	ldrb	r2, [r2, #16]
 8010528:	f107 0108 	add.w	r1, r7, #8
 801052c:	4610      	mov	r0, r2
 801052e:	4798      	blx	r3
 8010530:	60f8      	str	r0, [r7, #12]
      break;
 8010532:	e112      	b.n	801075a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7c1b      	ldrb	r3, [r3, #16]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10d      	bne.n	8010558 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010544:	f107 0208 	add.w	r2, r7, #8
 8010548:	4610      	mov	r0, r2
 801054a:	4798      	blx	r3
 801054c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	3301      	adds	r3, #1
 8010552:	2202      	movs	r2, #2
 8010554:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010556:	e100      	b.n	801075a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010560:	f107 0208 	add.w	r2, r7, #8
 8010564:	4610      	mov	r0, r2
 8010566:	4798      	blx	r3
 8010568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3301      	adds	r3, #1
 801056e:	2202      	movs	r2, #2
 8010570:	701a      	strb	r2, [r3, #0]
      break;
 8010572:	e0f2      	b.n	801075a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	885b      	ldrh	r3, [r3, #2]
 8010578:	b2db      	uxtb	r3, r3
 801057a:	2b05      	cmp	r3, #5
 801057c:	f200 80ac 	bhi.w	80106d8 <USBD_GetDescriptor+0x258>
 8010580:	a201      	add	r2, pc, #4	; (adr r2, 8010588 <USBD_GetDescriptor+0x108>)
 8010582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010586:	bf00      	nop
 8010588:	080105a1 	.word	0x080105a1
 801058c:	080105d5 	.word	0x080105d5
 8010590:	08010609 	.word	0x08010609
 8010594:	0801063d 	.word	0x0801063d
 8010598:	08010671 	.word	0x08010671
 801059c:	080106a5 	.word	0x080106a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00b      	beq.n	80105c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	7c12      	ldrb	r2, [r2, #16]
 80105b8:	f107 0108 	add.w	r1, r7, #8
 80105bc:	4610      	mov	r0, r2
 80105be:	4798      	blx	r3
 80105c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105c2:	e091      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105c4:	6839      	ldr	r1, [r7, #0]
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 facb 	bl	8010b62 <USBD_CtlError>
            err++;
 80105cc:	7afb      	ldrb	r3, [r7, #11]
 80105ce:	3301      	adds	r3, #1
 80105d0:	72fb      	strb	r3, [r7, #11]
          break;
 80105d2:	e089      	b.n	80106e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00b      	beq.n	80105f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	7c12      	ldrb	r2, [r2, #16]
 80105ec:	f107 0108 	add.w	r1, r7, #8
 80105f0:	4610      	mov	r0, r2
 80105f2:	4798      	blx	r3
 80105f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105f6:	e077      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fab1 	bl	8010b62 <USBD_CtlError>
            err++;
 8010600:	7afb      	ldrb	r3, [r7, #11]
 8010602:	3301      	adds	r3, #1
 8010604:	72fb      	strb	r3, [r7, #11]
          break;
 8010606:	e06f      	b.n	80106e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00b      	beq.n	801062c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	7c12      	ldrb	r2, [r2, #16]
 8010620:	f107 0108 	add.w	r1, r7, #8
 8010624:	4610      	mov	r0, r2
 8010626:	4798      	blx	r3
 8010628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801062a:	e05d      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801062c:	6839      	ldr	r1, [r7, #0]
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 fa97 	bl	8010b62 <USBD_CtlError>
            err++;
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	3301      	adds	r3, #1
 8010638:	72fb      	strb	r3, [r7, #11]
          break;
 801063a:	e055      	b.n	80106e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00b      	beq.n	8010660 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801064e:	691b      	ldr	r3, [r3, #16]
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	7c12      	ldrb	r2, [r2, #16]
 8010654:	f107 0108 	add.w	r1, r7, #8
 8010658:	4610      	mov	r0, r2
 801065a:	4798      	blx	r3
 801065c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801065e:	e043      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010660:	6839      	ldr	r1, [r7, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 fa7d 	bl	8010b62 <USBD_CtlError>
            err++;
 8010668:	7afb      	ldrb	r3, [r7, #11]
 801066a:	3301      	adds	r3, #1
 801066c:	72fb      	strb	r3, [r7, #11]
          break;
 801066e:	e03b      	b.n	80106e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010676:	695b      	ldr	r3, [r3, #20]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00b      	beq.n	8010694 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010682:	695b      	ldr	r3, [r3, #20]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	7c12      	ldrb	r2, [r2, #16]
 8010688:	f107 0108 	add.w	r1, r7, #8
 801068c:	4610      	mov	r0, r2
 801068e:	4798      	blx	r3
 8010690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010692:	e029      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010694:	6839      	ldr	r1, [r7, #0]
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 fa63 	bl	8010b62 <USBD_CtlError>
            err++;
 801069c:	7afb      	ldrb	r3, [r7, #11]
 801069e:	3301      	adds	r3, #1
 80106a0:	72fb      	strb	r3, [r7, #11]
          break;
 80106a2:	e021      	b.n	80106e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d00b      	beq.n	80106c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	7c12      	ldrb	r2, [r2, #16]
 80106bc:	f107 0108 	add.w	r1, r7, #8
 80106c0:	4610      	mov	r0, r2
 80106c2:	4798      	blx	r3
 80106c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106c6:	e00f      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 fa49 	bl	8010b62 <USBD_CtlError>
            err++;
 80106d0:	7afb      	ldrb	r3, [r7, #11]
 80106d2:	3301      	adds	r3, #1
 80106d4:	72fb      	strb	r3, [r7, #11]
          break;
 80106d6:	e007      	b.n	80106e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80106d8:	6839      	ldr	r1, [r7, #0]
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 fa41 	bl	8010b62 <USBD_CtlError>
          err++;
 80106e0:	7afb      	ldrb	r3, [r7, #11]
 80106e2:	3301      	adds	r3, #1
 80106e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80106e6:	bf00      	nop
      }
      break;
 80106e8:	e037      	b.n	801075a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	7c1b      	ldrb	r3, [r3, #16]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d109      	bne.n	8010706 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106fa:	f107 0208 	add.w	r2, r7, #8
 80106fe:	4610      	mov	r0, r2
 8010700:	4798      	blx	r3
 8010702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010704:	e029      	b.n	801075a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010706:	6839      	ldr	r1, [r7, #0]
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f000 fa2a 	bl	8010b62 <USBD_CtlError>
        err++;
 801070e:	7afb      	ldrb	r3, [r7, #11]
 8010710:	3301      	adds	r3, #1
 8010712:	72fb      	strb	r3, [r7, #11]
      break;
 8010714:	e021      	b.n	801075a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	7c1b      	ldrb	r3, [r3, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10d      	bne.n	801073a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010726:	f107 0208 	add.w	r2, r7, #8
 801072a:	4610      	mov	r0, r2
 801072c:	4798      	blx	r3
 801072e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	3301      	adds	r3, #1
 8010734:	2207      	movs	r2, #7
 8010736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010738:	e00f      	b.n	801075a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801073a:	6839      	ldr	r1, [r7, #0]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f000 fa10 	bl	8010b62 <USBD_CtlError>
        err++;
 8010742:	7afb      	ldrb	r3, [r7, #11]
 8010744:	3301      	adds	r3, #1
 8010746:	72fb      	strb	r3, [r7, #11]
      break;
 8010748:	e007      	b.n	801075a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fa08 	bl	8010b62 <USBD_CtlError>
      err++;
 8010752:	7afb      	ldrb	r3, [r7, #11]
 8010754:	3301      	adds	r3, #1
 8010756:	72fb      	strb	r3, [r7, #11]
      break;
 8010758:	bf00      	nop
  }

  if (err != 0U)
 801075a:	7afb      	ldrb	r3, [r7, #11]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d11e      	bne.n	801079e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	88db      	ldrh	r3, [r3, #6]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d016      	beq.n	8010796 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010768:	893b      	ldrh	r3, [r7, #8]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00e      	beq.n	801078c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	88da      	ldrh	r2, [r3, #6]
 8010772:	893b      	ldrh	r3, [r7, #8]
 8010774:	4293      	cmp	r3, r2
 8010776:	bf28      	it	cs
 8010778:	4613      	movcs	r3, r2
 801077a:	b29b      	uxth	r3, r3
 801077c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801077e:	893b      	ldrh	r3, [r7, #8]
 8010780:	461a      	mov	r2, r3
 8010782:	68f9      	ldr	r1, [r7, #12]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fa5d 	bl	8010c44 <USBD_CtlSendData>
 801078a:	e009      	b.n	80107a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801078c:	6839      	ldr	r1, [r7, #0]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f9e7 	bl	8010b62 <USBD_CtlError>
 8010794:	e004      	b.n	80107a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 fa91 	bl	8010cbe <USBD_CtlSendStatus>
 801079c:	e000      	b.n	80107a0 <USBD_GetDescriptor+0x320>
    return;
 801079e:	bf00      	nop
  }
}
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop

080107a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	889b      	ldrh	r3, [r3, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d131      	bne.n	801081e <USBD_SetAddress+0x76>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	88db      	ldrh	r3, [r3, #6]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d12d      	bne.n	801081e <USBD_SetAddress+0x76>
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	885b      	ldrh	r3, [r3, #2]
 80107c6:	2b7f      	cmp	r3, #127	; 0x7f
 80107c8:	d829      	bhi.n	801081e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	885b      	ldrh	r3, [r3, #2]
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	2b03      	cmp	r3, #3
 80107e0:	d104      	bne.n	80107ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80107e2:	6839      	ldr	r1, [r7, #0]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 f9bc 	bl	8010b62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ea:	e01d      	b.n	8010828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	7bfa      	ldrb	r2, [r7, #15]
 80107f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	4619      	mov	r1, r3
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f007 face 	bl	8017d9a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 fa5d 	bl	8010cbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d004      	beq.n	8010814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2202      	movs	r2, #2
 801080e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010812:	e009      	b.n	8010828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2201      	movs	r2, #1
 8010818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801081c:	e004      	b.n	8010828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 f99e 	bl	8010b62 <USBD_CtlError>
  }
}
 8010826:	bf00      	nop
 8010828:	bf00      	nop
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801083a:	2300      	movs	r3, #0
 801083c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	885b      	ldrh	r3, [r3, #2]
 8010842:	b2da      	uxtb	r2, r3
 8010844:	4b4e      	ldr	r3, [pc, #312]	; (8010980 <USBD_SetConfig+0x150>)
 8010846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010848:	4b4d      	ldr	r3, [pc, #308]	; (8010980 <USBD_SetConfig+0x150>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d905      	bls.n	801085c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f985 	bl	8010b62 <USBD_CtlError>
    return USBD_FAIL;
 8010858:	2303      	movs	r3, #3
 801085a:	e08c      	b.n	8010976 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010862:	b2db      	uxtb	r3, r3
 8010864:	2b02      	cmp	r3, #2
 8010866:	d002      	beq.n	801086e <USBD_SetConfig+0x3e>
 8010868:	2b03      	cmp	r3, #3
 801086a:	d029      	beq.n	80108c0 <USBD_SetConfig+0x90>
 801086c:	e075      	b.n	801095a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801086e:	4b44      	ldr	r3, [pc, #272]	; (8010980 <USBD_SetConfig+0x150>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d020      	beq.n	80108b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010876:	4b42      	ldr	r3, [pc, #264]	; (8010980 <USBD_SetConfig+0x150>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010880:	4b3f      	ldr	r3, [pc, #252]	; (8010980 <USBD_SetConfig+0x150>)
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7fe ffbc 	bl	800f804 <USBD_SetClassConfig>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d008      	beq.n	80108a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010896:	6839      	ldr	r1, [r7, #0]
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 f962 	bl	8010b62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2202      	movs	r2, #2
 80108a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80108a6:	e065      	b.n	8010974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 fa08 	bl	8010cbe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2203      	movs	r2, #3
 80108b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80108b6:	e05d      	b.n	8010974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 fa00 	bl	8010cbe <USBD_CtlSendStatus>
      break;
 80108be:	e059      	b.n	8010974 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80108c0:	4b2f      	ldr	r3, [pc, #188]	; (8010980 <USBD_SetConfig+0x150>)
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d112      	bne.n	80108ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2202      	movs	r2, #2
 80108cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80108d0:	4b2b      	ldr	r3, [pc, #172]	; (8010980 <USBD_SetConfig+0x150>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	461a      	mov	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80108da:	4b29      	ldr	r3, [pc, #164]	; (8010980 <USBD_SetConfig+0x150>)
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7fe ffab 	bl	800f83c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f000 f9e9 	bl	8010cbe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80108ec:	e042      	b.n	8010974 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80108ee:	4b24      	ldr	r3, [pc, #144]	; (8010980 <USBD_SetConfig+0x150>)
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	461a      	mov	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d02a      	beq.n	8010952 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	b2db      	uxtb	r3, r3
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7fe ff99 	bl	800f83c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801090a:	4b1d      	ldr	r3, [pc, #116]	; (8010980 <USBD_SetConfig+0x150>)
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	461a      	mov	r2, r3
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010914:	4b1a      	ldr	r3, [pc, #104]	; (8010980 <USBD_SetConfig+0x150>)
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	4619      	mov	r1, r3
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7fe ff72 	bl	800f804 <USBD_SetClassConfig>
 8010920:	4603      	mov	r3, r0
 8010922:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010924:	7bfb      	ldrb	r3, [r7, #15]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00f      	beq.n	801094a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801092a:	6839      	ldr	r1, [r7, #0]
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 f918 	bl	8010b62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	b2db      	uxtb	r3, r3
 8010938:	4619      	mov	r1, r3
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7fe ff7e 	bl	800f83c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2202      	movs	r2, #2
 8010944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010948:	e014      	b.n	8010974 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 f9b7 	bl	8010cbe <USBD_CtlSendStatus>
      break;
 8010950:	e010      	b.n	8010974 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f9b3 	bl	8010cbe <USBD_CtlSendStatus>
      break;
 8010958:	e00c      	b.n	8010974 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801095a:	6839      	ldr	r1, [r7, #0]
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 f900 	bl	8010b62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010962:	4b07      	ldr	r3, [pc, #28]	; (8010980 <USBD_SetConfig+0x150>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	4619      	mov	r1, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7fe ff67 	bl	800f83c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801096e:	2303      	movs	r3, #3
 8010970:	73fb      	strb	r3, [r7, #15]
      break;
 8010972:	bf00      	nop
  }

  return ret;
 8010974:	7bfb      	ldrb	r3, [r7, #15]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	2000321c 	.word	0x2000321c

08010984 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	88db      	ldrh	r3, [r3, #6]
 8010992:	2b01      	cmp	r3, #1
 8010994:	d004      	beq.n	80109a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8e2 	bl	8010b62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801099e:	e023      	b.n	80109e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	dc02      	bgt.n	80109b2 <USBD_GetConfig+0x2e>
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	dc03      	bgt.n	80109b8 <USBD_GetConfig+0x34>
 80109b0:	e015      	b.n	80109de <USBD_GetConfig+0x5a>
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d00b      	beq.n	80109ce <USBD_GetConfig+0x4a>
 80109b6:	e012      	b.n	80109de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3308      	adds	r3, #8
 80109c2:	2201      	movs	r2, #1
 80109c4:	4619      	mov	r1, r3
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 f93c 	bl	8010c44 <USBD_CtlSendData>
        break;
 80109cc:	e00c      	b.n	80109e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3304      	adds	r3, #4
 80109d2:	2201      	movs	r2, #1
 80109d4:	4619      	mov	r1, r3
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 f934 	bl	8010c44 <USBD_CtlSendData>
        break;
 80109dc:	e004      	b.n	80109e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 f8be 	bl	8010b62 <USBD_CtlError>
        break;
 80109e6:	bf00      	nop
}
 80109e8:	bf00      	nop
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	3b01      	subs	r3, #1
 8010a04:	2b02      	cmp	r3, #2
 8010a06:	d81e      	bhi.n	8010a46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	88db      	ldrh	r3, [r3, #6]
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d004      	beq.n	8010a1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010a10:	6839      	ldr	r1, [r7, #0]
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 f8a5 	bl	8010b62 <USBD_CtlError>
        break;
 8010a18:	e01a      	b.n	8010a50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d005      	beq.n	8010a36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	f043 0202 	orr.w	r2, r3, #2
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	330c      	adds	r3, #12
 8010a3a:	2202      	movs	r2, #2
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 f900 	bl	8010c44 <USBD_CtlSendData>
      break;
 8010a44:	e004      	b.n	8010a50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 f88a 	bl	8010b62 <USBD_CtlError>
      break;
 8010a4e:	bf00      	nop
  }
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	885b      	ldrh	r3, [r3, #2]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d107      	bne.n	8010a7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 f923 	bl	8010cbe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010a78:	e013      	b.n	8010aa2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	885b      	ldrh	r3, [r3, #2]
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d10b      	bne.n	8010a9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	889b      	ldrh	r3, [r3, #4]
 8010a86:	0a1b      	lsrs	r3, r3, #8
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	b2da      	uxtb	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 f913 	bl	8010cbe <USBD_CtlSendStatus>
}
 8010a98:	e003      	b.n	8010aa2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f860 	bl	8010b62 <USBD_CtlError>
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b082      	sub	sp, #8
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	6078      	str	r0, [r7, #4]
 8010ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	3b01      	subs	r3, #1
 8010abe:	2b02      	cmp	r3, #2
 8010ac0:	d80b      	bhi.n	8010ada <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	885b      	ldrh	r3, [r3, #2]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d10c      	bne.n	8010ae4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f8f3 	bl	8010cbe <USBD_CtlSendStatus>
      }
      break;
 8010ad8:	e004      	b.n	8010ae4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f840 	bl	8010b62 <USBD_CtlError>
      break;
 8010ae2:	e000      	b.n	8010ae6 <USBD_ClrFeature+0x3c>
      break;
 8010ae4:	bf00      	nop
  }
}
 8010ae6:	bf00      	nop
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b084      	sub	sp, #16
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	781a      	ldrb	r2, [r3, #0]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	3301      	adds	r3, #1
 8010b08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	781a      	ldrb	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3301      	adds	r3, #1
 8010b16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7ff fa16 	bl	800ff4a <SWAPBYTE>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	461a      	mov	r2, r3
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7ff fa09 	bl	800ff4a <SWAPBYTE>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	3301      	adds	r3, #1
 8010b44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7ff f9fc 	bl	800ff4a <SWAPBYTE>
 8010b52:	4603      	mov	r3, r0
 8010b54:	461a      	mov	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	80da      	strh	r2, [r3, #6]
}
 8010b5a:	bf00      	nop
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b082      	sub	sp, #8
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b6c:	2180      	movs	r1, #128	; 0x80
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f007 f8a9 	bl	8017cc6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010b74:	2100      	movs	r1, #0
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f007 f8a5 	bl	8017cc6 <USBD_LL_StallEP>
}
 8010b7c:	bf00      	nop
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010b90:	2300      	movs	r3, #0
 8010b92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d036      	beq.n	8010c08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010b9e:	6938      	ldr	r0, [r7, #16]
 8010ba0:	f000 f836 	bl	8010c10 <USBD_GetLen>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010bb2:	7dfb      	ldrb	r3, [r7, #23]
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	7812      	ldrb	r2, [r2, #0]
 8010bbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8010bbe:	7dfb      	ldrb	r3, [r7, #23]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010bc4:	7dfb      	ldrb	r3, [r7, #23]
 8010bc6:	68ba      	ldr	r2, [r7, #8]
 8010bc8:	4413      	add	r3, r2
 8010bca:	2203      	movs	r2, #3
 8010bcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8010bce:	7dfb      	ldrb	r3, [r7, #23]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010bd4:	e013      	b.n	8010bfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010bd6:	7dfb      	ldrb	r3, [r7, #23]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	4413      	add	r3, r2
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	7812      	ldrb	r2, [r2, #0]
 8010be0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	3301      	adds	r3, #1
 8010be6:	613b      	str	r3, [r7, #16]
    idx++;
 8010be8:	7dfb      	ldrb	r3, [r7, #23]
 8010bea:	3301      	adds	r3, #1
 8010bec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	701a      	strb	r2, [r3, #0]
    idx++;
 8010bf8:	7dfb      	ldrb	r3, [r7, #23]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1e7      	bne.n	8010bd6 <USBD_GetString+0x52>
 8010c06:	e000      	b.n	8010c0a <USBD_GetString+0x86>
    return;
 8010c08:	bf00      	nop
  }
}
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010c20:	e005      	b.n	8010c2e <USBD_GetLen+0x1e>
  {
    len++;
 8010c22:	7bfb      	ldrb	r3, [r7, #15]
 8010c24:	3301      	adds	r3, #1
 8010c26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1f5      	bne.n	8010c22 <USBD_GetLen+0x12>
  }

  return len;
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2202      	movs	r2, #2
 8010c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	2100      	movs	r1, #0
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f007 f8b4 	bl	8017dd8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b084      	sub	sp, #16
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	60b9      	str	r1, [r7, #8]
 8010c84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f007 f8a3 	bl	8017dd8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	2100      	movs	r1, #0
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f007 f8b3 	bl	8017e1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b082      	sub	sp, #8
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2204      	movs	r2, #4
 8010cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010cce:	2300      	movs	r3, #0
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f007 f87f 	bl	8017dd8 <USBD_LL_Transmit>

  return USBD_OK;
 8010cda:	2300      	movs	r3, #0
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2205      	movs	r2, #5
 8010cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f007 f88d 	bl	8017e1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d00:	2300      	movs	r3, #0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010d16:	79fb      	ldrb	r3, [r7, #7]
 8010d18:	4a08      	ldr	r2, [pc, #32]	; (8010d3c <disk_status+0x30>)
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	4413      	add	r3, r2
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	79fa      	ldrb	r2, [r7, #7]
 8010d24:	4905      	ldr	r1, [pc, #20]	; (8010d3c <disk_status+0x30>)
 8010d26:	440a      	add	r2, r1
 8010d28:	7a12      	ldrb	r2, [r2, #8]
 8010d2a:	4610      	mov	r0, r2
 8010d2c:	4798      	blx	r3
 8010d2e:	4603      	mov	r3, r0
 8010d30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	20003248 	.word	0x20003248

08010d40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d4e:	79fb      	ldrb	r3, [r7, #7]
 8010d50:	4a0d      	ldr	r2, [pc, #52]	; (8010d88 <disk_initialize+0x48>)
 8010d52:	5cd3      	ldrb	r3, [r2, r3]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d111      	bne.n	8010d7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d58:	79fb      	ldrb	r3, [r7, #7]
 8010d5a:	4a0b      	ldr	r2, [pc, #44]	; (8010d88 <disk_initialize+0x48>)
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	4a09      	ldr	r2, [pc, #36]	; (8010d88 <disk_initialize+0x48>)
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	4413      	add	r3, r2
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	79fa      	ldrb	r2, [r7, #7]
 8010d6e:	4906      	ldr	r1, [pc, #24]	; (8010d88 <disk_initialize+0x48>)
 8010d70:	440a      	add	r2, r1
 8010d72:	7a12      	ldrb	r2, [r2, #8]
 8010d74:	4610      	mov	r0, r2
 8010d76:	4798      	blx	r3
 8010d78:	4603      	mov	r3, r0
 8010d7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20003248 	.word	0x20003248

08010d8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d8c:	b590      	push	{r4, r7, lr}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
 8010d96:	603b      	str	r3, [r7, #0]
 8010d98:	4603      	mov	r3, r0
 8010d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d9c:	7bfb      	ldrb	r3, [r7, #15]
 8010d9e:	4a0a      	ldr	r2, [pc, #40]	; (8010dc8 <disk_read+0x3c>)
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4413      	add	r3, r2
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	689c      	ldr	r4, [r3, #8]
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	4a07      	ldr	r2, [pc, #28]	; (8010dc8 <disk_read+0x3c>)
 8010dac:	4413      	add	r3, r2
 8010dae:	7a18      	ldrb	r0, [r3, #8]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	47a0      	blx	r4
 8010db8:	4603      	mov	r3, r0
 8010dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	371c      	adds	r7, #28
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd90      	pop	{r4, r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20003248 	.word	0x20003248

08010dcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010dcc:	b590      	push	{r4, r7, lr}
 8010dce:	b087      	sub	sp, #28
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60b9      	str	r1, [r7, #8]
 8010dd4:	607a      	str	r2, [r7, #4]
 8010dd6:	603b      	str	r3, [r7, #0]
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010ddc:	7bfb      	ldrb	r3, [r7, #15]
 8010dde:	4a0a      	ldr	r2, [pc, #40]	; (8010e08 <disk_write+0x3c>)
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	68dc      	ldr	r4, [r3, #12]
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
 8010dea:	4a07      	ldr	r2, [pc, #28]	; (8010e08 <disk_write+0x3c>)
 8010dec:	4413      	add	r3, r2
 8010dee:	7a18      	ldrb	r0, [r3, #8]
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	68b9      	ldr	r1, [r7, #8]
 8010df6:	47a0      	blx	r4
 8010df8:	4603      	mov	r3, r0
 8010dfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8010dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	371c      	adds	r7, #28
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd90      	pop	{r4, r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20003248 	.word	0x20003248

08010e0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	603a      	str	r2, [r7, #0]
 8010e16:	71fb      	strb	r3, [r7, #7]
 8010e18:	460b      	mov	r3, r1
 8010e1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010e1c:	79fb      	ldrb	r3, [r7, #7]
 8010e1e:	4a09      	ldr	r2, [pc, #36]	; (8010e44 <disk_ioctl+0x38>)
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	4413      	add	r3, r2
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	691b      	ldr	r3, [r3, #16]
 8010e28:	79fa      	ldrb	r2, [r7, #7]
 8010e2a:	4906      	ldr	r1, [pc, #24]	; (8010e44 <disk_ioctl+0x38>)
 8010e2c:	440a      	add	r2, r1
 8010e2e:	7a10      	ldrb	r0, [r2, #8]
 8010e30:	79b9      	ldrb	r1, [r7, #6]
 8010e32:	683a      	ldr	r2, [r7, #0]
 8010e34:	4798      	blx	r3
 8010e36:	4603      	mov	r3, r0
 8010e38:	73fb      	strb	r3, [r7, #15]
  return res;
 8010e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20003248 	.word	0x20003248

08010e48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	3301      	adds	r3, #1
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e58:	89fb      	ldrh	r3, [r7, #14]
 8010e5a:	021b      	lsls	r3, r3, #8
 8010e5c:	b21a      	sxth	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	b21b      	sxth	r3, r3
 8010e64:	4313      	orrs	r3, r2
 8010e66:	b21b      	sxth	r3, r3
 8010e68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e6a:	89fb      	ldrh	r3, [r7, #14]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3714      	adds	r7, #20
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	3303      	adds	r3, #3
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	021b      	lsls	r3, r3, #8
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	3202      	adds	r2, #2
 8010e90:	7812      	ldrb	r2, [r2, #0]
 8010e92:	4313      	orrs	r3, r2
 8010e94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	021b      	lsls	r3, r3, #8
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	3201      	adds	r2, #1
 8010e9e:	7812      	ldrb	r2, [r2, #0]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	021b      	lsls	r3, r3, #8
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	7812      	ldrb	r2, [r2, #0]
 8010eac:	4313      	orrs	r3, r2
 8010eae:	60fb      	str	r3, [r7, #12]
	return rv;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3714      	adds	r7, #20
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	1c5a      	adds	r2, r3, #1
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	887a      	ldrh	r2, [r7, #2]
 8010ed2:	b2d2      	uxtb	r2, r2
 8010ed4:	701a      	strb	r2, [r3, #0]
 8010ed6:	887b      	ldrh	r3, [r7, #2]
 8010ed8:	0a1b      	lsrs	r3, r3, #8
 8010eda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	607a      	str	r2, [r7, #4]
 8010ee2:	887a      	ldrh	r2, [r7, #2]
 8010ee4:	b2d2      	uxtb	r2, r2
 8010ee6:	701a      	strb	r2, [r3, #0]
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	1c5a      	adds	r2, r3, #1
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	b2d2      	uxtb	r2, r2
 8010f08:	701a      	strb	r2, [r3, #0]
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	0a1b      	lsrs	r3, r3, #8
 8010f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	607a      	str	r2, [r7, #4]
 8010f16:	683a      	ldr	r2, [r7, #0]
 8010f18:	b2d2      	uxtb	r2, r2
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	0a1b      	lsrs	r3, r3, #8
 8010f20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	b2d2      	uxtb	r2, r2
 8010f2c:	701a      	strb	r2, [r3, #0]
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	0a1b      	lsrs	r3, r3, #8
 8010f32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	1c5a      	adds	r2, r3, #1
 8010f38:	607a      	str	r2, [r7, #4]
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	b2d2      	uxtb	r2, r2
 8010f3e:	701a      	strb	r2, [r3, #0]
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f4c:	b480      	push	{r7}
 8010f4e:	b087      	sub	sp, #28
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00d      	beq.n	8010f82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f66:	693a      	ldr	r2, [r7, #16]
 8010f68:	1c53      	adds	r3, r2, #1
 8010f6a:	613b      	str	r3, [r7, #16]
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	1c59      	adds	r1, r3, #1
 8010f70:	6179      	str	r1, [r7, #20]
 8010f72:	7812      	ldrb	r2, [r2, #0]
 8010f74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	607b      	str	r3, [r7, #4]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1f1      	bne.n	8010f66 <mem_cpy+0x1a>
	}
}
 8010f82:	bf00      	nop
 8010f84:	371c      	adds	r7, #28
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f8e:	b480      	push	{r7}
 8010f90:	b087      	sub	sp, #28
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	60f8      	str	r0, [r7, #12]
 8010f96:	60b9      	str	r1, [r7, #8]
 8010f98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	617a      	str	r2, [r7, #20]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	b2d2      	uxtb	r2, r2
 8010fa8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	607b      	str	r3, [r7, #4]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1f3      	bne.n	8010f9e <mem_set+0x10>
}
 8010fb6:	bf00      	nop
 8010fb8:	bf00      	nop
 8010fba:	371c      	adds	r7, #28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr

08010fc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010fc4:	b480      	push	{r7}
 8010fc6:	b089      	sub	sp, #36	; 0x24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	61fb      	str	r3, [r7, #28]
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	1c5a      	adds	r2, r3, #1
 8010fe0:	61fa      	str	r2, [r7, #28]
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	61ba      	str	r2, [r7, #24]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	1acb      	subs	r3, r1, r3
 8010ff0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	607b      	str	r3, [r7, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <mem_cmp+0x40>
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d0eb      	beq.n	8010fdc <mem_cmp+0x18>

	return r;
 8011004:	697b      	ldr	r3, [r7, #20]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3724      	adds	r7, #36	; 0x24
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011012:	b480      	push	{r7}
 8011014:	b083      	sub	sp, #12
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
 801101a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801101c:	e002      	b.n	8011024 <chk_chr+0x12>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	3301      	adds	r3, #1
 8011022:	607b      	str	r3, [r7, #4]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <chk_chr+0x26>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	461a      	mov	r2, r3
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	4293      	cmp	r3, r2
 8011036:	d1f2      	bne.n	801101e <chk_chr+0xc>
	return *str;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	781b      	ldrb	r3, [r3, #0]
}
 801103c:	4618      	mov	r0, r3
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d009      	beq.n	801106a <lock_fs+0x22>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	4618      	mov	r0, r3
 801105c:	f003 fb3f 	bl	80146de <ff_req_grant>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <lock_fs+0x22>
 8011066:	2301      	movs	r3, #1
 8011068:	e000      	b.n	801106c <lock_fs+0x24>
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	460b      	mov	r3, r1
 801107e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00d      	beq.n	80110a2 <unlock_fs+0x2e>
 8011086:	78fb      	ldrb	r3, [r7, #3]
 8011088:	2b0c      	cmp	r3, #12
 801108a:	d00a      	beq.n	80110a2 <unlock_fs+0x2e>
 801108c:	78fb      	ldrb	r3, [r7, #3]
 801108e:	2b0b      	cmp	r3, #11
 8011090:	d007      	beq.n	80110a2 <unlock_fs+0x2e>
 8011092:	78fb      	ldrb	r3, [r7, #3]
 8011094:	2b0f      	cmp	r3, #15
 8011096:	d004      	beq.n	80110a2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	4618      	mov	r0, r3
 801109e:	f003 fb33 	bl	8014708 <ff_rel_grant>
	}
}
 80110a2:	bf00      	nop
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
	...

080110ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80110b6:	2300      	movs	r3, #0
 80110b8:	60bb      	str	r3, [r7, #8]
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	60fb      	str	r3, [r7, #12]
 80110be:	e029      	b.n	8011114 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80110c0:	4a27      	ldr	r2, [pc, #156]	; (8011160 <chk_lock+0xb4>)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	011b      	lsls	r3, r3, #4
 80110c6:	4413      	add	r3, r2
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d01d      	beq.n	801110a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80110ce:	4a24      	ldr	r2, [pc, #144]	; (8011160 <chk_lock+0xb4>)
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	011b      	lsls	r3, r3, #4
 80110d4:	4413      	add	r3, r2
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d116      	bne.n	801110e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80110e0:	4a1f      	ldr	r2, [pc, #124]	; (8011160 <chk_lock+0xb4>)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	011b      	lsls	r3, r3, #4
 80110e6:	4413      	add	r3, r2
 80110e8:	3304      	adds	r3, #4
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d10c      	bne.n	801110e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80110f4:	4a1a      	ldr	r2, [pc, #104]	; (8011160 <chk_lock+0xb4>)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	011b      	lsls	r3, r3, #4
 80110fa:	4413      	add	r3, r2
 80110fc:	3308      	adds	r3, #8
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011104:	429a      	cmp	r2, r3
 8011106:	d102      	bne.n	801110e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011108:	e007      	b.n	801111a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801110a:	2301      	movs	r3, #1
 801110c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	3301      	adds	r3, #1
 8011112:	60fb      	str	r3, [r7, #12]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d9d2      	bls.n	80110c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d109      	bne.n	8011134 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <chk_lock+0x80>
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b02      	cmp	r3, #2
 801112a:	d101      	bne.n	8011130 <chk_lock+0x84>
 801112c:	2300      	movs	r3, #0
 801112e:	e010      	b.n	8011152 <chk_lock+0xa6>
 8011130:	2312      	movs	r3, #18
 8011132:	e00e      	b.n	8011152 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d108      	bne.n	801114c <chk_lock+0xa0>
 801113a:	4a09      	ldr	r2, [pc, #36]	; (8011160 <chk_lock+0xb4>)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	011b      	lsls	r3, r3, #4
 8011140:	4413      	add	r3, r2
 8011142:	330c      	adds	r3, #12
 8011144:	881b      	ldrh	r3, [r3, #0]
 8011146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801114a:	d101      	bne.n	8011150 <chk_lock+0xa4>
 801114c:	2310      	movs	r3, #16
 801114e:	e000      	b.n	8011152 <chk_lock+0xa6>
 8011150:	2300      	movs	r3, #0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	20003228 	.word	0x20003228

08011164 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011164:	b480      	push	{r7}
 8011166:	b083      	sub	sp, #12
 8011168:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801116a:	2300      	movs	r3, #0
 801116c:	607b      	str	r3, [r7, #4]
 801116e:	e002      	b.n	8011176 <enq_lock+0x12>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	3301      	adds	r3, #1
 8011174:	607b      	str	r3, [r7, #4]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d806      	bhi.n	801118a <enq_lock+0x26>
 801117c:	4a09      	ldr	r2, [pc, #36]	; (80111a4 <enq_lock+0x40>)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	011b      	lsls	r3, r3, #4
 8011182:	4413      	add	r3, r2
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1f2      	bne.n	8011170 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b02      	cmp	r3, #2
 801118e:	bf14      	ite	ne
 8011190:	2301      	movne	r3, #1
 8011192:	2300      	moveq	r3, #0
 8011194:	b2db      	uxtb	r3, r3
}
 8011196:	4618      	mov	r0, r3
 8011198:	370c      	adds	r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20003228 	.word	0x20003228

080111a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80111b2:	2300      	movs	r3, #0
 80111b4:	60fb      	str	r3, [r7, #12]
 80111b6:	e01f      	b.n	80111f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80111b8:	4a41      	ldr	r2, [pc, #260]	; (80112c0 <inc_lock+0x118>)
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	4413      	add	r3, r2
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d113      	bne.n	80111f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80111ca:	4a3d      	ldr	r2, [pc, #244]	; (80112c0 <inc_lock+0x118>)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	011b      	lsls	r3, r3, #4
 80111d0:	4413      	add	r3, r2
 80111d2:	3304      	adds	r3, #4
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80111da:	429a      	cmp	r2, r3
 80111dc:	d109      	bne.n	80111f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80111de:	4a38      	ldr	r2, [pc, #224]	; (80112c0 <inc_lock+0x118>)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	011b      	lsls	r3, r3, #4
 80111e4:	4413      	add	r3, r2
 80111e6:	3308      	adds	r3, #8
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d006      	beq.n	8011200 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	3301      	adds	r3, #1
 80111f6:	60fb      	str	r3, [r7, #12]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d9dc      	bls.n	80111b8 <inc_lock+0x10>
 80111fe:	e000      	b.n	8011202 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011200:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b02      	cmp	r3, #2
 8011206:	d132      	bne.n	801126e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	e002      	b.n	8011214 <inc_lock+0x6c>
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3301      	adds	r3, #1
 8011212:	60fb      	str	r3, [r7, #12]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d806      	bhi.n	8011228 <inc_lock+0x80>
 801121a:	4a29      	ldr	r2, [pc, #164]	; (80112c0 <inc_lock+0x118>)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	011b      	lsls	r3, r3, #4
 8011220:	4413      	add	r3, r2
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1f2      	bne.n	801120e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2b02      	cmp	r3, #2
 801122c:	d101      	bne.n	8011232 <inc_lock+0x8a>
 801122e:	2300      	movs	r3, #0
 8011230:	e040      	b.n	80112b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	4922      	ldr	r1, [pc, #136]	; (80112c0 <inc_lock+0x118>)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	011b      	lsls	r3, r3, #4
 801123c:	440b      	add	r3, r1
 801123e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	689a      	ldr	r2, [r3, #8]
 8011244:	491e      	ldr	r1, [pc, #120]	; (80112c0 <inc_lock+0x118>)
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	011b      	lsls	r3, r3, #4
 801124a:	440b      	add	r3, r1
 801124c:	3304      	adds	r3, #4
 801124e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	695a      	ldr	r2, [r3, #20]
 8011254:	491a      	ldr	r1, [pc, #104]	; (80112c0 <inc_lock+0x118>)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	011b      	lsls	r3, r3, #4
 801125a:	440b      	add	r3, r1
 801125c:	3308      	adds	r3, #8
 801125e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011260:	4a17      	ldr	r2, [pc, #92]	; (80112c0 <inc_lock+0x118>)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	011b      	lsls	r3, r3, #4
 8011266:	4413      	add	r3, r2
 8011268:	330c      	adds	r3, #12
 801126a:	2200      	movs	r2, #0
 801126c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d009      	beq.n	8011288 <inc_lock+0xe0>
 8011274:	4a12      	ldr	r2, [pc, #72]	; (80112c0 <inc_lock+0x118>)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	011b      	lsls	r3, r3, #4
 801127a:	4413      	add	r3, r2
 801127c:	330c      	adds	r3, #12
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d001      	beq.n	8011288 <inc_lock+0xe0>
 8011284:	2300      	movs	r3, #0
 8011286:	e015      	b.n	80112b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d108      	bne.n	80112a0 <inc_lock+0xf8>
 801128e:	4a0c      	ldr	r2, [pc, #48]	; (80112c0 <inc_lock+0x118>)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	011b      	lsls	r3, r3, #4
 8011294:	4413      	add	r3, r2
 8011296:	330c      	adds	r3, #12
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	3301      	adds	r3, #1
 801129c:	b29a      	uxth	r2, r3
 801129e:	e001      	b.n	80112a4 <inc_lock+0xfc>
 80112a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112a4:	4906      	ldr	r1, [pc, #24]	; (80112c0 <inc_lock+0x118>)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	011b      	lsls	r3, r3, #4
 80112aa:	440b      	add	r3, r1
 80112ac:	330c      	adds	r3, #12
 80112ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3301      	adds	r3, #1
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	20003228 	.word	0x20003228

080112c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	3b01      	subs	r3, #1
 80112d0:	607b      	str	r3, [r7, #4]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d825      	bhi.n	8011324 <dec_lock+0x60>
		n = Files[i].ctr;
 80112d8:	4a17      	ldr	r2, [pc, #92]	; (8011338 <dec_lock+0x74>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	011b      	lsls	r3, r3, #4
 80112de:	4413      	add	r3, r2
 80112e0:	330c      	adds	r3, #12
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80112e6:	89fb      	ldrh	r3, [r7, #14]
 80112e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112ec:	d101      	bne.n	80112f2 <dec_lock+0x2e>
 80112ee:	2300      	movs	r3, #0
 80112f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80112f2:	89fb      	ldrh	r3, [r7, #14]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d002      	beq.n	80112fe <dec_lock+0x3a>
 80112f8:	89fb      	ldrh	r3, [r7, #14]
 80112fa:	3b01      	subs	r3, #1
 80112fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80112fe:	4a0e      	ldr	r2, [pc, #56]	; (8011338 <dec_lock+0x74>)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	4413      	add	r3, r2
 8011306:	330c      	adds	r3, #12
 8011308:	89fa      	ldrh	r2, [r7, #14]
 801130a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801130c:	89fb      	ldrh	r3, [r7, #14]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d105      	bne.n	801131e <dec_lock+0x5a>
 8011312:	4a09      	ldr	r2, [pc, #36]	; (8011338 <dec_lock+0x74>)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	4413      	add	r3, r2
 801131a:	2200      	movs	r2, #0
 801131c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	737b      	strb	r3, [r7, #13]
 8011322:	e001      	b.n	8011328 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011324:	2302      	movs	r3, #2
 8011326:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011328:	7b7b      	ldrb	r3, [r7, #13]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3714      	adds	r7, #20
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	20003228 	.word	0x20003228

0801133c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011344:	2300      	movs	r3, #0
 8011346:	60fb      	str	r3, [r7, #12]
 8011348:	e010      	b.n	801136c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801134a:	4a0d      	ldr	r2, [pc, #52]	; (8011380 <clear_lock+0x44>)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	011b      	lsls	r3, r3, #4
 8011350:	4413      	add	r3, r2
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	429a      	cmp	r2, r3
 8011358:	d105      	bne.n	8011366 <clear_lock+0x2a>
 801135a:	4a09      	ldr	r2, [pc, #36]	; (8011380 <clear_lock+0x44>)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	011b      	lsls	r3, r3, #4
 8011360:	4413      	add	r3, r2
 8011362:	2200      	movs	r2, #0
 8011364:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3301      	adds	r3, #1
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2b01      	cmp	r3, #1
 8011370:	d9eb      	bls.n	801134a <clear_lock+0xe>
	}
}
 8011372:	bf00      	nop
 8011374:	bf00      	nop
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	20003228 	.word	0x20003228

08011384 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	78db      	ldrb	r3, [r3, #3]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d034      	beq.n	8011402 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801139c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7858      	ldrb	r0, [r3, #1]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113a8:	2301      	movs	r3, #1
 80113aa:	697a      	ldr	r2, [r7, #20]
 80113ac:	f7ff fd0e 	bl	8010dcc <disk_write>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80113b6:	2301      	movs	r3, #1
 80113b8:	73fb      	strb	r3, [r7, #15]
 80113ba:	e022      	b.n	8011402 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c6:	697a      	ldr	r2, [r7, #20]
 80113c8:	1ad2      	subs	r2, r2, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	69db      	ldr	r3, [r3, #28]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d217      	bcs.n	8011402 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	789b      	ldrb	r3, [r3, #2]
 80113d6:	613b      	str	r3, [r7, #16]
 80113d8:	e010      	b.n	80113fc <sync_window+0x78>
					wsect += fs->fsize;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	69db      	ldr	r3, [r3, #28]
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	4413      	add	r3, r2
 80113e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7858      	ldrb	r0, [r3, #1]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80113ee:	2301      	movs	r3, #1
 80113f0:	697a      	ldr	r2, [r7, #20]
 80113f2:	f7ff fceb 	bl	8010dcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	613b      	str	r3, [r7, #16]
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d8eb      	bhi.n	80113da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011402:	7bfb      	ldrb	r3, [r7, #15]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011416:	2300      	movs	r3, #0
 8011418:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	429a      	cmp	r2, r3
 8011422:	d01b      	beq.n	801145c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff ffad 	bl	8011384 <sync_window>
 801142a:	4603      	mov	r3, r0
 801142c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801142e:	7bfb      	ldrb	r3, [r7, #15]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d113      	bne.n	801145c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	7858      	ldrb	r0, [r3, #1]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801143e:	2301      	movs	r3, #1
 8011440:	683a      	ldr	r2, [r7, #0]
 8011442:	f7ff fca3 	bl	8010d8c <disk_read>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d004      	beq.n	8011456 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801144c:	f04f 33ff 	mov.w	r3, #4294967295
 8011450:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011452:	2301      	movs	r3, #1
 8011454:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801145c:	7bfb      	ldrb	r3, [r7, #15]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3710      	adds	r7, #16
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff ff87 	bl	8011384 <sync_window>
 8011476:	4603      	mov	r3, r0
 8011478:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801147a:	7bfb      	ldrb	r3, [r7, #15]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d158      	bne.n	8011532 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	2b03      	cmp	r3, #3
 8011486:	d148      	bne.n	801151a <sync_fs+0xb2>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	791b      	ldrb	r3, [r3, #4]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d144      	bne.n	801151a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	3334      	adds	r3, #52	; 0x34
 8011494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011498:	2100      	movs	r1, #0
 801149a:	4618      	mov	r0, r3
 801149c:	f7ff fd77 	bl	8010f8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	3334      	adds	r3, #52	; 0x34
 80114a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80114a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff fd06 	bl	8010ebe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3334      	adds	r3, #52	; 0x34
 80114b6:	4921      	ldr	r1, [pc, #132]	; (801153c <sync_fs+0xd4>)
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7ff fd1b 	bl	8010ef4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3334      	adds	r3, #52	; 0x34
 80114c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80114c6:	491e      	ldr	r1, [pc, #120]	; (8011540 <sync_fs+0xd8>)
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff fd13 	bl	8010ef4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	3334      	adds	r3, #52	; 0x34
 80114d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	4619      	mov	r1, r3
 80114dc:	4610      	mov	r0, r2
 80114de:	f7ff fd09 	bl	8010ef4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3334      	adds	r3, #52	; 0x34
 80114e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	4619      	mov	r1, r3
 80114f0:	4610      	mov	r0, r2
 80114f2:	f7ff fcff 	bl	8010ef4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a1b      	ldr	r3, [r3, #32]
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	7858      	ldrb	r0, [r3, #1]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801150e:	2301      	movs	r3, #1
 8011510:	f7ff fc5c 	bl	8010dcc <disk_write>
			fs->fsi_flag = 0;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	785b      	ldrb	r3, [r3, #1]
 801151e:	2200      	movs	r2, #0
 8011520:	2100      	movs	r1, #0
 8011522:	4618      	mov	r0, r3
 8011524:	f7ff fc72 	bl	8010e0c <disk_ioctl>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <sync_fs+0xca>
 801152e:	2301      	movs	r3, #1
 8011530:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011532:	7bfb      	ldrb	r3, [r7, #15]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	41615252 	.word	0x41615252
 8011540:	61417272 	.word	0x61417272

08011544 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	3b02      	subs	r3, #2
 8011552:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	699b      	ldr	r3, [r3, #24]
 8011558:	3b02      	subs	r3, #2
 801155a:	683a      	ldr	r2, [r7, #0]
 801155c:	429a      	cmp	r2, r3
 801155e:	d301      	bcc.n	8011564 <clust2sect+0x20>
 8011560:	2300      	movs	r3, #0
 8011562:	e008      	b.n	8011576 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	895b      	ldrh	r3, [r3, #10]
 8011568:	461a      	mov	r2, r3
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	fb03 f202 	mul.w	r2, r3, r2
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011574:	4413      	add	r3, r2
}
 8011576:	4618      	mov	r0, r3
 8011578:	370c      	adds	r7, #12
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr

08011582 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011582:	b580      	push	{r7, lr}
 8011584:	b086      	sub	sp, #24
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b01      	cmp	r3, #1
 8011596:	d904      	bls.n	80115a2 <get_fat+0x20>
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	699b      	ldr	r3, [r3, #24]
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d302      	bcc.n	80115a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80115a2:	2301      	movs	r3, #1
 80115a4:	617b      	str	r3, [r7, #20]
 80115a6:	e08f      	b.n	80116c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d062      	beq.n	801167c <get_fat+0xfa>
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	dc7c      	bgt.n	80116b4 <get_fat+0x132>
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d002      	beq.n	80115c4 <get_fat+0x42>
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d042      	beq.n	8011648 <get_fat+0xc6>
 80115c2:	e077      	b.n	80116b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	60fb      	str	r3, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	085b      	lsrs	r3, r3, #1
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	4413      	add	r3, r2
 80115d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	0a5b      	lsrs	r3, r3, #9
 80115da:	4413      	add	r3, r2
 80115dc:	4619      	mov	r1, r3
 80115de:	6938      	ldr	r0, [r7, #16]
 80115e0:	f7ff ff14 	bl	801140c <move_window>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d167      	bne.n	80116ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	1c5a      	adds	r2, r3, #1
 80115ee:	60fa      	str	r2, [r7, #12]
 80115f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115f4:	693a      	ldr	r2, [r7, #16]
 80115f6:	4413      	add	r3, r2
 80115f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	0a5b      	lsrs	r3, r3, #9
 8011606:	4413      	add	r3, r2
 8011608:	4619      	mov	r1, r3
 801160a:	6938      	ldr	r0, [r7, #16]
 801160c:	f7ff fefe 	bl	801140c <move_window>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d153      	bne.n	80116be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801161c:	693a      	ldr	r2, [r7, #16]
 801161e:	4413      	add	r3, r2
 8011620:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011624:	021b      	lsls	r3, r3, #8
 8011626:	461a      	mov	r2, r3
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	4313      	orrs	r3, r2
 801162c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <get_fat+0xbc>
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	091b      	lsrs	r3, r3, #4
 801163c:	e002      	b.n	8011644 <get_fat+0xc2>
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011644:	617b      	str	r3, [r7, #20]
			break;
 8011646:	e03f      	b.n	80116c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	0a1b      	lsrs	r3, r3, #8
 8011650:	4413      	add	r3, r2
 8011652:	4619      	mov	r1, r3
 8011654:	6938      	ldr	r0, [r7, #16]
 8011656:	f7ff fed9 	bl	801140c <move_window>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d130      	bne.n	80116c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	005b      	lsls	r3, r3, #1
 801166a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801166e:	4413      	add	r3, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f7ff fbe9 	bl	8010e48 <ld_word>
 8011676:	4603      	mov	r3, r0
 8011678:	617b      	str	r3, [r7, #20]
			break;
 801167a:	e025      	b.n	80116c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	09db      	lsrs	r3, r3, #7
 8011684:	4413      	add	r3, r2
 8011686:	4619      	mov	r1, r3
 8011688:	6938      	ldr	r0, [r7, #16]
 801168a:	f7ff febf 	bl	801140c <move_window>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d118      	bne.n	80116c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80116a2:	4413      	add	r3, r2
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7ff fbe7 	bl	8010e78 <ld_dword>
 80116aa:	4603      	mov	r3, r0
 80116ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80116b0:	617b      	str	r3, [r7, #20]
			break;
 80116b2:	e009      	b.n	80116c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80116b4:	2301      	movs	r3, #1
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	e006      	b.n	80116c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116ba:	bf00      	nop
 80116bc:	e004      	b.n	80116c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116be:	bf00      	nop
 80116c0:	e002      	b.n	80116c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80116c2:	bf00      	nop
 80116c4:	e000      	b.n	80116c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80116c6:	bf00      	nop
		}
	}

	return val;
 80116c8:	697b      	ldr	r3, [r7, #20]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80116d2:	b590      	push	{r4, r7, lr}
 80116d4:	b089      	sub	sp, #36	; 0x24
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	60f8      	str	r0, [r7, #12]
 80116da:	60b9      	str	r1, [r7, #8]
 80116dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80116de:	2302      	movs	r3, #2
 80116e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	f240 80d9 	bls.w	801189c <put_fat+0x1ca>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	699b      	ldr	r3, [r3, #24]
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	f080 80d3 	bcs.w	801189c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	2b03      	cmp	r3, #3
 80116fc:	f000 8096 	beq.w	801182c <put_fat+0x15a>
 8011700:	2b03      	cmp	r3, #3
 8011702:	f300 80cb 	bgt.w	801189c <put_fat+0x1ca>
 8011706:	2b01      	cmp	r3, #1
 8011708:	d002      	beq.n	8011710 <put_fat+0x3e>
 801170a:	2b02      	cmp	r3, #2
 801170c:	d06e      	beq.n	80117ec <put_fat+0x11a>
 801170e:	e0c5      	b.n	801189c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	61bb      	str	r3, [r7, #24]
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	085b      	lsrs	r3, r3, #1
 8011718:	69ba      	ldr	r2, [r7, #24]
 801171a:	4413      	add	r3, r2
 801171c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	0a5b      	lsrs	r3, r3, #9
 8011726:	4413      	add	r3, r2
 8011728:	4619      	mov	r1, r3
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f7ff fe6e 	bl	801140c <move_window>
 8011730:	4603      	mov	r3, r0
 8011732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011734:	7ffb      	ldrb	r3, [r7, #31]
 8011736:	2b00      	cmp	r3, #0
 8011738:	f040 80a9 	bne.w	801188e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	1c59      	adds	r1, r3, #1
 8011746:	61b9      	str	r1, [r7, #24]
 8011748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801174c:	4413      	add	r3, r2
 801174e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	f003 0301 	and.w	r3, r3, #1
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00d      	beq.n	8011776 <put_fat+0xa4>
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	b25b      	sxtb	r3, r3
 8011760:	f003 030f 	and.w	r3, r3, #15
 8011764:	b25a      	sxtb	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	b2db      	uxtb	r3, r3
 801176a:	011b      	lsls	r3, r3, #4
 801176c:	b25b      	sxtb	r3, r3
 801176e:	4313      	orrs	r3, r2
 8011770:	b25b      	sxtb	r3, r3
 8011772:	b2db      	uxtb	r3, r3
 8011774:	e001      	b.n	801177a <put_fat+0xa8>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	b2db      	uxtb	r3, r3
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	2201      	movs	r2, #1
 8011782:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	0a5b      	lsrs	r3, r3, #9
 801178c:	4413      	add	r3, r2
 801178e:	4619      	mov	r1, r3
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f7ff fe3b 	bl	801140c <move_window>
 8011796:	4603      	mov	r3, r0
 8011798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801179a:	7ffb      	ldrb	r3, [r7, #31]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d178      	bne.n	8011892 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117ac:	4413      	add	r3, r2
 80117ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	f003 0301 	and.w	r3, r3, #1
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d003      	beq.n	80117c2 <put_fat+0xf0>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	091b      	lsrs	r3, r3, #4
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	e00e      	b.n	80117e0 <put_fat+0x10e>
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	b25b      	sxtb	r3, r3
 80117c8:	f023 030f 	bic.w	r3, r3, #15
 80117cc:	b25a      	sxtb	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	0a1b      	lsrs	r3, r3, #8
 80117d2:	b25b      	sxtb	r3, r3
 80117d4:	f003 030f 	and.w	r3, r3, #15
 80117d8:	b25b      	sxtb	r3, r3
 80117da:	4313      	orrs	r3, r2
 80117dc:	b25b      	sxtb	r3, r3
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	697a      	ldr	r2, [r7, #20]
 80117e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2201      	movs	r2, #1
 80117e8:	70da      	strb	r2, [r3, #3]
			break;
 80117ea:	e057      	b.n	801189c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	0a1b      	lsrs	r3, r3, #8
 80117f4:	4413      	add	r3, r2
 80117f6:	4619      	mov	r1, r3
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f7ff fe07 	bl	801140c <move_window>
 80117fe:	4603      	mov	r3, r0
 8011800:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011802:	7ffb      	ldrb	r3, [r7, #31]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d146      	bne.n	8011896 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011816:	4413      	add	r3, r2
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	b292      	uxth	r2, r2
 801181c:	4611      	mov	r1, r2
 801181e:	4618      	mov	r0, r3
 8011820:	f7ff fb4d 	bl	8010ebe <st_word>
			fs->wflag = 1;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2201      	movs	r2, #1
 8011828:	70da      	strb	r2, [r3, #3]
			break;
 801182a:	e037      	b.n	801189c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	09db      	lsrs	r3, r3, #7
 8011834:	4413      	add	r3, r2
 8011836:	4619      	mov	r1, r3
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f7ff fde7 	bl	801140c <move_window>
 801183e:	4603      	mov	r3, r0
 8011840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011842:	7ffb      	ldrb	r3, [r7, #31]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d128      	bne.n	801189a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801185c:	4413      	add	r3, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f7ff fb0a 	bl	8010e78 <ld_dword>
 8011864:	4603      	mov	r3, r0
 8011866:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801186a:	4323      	orrs	r3, r4
 801186c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801187c:	4413      	add	r3, r2
 801187e:	6879      	ldr	r1, [r7, #4]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff fb37 	bl	8010ef4 <st_dword>
			fs->wflag = 1;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2201      	movs	r2, #1
 801188a:	70da      	strb	r2, [r3, #3]
			break;
 801188c:	e006      	b.n	801189c <put_fat+0x1ca>
			if (res != FR_OK) break;
 801188e:	bf00      	nop
 8011890:	e004      	b.n	801189c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011892:	bf00      	nop
 8011894:	e002      	b.n	801189c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011896:	bf00      	nop
 8011898:	e000      	b.n	801189c <put_fat+0x1ca>
			if (res != FR_OK) break;
 801189a:	bf00      	nop
		}
	}
	return res;
 801189c:	7ffb      	ldrb	r3, [r7, #31]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3724      	adds	r7, #36	; 0x24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd90      	pop	{r4, r7, pc}

080118a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80118a6:	b580      	push	{r7, lr}
 80118a8:	b088      	sub	sp, #32
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	60f8      	str	r0, [r7, #12]
 80118ae:	60b9      	str	r1, [r7, #8]
 80118b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80118b2:	2300      	movs	r3, #0
 80118b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d904      	bls.n	80118cc <remove_chain+0x26>
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	699b      	ldr	r3, [r3, #24]
 80118c6:	68ba      	ldr	r2, [r7, #8]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d301      	bcc.n	80118d0 <remove_chain+0x2a>
 80118cc:	2302      	movs	r3, #2
 80118ce:	e04b      	b.n	8011968 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d00c      	beq.n	80118f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80118d6:	f04f 32ff 	mov.w	r2, #4294967295
 80118da:	6879      	ldr	r1, [r7, #4]
 80118dc:	69b8      	ldr	r0, [r7, #24]
 80118de:	f7ff fef8 	bl	80116d2 <put_fat>
 80118e2:	4603      	mov	r3, r0
 80118e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80118e6:	7ffb      	ldrb	r3, [r7, #31]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d001      	beq.n	80118f0 <remove_chain+0x4a>
 80118ec:	7ffb      	ldrb	r3, [r7, #31]
 80118ee:	e03b      	b.n	8011968 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118f0:	68b9      	ldr	r1, [r7, #8]
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f7ff fe45 	bl	8011582 <get_fat>
 80118f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d031      	beq.n	8011964 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d101      	bne.n	801190a <remove_chain+0x64>
 8011906:	2302      	movs	r3, #2
 8011908:	e02e      	b.n	8011968 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011910:	d101      	bne.n	8011916 <remove_chain+0x70>
 8011912:	2301      	movs	r3, #1
 8011914:	e028      	b.n	8011968 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011916:	2200      	movs	r2, #0
 8011918:	68b9      	ldr	r1, [r7, #8]
 801191a:	69b8      	ldr	r0, [r7, #24]
 801191c:	f7ff fed9 	bl	80116d2 <put_fat>
 8011920:	4603      	mov	r3, r0
 8011922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011924:	7ffb      	ldrb	r3, [r7, #31]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <remove_chain+0x88>
 801192a:	7ffb      	ldrb	r3, [r7, #31]
 801192c:	e01c      	b.n	8011968 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	695a      	ldr	r2, [r3, #20]
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	699b      	ldr	r3, [r3, #24]
 8011936:	3b02      	subs	r3, #2
 8011938:	429a      	cmp	r2, r3
 801193a:	d20b      	bcs.n	8011954 <remove_chain+0xae>
			fs->free_clst++;
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	695b      	ldr	r3, [r3, #20]
 8011940:	1c5a      	adds	r2, r3, #1
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	791b      	ldrb	r3, [r3, #4]
 801194a:	f043 0301 	orr.w	r3, r3, #1
 801194e:	b2da      	uxtb	r2, r3
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	429a      	cmp	r2, r3
 8011960:	d3c6      	bcc.n	80118f0 <remove_chain+0x4a>
 8011962:	e000      	b.n	8011966 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011964:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011966:	2300      	movs	r3, #0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3720      	adds	r7, #32
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b088      	sub	sp, #32
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10d      	bne.n	80119a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d004      	beq.n	801199c <create_chain+0x2c>
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	699b      	ldr	r3, [r3, #24]
 8011996:	69ba      	ldr	r2, [r7, #24]
 8011998:	429a      	cmp	r2, r3
 801199a:	d31b      	bcc.n	80119d4 <create_chain+0x64>
 801199c:	2301      	movs	r3, #1
 801199e:	61bb      	str	r3, [r7, #24]
 80119a0:	e018      	b.n	80119d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f7ff fdec 	bl	8011582 <get_fat>
 80119aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d801      	bhi.n	80119b6 <create_chain+0x46>
 80119b2:	2301      	movs	r3, #1
 80119b4:	e070      	b.n	8011a98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119bc:	d101      	bne.n	80119c2 <create_chain+0x52>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	e06a      	b.n	8011a98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	699b      	ldr	r3, [r3, #24]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d201      	bcs.n	80119d0 <create_chain+0x60>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e063      	b.n	8011a98 <create_chain+0x128>
		scl = clst;
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	3301      	adds	r3, #1
 80119dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	69fa      	ldr	r2, [r7, #28]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d307      	bcc.n	80119f8 <create_chain+0x88>
				ncl = 2;
 80119e8:	2302      	movs	r3, #2
 80119ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80119ec:	69fa      	ldr	r2, [r7, #28]
 80119ee:	69bb      	ldr	r3, [r7, #24]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d901      	bls.n	80119f8 <create_chain+0x88>
 80119f4:	2300      	movs	r3, #0
 80119f6:	e04f      	b.n	8011a98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119f8:	69f9      	ldr	r1, [r7, #28]
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff fdc1 	bl	8011582 <get_fat>
 8011a00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00e      	beq.n	8011a26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d003      	beq.n	8011a16 <create_chain+0xa6>
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a14:	d101      	bne.n	8011a1a <create_chain+0xaa>
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	e03e      	b.n	8011a98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011a1a:	69fa      	ldr	r2, [r7, #28]
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d1da      	bne.n	80119d8 <create_chain+0x68>
 8011a22:	2300      	movs	r3, #0
 8011a24:	e038      	b.n	8011a98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011a26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011a28:	f04f 32ff 	mov.w	r2, #4294967295
 8011a2c:	69f9      	ldr	r1, [r7, #28]
 8011a2e:	6938      	ldr	r0, [r7, #16]
 8011a30:	f7ff fe4f 	bl	80116d2 <put_fat>
 8011a34:	4603      	mov	r3, r0
 8011a36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011a38:	7dfb      	ldrb	r3, [r7, #23]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d109      	bne.n	8011a52 <create_chain+0xe2>
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d006      	beq.n	8011a52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011a44:	69fa      	ldr	r2, [r7, #28]
 8011a46:	6839      	ldr	r1, [r7, #0]
 8011a48:	6938      	ldr	r0, [r7, #16]
 8011a4a:	f7ff fe42 	bl	80116d2 <put_fat>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d116      	bne.n	8011a86 <create_chain+0x116>
		fs->last_clst = ncl;
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	69fa      	ldr	r2, [r7, #28]
 8011a5c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	695a      	ldr	r2, [r3, #20]
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	699b      	ldr	r3, [r3, #24]
 8011a66:	3b02      	subs	r3, #2
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d804      	bhi.n	8011a76 <create_chain+0x106>
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	695b      	ldr	r3, [r3, #20]
 8011a70:	1e5a      	subs	r2, r3, #1
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	791b      	ldrb	r3, [r3, #4]
 8011a7a:	f043 0301 	orr.w	r3, r3, #1
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	711a      	strb	r2, [r3, #4]
 8011a84:	e007      	b.n	8011a96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a86:	7dfb      	ldrb	r3, [r7, #23]
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d102      	bne.n	8011a92 <create_chain+0x122>
 8011a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a90:	e000      	b.n	8011a94 <create_chain+0x124>
 8011a92:	2301      	movs	r3, #1
 8011a94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a96:	69fb      	ldr	r3, [r7, #28]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3720      	adds	r7, #32
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	0a5b      	lsrs	r3, r3, #9
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	8952      	ldrh	r2, [r2, #10]
 8011ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ac4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	1d1a      	adds	r2, r3, #4
 8011aca:	613a      	str	r2, [r7, #16]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d101      	bne.n	8011ada <clmt_clust+0x3a>
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e010      	b.n	8011afc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d307      	bcc.n	8011af2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ae2:	697a      	ldr	r2, [r7, #20]
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	617b      	str	r3, [r7, #20]
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	3304      	adds	r3, #4
 8011aee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011af0:	e7e9      	b.n	8011ac6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011af2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	4413      	add	r3, r2
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	371c      	adds	r7, #28
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b086      	sub	sp, #24
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b1e:	d204      	bcs.n	8011b2a <dir_sdi+0x22>
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	f003 031f 	and.w	r3, r3, #31
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <dir_sdi+0x26>
		return FR_INT_ERR;
 8011b2a:	2302      	movs	r3, #2
 8011b2c:	e063      	b.n	8011bf6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	683a      	ldr	r2, [r7, #0]
 8011b32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	689b      	ldr	r3, [r3, #8]
 8011b38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d106      	bne.n	8011b4e <dir_sdi+0x46>
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d902      	bls.n	8011b4e <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10c      	bne.n	8011b6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	095b      	lsrs	r3, r3, #5
 8011b58:	693a      	ldr	r2, [r7, #16]
 8011b5a:	8912      	ldrh	r2, [r2, #8]
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d301      	bcc.n	8011b64 <dir_sdi+0x5c>
 8011b60:	2302      	movs	r3, #2
 8011b62:	e048      	b.n	8011bf6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	61da      	str	r2, [r3, #28]
 8011b6c:	e029      	b.n	8011bc2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	895b      	ldrh	r3, [r3, #10]
 8011b72:	025b      	lsls	r3, r3, #9
 8011b74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b76:	e019      	b.n	8011bac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6979      	ldr	r1, [r7, #20]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7ff fd00 	bl	8011582 <get_fat>
 8011b82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8a:	d101      	bne.n	8011b90 <dir_sdi+0x88>
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e032      	b.n	8011bf6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d904      	bls.n	8011ba0 <dir_sdi+0x98>
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d301      	bcc.n	8011ba4 <dir_sdi+0x9c>
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	e028      	b.n	8011bf6 <dir_sdi+0xee>
			ofs -= csz;
 8011ba4:	683a      	ldr	r2, [r7, #0]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d2e1      	bcs.n	8011b78 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011bb4:	6979      	ldr	r1, [r7, #20]
 8011bb6:	6938      	ldr	r0, [r7, #16]
 8011bb8:	f7ff fcc4 	bl	8011544 <clust2sect>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	697a      	ldr	r2, [r7, #20]
 8011bc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	69db      	ldr	r3, [r3, #28]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <dir_sdi+0xcc>
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	e010      	b.n	8011bf6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	69da      	ldr	r2, [r3, #28]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	0a5b      	lsrs	r3, r3, #9
 8011bdc:	441a      	add	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bee:	441a      	add	r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3718      	adds	r7, #24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b086      	sub	sp, #24
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	695b      	ldr	r3, [r3, #20]
 8011c12:	3320      	adds	r3, #32
 8011c14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	69db      	ldr	r3, [r3, #28]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <dir_next+0x28>
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c24:	d301      	bcc.n	8011c2a <dir_next+0x2c>
 8011c26:	2304      	movs	r3, #4
 8011c28:	e0aa      	b.n	8011d80 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f040 8098 	bne.w	8011d66 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	69db      	ldr	r3, [r3, #28]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	699b      	ldr	r3, [r3, #24]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d10b      	bne.n	8011c60 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	095b      	lsrs	r3, r3, #5
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	8912      	ldrh	r2, [r2, #8]
 8011c50:	4293      	cmp	r3, r2
 8011c52:	f0c0 8088 	bcc.w	8011d66 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	61da      	str	r2, [r3, #28]
 8011c5c:	2304      	movs	r3, #4
 8011c5e:	e08f      	b.n	8011d80 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	0a5b      	lsrs	r3, r3, #9
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	8952      	ldrh	r2, [r2, #10]
 8011c68:	3a01      	subs	r2, #1
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d17a      	bne.n	8011d66 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	4619      	mov	r1, r3
 8011c78:	4610      	mov	r0, r2
 8011c7a:	f7ff fc82 	bl	8011582 <get_fat>
 8011c7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d801      	bhi.n	8011c8a <dir_next+0x8c>
 8011c86:	2302      	movs	r3, #2
 8011c88:	e07a      	b.n	8011d80 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c90:	d101      	bne.n	8011c96 <dir_next+0x98>
 8011c92:	2301      	movs	r3, #1
 8011c94:	e074      	b.n	8011d80 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	697a      	ldr	r2, [r7, #20]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d358      	bcc.n	8011d52 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d104      	bne.n	8011cb0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	61da      	str	r2, [r3, #28]
 8011cac:	2304      	movs	r3, #4
 8011cae:	e067      	b.n	8011d80 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	699b      	ldr	r3, [r3, #24]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4610      	mov	r0, r2
 8011cba:	f7ff fe59 	bl	8011970 <create_chain>
 8011cbe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d101      	bne.n	8011cca <dir_next+0xcc>
 8011cc6:	2307      	movs	r3, #7
 8011cc8:	e05a      	b.n	8011d80 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d101      	bne.n	8011cd4 <dir_next+0xd6>
 8011cd0:	2302      	movs	r3, #2
 8011cd2:	e055      	b.n	8011d80 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cda:	d101      	bne.n	8011ce0 <dir_next+0xe2>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	e04f      	b.n	8011d80 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f7ff fb4f 	bl	8011384 <sync_window>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <dir_next+0xf2>
 8011cec:	2301      	movs	r3, #1
 8011cee:	e047      	b.n	8011d80 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	3334      	adds	r3, #52	; 0x34
 8011cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7ff f947 	bl	8010f8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d00:	2300      	movs	r3, #0
 8011d02:	613b      	str	r3, [r7, #16]
 8011d04:	6979      	ldr	r1, [r7, #20]
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f7ff fc1c 	bl	8011544 <clust2sect>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	631a      	str	r2, [r3, #48]	; 0x30
 8011d12:	e012      	b.n	8011d3a <dir_next+0x13c>
						fs->wflag = 1;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2201      	movs	r2, #1
 8011d18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f7ff fb32 	bl	8011384 <sync_window>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d001      	beq.n	8011d2a <dir_next+0x12c>
 8011d26:	2301      	movs	r3, #1
 8011d28:	e02a      	b.n	8011d80 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	613b      	str	r3, [r7, #16]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d34:	1c5a      	adds	r2, r3, #1
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	631a      	str	r2, [r3, #48]	; 0x30
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	895b      	ldrh	r3, [r3, #10]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d3e6      	bcc.n	8011d14 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	1ad2      	subs	r2, r2, r3
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	697a      	ldr	r2, [r7, #20]
 8011d56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d58:	6979      	ldr	r1, [r7, #20]
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f7ff fbf2 	bl	8011544 <clust2sect>
 8011d60:	4602      	mov	r2, r0
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d78:	441a      	add	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3718      	adds	r7, #24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d98:	2100      	movs	r1, #0
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff feb4 	bl	8011b08 <dir_sdi>
 8011da0:	4603      	mov	r3, r0
 8011da2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011da4:	7dfb      	ldrb	r3, [r7, #23]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d12b      	bne.n	8011e02 <dir_alloc+0x7a>
		n = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	69db      	ldr	r3, [r3, #28]
 8011db2:	4619      	mov	r1, r3
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7ff fb29 	bl	801140c <move_window>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011dbe:	7dfb      	ldrb	r3, [r7, #23]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d11d      	bne.n	8011e00 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a1b      	ldr	r3, [r3, #32]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2be5      	cmp	r3, #229	; 0xe5
 8011dcc:	d004      	beq.n	8011dd8 <dir_alloc+0x50>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6a1b      	ldr	r3, [r3, #32]
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d107      	bne.n	8011de8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	613b      	str	r3, [r7, #16]
 8011dde:	693a      	ldr	r2, [r7, #16]
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d102      	bne.n	8011dec <dir_alloc+0x64>
 8011de6:	e00c      	b.n	8011e02 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011de8:	2300      	movs	r3, #0
 8011dea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011dec:	2101      	movs	r1, #1
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7ff ff05 	bl	8011bfe <dir_next>
 8011df4:	4603      	mov	r3, r0
 8011df6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011df8:	7dfb      	ldrb	r3, [r7, #23]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d0d7      	beq.n	8011dae <dir_alloc+0x26>
 8011dfe:	e000      	b.n	8011e02 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011e00:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	2b04      	cmp	r3, #4
 8011e06:	d101      	bne.n	8011e0c <dir_alloc+0x84>
 8011e08:	2307      	movs	r3, #7
 8011e0a:	75fb      	strb	r3, [r7, #23]
	return res;
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3718      	adds	r7, #24
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b084      	sub	sp, #16
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
 8011e1e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	331a      	adds	r3, #26
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff f80f 	bl	8010e48 <ld_word>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	2b03      	cmp	r3, #3
 8011e34:	d109      	bne.n	8011e4a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	3314      	adds	r3, #20
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff f804 	bl	8010e48 <ld_word>
 8011e40:	4603      	mov	r3, r0
 8011e42:	041b      	lsls	r3, r3, #16
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	4313      	orrs	r3, r2
 8011e48:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	331a      	adds	r3, #26
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	b292      	uxth	r2, r2
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff f827 	bl	8010ebe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d109      	bne.n	8011e8c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	f103 0214 	add.w	r2, r3, #20
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	0c1b      	lsrs	r3, r3, #16
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	4619      	mov	r1, r3
 8011e86:	4610      	mov	r0, r2
 8011e88:	f7ff f819 	bl	8010ebe <st_word>
	}
}
 8011e8c:	bf00      	nop
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b086      	sub	sp, #24
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e9e:	2304      	movs	r3, #4
 8011ea0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011ea8:	e03c      	b.n	8011f24 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	69db      	ldr	r3, [r3, #28]
 8011eae:	4619      	mov	r1, r3
 8011eb0:	6938      	ldr	r0, [r7, #16]
 8011eb2:	f7ff faab 	bl	801140c <move_window>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011eba:	7dfb      	ldrb	r3, [r7, #23]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d136      	bne.n	8011f2e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6a1b      	ldr	r3, [r3, #32]
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d102      	bne.n	8011ed4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011ece:	2304      	movs	r3, #4
 8011ed0:	75fb      	strb	r3, [r7, #23]
 8011ed2:	e031      	b.n	8011f38 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6a1b      	ldr	r3, [r3, #32]
 8011ed8:	330b      	adds	r3, #11
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ee0:	73bb      	strb	r3, [r7, #14]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	7bba      	ldrb	r2, [r7, #14]
 8011ee6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011ee8:	7bfb      	ldrb	r3, [r7, #15]
 8011eea:	2be5      	cmp	r3, #229	; 0xe5
 8011eec:	d011      	beq.n	8011f12 <dir_read+0x7e>
 8011eee:	7bfb      	ldrb	r3, [r7, #15]
 8011ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ef2:	d00e      	beq.n	8011f12 <dir_read+0x7e>
 8011ef4:	7bbb      	ldrb	r3, [r7, #14]
 8011ef6:	2b0f      	cmp	r3, #15
 8011ef8:	d00b      	beq.n	8011f12 <dir_read+0x7e>
 8011efa:	7bbb      	ldrb	r3, [r7, #14]
 8011efc:	f023 0320 	bic.w	r3, r3, #32
 8011f00:	2b08      	cmp	r3, #8
 8011f02:	bf0c      	ite	eq
 8011f04:	2301      	moveq	r3, #1
 8011f06:	2300      	movne	r3, #0
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d00f      	beq.n	8011f32 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011f12:	2100      	movs	r1, #0
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7ff fe72 	bl	8011bfe <dir_next>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f1e:	7dfb      	ldrb	r3, [r7, #23]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d108      	bne.n	8011f36 <dir_read+0xa2>
	while (dp->sect) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1be      	bne.n	8011eaa <dir_read+0x16>
 8011f2c:	e004      	b.n	8011f38 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f2e:	bf00      	nop
 8011f30:	e002      	b.n	8011f38 <dir_read+0xa4>
				break;
 8011f32:	bf00      	nop
 8011f34:	e000      	b.n	8011f38 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f36:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011f38:	7dfb      	ldrb	r3, [r7, #23]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d002      	beq.n	8011f44 <dir_read+0xb0>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2200      	movs	r2, #0
 8011f42:	61da      	str	r2, [r3, #28]
	return res;
 8011f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3718      	adds	r7, #24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}

08011f4e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f4e:	b580      	push	{r7, lr}
 8011f50:	b086      	sub	sp, #24
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7ff fdd2 	bl	8011b08 <dir_sdi>
 8011f64:	4603      	mov	r3, r0
 8011f66:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011f68:	7dfb      	ldrb	r3, [r7, #23]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <dir_find+0x24>
 8011f6e:	7dfb      	ldrb	r3, [r7, #23]
 8011f70:	e03e      	b.n	8011ff0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	69db      	ldr	r3, [r3, #28]
 8011f76:	4619      	mov	r1, r3
 8011f78:	6938      	ldr	r0, [r7, #16]
 8011f7a:	f7ff fa47 	bl	801140c <move_window>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d12f      	bne.n	8011fe8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6a1b      	ldr	r3, [r3, #32]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d102      	bne.n	8011f9c <dir_find+0x4e>
 8011f96:	2304      	movs	r3, #4
 8011f98:	75fb      	strb	r3, [r7, #23]
 8011f9a:	e028      	b.n	8011fee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6a1b      	ldr	r3, [r3, #32]
 8011fa0:	330b      	adds	r3, #11
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fa8:	b2da      	uxtb	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6a1b      	ldr	r3, [r3, #32]
 8011fb2:	330b      	adds	r3, #11
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	f003 0308 	and.w	r3, r3, #8
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d10a      	bne.n	8011fd4 <dir_find+0x86>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6a18      	ldr	r0, [r3, #32]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3324      	adds	r3, #36	; 0x24
 8011fc6:	220b      	movs	r2, #11
 8011fc8:	4619      	mov	r1, r3
 8011fca:	f7fe fffb 	bl	8010fc4 <mem_cmp>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00b      	beq.n	8011fec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7ff fe11 	bl	8011bfe <dir_next>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d0c5      	beq.n	8011f72 <dir_find+0x24>
 8011fe6:	e002      	b.n	8011fee <dir_find+0xa0>
		if (res != FR_OK) break;
 8011fe8:	bf00      	nop
 8011fea:	e000      	b.n	8011fee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fec:	bf00      	nop

	return res;
 8011fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3718      	adds	r7, #24
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012006:	2101      	movs	r1, #1
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7ff febd 	bl	8011d88 <dir_alloc>
 801200e:	4603      	mov	r3, r0
 8012010:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012012:	7bfb      	ldrb	r3, [r7, #15]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d11c      	bne.n	8012052 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	69db      	ldr	r3, [r3, #28]
 801201c:	4619      	mov	r1, r3
 801201e:	68b8      	ldr	r0, [r7, #8]
 8012020:	f7ff f9f4 	bl	801140c <move_window>
 8012024:	4603      	mov	r3, r0
 8012026:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012028:	7bfb      	ldrb	r3, [r7, #15]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d111      	bne.n	8012052 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a1b      	ldr	r3, [r3, #32]
 8012032:	2220      	movs	r2, #32
 8012034:	2100      	movs	r1, #0
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe ffa9 	bl	8010f8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6a18      	ldr	r0, [r3, #32]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	3324      	adds	r3, #36	; 0x24
 8012044:	220b      	movs	r2, #11
 8012046:	4619      	mov	r1, r3
 8012048:	f7fe ff80 	bl	8010f4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	2201      	movs	r2, #1
 8012050:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012052:	7bfb      	ldrb	r3, [r7, #15]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	69db      	ldr	r3, [r3, #28]
 801206e:	4619      	mov	r1, r3
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f7ff f9cb 	bl	801140c <move_window>
 8012076:	4603      	mov	r3, r0
 8012078:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801207a:	7afb      	ldrb	r3, [r7, #11]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a1b      	ldr	r3, [r3, #32]
 8012084:	22e5      	movs	r2, #229	; 0xe5
 8012086:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2201      	movs	r2, #1
 801208c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801208e:	7afb      	ldrb	r3, [r7, #11]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b086      	sub	sp, #24
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	2200      	movs	r2, #0
 80120a6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	69db      	ldr	r3, [r3, #28]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d04e      	beq.n	801214e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	613b      	str	r3, [r7, #16]
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80120b8:	e021      	b.n	80120fe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6a1a      	ldr	r2, [r3, #32]
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	1c59      	adds	r1, r3, #1
 80120c2:	6179      	str	r1, [r7, #20]
 80120c4:	4413      	add	r3, r2
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	2b20      	cmp	r3, #32
 80120ce:	d100      	bne.n	80120d2 <get_fileinfo+0x3a>
 80120d0:	e015      	b.n	80120fe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80120d2:	7bfb      	ldrb	r3, [r7, #15]
 80120d4:	2b05      	cmp	r3, #5
 80120d6:	d101      	bne.n	80120dc <get_fileinfo+0x44>
 80120d8:	23e5      	movs	r3, #229	; 0xe5
 80120da:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b09      	cmp	r3, #9
 80120e0:	d106      	bne.n	80120f0 <get_fileinfo+0x58>
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	1c5a      	adds	r2, r3, #1
 80120e6:	613a      	str	r2, [r7, #16]
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	4413      	add	r3, r2
 80120ec:	222e      	movs	r2, #46	; 0x2e
 80120ee:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	613a      	str	r2, [r7, #16]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	4413      	add	r3, r2
 80120fa:	7bfa      	ldrb	r2, [r7, #15]
 80120fc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	2b0a      	cmp	r3, #10
 8012102:	d9da      	bls.n	80120ba <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012104:	683a      	ldr	r2, [r7, #0]
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	4413      	add	r3, r2
 801210a:	3309      	adds	r3, #9
 801210c:	2200      	movs	r2, #0
 801210e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6a1b      	ldr	r3, [r3, #32]
 8012114:	7ada      	ldrb	r2, [r3, #11]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6a1b      	ldr	r3, [r3, #32]
 801211e:	331c      	adds	r3, #28
 8012120:	4618      	mov	r0, r3
 8012122:	f7fe fea9 	bl	8010e78 <ld_dword>
 8012126:	4602      	mov	r2, r0
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a1b      	ldr	r3, [r3, #32]
 8012130:	3316      	adds	r3, #22
 8012132:	4618      	mov	r0, r3
 8012134:	f7fe fea0 	bl	8010e78 <ld_dword>
 8012138:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	b29a      	uxth	r2, r3
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	80da      	strh	r2, [r3, #6]
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	0c1b      	lsrs	r3, r3, #16
 8012146:	b29a      	uxth	r2, r3
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	809a      	strh	r2, [r3, #4]
 801214c:	e000      	b.n	8012150 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801214e:	bf00      	nop
}
 8012150:	3718      	adds	r7, #24
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
	...

08012158 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b088      	sub	sp, #32
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	60fb      	str	r3, [r7, #12]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	3324      	adds	r3, #36	; 0x24
 801216c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801216e:	220b      	movs	r2, #11
 8012170:	2120      	movs	r1, #32
 8012172:	68b8      	ldr	r0, [r7, #8]
 8012174:	f7fe ff0b 	bl	8010f8e <mem_set>
	si = i = 0; ni = 8;
 8012178:	2300      	movs	r3, #0
 801217a:	613b      	str	r3, [r7, #16]
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	61fb      	str	r3, [r7, #28]
 8012180:	2308      	movs	r3, #8
 8012182:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	1c5a      	adds	r2, r3, #1
 8012188:	61fa      	str	r2, [r7, #28]
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	4413      	add	r3, r2
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012192:	7efb      	ldrb	r3, [r7, #27]
 8012194:	2b20      	cmp	r3, #32
 8012196:	d94e      	bls.n	8012236 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012198:	7efb      	ldrb	r3, [r7, #27]
 801219a:	2b2f      	cmp	r3, #47	; 0x2f
 801219c:	d006      	beq.n	80121ac <create_name+0x54>
 801219e:	7efb      	ldrb	r3, [r7, #27]
 80121a0:	2b5c      	cmp	r3, #92	; 0x5c
 80121a2:	d110      	bne.n	80121c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80121a4:	e002      	b.n	80121ac <create_name+0x54>
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	3301      	adds	r3, #1
 80121aa:	61fb      	str	r3, [r7, #28]
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	69fb      	ldr	r3, [r7, #28]
 80121b0:	4413      	add	r3, r2
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	2b2f      	cmp	r3, #47	; 0x2f
 80121b6:	d0f6      	beq.n	80121a6 <create_name+0x4e>
 80121b8:	68fa      	ldr	r2, [r7, #12]
 80121ba:	69fb      	ldr	r3, [r7, #28]
 80121bc:	4413      	add	r3, r2
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	2b5c      	cmp	r3, #92	; 0x5c
 80121c2:	d0f0      	beq.n	80121a6 <create_name+0x4e>
			break;
 80121c4:	e038      	b.n	8012238 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80121c6:	7efb      	ldrb	r3, [r7, #27]
 80121c8:	2b2e      	cmp	r3, #46	; 0x2e
 80121ca:	d003      	beq.n	80121d4 <create_name+0x7c>
 80121cc:	693a      	ldr	r2, [r7, #16]
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d30c      	bcc.n	80121ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2b0b      	cmp	r3, #11
 80121d8:	d002      	beq.n	80121e0 <create_name+0x88>
 80121da:	7efb      	ldrb	r3, [r7, #27]
 80121dc:	2b2e      	cmp	r3, #46	; 0x2e
 80121de:	d001      	beq.n	80121e4 <create_name+0x8c>
 80121e0:	2306      	movs	r3, #6
 80121e2:	e044      	b.n	801226e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80121e4:	2308      	movs	r3, #8
 80121e6:	613b      	str	r3, [r7, #16]
 80121e8:	230b      	movs	r3, #11
 80121ea:	617b      	str	r3, [r7, #20]
			continue;
 80121ec:	e022      	b.n	8012234 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80121ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	da04      	bge.n	8012200 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80121f6:	7efb      	ldrb	r3, [r7, #27]
 80121f8:	3b80      	subs	r3, #128	; 0x80
 80121fa:	4a1f      	ldr	r2, [pc, #124]	; (8012278 <create_name+0x120>)
 80121fc:	5cd3      	ldrb	r3, [r2, r3]
 80121fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012200:	7efb      	ldrb	r3, [r7, #27]
 8012202:	4619      	mov	r1, r3
 8012204:	481d      	ldr	r0, [pc, #116]	; (801227c <create_name+0x124>)
 8012206:	f7fe ff04 	bl	8011012 <chk_chr>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d001      	beq.n	8012214 <create_name+0xbc>
 8012210:	2306      	movs	r3, #6
 8012212:	e02c      	b.n	801226e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012214:	7efb      	ldrb	r3, [r7, #27]
 8012216:	2b60      	cmp	r3, #96	; 0x60
 8012218:	d905      	bls.n	8012226 <create_name+0xce>
 801221a:	7efb      	ldrb	r3, [r7, #27]
 801221c:	2b7a      	cmp	r3, #122	; 0x7a
 801221e:	d802      	bhi.n	8012226 <create_name+0xce>
 8012220:	7efb      	ldrb	r3, [r7, #27]
 8012222:	3b20      	subs	r3, #32
 8012224:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	1c5a      	adds	r2, r3, #1
 801222a:	613a      	str	r2, [r7, #16]
 801222c:	68ba      	ldr	r2, [r7, #8]
 801222e:	4413      	add	r3, r2
 8012230:	7efa      	ldrb	r2, [r7, #27]
 8012232:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012234:	e7a6      	b.n	8012184 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012236:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012238:	68fa      	ldr	r2, [r7, #12]
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	441a      	add	r2, r3
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d101      	bne.n	801224c <create_name+0xf4>
 8012248:	2306      	movs	r3, #6
 801224a:	e010      	b.n	801226e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2be5      	cmp	r3, #229	; 0xe5
 8012252:	d102      	bne.n	801225a <create_name+0x102>
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	2205      	movs	r2, #5
 8012258:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801225a:	7efb      	ldrb	r3, [r7, #27]
 801225c:	2b20      	cmp	r3, #32
 801225e:	d801      	bhi.n	8012264 <create_name+0x10c>
 8012260:	2204      	movs	r2, #4
 8012262:	e000      	b.n	8012266 <create_name+0x10e>
 8012264:	2200      	movs	r2, #0
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	330b      	adds	r3, #11
 801226a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801226c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801226e:	4618      	mov	r0, r3
 8012270:	3720      	adds	r7, #32
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	0801ded4 	.word	0x0801ded4
 801227c:	0801d698 	.word	0x0801d698

08012280 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012294:	e002      	b.n	801229c <follow_path+0x1c>
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	3301      	adds	r3, #1
 801229a:	603b      	str	r3, [r7, #0]
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	2b2f      	cmp	r3, #47	; 0x2f
 80122a2:	d0f8      	beq.n	8012296 <follow_path+0x16>
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b5c      	cmp	r3, #92	; 0x5c
 80122aa:	d0f4      	beq.n	8012296 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	2200      	movs	r2, #0
 80122b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b1f      	cmp	r3, #31
 80122b8:	d80a      	bhi.n	80122d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2280      	movs	r2, #128	; 0x80
 80122be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80122c2:	2100      	movs	r1, #0
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f7ff fc1f 	bl	8011b08 <dir_sdi>
 80122ca:	4603      	mov	r3, r0
 80122cc:	75fb      	strb	r3, [r7, #23]
 80122ce:	e043      	b.n	8012358 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80122d0:	463b      	mov	r3, r7
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff ff3f 	bl	8012158 <create_name>
 80122da:	4603      	mov	r3, r0
 80122dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80122de:	7dfb      	ldrb	r3, [r7, #23]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d134      	bne.n	801234e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff fe32 	bl	8011f4e <dir_find>
 80122ea:	4603      	mov	r3, r0
 80122ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80122f6:	7dfb      	ldrb	r3, [r7, #23]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d00a      	beq.n	8012312 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122fc:	7dfb      	ldrb	r3, [r7, #23]
 80122fe:	2b04      	cmp	r3, #4
 8012300:	d127      	bne.n	8012352 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012302:	7afb      	ldrb	r3, [r7, #11]
 8012304:	f003 0304 	and.w	r3, r3, #4
 8012308:	2b00      	cmp	r3, #0
 801230a:	d122      	bne.n	8012352 <follow_path+0xd2>
 801230c:	2305      	movs	r3, #5
 801230e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012310:	e01f      	b.n	8012352 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012312:	7afb      	ldrb	r3, [r7, #11]
 8012314:	f003 0304 	and.w	r3, r3, #4
 8012318:	2b00      	cmp	r3, #0
 801231a:	d11c      	bne.n	8012356 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	799b      	ldrb	r3, [r3, #6]
 8012320:	f003 0310 	and.w	r3, r3, #16
 8012324:	2b00      	cmp	r3, #0
 8012326:	d102      	bne.n	801232e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012328:	2305      	movs	r3, #5
 801232a:	75fb      	strb	r3, [r7, #23]
 801232c:	e014      	b.n	8012358 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801233c:	4413      	add	r3, r2
 801233e:	4619      	mov	r1, r3
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7ff fd68 	bl	8011e16 <ld_clust>
 8012346:	4602      	mov	r2, r0
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801234c:	e7c0      	b.n	80122d0 <follow_path+0x50>
			if (res != FR_OK) break;
 801234e:	bf00      	nop
 8012350:	e002      	b.n	8012358 <follow_path+0xd8>
				break;
 8012352:	bf00      	nop
 8012354:	e000      	b.n	8012358 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012356:	bf00      	nop
			}
		}
	}

	return res;
 8012358:	7dfb      	ldrb	r3, [r7, #23]
}
 801235a:	4618      	mov	r0, r3
 801235c:	3718      	adds	r7, #24
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012362:	b480      	push	{r7}
 8012364:	b087      	sub	sp, #28
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801236a:	f04f 33ff 	mov.w	r3, #4294967295
 801236e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d031      	beq.n	80123dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	617b      	str	r3, [r7, #20]
 801237e:	e002      	b.n	8012386 <get_ldnumber+0x24>
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	3301      	adds	r3, #1
 8012384:	617b      	str	r3, [r7, #20]
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	2b20      	cmp	r3, #32
 801238c:	d903      	bls.n	8012396 <get_ldnumber+0x34>
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	2b3a      	cmp	r3, #58	; 0x3a
 8012394:	d1f4      	bne.n	8012380 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	2b3a      	cmp	r3, #58	; 0x3a
 801239c:	d11c      	bne.n	80123d8 <get_ldnumber+0x76>
			tp = *path;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	1c5a      	adds	r2, r3, #1
 80123a8:	60fa      	str	r2, [r7, #12]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	3b30      	subs	r3, #48	; 0x30
 80123ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2b09      	cmp	r3, #9
 80123b4:	d80e      	bhi.n	80123d4 <get_ldnumber+0x72>
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d10a      	bne.n	80123d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d107      	bne.n	80123d4 <get_ldnumber+0x72>
					vol = (int)i;
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	3301      	adds	r3, #1
 80123cc:	617b      	str	r3, [r7, #20]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	697a      	ldr	r2, [r7, #20]
 80123d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	e002      	b.n	80123de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80123d8:	2300      	movs	r3, #0
 80123da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80123dc:	693b      	ldr	r3, [r7, #16]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	371c      	adds	r7, #28
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr
	...

080123ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	70da      	strb	r2, [r3, #3]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012402:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012404:	6839      	ldr	r1, [r7, #0]
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff f800 	bl	801140c <move_window>
 801240c:	4603      	mov	r3, r0
 801240e:	2b00      	cmp	r3, #0
 8012410:	d001      	beq.n	8012416 <check_fs+0x2a>
 8012412:	2304      	movs	r3, #4
 8012414:	e038      	b.n	8012488 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3334      	adds	r3, #52	; 0x34
 801241a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801241e:	4618      	mov	r0, r3
 8012420:	f7fe fd12 	bl	8010e48 <ld_word>
 8012424:	4603      	mov	r3, r0
 8012426:	461a      	mov	r2, r3
 8012428:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801242c:	429a      	cmp	r2, r3
 801242e:	d001      	beq.n	8012434 <check_fs+0x48>
 8012430:	2303      	movs	r3, #3
 8012432:	e029      	b.n	8012488 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801243a:	2be9      	cmp	r3, #233	; 0xe9
 801243c:	d009      	beq.n	8012452 <check_fs+0x66>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012444:	2beb      	cmp	r3, #235	; 0xeb
 8012446:	d11e      	bne.n	8012486 <check_fs+0x9a>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801244e:	2b90      	cmp	r3, #144	; 0x90
 8012450:	d119      	bne.n	8012486 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	3334      	adds	r3, #52	; 0x34
 8012456:	3336      	adds	r3, #54	; 0x36
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fd0d 	bl	8010e78 <ld_dword>
 801245e:	4603      	mov	r3, r0
 8012460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012464:	4a0a      	ldr	r2, [pc, #40]	; (8012490 <check_fs+0xa4>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d101      	bne.n	801246e <check_fs+0x82>
 801246a:	2300      	movs	r3, #0
 801246c:	e00c      	b.n	8012488 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	3334      	adds	r3, #52	; 0x34
 8012472:	3352      	adds	r3, #82	; 0x52
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe fcff 	bl	8010e78 <ld_dword>
 801247a:	4603      	mov	r3, r0
 801247c:	4a05      	ldr	r2, [pc, #20]	; (8012494 <check_fs+0xa8>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d101      	bne.n	8012486 <check_fs+0x9a>
 8012482:	2300      	movs	r3, #0
 8012484:	e000      	b.n	8012488 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012486:	2302      	movs	r3, #2
}
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	00544146 	.word	0x00544146
 8012494:	33544146 	.word	0x33544146

08012498 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b096      	sub	sp, #88	; 0x58
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	4613      	mov	r3, r2
 80124a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	2200      	movs	r2, #0
 80124aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff ff58 	bl	8012362 <get_ldnumber>
 80124b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80124b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	da01      	bge.n	80124be <find_volume+0x26>
 80124ba:	230b      	movs	r3, #11
 80124bc:	e235      	b.n	801292a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80124be:	4aa5      	ldr	r2, [pc, #660]	; (8012754 <find_volume+0x2bc>)
 80124c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80124c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d101      	bne.n	80124d2 <find_volume+0x3a>
 80124ce:	230c      	movs	r3, #12
 80124d0:	e22b      	b.n	801292a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80124d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124d4:	f7fe fdb8 	bl	8011048 <lock_fs>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d101      	bne.n	80124e2 <find_volume+0x4a>
 80124de:	230f      	movs	r3, #15
 80124e0:	e223      	b.n	801292a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80124e8:	79fb      	ldrb	r3, [r7, #7]
 80124ea:	f023 0301 	bic.w	r3, r3, #1
 80124ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d01a      	beq.n	801252e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	785b      	ldrb	r3, [r3, #1]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fe fc05 	bl	8010d0c <disk_status>
 8012502:	4603      	mov	r3, r0
 8012504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801250c:	f003 0301 	and.w	r3, r3, #1
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10c      	bne.n	801252e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012514:	79fb      	ldrb	r3, [r7, #7]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d007      	beq.n	801252a <find_volume+0x92>
 801251a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801251e:	f003 0304 	and.w	r3, r3, #4
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8012526:	230a      	movs	r3, #10
 8012528:	e1ff      	b.n	801292a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 801252a:	2300      	movs	r3, #0
 801252c:	e1fd      	b.n	801292a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012530:	2200      	movs	r2, #0
 8012532:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012536:	b2da      	uxtb	r2, r3
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253e:	785b      	ldrb	r3, [r3, #1]
 8012540:	4618      	mov	r0, r3
 8012542:	f7fe fbfd 	bl	8010d40 <disk_initialize>
 8012546:	4603      	mov	r3, r0
 8012548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801254c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012550:	f003 0301 	and.w	r3, r3, #1
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012558:	2303      	movs	r3, #3
 801255a:	e1e6      	b.n	801292a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d007      	beq.n	8012572 <find_volume+0xda>
 8012562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012566:	f003 0304 	and.w	r3, r3, #4
 801256a:	2b00      	cmp	r3, #0
 801256c:	d001      	beq.n	8012572 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801256e:	230a      	movs	r3, #10
 8012570:	e1db      	b.n	801292a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012572:	2300      	movs	r3, #0
 8012574:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801257a:	f7ff ff37 	bl	80123ec <check_fs>
 801257e:	4603      	mov	r3, r0
 8012580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012588:	2b02      	cmp	r3, #2
 801258a:	d149      	bne.n	8012620 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801258c:	2300      	movs	r3, #0
 801258e:	643b      	str	r3, [r7, #64]	; 0x40
 8012590:	e01e      	b.n	80125d0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012594:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259a:	011b      	lsls	r3, r3, #4
 801259c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80125a0:	4413      	add	r3, r2
 80125a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80125a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a6:	3304      	adds	r3, #4
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d006      	beq.n	80125bc <find_volume+0x124>
 80125ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b0:	3308      	adds	r3, #8
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fe fc60 	bl	8010e78 <ld_dword>
 80125b8:	4602      	mov	r2, r0
 80125ba:	e000      	b.n	80125be <find_volume+0x126>
 80125bc:	2200      	movs	r2, #0
 80125be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	3358      	adds	r3, #88	; 0x58
 80125c4:	443b      	add	r3, r7
 80125c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125cc:	3301      	adds	r3, #1
 80125ce:	643b      	str	r3, [r7, #64]	; 0x40
 80125d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d2:	2b03      	cmp	r3, #3
 80125d4:	d9dd      	bls.n	8012592 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80125d6:	2300      	movs	r3, #0
 80125d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80125da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <find_volume+0x14e>
 80125e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e2:	3b01      	subs	r3, #1
 80125e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80125e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	3358      	adds	r3, #88	; 0x58
 80125ec:	443b      	add	r3, r7
 80125ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80125f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80125f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d005      	beq.n	8012606 <find_volume+0x16e>
 80125fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80125fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125fe:	f7ff fef5 	bl	80123ec <check_fs>
 8012602:	4603      	mov	r3, r0
 8012604:	e000      	b.n	8012608 <find_volume+0x170>
 8012606:	2303      	movs	r3, #3
 8012608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801260c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012610:	2b01      	cmp	r3, #1
 8012612:	d905      	bls.n	8012620 <find_volume+0x188>
 8012614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012616:	3301      	adds	r3, #1
 8012618:	643b      	str	r3, [r7, #64]	; 0x40
 801261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801261c:	2b03      	cmp	r3, #3
 801261e:	d9e2      	bls.n	80125e6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012624:	2b04      	cmp	r3, #4
 8012626:	d101      	bne.n	801262c <find_volume+0x194>
 8012628:	2301      	movs	r3, #1
 801262a:	e17e      	b.n	801292a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801262c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012630:	2b01      	cmp	r3, #1
 8012632:	d901      	bls.n	8012638 <find_volume+0x1a0>
 8012634:	230d      	movs	r3, #13
 8012636:	e178      	b.n	801292a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	3334      	adds	r3, #52	; 0x34
 801263c:	330b      	adds	r3, #11
 801263e:	4618      	mov	r0, r3
 8012640:	f7fe fc02 	bl	8010e48 <ld_word>
 8012644:	4603      	mov	r3, r0
 8012646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801264a:	d001      	beq.n	8012650 <find_volume+0x1b8>
 801264c:	230d      	movs	r3, #13
 801264e:	e16c      	b.n	801292a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	3334      	adds	r3, #52	; 0x34
 8012654:	3316      	adds	r3, #22
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fbf6 	bl	8010e48 <ld_word>
 801265c:	4603      	mov	r3, r0
 801265e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012662:	2b00      	cmp	r3, #0
 8012664:	d106      	bne.n	8012674 <find_volume+0x1dc>
 8012666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012668:	3334      	adds	r3, #52	; 0x34
 801266a:	3324      	adds	r3, #36	; 0x24
 801266c:	4618      	mov	r0, r3
 801266e:	f7fe fc03 	bl	8010e78 <ld_dword>
 8012672:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012678:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012682:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012686:	789b      	ldrb	r3, [r3, #2]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d005      	beq.n	8012698 <find_volume+0x200>
 801268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268e:	789b      	ldrb	r3, [r3, #2]
 8012690:	2b02      	cmp	r3, #2
 8012692:	d001      	beq.n	8012698 <find_volume+0x200>
 8012694:	230d      	movs	r3, #13
 8012696:	e148      	b.n	801292a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	789b      	ldrb	r3, [r3, #2]
 801269c:	461a      	mov	r2, r3
 801269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a0:	fb02 f303 	mul.w	r3, r2, r3
 80126a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80126b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b4:	895b      	ldrh	r3, [r3, #10]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d008      	beq.n	80126cc <find_volume+0x234>
 80126ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126bc:	895b      	ldrh	r3, [r3, #10]
 80126be:	461a      	mov	r2, r3
 80126c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c2:	895b      	ldrh	r3, [r3, #10]
 80126c4:	3b01      	subs	r3, #1
 80126c6:	4013      	ands	r3, r2
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d001      	beq.n	80126d0 <find_volume+0x238>
 80126cc:	230d      	movs	r3, #13
 80126ce:	e12c      	b.n	801292a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	3334      	adds	r3, #52	; 0x34
 80126d4:	3311      	adds	r3, #17
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fe fbb6 	bl	8010e48 <ld_word>
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80126e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e6:	891b      	ldrh	r3, [r3, #8]
 80126e8:	f003 030f 	and.w	r3, r3, #15
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d001      	beq.n	80126f6 <find_volume+0x25e>
 80126f2:	230d      	movs	r3, #13
 80126f4:	e119      	b.n	801292a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80126f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f8:	3334      	adds	r3, #52	; 0x34
 80126fa:	3313      	adds	r3, #19
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7fe fba3 	bl	8010e48 <ld_word>
 8012702:	4603      	mov	r3, r0
 8012704:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <find_volume+0x282>
 801270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270e:	3334      	adds	r3, #52	; 0x34
 8012710:	3320      	adds	r3, #32
 8012712:	4618      	mov	r0, r3
 8012714:	f7fe fbb0 	bl	8010e78 <ld_dword>
 8012718:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271c:	3334      	adds	r3, #52	; 0x34
 801271e:	330e      	adds	r3, #14
 8012720:	4618      	mov	r0, r3
 8012722:	f7fe fb91 	bl	8010e48 <ld_word>
 8012726:	4603      	mov	r3, r0
 8012728:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801272a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801272c:	2b00      	cmp	r3, #0
 801272e:	d101      	bne.n	8012734 <find_volume+0x29c>
 8012730:	230d      	movs	r3, #13
 8012732:	e0fa      	b.n	801292a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012734:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012738:	4413      	add	r3, r2
 801273a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801273c:	8912      	ldrh	r2, [r2, #8]
 801273e:	0912      	lsrs	r2, r2, #4
 8012740:	b292      	uxth	r2, r2
 8012742:	4413      	add	r3, r2
 8012744:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	429a      	cmp	r2, r3
 801274c:	d204      	bcs.n	8012758 <find_volume+0x2c0>
 801274e:	230d      	movs	r3, #13
 8012750:	e0eb      	b.n	801292a <find_volume+0x492>
 8012752:	bf00      	nop
 8012754:	20003220 	.word	0x20003220
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012760:	8952      	ldrh	r2, [r2, #10]
 8012762:	fbb3 f3f2 	udiv	r3, r3, r2
 8012766:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <find_volume+0x2da>
 801276e:	230d      	movs	r3, #13
 8012770:	e0db      	b.n	801292a <find_volume+0x492>
		fmt = FS_FAT32;
 8012772:	2303      	movs	r3, #3
 8012774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801277e:	4293      	cmp	r3, r2
 8012780:	d802      	bhi.n	8012788 <find_volume+0x2f0>
 8012782:	2302      	movs	r3, #2
 8012784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801278e:	4293      	cmp	r3, r2
 8012790:	d802      	bhi.n	8012798 <find_volume+0x300>
 8012792:	2301      	movs	r3, #1
 8012794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	1c9a      	adds	r2, r3, #2
 801279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80127a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127a4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80127a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127aa:	441a      	add	r2, r3
 80127ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ae:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80127b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	441a      	add	r2, r3
 80127b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80127ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127be:	2b03      	cmp	r3, #3
 80127c0:	d11e      	bne.n	8012800 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80127c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c4:	3334      	adds	r3, #52	; 0x34
 80127c6:	332a      	adds	r3, #42	; 0x2a
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7fe fb3d 	bl	8010e48 <ld_word>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <find_volume+0x340>
 80127d4:	230d      	movs	r3, #13
 80127d6:	e0a8      	b.n	801292a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80127d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127da:	891b      	ldrh	r3, [r3, #8]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <find_volume+0x34c>
 80127e0:	230d      	movs	r3, #13
 80127e2:	e0a2      	b.n	801292a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80127e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e6:	3334      	adds	r3, #52	; 0x34
 80127e8:	332c      	adds	r3, #44	; 0x2c
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe fb44 	bl	8010e78 <ld_dword>
 80127f0:	4602      	mov	r2, r0
 80127f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80127f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f8:	699b      	ldr	r3, [r3, #24]
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	647b      	str	r3, [r7, #68]	; 0x44
 80127fe:	e01f      	b.n	8012840 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012802:	891b      	ldrh	r3, [r3, #8]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d101      	bne.n	801280c <find_volume+0x374>
 8012808:	230d      	movs	r3, #13
 801280a:	e08e      	b.n	801292a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012812:	441a      	add	r2, r3
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801281c:	2b02      	cmp	r3, #2
 801281e:	d103      	bne.n	8012828 <find_volume+0x390>
 8012820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012822:	699b      	ldr	r3, [r3, #24]
 8012824:	005b      	lsls	r3, r3, #1
 8012826:	e00a      	b.n	801283e <find_volume+0x3a6>
 8012828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282a:	699a      	ldr	r2, [r3, #24]
 801282c:	4613      	mov	r3, r2
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	4413      	add	r3, r2
 8012832:	085a      	lsrs	r2, r3, #1
 8012834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012836:	699b      	ldr	r3, [r3, #24]
 8012838:	f003 0301 	and.w	r3, r3, #1
 801283c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801283e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	69da      	ldr	r2, [r3, #28]
 8012844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012846:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801284a:	0a5b      	lsrs	r3, r3, #9
 801284c:	429a      	cmp	r2, r3
 801284e:	d201      	bcs.n	8012854 <find_volume+0x3bc>
 8012850:	230d      	movs	r3, #13
 8012852:	e06a      	b.n	801292a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	f04f 32ff 	mov.w	r2, #4294967295
 801285a:	615a      	str	r2, [r3, #20]
 801285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285e:	695a      	ldr	r2, [r3, #20]
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	2280      	movs	r2, #128	; 0x80
 8012868:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801286a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801286e:	2b03      	cmp	r3, #3
 8012870:	d149      	bne.n	8012906 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012874:	3334      	adds	r3, #52	; 0x34
 8012876:	3330      	adds	r3, #48	; 0x30
 8012878:	4618      	mov	r0, r3
 801287a:	f7fe fae5 	bl	8010e48 <ld_word>
 801287e:	4603      	mov	r3, r0
 8012880:	2b01      	cmp	r3, #1
 8012882:	d140      	bne.n	8012906 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012886:	3301      	adds	r3, #1
 8012888:	4619      	mov	r1, r3
 801288a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801288c:	f7fe fdbe 	bl	801140c <move_window>
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d137      	bne.n	8012906 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8012896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012898:	2200      	movs	r2, #0
 801289a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289e:	3334      	adds	r3, #52	; 0x34
 80128a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fe facf 	bl	8010e48 <ld_word>
 80128aa:	4603      	mov	r3, r0
 80128ac:	461a      	mov	r2, r3
 80128ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d127      	bne.n	8012906 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80128b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b8:	3334      	adds	r3, #52	; 0x34
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fe fadc 	bl	8010e78 <ld_dword>
 80128c0:	4603      	mov	r3, r0
 80128c2:	4a1c      	ldr	r2, [pc, #112]	; (8012934 <find_volume+0x49c>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d11e      	bne.n	8012906 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80128c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ca:	3334      	adds	r3, #52	; 0x34
 80128cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fe fad1 	bl	8010e78 <ld_dword>
 80128d6:	4603      	mov	r3, r0
 80128d8:	4a17      	ldr	r2, [pc, #92]	; (8012938 <find_volume+0x4a0>)
 80128da:	4293      	cmp	r3, r2
 80128dc:	d113      	bne.n	8012906 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80128de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e0:	3334      	adds	r3, #52	; 0x34
 80128e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe fac6 	bl	8010e78 <ld_dword>
 80128ec:	4602      	mov	r2, r0
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80128f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f4:	3334      	adds	r3, #52	; 0x34
 80128f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe fabc 	bl	8010e78 <ld_dword>
 8012900:	4602      	mov	r2, r0
 8012902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012904:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012908:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801290c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801290e:	4b0b      	ldr	r3, [pc, #44]	; (801293c <find_volume+0x4a4>)
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	3301      	adds	r3, #1
 8012914:	b29a      	uxth	r2, r3
 8012916:	4b09      	ldr	r3, [pc, #36]	; (801293c <find_volume+0x4a4>)
 8012918:	801a      	strh	r2, [r3, #0]
 801291a:	4b08      	ldr	r3, [pc, #32]	; (801293c <find_volume+0x4a4>)
 801291c:	881a      	ldrh	r2, [r3, #0]
 801291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012920:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012922:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012924:	f7fe fd0a 	bl	801133c <clear_lock>
#endif
	return FR_OK;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3758      	adds	r7, #88	; 0x58
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	41615252 	.word	0x41615252
 8012938:	61417272 	.word	0x61417272
 801293c:	20003224 	.word	0x20003224

08012940 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801294a:	2309      	movs	r3, #9
 801294c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d02e      	beq.n	80129b2 <validate+0x72>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d02a      	beq.n	80129b2 <validate+0x72>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d025      	beq.n	80129b2 <validate+0x72>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	889a      	ldrh	r2, [r3, #4]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	88db      	ldrh	r3, [r3, #6]
 8012970:	429a      	cmp	r2, r3
 8012972:	d11e      	bne.n	80129b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4618      	mov	r0, r3
 801297a:	f7fe fb65 	bl	8011048 <lock_fs>
 801297e:	4603      	mov	r3, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	d014      	beq.n	80129ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	785b      	ldrb	r3, [r3, #1]
 801298a:	4618      	mov	r0, r3
 801298c:	f7fe f9be 	bl	8010d0c <disk_status>
 8012990:	4603      	mov	r3, r0
 8012992:	f003 0301 	and.w	r3, r3, #1
 8012996:	2b00      	cmp	r3, #0
 8012998:	d102      	bne.n	80129a0 <validate+0x60>
				res = FR_OK;
 801299a:	2300      	movs	r3, #0
 801299c:	73fb      	strb	r3, [r7, #15]
 801299e:	e008      	b.n	80129b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2100      	movs	r1, #0
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fe fb64 	bl	8011074 <unlock_fs>
 80129ac:	e001      	b.n	80129b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80129ae:	230f      	movs	r3, #15
 80129b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d102      	bne.n	80129be <validate+0x7e>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	e000      	b.n	80129c0 <validate+0x80>
 80129be:	2300      	movs	r3, #0
 80129c0:	683a      	ldr	r2, [r7, #0]
 80129c2:	6013      	str	r3, [r2, #0]
	return res;
 80129c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
	...

080129d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	4613      	mov	r3, r2
 80129dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80129e2:	f107 0310 	add.w	r3, r7, #16
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff fcbb 	bl	8012362 <get_ldnumber>
 80129ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	da01      	bge.n	80129f8 <f_mount+0x28>
 80129f4:	230b      	movs	r3, #11
 80129f6:	e048      	b.n	8012a8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80129f8:	4a26      	ldr	r2, [pc, #152]	; (8012a94 <f_mount+0xc4>)
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d00f      	beq.n	8012a28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012a08:	69b8      	ldr	r0, [r7, #24]
 8012a0a:	f7fe fc97 	bl	801133c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f001 fe57 	bl	80146c6 <ff_del_syncobj>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <f_mount+0x52>
 8012a1e:	2302      	movs	r3, #2
 8012a20:	e033      	b.n	8012a8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	2200      	movs	r2, #0
 8012a26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00f      	beq.n	8012a4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2200      	movs	r2, #0
 8012a32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	b2da      	uxtb	r2, r3
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	330c      	adds	r3, #12
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f001 fe21 	bl	8014686 <ff_cre_syncobj>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d101      	bne.n	8012a4e <f_mount+0x7e>
 8012a4a:	2302      	movs	r3, #2
 8012a4c:	e01d      	b.n	8012a8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	4910      	ldr	r1, [pc, #64]	; (8012a94 <f_mount+0xc4>)
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d002      	beq.n	8012a64 <f_mount+0x94>
 8012a5e:	79fb      	ldrb	r3, [r7, #7]
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d001      	beq.n	8012a68 <f_mount+0x98>
 8012a64:	2300      	movs	r3, #0
 8012a66:	e010      	b.n	8012a8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012a68:	f107 010c 	add.w	r1, r7, #12
 8012a6c:	f107 0308 	add.w	r3, r7, #8
 8012a70:	2200      	movs	r2, #0
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ff fd10 	bl	8012498 <find_volume>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7dfa      	ldrb	r2, [r7, #23]
 8012a80:	4611      	mov	r1, r2
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe faf6 	bl	8011074 <unlock_fs>
 8012a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3720      	adds	r7, #32
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	20003220 	.word	0x20003220

08012a98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b098      	sub	sp, #96	; 0x60
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d101      	bne.n	8012ab0 <f_open+0x18>
 8012aac:	2309      	movs	r3, #9
 8012aae:	e1b4      	b.n	8012e1a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ab0:	79fb      	ldrb	r3, [r7, #7]
 8012ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ab6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012ab8:	79fa      	ldrb	r2, [r7, #7]
 8012aba:	f107 0110 	add.w	r1, r7, #16
 8012abe:	f107 0308 	add.w	r3, r7, #8
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7ff fce8 	bl	8012498 <find_volume>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f040 8191 	bne.w	8012dfa <f_open+0x362>
		dj.obj.fs = fs;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	f107 0314 	add.w	r3, r7, #20
 8012ae2:	4611      	mov	r1, r2
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7ff fbcb 	bl	8012280 <follow_path>
 8012aea:	4603      	mov	r3, r0
 8012aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d11a      	bne.n	8012b2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012af8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012afc:	b25b      	sxtb	r3, r3
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	da03      	bge.n	8012b0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012b02:	2306      	movs	r3, #6
 8012b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b08:	e011      	b.n	8012b2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b0a:	79fb      	ldrb	r3, [r7, #7]
 8012b0c:	f023 0301 	bic.w	r3, r3, #1
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bf14      	ite	ne
 8012b14:	2301      	movne	r3, #1
 8012b16:	2300      	moveq	r3, #0
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	f107 0314 	add.w	r3, r7, #20
 8012b20:	4611      	mov	r1, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7fe fac2 	bl	80110ac <chk_lock>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	f003 031c 	and.w	r3, r3, #28
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d07f      	beq.n	8012c38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d017      	beq.n	8012b70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b44:	2b04      	cmp	r3, #4
 8012b46:	d10e      	bne.n	8012b66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b48:	f7fe fb0c 	bl	8011164 <enq_lock>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d006      	beq.n	8012b60 <f_open+0xc8>
 8012b52:	f107 0314 	add.w	r3, r7, #20
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7ff fa4e 	bl	8011ff8 <dir_register>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	e000      	b.n	8012b62 <f_open+0xca>
 8012b60:	2312      	movs	r3, #18
 8012b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b66:	79fb      	ldrb	r3, [r7, #7]
 8012b68:	f043 0308 	orr.w	r3, r3, #8
 8012b6c:	71fb      	strb	r3, [r7, #7]
 8012b6e:	e010      	b.n	8012b92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b70:	7ebb      	ldrb	r3, [r7, #26]
 8012b72:	f003 0311 	and.w	r3, r3, #17
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d003      	beq.n	8012b82 <f_open+0xea>
					res = FR_DENIED;
 8012b7a:	2307      	movs	r3, #7
 8012b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b80:	e007      	b.n	8012b92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b82:	79fb      	ldrb	r3, [r7, #7]
 8012b84:	f003 0304 	and.w	r3, r3, #4
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <f_open+0xfa>
 8012b8c:	2308      	movs	r3, #8
 8012b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d168      	bne.n	8012c6c <f_open+0x1d4>
 8012b9a:	79fb      	ldrb	r3, [r7, #7]
 8012b9c:	f003 0308 	and.w	r3, r3, #8
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d063      	beq.n	8012c6c <f_open+0x1d4>
				dw = GET_FATTIME();
 8012ba4:	f7fa fb9a 	bl	800d2dc <get_fattime>
 8012ba8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	330e      	adds	r3, #14
 8012bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7fe f99f 	bl	8010ef4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb8:	3316      	adds	r3, #22
 8012bba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fe f999 	bl	8010ef4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc4:	330b      	adds	r3, #11
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bce:	4611      	mov	r1, r2
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ff f920 	bl	8011e16 <ld_clust>
 8012bd6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012bdc:	2200      	movs	r2, #0
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff f938 	bl	8011e54 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be6:	331c      	adds	r3, #28
 8012be8:	2100      	movs	r1, #0
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe f982 	bl	8010ef4 <st_dword>
					fs->wflag = 1;
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d037      	beq.n	8012c6c <f_open+0x1d4>
						dw = fs->winsect;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012c02:	f107 0314 	add.w	r3, r7, #20
 8012c06:	2200      	movs	r2, #0
 8012c08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fe fe4b 	bl	80118a6 <remove_chain>
 8012c10:	4603      	mov	r3, r0
 8012c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d126      	bne.n	8012c6c <f_open+0x1d4>
							res = move_window(fs, dw);
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7fe fbf2 	bl	801140c <move_window>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c32:	3a01      	subs	r2, #1
 8012c34:	611a      	str	r2, [r3, #16]
 8012c36:	e019      	b.n	8012c6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d115      	bne.n	8012c6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c40:	7ebb      	ldrb	r3, [r7, #26]
 8012c42:	f003 0310 	and.w	r3, r3, #16
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d003      	beq.n	8012c52 <f_open+0x1ba>
					res = FR_NO_FILE;
 8012c4a:	2304      	movs	r3, #4
 8012c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c50:	e00c      	b.n	8012c6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c52:	79fb      	ldrb	r3, [r7, #7]
 8012c54:	f003 0302 	and.w	r3, r3, #2
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d007      	beq.n	8012c6c <f_open+0x1d4>
 8012c5c:	7ebb      	ldrb	r3, [r7, #26]
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d002      	beq.n	8012c6c <f_open+0x1d4>
						res = FR_DENIED;
 8012c66:	2307      	movs	r3, #7
 8012c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d128      	bne.n	8012cc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c74:	79fb      	ldrb	r3, [r7, #7]
 8012c76:	f003 0308 	and.w	r3, r3, #8
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d003      	beq.n	8012c86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012c7e:	79fb      	ldrb	r3, [r7, #7]
 8012c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c94:	79fb      	ldrb	r3, [r7, #7]
 8012c96:	f023 0301 	bic.w	r3, r3, #1
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	bf14      	ite	ne
 8012c9e:	2301      	movne	r3, #1
 8012ca0:	2300      	moveq	r3, #0
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	f107 0314 	add.w	r3, r7, #20
 8012caa:	4611      	mov	r1, r2
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7fe fa7b 	bl	80111a8 <inc_lock>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d102      	bne.n	8012cc6 <f_open+0x22e>
 8012cc0:	2302      	movs	r3, #2
 8012cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f040 8095 	bne.w	8012dfa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff f89d 	bl	8011e16 <ld_clust>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce4:	331c      	adds	r3, #28
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fe f8c6 	bl	8010e78 <ld_dword>
 8012cec:	4602      	mov	r2, r0
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012cf8:	693a      	ldr	r2, [r7, #16]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	88da      	ldrh	r2, [r3, #6]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	79fa      	ldrb	r2, [r7, #7]
 8012d0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2200      	movs	r2, #0
 8012d16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3330      	adds	r3, #48	; 0x30
 8012d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d26:	2100      	movs	r1, #0
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fe f930 	bl	8010f8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	f003 0320 	and.w	r3, r3, #32
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d060      	beq.n	8012dfa <f_open+0x362>
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d05c      	beq.n	8012dfa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	68da      	ldr	r2, [r3, #12]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	895b      	ldrh	r3, [r3, #10]
 8012d4c:	025b      	lsls	r3, r3, #9
 8012d4e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8012d5c:	e016      	b.n	8012d8c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fe fc0d 	bl	8011582 <get_fat>
 8012d68:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	d802      	bhi.n	8012d76 <f_open+0x2de>
 8012d70:	2302      	movs	r3, #2
 8012d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7c:	d102      	bne.n	8012d84 <f_open+0x2ec>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d88:	1ad3      	subs	r3, r2, r3
 8012d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8012d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d103      	bne.n	8012d9c <f_open+0x304>
 8012d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d8e0      	bhi.n	8012d5e <f_open+0x2c6>
				}
				fp->clust = clst;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012da0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d127      	bne.n	8012dfa <f_open+0x362>
 8012daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d022      	beq.n	8012dfa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fe fbc3 	bl	8011544 <clust2sect>
 8012dbe:	6478      	str	r0, [r7, #68]	; 0x44
 8012dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d103      	bne.n	8012dce <f_open+0x336>
						res = FR_INT_ERR;
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012dcc:	e015      	b.n	8012dfa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dd0:	0a5a      	lsrs	r2, r3, #9
 8012dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dd4:	441a      	add	r2, r3
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	7858      	ldrb	r0, [r3, #1]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	6a1a      	ldr	r2, [r3, #32]
 8012de8:	2301      	movs	r3, #1
 8012dea:	f7fd ffcf 	bl	8010d8c <disk_read>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d002      	beq.n	8012dfa <f_open+0x362>
 8012df4:	2301      	movs	r3, #1
 8012df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012dfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d002      	beq.n	8012e08 <f_open+0x370>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2200      	movs	r2, #0
 8012e06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012e0e:	4611      	mov	r1, r2
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe f92f 	bl	8011074 <unlock_fs>
 8012e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3760      	adds	r7, #96	; 0x60
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b08e      	sub	sp, #56	; 0x38
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	60f8      	str	r0, [r7, #12]
 8012e2a:	60b9      	str	r1, [r7, #8]
 8012e2c:	607a      	str	r2, [r7, #4]
 8012e2e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	2200      	movs	r2, #0
 8012e38:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f107 0214 	add.w	r2, r7, #20
 8012e40:	4611      	mov	r1, r2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff fd7c 	bl	8012940 <validate>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d107      	bne.n	8012e66 <f_read+0x44>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	7d5b      	ldrb	r3, [r3, #21]
 8012e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d009      	beq.n	8012e7a <f_read+0x58>
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fe f900 	bl	8011074 <unlock_fs>
 8012e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e78:	e13d      	b.n	80130f6 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	7d1b      	ldrb	r3, [r3, #20]
 8012e7e:	f003 0301 	and.w	r3, r3, #1
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d106      	bne.n	8012e94 <f_read+0x72>
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	2107      	movs	r1, #7
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe f8f2 	bl	8011074 <unlock_fs>
 8012e90:	2307      	movs	r3, #7
 8012e92:	e130      	b.n	80130f6 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68da      	ldr	r2, [r3, #12]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	1ad3      	subs	r3, r2, r3
 8012e9e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	6a3b      	ldr	r3, [r7, #32]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	f240 811c 	bls.w	80130e2 <f_read+0x2c0>
 8012eaa:	6a3b      	ldr	r3, [r7, #32]
 8012eac:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012eae:	e118      	b.n	80130e2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	699b      	ldr	r3, [r3, #24]
 8012eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f040 80e4 	bne.w	8013086 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	699b      	ldr	r3, [r3, #24]
 8012ec2:	0a5b      	lsrs	r3, r3, #9
 8012ec4:	697a      	ldr	r2, [r7, #20]
 8012ec6:	8952      	ldrh	r2, [r2, #10]
 8012ec8:	3a01      	subs	r2, #1
 8012eca:	4013      	ands	r3, r2
 8012ecc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d139      	bne.n	8012f48 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d103      	bne.n	8012ee4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	689b      	ldr	r3, [r3, #8]
 8012ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8012ee2:	e013      	b.n	8012f0c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d007      	beq.n	8012efc <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	699b      	ldr	r3, [r3, #24]
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	68f8      	ldr	r0, [r7, #12]
 8012ef4:	f7fe fdd4 	bl	8011aa0 <clmt_clust>
 8012ef8:	6338      	str	r0, [r7, #48]	; 0x30
 8012efa:	e007      	b.n	8012f0c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	69db      	ldr	r3, [r3, #28]
 8012f02:	4619      	mov	r1, r3
 8012f04:	4610      	mov	r0, r2
 8012f06:	f7fe fb3c 	bl	8011582 <get_fat>
 8012f0a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0e:	2b01      	cmp	r3, #1
 8012f10:	d809      	bhi.n	8012f26 <f_read+0x104>
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	2202      	movs	r2, #2
 8012f16:	755a      	strb	r2, [r3, #21]
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2102      	movs	r1, #2
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7fe f8a9 	bl	8011074 <unlock_fs>
 8012f22:	2302      	movs	r3, #2
 8012f24:	e0e7      	b.n	80130f6 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f2c:	d109      	bne.n	8012f42 <f_read+0x120>
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2201      	movs	r2, #1
 8012f32:	755a      	strb	r2, [r3, #21]
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	2101      	movs	r1, #1
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7fe f89b 	bl	8011074 <unlock_fs>
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e0d9      	b.n	80130f6 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f46:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f48:	697a      	ldr	r2, [r7, #20]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	69db      	ldr	r3, [r3, #28]
 8012f4e:	4619      	mov	r1, r3
 8012f50:	4610      	mov	r0, r2
 8012f52:	f7fe faf7 	bl	8011544 <clust2sect>
 8012f56:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d109      	bne.n	8012f72 <f_read+0x150>
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2202      	movs	r2, #2
 8012f62:	755a      	strb	r2, [r3, #21]
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	2102      	movs	r1, #2
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7fe f883 	bl	8011074 <unlock_fs>
 8012f6e:	2302      	movs	r3, #2
 8012f70:	e0c1      	b.n	80130f6 <f_read+0x2d4>
			sect += csect;
 8012f72:	69ba      	ldr	r2, [r7, #24]
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	4413      	add	r3, r2
 8012f78:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	0a5b      	lsrs	r3, r3, #9
 8012f7e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d03e      	beq.n	8013004 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f86:	69fa      	ldr	r2, [r7, #28]
 8012f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8a:	4413      	add	r3, r2
 8012f8c:	697a      	ldr	r2, [r7, #20]
 8012f8e:	8952      	ldrh	r2, [r2, #10]
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d905      	bls.n	8012fa0 <f_read+0x17e>
					cc = fs->csize - csect;
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	895b      	ldrh	r3, [r3, #10]
 8012f98:	461a      	mov	r2, r3
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	7858      	ldrb	r0, [r3, #1]
 8012fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa6:	69ba      	ldr	r2, [r7, #24]
 8012fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012faa:	f7fd feef 	bl	8010d8c <disk_read>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d009      	beq.n	8012fc8 <f_read+0x1a6>
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	755a      	strb	r2, [r3, #21]
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2101      	movs	r1, #1
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7fe f858 	bl	8011074 <unlock_fs>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	e096      	b.n	80130f6 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	7d1b      	ldrb	r3, [r3, #20]
 8012fcc:	b25b      	sxtb	r3, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	da14      	bge.n	8012ffc <f_read+0x1da>
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	6a1a      	ldr	r2, [r3, #32]
 8012fd6:	69bb      	ldr	r3, [r7, #24]
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d90d      	bls.n	8012ffc <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6a1a      	ldr	r2, [r3, #32]
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	1ad3      	subs	r3, r2, r3
 8012fe8:	025b      	lsls	r3, r3, #9
 8012fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fec:	18d0      	adds	r0, r2, r3
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	3330      	adds	r3, #48	; 0x30
 8012ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	f7fd ffa8 	bl	8010f4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	025b      	lsls	r3, r3, #9
 8013000:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013002:	e05a      	b.n	80130ba <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	6a1b      	ldr	r3, [r3, #32]
 8013008:	69ba      	ldr	r2, [r7, #24]
 801300a:	429a      	cmp	r2, r3
 801300c:	d038      	beq.n	8013080 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	7d1b      	ldrb	r3, [r3, #20]
 8013012:	b25b      	sxtb	r3, r3
 8013014:	2b00      	cmp	r3, #0
 8013016:	da1d      	bge.n	8013054 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	7858      	ldrb	r0, [r3, #1]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	6a1a      	ldr	r2, [r3, #32]
 8013026:	2301      	movs	r3, #1
 8013028:	f7fd fed0 	bl	8010dcc <disk_write>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d009      	beq.n	8013046 <f_read+0x224>
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2201      	movs	r2, #1
 8013036:	755a      	strb	r2, [r3, #21]
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	2101      	movs	r1, #1
 801303c:	4618      	mov	r0, r3
 801303e:	f7fe f819 	bl	8011074 <unlock_fs>
 8013042:	2301      	movs	r3, #1
 8013044:	e057      	b.n	80130f6 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	7d1b      	ldrb	r3, [r3, #20]
 801304a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801304e:	b2da      	uxtb	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	7858      	ldrb	r0, [r3, #1]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801305e:	2301      	movs	r3, #1
 8013060:	69ba      	ldr	r2, [r7, #24]
 8013062:	f7fd fe93 	bl	8010d8c <disk_read>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d009      	beq.n	8013080 <f_read+0x25e>
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2201      	movs	r2, #1
 8013070:	755a      	strb	r2, [r3, #21]
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	2101      	movs	r1, #1
 8013076:	4618      	mov	r0, r3
 8013078:	f7fd fffc 	bl	8011074 <unlock_fs>
 801307c:	2301      	movs	r3, #1
 801307e:	e03a      	b.n	80130f6 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	69ba      	ldr	r2, [r7, #24]
 8013084:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	699b      	ldr	r3, [r3, #24]
 801308a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801308e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013092:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	429a      	cmp	r2, r3
 801309a:	d901      	bls.n	80130a0 <f_read+0x27e>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ae:	4413      	add	r3, r2
 80130b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130b2:	4619      	mov	r1, r3
 80130b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130b6:	f7fd ff49 	bl	8010f4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80130ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130be:	4413      	add	r3, r2
 80130c0:	627b      	str	r3, [r7, #36]	; 0x24
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	699a      	ldr	r2, [r3, #24]
 80130c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c8:	441a      	add	r2, r3
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	619a      	str	r2, [r3, #24]
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d4:	441a      	add	r2, r3
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	601a      	str	r2, [r3, #0]
 80130da:	687a      	ldr	r2, [r7, #4]
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	1ad3      	subs	r3, r2, r3
 80130e0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f47f aee3 	bne.w	8012eb0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	2100      	movs	r1, #0
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fd ffc0 	bl	8011074 <unlock_fs>
 80130f4:	2300      	movs	r3, #0
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3738      	adds	r7, #56	; 0x38
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}

080130fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80130fe:	b580      	push	{r7, lr}
 8013100:	b08c      	sub	sp, #48	; 0x30
 8013102:	af00      	add	r7, sp, #0
 8013104:	60f8      	str	r0, [r7, #12]
 8013106:	60b9      	str	r1, [r7, #8]
 8013108:	607a      	str	r2, [r7, #4]
 801310a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f107 0210 	add.w	r2, r7, #16
 801311c:	4611      	mov	r1, r2
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff fc0e 	bl	8012940 <validate>
 8013124:	4603      	mov	r3, r0
 8013126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801312a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801312e:	2b00      	cmp	r3, #0
 8013130:	d107      	bne.n	8013142 <f_write+0x44>
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	7d5b      	ldrb	r3, [r3, #21]
 8013136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801313a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801313e:	2b00      	cmp	r3, #0
 8013140:	d009      	beq.n	8013156 <f_write+0x58>
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013148:	4611      	mov	r1, r2
 801314a:	4618      	mov	r0, r3
 801314c:	f7fd ff92 	bl	8011074 <unlock_fs>
 8013150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013154:	e173      	b.n	801343e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	7d1b      	ldrb	r3, [r3, #20]
 801315a:	f003 0302 	and.w	r3, r3, #2
 801315e:	2b00      	cmp	r3, #0
 8013160:	d106      	bne.n	8013170 <f_write+0x72>
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	2107      	movs	r1, #7
 8013166:	4618      	mov	r0, r3
 8013168:	f7fd ff84 	bl	8011074 <unlock_fs>
 801316c:	2307      	movs	r3, #7
 801316e:	e166      	b.n	801343e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	699a      	ldr	r2, [r3, #24]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	441a      	add	r2, r3
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	429a      	cmp	r2, r3
 801317e:	f080 814b 	bcs.w	8013418 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	43db      	mvns	r3, r3
 8013188:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801318a:	e145      	b.n	8013418 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	699b      	ldr	r3, [r3, #24]
 8013190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013194:	2b00      	cmp	r3, #0
 8013196:	f040 8101 	bne.w	801339c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	699b      	ldr	r3, [r3, #24]
 801319e:	0a5b      	lsrs	r3, r3, #9
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	8952      	ldrh	r2, [r2, #10]
 80131a4:	3a01      	subs	r2, #1
 80131a6:	4013      	ands	r3, r2
 80131a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d14d      	bne.n	801324c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	699b      	ldr	r3, [r3, #24]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10c      	bne.n	80131d2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80131be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d11a      	bne.n	80131fa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2100      	movs	r1, #0
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fe fbd1 	bl	8011970 <create_chain>
 80131ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80131d0:	e013      	b.n	80131fa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d007      	beq.n	80131ea <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	699b      	ldr	r3, [r3, #24]
 80131de:	4619      	mov	r1, r3
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	f7fe fc5d 	bl	8011aa0 <clmt_clust>
 80131e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80131e8:	e007      	b.n	80131fa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	69db      	ldr	r3, [r3, #28]
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f7fe fbbc 	bl	8011970 <create_chain>
 80131f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80131fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 8110 	beq.w	8013422 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	2b01      	cmp	r3, #1
 8013206:	d109      	bne.n	801321c <f_write+0x11e>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2202      	movs	r2, #2
 801320c:	755a      	strb	r2, [r3, #21]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	2102      	movs	r1, #2
 8013212:	4618      	mov	r0, r3
 8013214:	f7fd ff2e 	bl	8011074 <unlock_fs>
 8013218:	2302      	movs	r3, #2
 801321a:	e110      	b.n	801343e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013222:	d109      	bne.n	8013238 <f_write+0x13a>
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2201      	movs	r2, #1
 8013228:	755a      	strb	r2, [r3, #21]
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	2101      	movs	r1, #1
 801322e:	4618      	mov	r0, r3
 8013230:	f7fd ff20 	bl	8011074 <unlock_fs>
 8013234:	2301      	movs	r3, #1
 8013236:	e102      	b.n	801343e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801323c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d102      	bne.n	801324c <f_write+0x14e>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801324a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	7d1b      	ldrb	r3, [r3, #20]
 8013250:	b25b      	sxtb	r3, r3
 8013252:	2b00      	cmp	r3, #0
 8013254:	da1d      	bge.n	8013292 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	7858      	ldrb	r0, [r3, #1]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6a1a      	ldr	r2, [r3, #32]
 8013264:	2301      	movs	r3, #1
 8013266:	f7fd fdb1 	bl	8010dcc <disk_write>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d009      	beq.n	8013284 <f_write+0x186>
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2201      	movs	r2, #1
 8013274:	755a      	strb	r2, [r3, #21]
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	2101      	movs	r1, #1
 801327a:	4618      	mov	r0, r3
 801327c:	f7fd fefa 	bl	8011074 <unlock_fs>
 8013280:	2301      	movs	r3, #1
 8013282:	e0dc      	b.n	801343e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	7d1b      	ldrb	r3, [r3, #20]
 8013288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801328c:	b2da      	uxtb	r2, r3
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	69db      	ldr	r3, [r3, #28]
 8013298:	4619      	mov	r1, r3
 801329a:	4610      	mov	r0, r2
 801329c:	f7fe f952 	bl	8011544 <clust2sect>
 80132a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d109      	bne.n	80132bc <f_write+0x1be>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2202      	movs	r2, #2
 80132ac:	755a      	strb	r2, [r3, #21]
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	2102      	movs	r1, #2
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7fd fede 	bl	8011074 <unlock_fs>
 80132b8:	2302      	movs	r3, #2
 80132ba:	e0c0      	b.n	801343e <f_write+0x340>
			sect += csect;
 80132bc:	697a      	ldr	r2, [r7, #20]
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	4413      	add	r3, r2
 80132c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	0a5b      	lsrs	r3, r3, #9
 80132c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80132ca:	6a3b      	ldr	r3, [r7, #32]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d041      	beq.n	8013354 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80132d0:	69ba      	ldr	r2, [r7, #24]
 80132d2:	6a3b      	ldr	r3, [r7, #32]
 80132d4:	4413      	add	r3, r2
 80132d6:	693a      	ldr	r2, [r7, #16]
 80132d8:	8952      	ldrh	r2, [r2, #10]
 80132da:	4293      	cmp	r3, r2
 80132dc:	d905      	bls.n	80132ea <f_write+0x1ec>
					cc = fs->csize - csect;
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	895b      	ldrh	r3, [r3, #10]
 80132e2:	461a      	mov	r2, r3
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	1ad3      	subs	r3, r2, r3
 80132e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	7858      	ldrb	r0, [r3, #1]
 80132ee:	6a3b      	ldr	r3, [r7, #32]
 80132f0:	697a      	ldr	r2, [r7, #20]
 80132f2:	69f9      	ldr	r1, [r7, #28]
 80132f4:	f7fd fd6a 	bl	8010dcc <disk_write>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d009      	beq.n	8013312 <f_write+0x214>
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2201      	movs	r2, #1
 8013302:	755a      	strb	r2, [r3, #21]
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	2101      	movs	r1, #1
 8013308:	4618      	mov	r0, r3
 801330a:	f7fd feb3 	bl	8011074 <unlock_fs>
 801330e:	2301      	movs	r3, #1
 8013310:	e095      	b.n	801343e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	6a1a      	ldr	r2, [r3, #32]
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	6a3a      	ldr	r2, [r7, #32]
 801331c:	429a      	cmp	r2, r3
 801331e:	d915      	bls.n	801334c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	6a1a      	ldr	r2, [r3, #32]
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	025b      	lsls	r3, r3, #9
 8013330:	69fa      	ldr	r2, [r7, #28]
 8013332:	4413      	add	r3, r2
 8013334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013338:	4619      	mov	r1, r3
 801333a:	f7fd fe07 	bl	8010f4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	7d1b      	ldrb	r3, [r3, #20]
 8013342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013346:	b2da      	uxtb	r2, r3
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801334c:	6a3b      	ldr	r3, [r7, #32]
 801334e:	025b      	lsls	r3, r3, #9
 8013350:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013352:	e044      	b.n	80133de <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6a1b      	ldr	r3, [r3, #32]
 8013358:	697a      	ldr	r2, [r7, #20]
 801335a:	429a      	cmp	r2, r3
 801335c:	d01b      	beq.n	8013396 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	699a      	ldr	r2, [r3, #24]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013366:	429a      	cmp	r2, r3
 8013368:	d215      	bcs.n	8013396 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	7858      	ldrb	r0, [r3, #1]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013374:	2301      	movs	r3, #1
 8013376:	697a      	ldr	r2, [r7, #20]
 8013378:	f7fd fd08 	bl	8010d8c <disk_read>
 801337c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801337e:	2b00      	cmp	r3, #0
 8013380:	d009      	beq.n	8013396 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2201      	movs	r2, #1
 8013386:	755a      	strb	r2, [r3, #21]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	2101      	movs	r1, #1
 801338c:	4618      	mov	r0, r3
 801338e:	f7fd fe71 	bl	8011074 <unlock_fs>
 8013392:	2301      	movs	r3, #1
 8013394:	e053      	b.n	801343e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80133a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80133aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d901      	bls.n	80133b6 <f_write+0x2b8>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	699b      	ldr	r3, [r3, #24]
 80133c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133c4:	4413      	add	r3, r2
 80133c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133c8:	69f9      	ldr	r1, [r7, #28]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fd fdbe 	bl	8010f4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	7d1b      	ldrb	r3, [r3, #20]
 80133d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80133de:	69fa      	ldr	r2, [r7, #28]
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	4413      	add	r3, r2
 80133e4:	61fb      	str	r3, [r7, #28]
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	699a      	ldr	r2, [r3, #24]
 80133ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ec:	441a      	add	r2, r3
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	619a      	str	r2, [r3, #24]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	68da      	ldr	r2, [r3, #12]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	699b      	ldr	r3, [r3, #24]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	bf38      	it	cc
 80133fe:	461a      	movcc	r2, r3
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	60da      	str	r2, [r3, #12]
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340a:	441a      	add	r2, r3
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	601a      	str	r2, [r3, #0]
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013414:	1ad3      	subs	r3, r2, r3
 8013416:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f47f aeb6 	bne.w	801318c <f_write+0x8e>
 8013420:	e000      	b.n	8013424 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013422:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	7d1b      	ldrb	r3, [r3, #20]
 8013428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801342c:	b2da      	uxtb	r2, r3
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	2100      	movs	r1, #0
 8013436:	4618      	mov	r0, r3
 8013438:	f7fd fe1c 	bl	8011074 <unlock_fs>
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	3730      	adds	r7, #48	; 0x30
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}

08013446 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013446:	b580      	push	{r7, lr}
 8013448:	b086      	sub	sp, #24
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f107 0208 	add.w	r2, r7, #8
 8013454:	4611      	mov	r1, r2
 8013456:	4618      	mov	r0, r3
 8013458:	f7ff fa72 	bl	8012940 <validate>
 801345c:	4603      	mov	r3, r0
 801345e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013460:	7dfb      	ldrb	r3, [r7, #23]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d16d      	bne.n	8013542 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	7d1b      	ldrb	r3, [r3, #20]
 801346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801346e:	2b00      	cmp	r3, #0
 8013470:	d067      	beq.n	8013542 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7d1b      	ldrb	r3, [r3, #20]
 8013476:	b25b      	sxtb	r3, r3
 8013478:	2b00      	cmp	r3, #0
 801347a:	da1a      	bge.n	80134b2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	7858      	ldrb	r0, [r3, #1]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a1a      	ldr	r2, [r3, #32]
 801348a:	2301      	movs	r3, #1
 801348c:	f7fd fc9e 	bl	8010dcc <disk_write>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d006      	beq.n	80134a4 <f_sync+0x5e>
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	2101      	movs	r1, #1
 801349a:	4618      	mov	r0, r3
 801349c:	f7fd fdea 	bl	8011074 <unlock_fs>
 80134a0:	2301      	movs	r3, #1
 80134a2:	e055      	b.n	8013550 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	7d1b      	ldrb	r3, [r3, #20]
 80134a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ac:	b2da      	uxtb	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80134b2:	f7f9 ff13 	bl	800d2dc <get_fattime>
 80134b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80134b8:	68ba      	ldr	r2, [r7, #8]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134be:	4619      	mov	r1, r3
 80134c0:	4610      	mov	r0, r2
 80134c2:	f7fd ffa3 	bl	801140c <move_window>
 80134c6:	4603      	mov	r3, r0
 80134c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80134ca:	7dfb      	ldrb	r3, [r7, #23]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d138      	bne.n	8013542 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	330b      	adds	r3, #11
 80134da:	781a      	ldrb	r2, [r3, #0]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	330b      	adds	r3, #11
 80134e0:	f042 0220 	orr.w	r2, r2, #32
 80134e4:	b2d2      	uxtb	r2, r2
 80134e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6818      	ldr	r0, [r3, #0]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	461a      	mov	r2, r3
 80134f2:	68f9      	ldr	r1, [r7, #12]
 80134f4:	f7fe fcae 	bl	8011e54 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f103 021c 	add.w	r2, r3, #28
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	4619      	mov	r1, r3
 8013504:	4610      	mov	r0, r2
 8013506:	f7fd fcf5 	bl	8010ef4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3316      	adds	r3, #22
 801350e:	6939      	ldr	r1, [r7, #16]
 8013510:	4618      	mov	r0, r3
 8013512:	f7fd fcef 	bl	8010ef4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	3312      	adds	r3, #18
 801351a:	2100      	movs	r1, #0
 801351c:	4618      	mov	r0, r3
 801351e:	f7fd fcce 	bl	8010ebe <st_word>
					fs->wflag = 1;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2201      	movs	r2, #1
 8013526:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	4618      	mov	r0, r3
 801352c:	f7fd ff9c 	bl	8011468 <sync_fs>
 8013530:	4603      	mov	r3, r0
 8013532:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	7d1b      	ldrb	r3, [r3, #20]
 8013538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801353c:	b2da      	uxtb	r2, r3
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	7dfa      	ldrb	r2, [r7, #23]
 8013546:	4611      	mov	r1, r2
 8013548:	4618      	mov	r0, r3
 801354a:	f7fd fd93 	bl	8011074 <unlock_fs>
 801354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013550:	4618      	mov	r0, r3
 8013552:	3718      	adds	r7, #24
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}

08013558 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b084      	sub	sp, #16
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f7ff ff70 	bl	8013446 <f_sync>
 8013566:	4603      	mov	r3, r0
 8013568:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801356a:	7bfb      	ldrb	r3, [r7, #15]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d11d      	bne.n	80135ac <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f107 0208 	add.w	r2, r7, #8
 8013576:	4611      	mov	r1, r2
 8013578:	4618      	mov	r0, r3
 801357a:	f7ff f9e1 	bl	8012940 <validate>
 801357e:	4603      	mov	r3, r0
 8013580:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013582:	7bfb      	ldrb	r3, [r7, #15]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d111      	bne.n	80135ac <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	4618      	mov	r0, r3
 801358e:	f7fd fe99 	bl	80112c4 <dec_lock>
 8013592:	4603      	mov	r3, r0
 8013594:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013596:	7bfb      	ldrb	r3, [r7, #15]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d102      	bne.n	80135a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	2100      	movs	r1, #0
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fd fd64 	bl	8011074 <unlock_fs>
#endif
		}
	}
	return res;
 80135ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3710      	adds	r7, #16
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b090      	sub	sp, #64	; 0x40
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
 80135be:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f107 0208 	add.w	r2, r7, #8
 80135c6:	4611      	mov	r1, r2
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7ff f9b9 	bl	8012940 <validate>
 80135ce:	4603      	mov	r3, r0
 80135d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80135d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d103      	bne.n	80135e4 <f_lseek+0x2e>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	7d5b      	ldrb	r3, [r3, #21]
 80135e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80135e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d009      	beq.n	8013600 <f_lseek+0x4a>
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80135f2:	4611      	mov	r1, r2
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fd fd3d 	bl	8011074 <unlock_fs>
 80135fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135fe:	e229      	b.n	8013a54 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 80ea 	beq.w	80137de <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013610:	d164      	bne.n	80136dc <f_lseek+0x126>
			tbl = fp->cltbl;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	1d1a      	adds	r2, r3, #4
 801361c:	627a      	str	r2, [r7, #36]	; 0x24
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	617b      	str	r3, [r7, #20]
 8013622:	2302      	movs	r3, #2
 8013624:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362e:	2b00      	cmp	r3, #0
 8013630:	d044      	beq.n	80136bc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013634:	613b      	str	r3, [r7, #16]
 8013636:	2300      	movs	r3, #0
 8013638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	3302      	adds	r3, #2
 801363e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013646:	3301      	adds	r3, #1
 8013648:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801364e:	4618      	mov	r0, r3
 8013650:	f7fd ff97 	bl	8011582 <get_fat>
 8013654:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013658:	2b01      	cmp	r3, #1
 801365a:	d809      	bhi.n	8013670 <f_lseek+0xba>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2202      	movs	r2, #2
 8013660:	755a      	strb	r2, [r3, #21]
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	2102      	movs	r1, #2
 8013666:	4618      	mov	r0, r3
 8013668:	f7fd fd04 	bl	8011074 <unlock_fs>
 801366c:	2302      	movs	r3, #2
 801366e:	e1f1      	b.n	8013a54 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013676:	d109      	bne.n	801368c <f_lseek+0xd6>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2201      	movs	r2, #1
 801367c:	755a      	strb	r2, [r3, #21]
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	2101      	movs	r1, #1
 8013682:	4618      	mov	r0, r3
 8013684:	f7fd fcf6 	bl	8011074 <unlock_fs>
 8013688:	2301      	movs	r3, #1
 801368a:	e1e3      	b.n	8013a54 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	3301      	adds	r3, #1
 8013690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013692:	429a      	cmp	r2, r3
 8013694:	d0d4      	beq.n	8013640 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	429a      	cmp	r2, r3
 801369c:	d809      	bhi.n	80136b2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a0:	1d1a      	adds	r2, r3, #4
 80136a2:	627a      	str	r2, [r7, #36]	; 0x24
 80136a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136a6:	601a      	str	r2, [r3, #0]
 80136a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136aa:	1d1a      	adds	r2, r3, #4
 80136ac:	627a      	str	r2, [r7, #36]	; 0x24
 80136ae:	693a      	ldr	r2, [r7, #16]
 80136b0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	699b      	ldr	r3, [r3, #24]
 80136b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d3ba      	bcc.n	8013632 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136c2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80136c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d803      	bhi.n	80136d4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80136cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ce:	2200      	movs	r2, #0
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	e1b6      	b.n	8013a42 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80136d4:	2311      	movs	r3, #17
 80136d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80136da:	e1b2      	b.n	8013a42 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	683a      	ldr	r2, [r7, #0]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d902      	bls.n	80136ec <f_lseek+0x136>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	683a      	ldr	r2, [r7, #0]
 80136f0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f000 81a4 	beq.w	8013a42 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	4619      	mov	r1, r3
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7fe f9cd 	bl	8011aa0 <clmt_clust>
 8013706:	4602      	mov	r2, r0
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801370c:	68ba      	ldr	r2, [r7, #8]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	69db      	ldr	r3, [r3, #28]
 8013712:	4619      	mov	r1, r3
 8013714:	4610      	mov	r0, r2
 8013716:	f7fd ff15 	bl	8011544 <clust2sect>
 801371a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d109      	bne.n	8013736 <f_lseek+0x180>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2202      	movs	r2, #2
 8013726:	755a      	strb	r2, [r3, #21]
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	2102      	movs	r1, #2
 801372c:	4618      	mov	r0, r3
 801372e:	f7fd fca1 	bl	8011074 <unlock_fs>
 8013732:	2302      	movs	r3, #2
 8013734:	e18e      	b.n	8013a54 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	3b01      	subs	r3, #1
 801373a:	0a5b      	lsrs	r3, r3, #9
 801373c:	68ba      	ldr	r2, [r7, #8]
 801373e:	8952      	ldrh	r2, [r2, #10]
 8013740:	3a01      	subs	r2, #1
 8013742:	4013      	ands	r3, r2
 8013744:	69ba      	ldr	r2, [r7, #24]
 8013746:	4413      	add	r3, r2
 8013748:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	699b      	ldr	r3, [r3, #24]
 801374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 8175 	beq.w	8013a42 <f_lseek+0x48c>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6a1b      	ldr	r3, [r3, #32]
 801375c:	69ba      	ldr	r2, [r7, #24]
 801375e:	429a      	cmp	r2, r3
 8013760:	f000 816f 	beq.w	8013a42 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	7d1b      	ldrb	r3, [r3, #20]
 8013768:	b25b      	sxtb	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	da1d      	bge.n	80137aa <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	7858      	ldrb	r0, [r3, #1]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6a1a      	ldr	r2, [r3, #32]
 801377c:	2301      	movs	r3, #1
 801377e:	f7fd fb25 	bl	8010dcc <disk_write>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	d009      	beq.n	801379c <f_lseek+0x1e6>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2201      	movs	r2, #1
 801378c:	755a      	strb	r2, [r3, #21]
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	2101      	movs	r1, #1
 8013792:	4618      	mov	r0, r3
 8013794:	f7fd fc6e 	bl	8011074 <unlock_fs>
 8013798:	2301      	movs	r3, #1
 801379a:	e15b      	b.n	8013a54 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	7d1b      	ldrb	r3, [r3, #20]
 80137a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	7858      	ldrb	r0, [r3, #1]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137b4:	2301      	movs	r3, #1
 80137b6:	69ba      	ldr	r2, [r7, #24]
 80137b8:	f7fd fae8 	bl	8010d8c <disk_read>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d009      	beq.n	80137d6 <f_lseek+0x220>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2201      	movs	r2, #1
 80137c6:	755a      	strb	r2, [r3, #21]
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	2101      	movs	r1, #1
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fd fc51 	bl	8011074 <unlock_fs>
 80137d2:	2301      	movs	r3, #1
 80137d4:	e13e      	b.n	8013a54 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	621a      	str	r2, [r3, #32]
 80137dc:	e131      	b.n	8013a42 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d908      	bls.n	80137fa <f_lseek+0x244>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	7d1b      	ldrb	r3, [r3, #20]
 80137ec:	f003 0302 	and.w	r3, r3, #2
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d102      	bne.n	80137fa <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	699b      	ldr	r3, [r3, #24]
 80137fe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	637b      	str	r3, [r7, #52]	; 0x34
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013808:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	f000 80c0 	beq.w	8013992 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	895b      	ldrh	r3, [r3, #10]
 8013816:	025b      	lsls	r3, r3, #9
 8013818:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d01b      	beq.n	8013858 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	1e5a      	subs	r2, r3, #1
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	fbb2 f2f3 	udiv	r2, r2, r3
 801382a:	6a3b      	ldr	r3, [r7, #32]
 801382c:	1e59      	subs	r1, r3, #1
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013834:	429a      	cmp	r2, r3
 8013836:	d30f      	bcc.n	8013858 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013838:	6a3b      	ldr	r3, [r7, #32]
 801383a:	1e5a      	subs	r2, r3, #1
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	425b      	negs	r3, r3
 8013840:	401a      	ands	r2, r3
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	699b      	ldr	r3, [r3, #24]
 801384a:	683a      	ldr	r2, [r7, #0]
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	69db      	ldr	r3, [r3, #28]
 8013854:	63bb      	str	r3, [r7, #56]	; 0x38
 8013856:	e02c      	b.n	80138b2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	689b      	ldr	r3, [r3, #8]
 801385c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013860:	2b00      	cmp	r3, #0
 8013862:	d123      	bne.n	80138ac <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2100      	movs	r1, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f7fe f881 	bl	8011970 <create_chain>
 801386e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013872:	2b01      	cmp	r3, #1
 8013874:	d109      	bne.n	801388a <f_lseek+0x2d4>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2202      	movs	r2, #2
 801387a:	755a      	strb	r2, [r3, #21]
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	2102      	movs	r1, #2
 8013880:	4618      	mov	r0, r3
 8013882:	f7fd fbf7 	bl	8011074 <unlock_fs>
 8013886:	2302      	movs	r3, #2
 8013888:	e0e4      	b.n	8013a54 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013890:	d109      	bne.n	80138a6 <f_lseek+0x2f0>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2201      	movs	r2, #1
 8013896:	755a      	strb	r2, [r3, #21]
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	2101      	movs	r1, #1
 801389c:	4618      	mov	r0, r3
 801389e:	f7fd fbe9 	bl	8011074 <unlock_fs>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e0d6      	b.n	8013a54 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138aa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138b0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80138b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d06c      	beq.n	8013992 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80138b8:	e044      	b.n	8013944 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80138ba:	683a      	ldr	r2, [r7, #0]
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	1ad3      	subs	r3, r2, r3
 80138c0:	603b      	str	r3, [r7, #0]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	699a      	ldr	r2, [r3, #24]
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	441a      	add	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	7d1b      	ldrb	r3, [r3, #20]
 80138d2:	f003 0302 	and.w	r3, r3, #2
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d00b      	beq.n	80138f2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fe f846 	bl	8011970 <create_chain>
 80138e4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80138e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d108      	bne.n	80138fe <f_lseek+0x348>
							ofs = 0; break;
 80138ec:	2300      	movs	r3, #0
 80138ee:	603b      	str	r3, [r7, #0]
 80138f0:	e02c      	b.n	801394c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fd fe43 	bl	8011582 <get_fat>
 80138fc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013904:	d109      	bne.n	801391a <f_lseek+0x364>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2201      	movs	r2, #1
 801390a:	755a      	strb	r2, [r3, #21]
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2101      	movs	r1, #1
 8013910:	4618      	mov	r0, r3
 8013912:	f7fd fbaf 	bl	8011074 <unlock_fs>
 8013916:	2301      	movs	r3, #1
 8013918:	e09c      	b.n	8013a54 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391c:	2b01      	cmp	r3, #1
 801391e:	d904      	bls.n	801392a <f_lseek+0x374>
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	699b      	ldr	r3, [r3, #24]
 8013924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013926:	429a      	cmp	r2, r3
 8013928:	d309      	bcc.n	801393e <f_lseek+0x388>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2202      	movs	r2, #2
 801392e:	755a      	strb	r2, [r3, #21]
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	2102      	movs	r1, #2
 8013934:	4618      	mov	r0, r3
 8013936:	f7fd fb9d 	bl	8011074 <unlock_fs>
 801393a:	2302      	movs	r3, #2
 801393c:	e08a      	b.n	8013a54 <f_lseek+0x49e>
					fp->clust = clst;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013942:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013944:	683a      	ldr	r2, [r7, #0]
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	429a      	cmp	r2, r3
 801394a:	d8b6      	bhi.n	80138ba <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	699a      	ldr	r2, [r3, #24]
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	441a      	add	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801395e:	2b00      	cmp	r3, #0
 8013960:	d017      	beq.n	8013992 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013966:	4618      	mov	r0, r3
 8013968:	f7fd fdec 	bl	8011544 <clust2sect>
 801396c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013970:	2b00      	cmp	r3, #0
 8013972:	d109      	bne.n	8013988 <f_lseek+0x3d2>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2202      	movs	r2, #2
 8013978:	755a      	strb	r2, [r3, #21]
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2102      	movs	r1, #2
 801397e:	4618      	mov	r0, r3
 8013980:	f7fd fb78 	bl	8011074 <unlock_fs>
 8013984:	2302      	movs	r3, #2
 8013986:	e065      	b.n	8013a54 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	0a5b      	lsrs	r3, r3, #9
 801398c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801398e:	4413      	add	r3, r2
 8013990:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	699a      	ldr	r2, [r3, #24]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	429a      	cmp	r2, r3
 801399c:	d90a      	bls.n	80139b4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	699a      	ldr	r2, [r3, #24]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	7d1b      	ldrb	r3, [r3, #20]
 80139aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ae:	b2da      	uxtb	r2, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	699b      	ldr	r3, [r3, #24]
 80139b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d040      	beq.n	8013a42 <f_lseek+0x48c>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	6a1b      	ldr	r3, [r3, #32]
 80139c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d03b      	beq.n	8013a42 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	7d1b      	ldrb	r3, [r3, #20]
 80139ce:	b25b      	sxtb	r3, r3
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	da1d      	bge.n	8013a10 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	7858      	ldrb	r0, [r3, #1]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a1a      	ldr	r2, [r3, #32]
 80139e2:	2301      	movs	r3, #1
 80139e4:	f7fd f9f2 	bl	8010dcc <disk_write>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d009      	beq.n	8013a02 <f_lseek+0x44c>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2201      	movs	r2, #1
 80139f2:	755a      	strb	r2, [r3, #21]
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	2101      	movs	r1, #1
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fd fb3b 	bl	8011074 <unlock_fs>
 80139fe:	2301      	movs	r3, #1
 8013a00:	e028      	b.n	8013a54 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	7d1b      	ldrb	r3, [r3, #20]
 8013a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	7858      	ldrb	r0, [r3, #1]
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a1e:	f7fd f9b5 	bl	8010d8c <disk_read>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d009      	beq.n	8013a3c <f_lseek+0x486>
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	755a      	strb	r2, [r3, #21]
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	2101      	movs	r1, #1
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fd fb1e 	bl	8011074 <unlock_fs>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e00b      	b.n	8013a54 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a40:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7fd fb12 	bl	8011074 <unlock_fs>
 8013a50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3740      	adds	r7, #64	; 0x40
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b086      	sub	sp, #24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d101      	bne.n	8013a70 <f_opendir+0x14>
 8013a6c:	2309      	movs	r3, #9
 8013a6e:	e06a      	b.n	8013b46 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013a74:	f107 010c 	add.w	r1, r7, #12
 8013a78:	463b      	mov	r3, r7
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fe fd0b 	bl	8012498 <find_volume>
 8013a82:	4603      	mov	r3, r0
 8013a84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013a86:	7dfb      	ldrb	r3, [r7, #23]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d14f      	bne.n	8013b2c <f_opendir+0xd0>
		obj->fs = fs;
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	4619      	mov	r1, r3
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7fe fbf2 	bl	8012280 <follow_path>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013aa0:	7dfb      	ldrb	r3, [r7, #23]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d13d      	bne.n	8013b22 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013aac:	b25b      	sxtb	r3, r3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	db12      	blt.n	8013ad8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	799b      	ldrb	r3, [r3, #6]
 8013ab6:	f003 0310 	and.w	r3, r3, #16
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00a      	beq.n	8013ad4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013abe:	68fa      	ldr	r2, [r7, #12]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6a1b      	ldr	r3, [r3, #32]
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	4610      	mov	r0, r2
 8013ac8:	f7fe f9a5 	bl	8011e16 <ld_clust>
 8013acc:	4602      	mov	r2, r0
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	609a      	str	r2, [r3, #8]
 8013ad2:	e001      	b.n	8013ad8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013ad4:	2305      	movs	r3, #5
 8013ad6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013ad8:	7dfb      	ldrb	r3, [r7, #23]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d121      	bne.n	8013b22 <f_opendir+0xc6>
				obj->id = fs->id;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	88da      	ldrh	r2, [r3, #6]
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013ae6:	2100      	movs	r1, #0
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f7fe f80d 	bl	8011b08 <dir_sdi>
 8013aee:	4603      	mov	r3, r0
 8013af0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013af2:	7dfb      	ldrb	r3, [r7, #23]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d114      	bne.n	8013b22 <f_opendir+0xc6>
					if (obj->sclust) {
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	689b      	ldr	r3, [r3, #8]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d00d      	beq.n	8013b1c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013b00:	2100      	movs	r1, #0
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7fd fb50 	bl	80111a8 <inc_lock>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	691b      	ldr	r3, [r3, #16]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d105      	bne.n	8013b22 <f_opendir+0xc6>
 8013b16:	2312      	movs	r3, #18
 8013b18:	75fb      	strb	r3, [r7, #23]
 8013b1a:	e002      	b.n	8013b22 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013b22:	7dfb      	ldrb	r3, [r7, #23]
 8013b24:	2b04      	cmp	r3, #4
 8013b26:	d101      	bne.n	8013b2c <f_opendir+0xd0>
 8013b28:	2305      	movs	r3, #5
 8013b2a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013b2c:	7dfb      	ldrb	r3, [r7, #23]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <f_opendir+0xdc>
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	2200      	movs	r2, #0
 8013b36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	7dfa      	ldrb	r2, [r7, #23]
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fd fa98 	bl	8011074 <unlock_fs>
 8013b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3718      	adds	r7, #24
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}

08013b4e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b084      	sub	sp, #16
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f107 0208 	add.w	r2, r7, #8
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7fe feee 	bl	8012940 <validate>
 8013b64:	4603      	mov	r3, r0
 8013b66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013b68:	7bfb      	ldrb	r3, [r7, #15]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d115      	bne.n	8013b9a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	691b      	ldr	r3, [r3, #16]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d006      	beq.n	8013b84 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fd fba2 	bl	80112c4 <dec_lock>
 8013b80:	4603      	mov	r3, r0
 8013b82:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013b84:	7bfb      	ldrb	r3, [r7, #15]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d102      	bne.n	8013b90 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	2100      	movs	r1, #0
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fd fa6d 	bl	8011074 <unlock_fs>
#endif
	}
	return res;
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f107 0208 	add.w	r2, r7, #8
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fe fec2 	bl	8012940 <validate>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013bc0:	7bfb      	ldrb	r3, [r7, #15]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d126      	bne.n	8013c14 <f_readdir+0x70>
		if (!fno) {
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d106      	bne.n	8013bda <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013bcc:	2100      	movs	r1, #0
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f7fd ff9a 	bl	8011b08 <dir_sdi>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	73fb      	strb	r3, [r7, #15]
 8013bd8:	e01c      	b.n	8013c14 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013bda:	2100      	movs	r1, #0
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7fe f959 	bl	8011e94 <dir_read>
 8013be2:	4603      	mov	r3, r0
 8013be4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013be6:	7bfb      	ldrb	r3, [r7, #15]
 8013be8:	2b04      	cmp	r3, #4
 8013bea:	d101      	bne.n	8013bf0 <f_readdir+0x4c>
 8013bec:	2300      	movs	r3, #0
 8013bee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013bf0:	7bfb      	ldrb	r3, [r7, #15]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d10e      	bne.n	8013c14 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013bf6:	6839      	ldr	r1, [r7, #0]
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7fe fa4d 	bl	8012098 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013bfe:	2100      	movs	r1, #0
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f7fd fffc 	bl	8011bfe <dir_next>
 8013c06:	4603      	mov	r3, r0
 8013c08:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013c0a:	7bfb      	ldrb	r3, [r7, #15]
 8013c0c:	2b04      	cmp	r3, #4
 8013c0e:	d101      	bne.n	8013c14 <f_readdir+0x70>
 8013c10:	2300      	movs	r3, #0
 8013c12:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	7bfa      	ldrb	r2, [r7, #15]
 8013c18:	4611      	mov	r1, r2
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fd fa2a 	bl	8011074 <unlock_fs>
 8013c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b090      	sub	sp, #64	; 0x40
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013c34:	f107 010c 	add.w	r1, r7, #12
 8013c38:	1d3b      	adds	r3, r7, #4
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fe fc2b 	bl	8012498 <find_volume>
 8013c42:	4603      	mov	r3, r0
 8013c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013c48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d11f      	bne.n	8013c90 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	f107 030c 	add.w	r3, r7, #12
 8013c56:	4611      	mov	r1, r2
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fe fb11 	bl	8012280 <follow_path>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8013c64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d111      	bne.n	8013c90 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8013c6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c70:	b25b      	sxtb	r3, r3
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	da03      	bge.n	8013c7e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8013c76:	2306      	movs	r3, #6
 8013c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013c7c:	e008      	b.n	8013c90 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d005      	beq.n	8013c90 <f_stat+0x66>
 8013c84:	f107 030c 	add.w	r3, r7, #12
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fe fa04 	bl	8012098 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013c96:	4611      	mov	r1, r2
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7fd f9eb 	bl	8011074 <unlock_fs>
 8013c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3740      	adds	r7, #64	; 0x40
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b09e      	sub	sp, #120	; 0x78
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013cb6:	f107 010c 	add.w	r1, r7, #12
 8013cba:	1d3b      	adds	r3, r7, #4
 8013cbc:	2202      	movs	r2, #2
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe fbea 	bl	8012498 <find_volume>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013cce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f040 808e 	bne.w	8013df4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cde:	4611      	mov	r1, r2
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7fe facd 	bl	8012280 <follow_path>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013cec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d108      	bne.n	8013d06 <f_unlink+0x5c>
 8013cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cf8:	2102      	movs	r1, #2
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fd f9d6 	bl	80110ac <chk_lock>
 8013d00:	4603      	mov	r3, r0
 8013d02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013d06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d172      	bne.n	8013df4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013d12:	b25b      	sxtb	r3, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	da03      	bge.n	8013d20 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013d18:	2306      	movs	r3, #6
 8013d1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013d1e:	e008      	b.n	8013d32 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013d20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d24:	f003 0301 	and.w	r3, r3, #1
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d002      	beq.n	8013d32 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013d2c:	2307      	movs	r3, #7
 8013d2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013d32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d134      	bne.n	8013da4 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fe f868 	bl	8011e16 <ld_clust>
 8013d46:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013d48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d4c:	f003 0310 	and.w	r3, r3, #16
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d027      	beq.n	8013da4 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d5a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013d5c:	f107 0310 	add.w	r3, r7, #16
 8013d60:	2100      	movs	r1, #0
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fd fed0 	bl	8011b08 <dir_sdi>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d116      	bne.n	8013da4 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013d76:	f107 0310 	add.w	r3, r7, #16
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fe f889 	bl	8011e94 <dir_read>
 8013d82:	4603      	mov	r3, r0
 8013d84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013d88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d102      	bne.n	8013d96 <f_unlink+0xec>
 8013d90:	2307      	movs	r3, #7
 8013d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d9a:	2b04      	cmp	r3, #4
 8013d9c:	d102      	bne.n	8013da4 <f_unlink+0xfa>
 8013d9e:	2300      	movs	r3, #0
 8013da0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013da4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d123      	bne.n	8013df4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013dac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe f953 	bl	801205c <dir_remove>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013dbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d10c      	bne.n	8013dde <f_unlink+0x134>
 8013dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d009      	beq.n	8013dde <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013dce:	2200      	movs	r2, #0
 8013dd0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fd fd67 	bl	80118a6 <remove_chain>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013dde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <f_unlink+0x14a>
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fd fb3d 	bl	8011468 <sync_fs>
 8013dee:	4603      	mov	r3, r0
 8013df0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fd f939 	bl	8011074 <unlock_fs>
 8013e02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3778      	adds	r7, #120	; 0x78
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}

08013e0e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013e0e:	b580      	push	{r7, lr}
 8013e10:	b096      	sub	sp, #88	; 0x58
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e16:	f107 0108 	add.w	r1, r7, #8
 8013e1a:	1d3b      	adds	r3, r7, #4
 8013e1c:	2202      	movs	r2, #2
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe fb3a 	bl	8012498 <find_volume>
 8013e24:	4603      	mov	r3, r0
 8013e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	f040 80ec 	bne.w	8014010 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	f107 030c 	add.w	r3, r7, #12
 8013e3e:	4611      	mov	r1, r2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fe fa1d 	bl	8012280 <follow_path>
 8013e46:	4603      	mov	r3, r0
 8013e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d102      	bne.n	8013e5a <f_mkdir+0x4c>
 8013e54:	2308      	movs	r3, #8
 8013e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e5e:	2b04      	cmp	r3, #4
 8013e60:	f040 80d6 	bne.w	8014010 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013e64:	f107 030c 	add.w	r3, r7, #12
 8013e68:	2100      	movs	r1, #0
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fd fd80 	bl	8011970 <create_chain>
 8013e70:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	895b      	ldrh	r3, [r3, #10]
 8013e76:	025b      	lsls	r3, r3, #9
 8013e78:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d102      	bne.n	8013e8c <f_mkdir+0x7e>
 8013e86:	2307      	movs	r3, #7
 8013e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d102      	bne.n	8013e98 <f_mkdir+0x8a>
 8013e92:	2302      	movs	r3, #2
 8013e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9e:	d102      	bne.n	8013ea6 <f_mkdir+0x98>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <f_mkdir+0xae>
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fd fa67 	bl	8011384 <sync_window>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013ebc:	f7f9 fa0e 	bl	800d2dc <get_fattime>
 8013ec0:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013ec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d16a      	bne.n	8013fa0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fd fb38 	bl	8011544 <clust2sect>
 8013ed4:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	3334      	adds	r3, #52	; 0x34
 8013eda:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ee4:	f7fd f853 	bl	8010f8e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013ee8:	220b      	movs	r2, #11
 8013eea:	2120      	movs	r1, #32
 8013eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013eee:	f7fd f84e 	bl	8010f8e <mem_set>
					dir[DIR_Name] = '.';
 8013ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ef4:	222e      	movs	r2, #46	; 0x2e
 8013ef6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013efa:	330b      	adds	r3, #11
 8013efc:	2210      	movs	r2, #16
 8013efe:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f02:	3316      	adds	r3, #22
 8013f04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fc fff4 	bl	8010ef4 <st_dword>
					st_clust(fs, dir, dcl);
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fd ff9e 	bl	8011e54 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f1a:	3320      	adds	r3, #32
 8013f1c:	2220      	movs	r2, #32
 8013f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd f813 	bl	8010f4c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f28:	3321      	adds	r3, #33	; 0x21
 8013f2a:	222e      	movs	r2, #46	; 0x2e
 8013f2c:	701a      	strb	r2, [r3, #0]
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	2b03      	cmp	r3, #3
 8013f38:	d106      	bne.n	8013f48 <f_mkdir+0x13a>
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d101      	bne.n	8013f48 <f_mkdir+0x13a>
 8013f44:	2300      	movs	r3, #0
 8013f46:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013f48:	68b8      	ldr	r0, [r7, #8]
 8013f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f4c:	3320      	adds	r3, #32
 8013f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f50:	4619      	mov	r1, r3
 8013f52:	f7fd ff7f 	bl	8011e54 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	895b      	ldrh	r3, [r3, #10]
 8013f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8013f5c:	e01b      	b.n	8013f96 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013f64:	68ba      	ldr	r2, [r7, #8]
 8013f66:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fd fa07 	bl	8011384 <sync_window>
 8013f76:	4603      	mov	r3, r0
 8013f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d10c      	bne.n	8013f9e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f88:	2100      	movs	r1, #0
 8013f8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f8c:	f7fc ffff 	bl	8010f8e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f92:	3b01      	subs	r3, #1
 8013f94:	653b      	str	r3, [r7, #80]	; 0x50
 8013f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d1e0      	bne.n	8013f5e <f_mkdir+0x150>
 8013f9c:	e000      	b.n	8013fa0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013f9e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d107      	bne.n	8013fb8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013fa8:	f107 030c 	add.w	r3, r7, #12
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fe f823 	bl	8011ff8 <dir_register>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d120      	bne.n	8014002 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fc6:	3316      	adds	r3, #22
 8013fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fc ff92 	bl	8010ef4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fd ff3c 	bl	8011e54 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fde:	330b      	adds	r3, #11
 8013fe0:	2210      	movs	r2, #16
 8013fe2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013fea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d10e      	bne.n	8014010 <f_mkdir+0x202>
					res = sync_fs(fs);
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fd fa37 	bl	8011468 <sync_fs>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014000:	e006      	b.n	8014010 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014002:	f107 030c 	add.w	r3, r7, #12
 8014006:	2200      	movs	r2, #0
 8014008:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801400a:	4618      	mov	r0, r3
 801400c:	f7fd fc4b 	bl	80118a6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014016:	4611      	mov	r1, r2
 8014018:	4618      	mov	r0, r3
 801401a:	f7fd f82b 	bl	8011074 <unlock_fs>
 801401e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014022:	4618      	mov	r0, r3
 8014024:	3758      	adds	r7, #88	; 0x58
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b088      	sub	sp, #32
 801402e:	af00      	add	r7, sp, #0
 8014030:	60f8      	str	r0, [r7, #12]
 8014032:	60b9      	str	r1, [r7, #8]
 8014034:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801403e:	e01b      	b.n	8014078 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014040:	f107 0310 	add.w	r3, r7, #16
 8014044:	f107 0114 	add.w	r1, r7, #20
 8014048:	2201      	movs	r2, #1
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f7fe fee9 	bl	8012e22 <f_read>
		if (rc != 1) break;
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	2b01      	cmp	r3, #1
 8014054:	d116      	bne.n	8014084 <f_gets+0x5a>
		c = s[0];
 8014056:	7d3b      	ldrb	r3, [r7, #20]
 8014058:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 801405a:	7dfb      	ldrb	r3, [r7, #23]
 801405c:	2b0d      	cmp	r3, #13
 801405e:	d100      	bne.n	8014062 <f_gets+0x38>
 8014060:	e00a      	b.n	8014078 <f_gets+0x4e>
		*p++ = c;
 8014062:	69bb      	ldr	r3, [r7, #24]
 8014064:	1c5a      	adds	r2, r3, #1
 8014066:	61ba      	str	r2, [r7, #24]
 8014068:	7dfa      	ldrb	r2, [r7, #23]
 801406a:	701a      	strb	r2, [r3, #0]
		n++;
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	3301      	adds	r3, #1
 8014070:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014072:	7dfb      	ldrb	r3, [r7, #23]
 8014074:	2b0a      	cmp	r3, #10
 8014076:	d007      	beq.n	8014088 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	3b01      	subs	r3, #1
 801407c:	69fa      	ldr	r2, [r7, #28]
 801407e:	429a      	cmp	r2, r3
 8014080:	dbde      	blt.n	8014040 <f_gets+0x16>
 8014082:	e002      	b.n	801408a <f_gets+0x60>
		if (rc != 1) break;
 8014084:	bf00      	nop
 8014086:	e000      	b.n	801408a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8014088:	bf00      	nop
	}
	*p = 0;
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	2200      	movs	r2, #0
 801408e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014090:	69fb      	ldr	r3, [r7, #28]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d001      	beq.n	801409a <f_gets+0x70>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	e000      	b.n	801409c <f_gets+0x72>
 801409a:	2300      	movs	r3, #0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3720      	adds	r7, #32
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	460b      	mov	r3, r1
 80140ae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80140b0:	78fb      	ldrb	r3, [r7, #3]
 80140b2:	2b0a      	cmp	r3, #10
 80140b4:	d103      	bne.n	80140be <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80140b6:	210d      	movs	r1, #13
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7ff fff3 	bl	80140a4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	db25      	blt.n	8014116 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	1c5a      	adds	r2, r3, #1
 80140ce:	60fa      	str	r2, [r7, #12]
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	4413      	add	r3, r2
 80140d4:	78fa      	ldrb	r2, [r7, #3]
 80140d6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2b3c      	cmp	r3, #60	; 0x3c
 80140dc:	dd12      	ble.n	8014104 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6818      	ldr	r0, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f103 010c 	add.w	r1, r3, #12
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	f107 0308 	add.w	r3, r7, #8
 80140ee:	f7ff f806 	bl	80130fe <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80140f2:	68ba      	ldr	r2, [r7, #8]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d101      	bne.n	80140fe <putc_bfd+0x5a>
 80140fa:	2300      	movs	r3, #0
 80140fc:	e001      	b.n	8014102 <putc_bfd+0x5e>
 80140fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014102:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	1c5a      	adds	r2, r3, #1
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	609a      	str	r2, [r3, #8]
 8014114:	e000      	b.n	8014118 <putc_bfd+0x74>
	if (i < 0) return;
 8014116:	bf00      	nop
}
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}

0801411e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801411e:	b580      	push	{r7, lr}
 8014120:	b084      	sub	sp, #16
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	db16      	blt.n	801415c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6818      	ldr	r0, [r3, #0]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f103 010c 	add.w	r1, r3, #12
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	461a      	mov	r2, r3
 801413e:	f107 030c 	add.w	r3, r7, #12
 8014142:	f7fe ffdc 	bl	80130fe <f_write>
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d107      	bne.n	801415c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	4293      	cmp	r3, r2
 8014154:	d102      	bne.n	801415c <putc_flush+0x3e>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	e001      	b.n	8014160 <putc_flush+0x42>
	return EOF;
 801415c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014160:	4618      	mov	r0, r3
 8014162:	3710      	adds	r7, #16
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8014168:	b480      	push	{r7}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	683a      	ldr	r2, [r7, #0]
 8014176:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2200      	movs	r2, #0
 801417c:	605a      	str	r2, [r3, #4]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	685a      	ldr	r2, [r3, #4]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	609a      	str	r2, [r3, #8]
}
 8014186:	bf00      	nop
 8014188:	370c      	adds	r7, #12
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr
	...

08014194 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8014194:	b40e      	push	{r1, r2, r3}
 8014196:	b580      	push	{r7, lr}
 8014198:	b0a7      	sub	sp, #156	; 0x9c
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801419e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141a2:	6879      	ldr	r1, [r7, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7ff ffdf 	bl	8014168 <putc_init>

	va_start(arp, fmt);
 80141aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80141ae:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80141b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141b4:	1c5a      	adds	r2, r3, #1
 80141b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80141c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 81f2 	beq.w	80145ae <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80141ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80141ce:	2b25      	cmp	r3, #37	; 0x25
 80141d0:	d008      	beq.n	80141e4 <f_printf+0x50>
			putc_bfd(&pb, c);
 80141d2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80141d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80141da:	4611      	mov	r1, r2
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ff ff61 	bl	80140a4 <putc_bfd>
			continue;
 80141e2:	e1e3      	b.n	80145ac <f_printf+0x418>
		}
		w = f = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80141ea:	2300      	movs	r3, #0
 80141ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80141f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141f4:	1c5a      	adds	r2, r3, #1
 80141f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8014200:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014204:	2b30      	cmp	r3, #48	; 0x30
 8014206:	d10b      	bne.n	8014220 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8014208:	2301      	movs	r3, #1
 801420a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801420e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014212:	1c5a      	adds	r2, r3, #1
 8014214:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801421e:	e024      	b.n	801426a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8014220:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014224:	2b2d      	cmp	r3, #45	; 0x2d
 8014226:	d120      	bne.n	801426a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8014228:	2302      	movs	r3, #2
 801422a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801422e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014232:	1c5a      	adds	r2, r3, #1
 8014234:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801423e:	e014      	b.n	801426a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8014240:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014244:	4613      	mov	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	005b      	lsls	r3, r3, #1
 801424c:	461a      	mov	r2, r3
 801424e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014252:	4413      	add	r3, r2
 8014254:	3b30      	subs	r3, #48	; 0x30
 8014256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801425a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801426a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801426e:	2b2f      	cmp	r3, #47	; 0x2f
 8014270:	d903      	bls.n	801427a <f_printf+0xe6>
 8014272:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014276:	2b39      	cmp	r3, #57	; 0x39
 8014278:	d9e2      	bls.n	8014240 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801427a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801427e:	2b6c      	cmp	r3, #108	; 0x6c
 8014280:	d003      	beq.n	801428a <f_printf+0xf6>
 8014282:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014286:	2b4c      	cmp	r3, #76	; 0x4c
 8014288:	d10d      	bne.n	80142a6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801428a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801428e:	f043 0304 	orr.w	r3, r3, #4
 8014292:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8014296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801429a:	1c5a      	adds	r2, r3, #1
 801429c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80142a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 8181 	beq.w	80145b2 <f_printf+0x41e>
		d = c;
 80142b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80142b4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80142b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80142bc:	2b60      	cmp	r3, #96	; 0x60
 80142be:	d908      	bls.n	80142d2 <f_printf+0x13e>
 80142c0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80142c4:	2b7a      	cmp	r3, #122	; 0x7a
 80142c6:	d804      	bhi.n	80142d2 <f_printf+0x13e>
 80142c8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80142cc:	3b20      	subs	r3, #32
 80142ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80142d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80142d6:	3b42      	subs	r3, #66	; 0x42
 80142d8:	2b16      	cmp	r3, #22
 80142da:	f200 8098 	bhi.w	801440e <f_printf+0x27a>
 80142de:	a201      	add	r2, pc, #4	; (adr r2, 80142e4 <f_printf+0x150>)
 80142e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e4:	080143ef 	.word	0x080143ef
 80142e8:	080143d7 	.word	0x080143d7
 80142ec:	080143ff 	.word	0x080143ff
 80142f0:	0801440f 	.word	0x0801440f
 80142f4:	0801440f 	.word	0x0801440f
 80142f8:	0801440f 	.word	0x0801440f
 80142fc:	0801440f 	.word	0x0801440f
 8014300:	0801440f 	.word	0x0801440f
 8014304:	0801440f 	.word	0x0801440f
 8014308:	0801440f 	.word	0x0801440f
 801430c:	0801440f 	.word	0x0801440f
 8014310:	0801440f 	.word	0x0801440f
 8014314:	0801440f 	.word	0x0801440f
 8014318:	080143f7 	.word	0x080143f7
 801431c:	0801440f 	.word	0x0801440f
 8014320:	0801440f 	.word	0x0801440f
 8014324:	0801440f 	.word	0x0801440f
 8014328:	08014341 	.word	0x08014341
 801432c:	0801440f 	.word	0x0801440f
 8014330:	080143ff 	.word	0x080143ff
 8014334:	0801440f 	.word	0x0801440f
 8014338:	0801440f 	.word	0x0801440f
 801433c:	08014407 	.word	0x08014407
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8014340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014342:	1d1a      	adds	r2, r3, #4
 8014344:	67ba      	str	r2, [r7, #120]	; 0x78
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801434a:	2300      	movs	r3, #0
 801434c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014350:	e004      	b.n	801435c <f_printf+0x1c8>
 8014352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014356:	3301      	adds	r3, #1
 8014358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801435c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801435e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014362:	4413      	add	r3, r2
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1f3      	bne.n	8014352 <f_printf+0x1be>
			if (!(f & 2)) {
 801436a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801436e:	f003 0302 	and.w	r3, r3, #2
 8014372:	2b00      	cmp	r3, #0
 8014374:	d11a      	bne.n	80143ac <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8014376:	e005      	b.n	8014384 <f_printf+0x1f0>
 8014378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801437c:	2120      	movs	r1, #32
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff fe90 	bl	80140a4 <putc_bfd>
 8014384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014388:	1c5a      	adds	r2, r3, #1
 801438a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801438e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014392:	429a      	cmp	r2, r3
 8014394:	d8f0      	bhi.n	8014378 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8014396:	e009      	b.n	80143ac <f_printf+0x218>
 8014398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801439a:	1c5a      	adds	r2, r3, #1
 801439c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801439e:	781a      	ldrb	r2, [r3, #0]
 80143a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143a4:	4611      	mov	r1, r2
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7ff fe7c 	bl	80140a4 <putc_bfd>
 80143ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d1f1      	bne.n	8014398 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80143b4:	e005      	b.n	80143c2 <f_printf+0x22e>
 80143b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143ba:	2120      	movs	r1, #32
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff fe71 	bl	80140a4 <putc_bfd>
 80143c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80143c6:	1c5a      	adds	r2, r3, #1
 80143c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80143cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d8f0      	bhi.n	80143b6 <f_printf+0x222>
			continue;
 80143d4:	e0ea      	b.n	80145ac <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80143d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143d8:	1d1a      	adds	r2, r3, #4
 80143da:	67ba      	str	r2, [r7, #120]	; 0x78
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143e4:	4611      	mov	r1, r2
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7ff fe5c 	bl	80140a4 <putc_bfd>
 80143ec:	e0de      	b.n	80145ac <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80143ee:	2302      	movs	r3, #2
 80143f0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80143f4:	e014      	b.n	8014420 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80143f6:	2308      	movs	r3, #8
 80143f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80143fc:	e010      	b.n	8014420 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80143fe:	230a      	movs	r3, #10
 8014400:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014404:	e00c      	b.n	8014420 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8014406:	2310      	movs	r3, #16
 8014408:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801440c:	e008      	b.n	8014420 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801440e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8014412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014416:	4611      	mov	r1, r2
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff fe43 	bl	80140a4 <putc_bfd>
 801441e:	e0c5      	b.n	80145ac <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8014420:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014424:	f003 0304 	and.w	r3, r3, #4
 8014428:	2b00      	cmp	r3, #0
 801442a:	d004      	beq.n	8014436 <f_printf+0x2a2>
 801442c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801442e:	1d1a      	adds	r2, r3, #4
 8014430:	67ba      	str	r2, [r7, #120]	; 0x78
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	e00c      	b.n	8014450 <f_printf+0x2bc>
 8014436:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801443a:	2b44      	cmp	r3, #68	; 0x44
 801443c:	d104      	bne.n	8014448 <f_printf+0x2b4>
 801443e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014440:	1d1a      	adds	r2, r3, #4
 8014442:	67ba      	str	r2, [r7, #120]	; 0x78
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	e003      	b.n	8014450 <f_printf+0x2bc>
 8014448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801444a:	1d1a      	adds	r2, r3, #4
 801444c:	67ba      	str	r2, [r7, #120]	; 0x78
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8014454:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014458:	2b44      	cmp	r3, #68	; 0x44
 801445a:	d10e      	bne.n	801447a <f_printf+0x2e6>
 801445c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014460:	2b00      	cmp	r3, #0
 8014462:	da0a      	bge.n	801447a <f_printf+0x2e6>
			v = 0 - v;
 8014464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014468:	425b      	negs	r3, r3
 801446a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801446e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014472:	f043 0308 	orr.w	r3, r3, #8
 8014476:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801447a:	2300      	movs	r3, #0
 801447c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8014480:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8014484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014488:	fbb3 f1f2 	udiv	r1, r3, r2
 801448c:	fb01 f202 	mul.w	r2, r1, r2
 8014490:	1a9b      	subs	r3, r3, r2
 8014492:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8014496:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801449a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80144a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80144a6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80144aa:	2b09      	cmp	r3, #9
 80144ac:	d90b      	bls.n	80144c6 <f_printf+0x332>
 80144ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80144b2:	2b78      	cmp	r3, #120	; 0x78
 80144b4:	d101      	bne.n	80144ba <f_printf+0x326>
 80144b6:	2227      	movs	r2, #39	; 0x27
 80144b8:	e000      	b.n	80144bc <f_printf+0x328>
 80144ba:	2207      	movs	r2, #7
 80144bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80144c0:	4413      	add	r3, r2
 80144c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80144c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80144ca:	1c5a      	adds	r2, r3, #1
 80144cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80144d0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80144d4:	3230      	adds	r2, #48	; 0x30
 80144d6:	b2d2      	uxtb	r2, r2
 80144d8:	3398      	adds	r3, #152	; 0x98
 80144da:	443b      	add	r3, r7
 80144dc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80144e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d003      	beq.n	80144f0 <f_printf+0x35c>
 80144e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80144ec:	2b1f      	cmp	r3, #31
 80144ee:	d9c7      	bls.n	8014480 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80144f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80144f4:	f003 0308 	and.w	r3, r3, #8
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d009      	beq.n	8014510 <f_printf+0x37c>
 80144fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014500:	1c5a      	adds	r2, r3, #1
 8014502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014506:	3398      	adds	r3, #152	; 0x98
 8014508:	443b      	add	r3, r7
 801450a:	222d      	movs	r2, #45	; 0x2d
 801450c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014518:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801451c:	f003 0301 	and.w	r3, r3, #1
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <f_printf+0x394>
 8014524:	2330      	movs	r3, #48	; 0x30
 8014526:	e000      	b.n	801452a <f_printf+0x396>
 8014528:	2320      	movs	r3, #32
 801452a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801452e:	e007      	b.n	8014540 <f_printf+0x3ac>
 8014530:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014538:	4611      	mov	r1, r2
 801453a:	4618      	mov	r0, r3
 801453c:	f7ff fdb2 	bl	80140a4 <putc_bfd>
 8014540:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014544:	f003 0302 	and.w	r3, r3, #2
 8014548:	2b00      	cmp	r3, #0
 801454a:	d108      	bne.n	801455e <f_printf+0x3ca>
 801454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014550:	1c5a      	adds	r2, r3, #1
 8014552:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014556:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801455a:	429a      	cmp	r2, r3
 801455c:	d8e8      	bhi.n	8014530 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801455e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014562:	3b01      	subs	r3, #1
 8014564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014568:	f107 020c 	add.w	r2, r7, #12
 801456c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014570:	4413      	add	r3, r2
 8014572:	781a      	ldrb	r2, [r3, #0]
 8014574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014578:	4611      	mov	r1, r2
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff fd92 	bl	80140a4 <putc_bfd>
		} while (i);
 8014580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014584:	2b00      	cmp	r3, #0
 8014586:	d1ea      	bne.n	801455e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8014588:	e007      	b.n	801459a <f_printf+0x406>
 801458a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801458e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f7ff fd85 	bl	80140a4 <putc_bfd>
 801459a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801459e:	1c5a      	adds	r2, r3, #1
 80145a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80145a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d8ee      	bhi.n	801458a <f_printf+0x3f6>
		c = *fmt++;
 80145ac:	e600      	b.n	80141b0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80145ae:	bf00      	nop
 80145b0:	e000      	b.n	80145b4 <f_printf+0x420>
		if (!c) break;
 80145b2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80145b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7ff fdb0 	bl	801411e <putc_flush>
 80145be:	4603      	mov	r3, r0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	379c      	adds	r7, #156	; 0x9c
 80145c4:	46bd      	mov	sp, r7
 80145c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145ca:	b003      	add	sp, #12
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop

080145d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	4613      	mov	r3, r2
 80145dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80145de:	2301      	movs	r3, #1
 80145e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80145e6:	4b1f      	ldr	r3, [pc, #124]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 80145e8:	7a5b      	ldrb	r3, [r3, #9]
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d131      	bne.n	8014654 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80145f0:	4b1c      	ldr	r3, [pc, #112]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 80145f2:	7a5b      	ldrb	r3, [r3, #9]
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	461a      	mov	r2, r3
 80145f8:	4b1a      	ldr	r3, [pc, #104]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 80145fa:	2100      	movs	r1, #0
 80145fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80145fe:	4b19      	ldr	r3, [pc, #100]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 8014600:	7a5b      	ldrb	r3, [r3, #9]
 8014602:	b2db      	uxtb	r3, r3
 8014604:	4a17      	ldr	r2, [pc, #92]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	68fa      	ldr	r2, [r7, #12]
 801460c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801460e:	4b15      	ldr	r3, [pc, #84]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 8014610:	7a5b      	ldrb	r3, [r3, #9]
 8014612:	b2db      	uxtb	r3, r3
 8014614:	461a      	mov	r2, r3
 8014616:	4b13      	ldr	r3, [pc, #76]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 8014618:	4413      	add	r3, r2
 801461a:	79fa      	ldrb	r2, [r7, #7]
 801461c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801461e:	4b11      	ldr	r3, [pc, #68]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 8014620:	7a5b      	ldrb	r3, [r3, #9]
 8014622:	b2db      	uxtb	r3, r3
 8014624:	1c5a      	adds	r2, r3, #1
 8014626:	b2d1      	uxtb	r1, r2
 8014628:	4a0e      	ldr	r2, [pc, #56]	; (8014664 <FATFS_LinkDriverEx+0x94>)
 801462a:	7251      	strb	r1, [r2, #9]
 801462c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801462e:	7dbb      	ldrb	r3, [r7, #22]
 8014630:	3330      	adds	r3, #48	; 0x30
 8014632:	b2da      	uxtb	r2, r3
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	3301      	adds	r3, #1
 801463c:	223a      	movs	r2, #58	; 0x3a
 801463e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	3302      	adds	r3, #2
 8014644:	222f      	movs	r2, #47	; 0x2f
 8014646:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	3303      	adds	r3, #3
 801464c:	2200      	movs	r2, #0
 801464e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014654:	7dfb      	ldrb	r3, [r7, #23]
}
 8014656:	4618      	mov	r0, r3
 8014658:	371c      	adds	r7, #28
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr
 8014662:	bf00      	nop
 8014664:	20003248 	.word	0x20003248

08014668 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014672:	2200      	movs	r2, #0
 8014674:	6839      	ldr	r1, [r7, #0]
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7ff ffaa 	bl	80145d0 <FATFS_LinkDriverEx>
 801467c:	4603      	mov	r3, r0
}
 801467e:	4618      	mov	r0, r3
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014686:	b580      	push	{r7, lr}
 8014688:	b086      	sub	sp, #24
 801468a:	af00      	add	r7, sp, #0
 801468c:	4603      	mov	r3, r0
 801468e:	6039      	str	r1, [r7, #0]
 8014690:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8014692:	2300      	movs	r3, #0
 8014694:	60fb      	str	r3, [r7, #12]
 8014696:	2300      	movs	r3, #0
 8014698:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801469a:	f107 030c 	add.w	r3, r7, #12
 801469e:	2101      	movs	r1, #1
 80146a0:	4618      	mov	r0, r3
 80146a2:	f000 f8e9 	bl	8014878 <osSemaphoreCreate>
 80146a6:	4602      	mov	r2, r0
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	bf14      	ite	ne
 80146b4:	2301      	movne	r3, #1
 80146b6:	2300      	moveq	r3, #0
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	617b      	str	r3, [r7, #20]

    return ret;
 80146bc:	697b      	ldr	r3, [r7, #20]
}
 80146be:	4618      	mov	r0, r3
 80146c0:	3718      	adds	r7, #24
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}

080146c6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b082      	sub	sp, #8
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f988 	bl	80149e4 <osSemaphoreDelete>
#endif
    return 1;
 80146d4:	2301      	movs	r3, #1
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b084      	sub	sp, #16
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80146e6:	2300      	movs	r3, #0
 80146e8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80146ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f8f4 	bl	80148dc <osSemaphoreWait>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d101      	bne.n	80146fe <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80146fa:	2301      	movs	r3, #1
 80146fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80146fe:	68fb      	ldr	r3, [r7, #12]
}
 8014700:	4618      	mov	r0, r3
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f931 	bl	8014978 <osSemaphoreRelease>
#endif
}
 8014716:	bf00      	nop
 8014718:	3708      	adds	r7, #8
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801471e:	b480      	push	{r7}
 8014720:	b085      	sub	sp, #20
 8014722:	af00      	add	r7, sp, #0
 8014724:	4603      	mov	r3, r0
 8014726:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014728:	2300      	movs	r3, #0
 801472a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801472c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014730:	2b84      	cmp	r3, #132	; 0x84
 8014732:	d005      	beq.n	8014740 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	4413      	add	r3, r2
 801473c:	3303      	adds	r3, #3
 801473e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014740:	68fb      	ldr	r3, [r7, #12]
}
 8014742:	4618      	mov	r0, r3
 8014744:	3714      	adds	r7, #20
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr

0801474e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801474e:	b480      	push	{r7}
 8014750:	b083      	sub	sp, #12
 8014752:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014754:	f3ef 8305 	mrs	r3, IPSR
 8014758:	607b      	str	r3, [r7, #4]
  return(result);
 801475a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801475c:	2b00      	cmp	r3, #0
 801475e:	bf14      	ite	ne
 8014760:	2301      	movne	r3, #1
 8014762:	2300      	moveq	r3, #0
 8014764:	b2db      	uxtb	r3, r3
}
 8014766:	4618      	mov	r0, r3
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014776:	f001 fc05 	bl	8015f84 <vTaskStartScheduler>
  
  return osOK;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	bd80      	pop	{r7, pc}

08014780 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014784:	f002 f832 	bl	80167ec <xTaskGetSchedulerState>
 8014788:	4603      	mov	r3, r0
 801478a:	2b01      	cmp	r3, #1
 801478c:	d101      	bne.n	8014792 <osKernelRunning+0x12>
    return 0;
 801478e:	2300      	movs	r3, #0
 8014790:	e000      	b.n	8014794 <osKernelRunning+0x14>
  else
    return 1;
 8014792:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014794:	4618      	mov	r0, r3
 8014796:	bd80      	pop	{r7, pc}

08014798 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801479c:	f7ff ffd7 	bl	801474e <inHandlerMode>
 80147a0:	4603      	mov	r3, r0
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d003      	beq.n	80147ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80147a6:	f001 fd11 	bl	80161cc <xTaskGetTickCountFromISR>
 80147aa:	4603      	mov	r3, r0
 80147ac:	e002      	b.n	80147b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80147ae:	f001 fcfd 	bl	80161ac <xTaskGetTickCount>
 80147b2:	4603      	mov	r3, r0
  }
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80147b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ba:	b089      	sub	sp, #36	; 0x24
 80147bc:	af04      	add	r7, sp, #16
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	695b      	ldr	r3, [r3, #20]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d020      	beq.n	801480c <osThreadCreate+0x54>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	699b      	ldr	r3, [r3, #24]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d01c      	beq.n	801480c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	685c      	ldr	r4, [r3, #4]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	691e      	ldr	r6, [r3, #16]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7ff ff9a 	bl	801471e <makeFreeRtosPriority>
 80147ea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	695b      	ldr	r3, [r3, #20]
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147f4:	9202      	str	r2, [sp, #8]
 80147f6:	9301      	str	r3, [sp, #4]
 80147f8:	9100      	str	r1, [sp, #0]
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	4632      	mov	r2, r6
 80147fe:	4629      	mov	r1, r5
 8014800:	4620      	mov	r0, r4
 8014802:	f001 f9e1 	bl	8015bc8 <xTaskCreateStatic>
 8014806:	4603      	mov	r3, r0
 8014808:	60fb      	str	r3, [r7, #12]
 801480a:	e01c      	b.n	8014846 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685c      	ldr	r4, [r3, #4]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014818:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014820:	4618      	mov	r0, r3
 8014822:	f7ff ff7c 	bl	801471e <makeFreeRtosPriority>
 8014826:	4602      	mov	r2, r0
 8014828:	f107 030c 	add.w	r3, r7, #12
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	9200      	str	r2, [sp, #0]
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	4632      	mov	r2, r6
 8014834:	4629      	mov	r1, r5
 8014836:	4620      	mov	r0, r4
 8014838:	f001 fa23 	bl	8015c82 <xTaskCreate>
 801483c:	4603      	mov	r3, r0
 801483e:	2b01      	cmp	r3, #1
 8014840:	d001      	beq.n	8014846 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014842:	2300      	movs	r3, #0
 8014844:	e000      	b.n	8014848 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014846:	68fb      	ldr	r3, [r7, #12]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3714      	adds	r7, #20
 801484c:	46bd      	mov	sp, r7
 801484e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014850 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d001      	beq.n	8014866 <osDelay+0x16>
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	e000      	b.n	8014868 <osDelay+0x18>
 8014866:	2301      	movs	r3, #1
 8014868:	4618      	mov	r0, r3
 801486a:	f001 fb57 	bl	8015f1c <vTaskDelay>
  
  return osOK;
 801486e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014870:	4618      	mov	r0, r3
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af02      	add	r7, sp, #8
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d00f      	beq.n	80148aa <osSemaphoreCreate+0x32>
    if (count == 1) {
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d10a      	bne.n	80148a6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	2203      	movs	r2, #3
 8014896:	9200      	str	r2, [sp, #0]
 8014898:	2200      	movs	r2, #0
 801489a:	2100      	movs	r1, #0
 801489c:	2001      	movs	r0, #1
 801489e:	f000 fab9 	bl	8014e14 <xQueueGenericCreateStatic>
 80148a2:	4603      	mov	r3, r0
 80148a4:	e016      	b.n	80148d4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80148a6:	2300      	movs	r3, #0
 80148a8:	e014      	b.n	80148d4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d110      	bne.n	80148d2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80148b0:	2203      	movs	r2, #3
 80148b2:	2100      	movs	r1, #0
 80148b4:	2001      	movs	r0, #1
 80148b6:	f000 fb25 	bl	8014f04 <xQueueGenericCreate>
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d005      	beq.n	80148ce <osSemaphoreCreate+0x56>
 80148c2:	2300      	movs	r3, #0
 80148c4:	2200      	movs	r2, #0
 80148c6:	2100      	movs	r1, #0
 80148c8:	68f8      	ldr	r0, [r7, #12]
 80148ca:	f000 fb75 	bl	8014fb8 <xQueueGenericSend>
      return sema;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	e000      	b.n	80148d4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80148d2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80148e6:	2300      	movs	r3, #0
 80148e8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d101      	bne.n	80148f4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80148f0:	2380      	movs	r3, #128	; 0x80
 80148f2:	e03a      	b.n	801496a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80148f4:	2300      	movs	r3, #0
 80148f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148fe:	d103      	bne.n	8014908 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014900:	f04f 33ff 	mov.w	r3, #4294967295
 8014904:	60fb      	str	r3, [r7, #12]
 8014906:	e009      	b.n	801491c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d006      	beq.n	801491c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d101      	bne.n	801491c <osSemaphoreWait+0x40>
      ticks = 1;
 8014918:	2301      	movs	r3, #1
 801491a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801491c:	f7ff ff17 	bl	801474e <inHandlerMode>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d017      	beq.n	8014956 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014926:	f107 0308 	add.w	r3, r7, #8
 801492a:	461a      	mov	r2, r3
 801492c:	2100      	movs	r1, #0
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f000 ff54 	bl	80157dc <xQueueReceiveFromISR>
 8014934:	4603      	mov	r3, r0
 8014936:	2b01      	cmp	r3, #1
 8014938:	d001      	beq.n	801493e <osSemaphoreWait+0x62>
      return osErrorOS;
 801493a:	23ff      	movs	r3, #255	; 0xff
 801493c:	e015      	b.n	801496a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d011      	beq.n	8014968 <osSemaphoreWait+0x8c>
 8014944:	4b0b      	ldr	r3, [pc, #44]	; (8014974 <osSemaphoreWait+0x98>)
 8014946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801494a:	601a      	str	r2, [r3, #0]
 801494c:	f3bf 8f4f 	dsb	sy
 8014950:	f3bf 8f6f 	isb	sy
 8014954:	e008      	b.n	8014968 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014956:	68f9      	ldr	r1, [r7, #12]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 fe33 	bl	80155c4 <xQueueSemaphoreTake>
 801495e:	4603      	mov	r3, r0
 8014960:	2b01      	cmp	r3, #1
 8014962:	d001      	beq.n	8014968 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014964:	23ff      	movs	r3, #255	; 0xff
 8014966:	e000      	b.n	801496a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014968:	2300      	movs	r3, #0
}
 801496a:	4618      	mov	r0, r3
 801496c:	3710      	adds	r7, #16
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	e000ed04 	.word	0xe000ed04

08014978 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014980:	2300      	movs	r3, #0
 8014982:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014984:	2300      	movs	r3, #0
 8014986:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014988:	f7ff fee1 	bl	801474e <inHandlerMode>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d016      	beq.n	80149c0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014992:	f107 0308 	add.w	r3, r7, #8
 8014996:	4619      	mov	r1, r3
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 fca6 	bl	80152ea <xQueueGiveFromISR>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d001      	beq.n	80149a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80149a4:	23ff      	movs	r3, #255	; 0xff
 80149a6:	e017      	b.n	80149d8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d013      	beq.n	80149d6 <osSemaphoreRelease+0x5e>
 80149ae:	4b0c      	ldr	r3, [pc, #48]	; (80149e0 <osSemaphoreRelease+0x68>)
 80149b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149b4:	601a      	str	r2, [r3, #0]
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	f3bf 8f6f 	isb	sy
 80149be:	e00a      	b.n	80149d6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80149c0:	2300      	movs	r3, #0
 80149c2:	2200      	movs	r2, #0
 80149c4:	2100      	movs	r1, #0
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 faf6 	bl	8014fb8 <xQueueGenericSend>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d001      	beq.n	80149d6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80149d2:	23ff      	movs	r3, #255	; 0xff
 80149d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80149d6:	68fb      	ldr	r3, [r7, #12]
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	e000ed04 	.word	0xe000ed04

080149e4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80149ec:	f7ff feaf 	bl	801474e <inHandlerMode>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d001      	beq.n	80149fa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80149f6:	2382      	movs	r3, #130	; 0x82
 80149f8:	e003      	b.n	8014a02 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f000 ff6e 	bl	80158dc <vQueueDelete>

  return osOK; 
 8014a00:	2300      	movs	r3, #0
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3708      	adds	r7, #8
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014a0a:	b590      	push	{r4, r7, lr}
 8014a0c:	b085      	sub	sp, #20
 8014a0e:	af02      	add	r7, sp, #8
 8014a10:	6078      	str	r0, [r7, #4]
 8014a12:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	689b      	ldr	r3, [r3, #8]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d011      	beq.n	8014a40 <osMessageCreate+0x36>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	68db      	ldr	r3, [r3, #12]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00d      	beq.n	8014a40 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6818      	ldr	r0, [r3, #0]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6859      	ldr	r1, [r3, #4]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	689a      	ldr	r2, [r3, #8]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	2400      	movs	r4, #0
 8014a36:	9400      	str	r4, [sp, #0]
 8014a38:	f000 f9ec 	bl	8014e14 <xQueueGenericCreateStatic>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	e008      	b.n	8014a52 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6818      	ldr	r0, [r3, #0]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	4619      	mov	r1, r3
 8014a4c:	f000 fa5a 	bl	8014f04 <xQueueGenericCreate>
 8014a50:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	370c      	adds	r7, #12
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd90      	pop	{r4, r7, pc}
	...

08014a5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014a68:	2300      	movs	r3, #0
 8014a6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <osMessagePut+0x1e>
    ticks = 1;
 8014a76:	2301      	movs	r3, #1
 8014a78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014a7a:	f7ff fe68 	bl	801474e <inHandlerMode>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d018      	beq.n	8014ab6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014a84:	f107 0210 	add.w	r2, r7, #16
 8014a88:	f107 0108 	add.w	r1, r7, #8
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f000 fb90 	bl	80151b4 <xQueueGenericSendFromISR>
 8014a94:	4603      	mov	r3, r0
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d001      	beq.n	8014a9e <osMessagePut+0x42>
      return osErrorOS;
 8014a9a:	23ff      	movs	r3, #255	; 0xff
 8014a9c:	e018      	b.n	8014ad0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014a9e:	693b      	ldr	r3, [r7, #16]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d014      	beq.n	8014ace <osMessagePut+0x72>
 8014aa4:	4b0c      	ldr	r3, [pc, #48]	; (8014ad8 <osMessagePut+0x7c>)
 8014aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aaa:	601a      	str	r2, [r3, #0]
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	f3bf 8f6f 	isb	sy
 8014ab4:	e00b      	b.n	8014ace <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014ab6:	f107 0108 	add.w	r1, r7, #8
 8014aba:	2300      	movs	r3, #0
 8014abc:	697a      	ldr	r2, [r7, #20]
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f000 fa7a 	bl	8014fb8 <xQueueGenericSend>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d001      	beq.n	8014ace <osMessagePut+0x72>
      return osErrorOS;
 8014aca:	23ff      	movs	r3, #255	; 0xff
 8014acc:	e000      	b.n	8014ad0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3718      	adds	r7, #24
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	e000ed04 	.word	0xe000ed04

08014adc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b08b      	sub	sp, #44	; 0x2c
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d10a      	bne.n	8014b0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014af6:	2380      	movs	r3, #128	; 0x80
 8014af8:	617b      	str	r3, [r7, #20]
    return event;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	461c      	mov	r4, r3
 8014afe:	f107 0314 	add.w	r3, r7, #20
 8014b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b0a:	e054      	b.n	8014bb6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014b10:	2300      	movs	r3, #0
 8014b12:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b1a:	d103      	bne.n	8014b24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b20:	627b      	str	r3, [r7, #36]	; 0x24
 8014b22:	e009      	b.n	8014b38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d006      	beq.n	8014b38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d101      	bne.n	8014b38 <osMessageGet+0x5c>
      ticks = 1;
 8014b34:	2301      	movs	r3, #1
 8014b36:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014b38:	f7ff fe09 	bl	801474e <inHandlerMode>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d01c      	beq.n	8014b7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014b42:	f107 0220 	add.w	r2, r7, #32
 8014b46:	f107 0314 	add.w	r3, r7, #20
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	68b8      	ldr	r0, [r7, #8]
 8014b50:	f000 fe44 	bl	80157dc <xQueueReceiveFromISR>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d102      	bne.n	8014b60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014b5a:	2310      	movs	r3, #16
 8014b5c:	617b      	str	r3, [r7, #20]
 8014b5e:	e001      	b.n	8014b64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014b60:	2300      	movs	r3, #0
 8014b62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b64:	6a3b      	ldr	r3, [r7, #32]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d01d      	beq.n	8014ba6 <osMessageGet+0xca>
 8014b6a:	4b15      	ldr	r3, [pc, #84]	; (8014bc0 <osMessageGet+0xe4>)
 8014b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	f3bf 8f4f 	dsb	sy
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	e014      	b.n	8014ba6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014b7c:	f107 0314 	add.w	r3, r7, #20
 8014b80:	3304      	adds	r3, #4
 8014b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b84:	4619      	mov	r1, r3
 8014b86:	68b8      	ldr	r0, [r7, #8]
 8014b88:	f000 fc3c 	bl	8015404 <xQueueReceive>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d102      	bne.n	8014b98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014b92:	2310      	movs	r3, #16
 8014b94:	617b      	str	r3, [r7, #20]
 8014b96:	e006      	b.n	8014ba6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d101      	bne.n	8014ba2 <osMessageGet+0xc6>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e000      	b.n	8014ba4 <osMessageGet+0xc8>
 8014ba2:	2340      	movs	r3, #64	; 0x40
 8014ba4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	461c      	mov	r4, r3
 8014baa:	f107 0314 	add.w	r3, r7, #20
 8014bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	372c      	adds	r7, #44	; 0x2c
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd90      	pop	{r4, r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	e000ed04 	.word	0xe000ed04

08014bc4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b083      	sub	sp, #12
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 8014bce:	2381      	movs	r3, #129	; 0x81
#endif
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	370c      	adds	r7, #12
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f103 0208 	add.w	r2, r3, #8
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8014bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f103 0208 	add.w	r2, r3, #8
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f103 0208 	add.w	r2, r3, #8
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014c10:	bf00      	nop
 8014c12:	370c      	adds	r7, #12
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2200      	movs	r2, #0
 8014c28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014c2a:	bf00      	nop
 8014c2c:	370c      	adds	r7, #12
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr

08014c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c36:	b480      	push	{r7}
 8014c38:	b085      	sub	sp, #20
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
 8014c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	68fa      	ldr	r2, [r7, #12]
 8014c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	689a      	ldr	r2, [r3, #8]
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	689b      	ldr	r3, [r3, #8]
 8014c58:	683a      	ldr	r2, [r7, #0]
 8014c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	1c5a      	adds	r2, r3, #1
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	601a      	str	r2, [r3, #0]
}
 8014c72:	bf00      	nop
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c7e:	b480      	push	{r7}
 8014c80:	b085      	sub	sp, #20
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	6078      	str	r0, [r7, #4]
 8014c86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c94:	d103      	bne.n	8014c9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	691b      	ldr	r3, [r3, #16]
 8014c9a:	60fb      	str	r3, [r7, #12]
 8014c9c:	e00c      	b.n	8014cb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	3308      	adds	r3, #8
 8014ca2:	60fb      	str	r3, [r7, #12]
 8014ca4:	e002      	b.n	8014cac <vListInsert+0x2e>
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	60fb      	str	r3, [r7, #12]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d2f6      	bcs.n	8014ca6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	685a      	ldr	r2, [r3, #4]
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	683a      	ldr	r2, [r7, #0]
 8014cc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	683a      	ldr	r2, [r7, #0]
 8014cd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	687a      	ldr	r2, [r7, #4]
 8014cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	1c5a      	adds	r2, r3, #1
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	601a      	str	r2, [r3, #0]
}
 8014ce4:	bf00      	nop
 8014ce6:	3714      	adds	r7, #20
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b085      	sub	sp, #20
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	691b      	ldr	r3, [r3, #16]
 8014cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	6892      	ldr	r2, [r2, #8]
 8014d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	6852      	ldr	r2, [r2, #4]
 8014d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d103      	bne.n	8014d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	689a      	ldr	r2, [r3, #8]
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	1e5a      	subs	r2, r3, #1
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3714      	adds	r7, #20
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr

08014d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d10a      	bne.n	8014d6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d5c:	f383 8811 	msr	BASEPRI, r3
 8014d60:	f3bf 8f6f 	isb	sy
 8014d64:	f3bf 8f4f 	dsb	sy
 8014d68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014d6a:	bf00      	nop
 8014d6c:	e7fe      	b.n	8014d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014d6e:	f002 f889 	bl	8016e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d7a:	68f9      	ldr	r1, [r7, #12]
 8014d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014d7e:	fb01 f303 	mul.w	r3, r1, r3
 8014d82:	441a      	add	r2, r3
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d9e:	3b01      	subs	r3, #1
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014da4:	fb01 f303 	mul.w	r3, r1, r3
 8014da8:	441a      	add	r2, r3
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	22ff      	movs	r2, #255	; 0xff
 8014db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	22ff      	movs	r2, #255	; 0xff
 8014dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d114      	bne.n	8014dee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	691b      	ldr	r3, [r3, #16]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d01a      	beq.n	8014e02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	3310      	adds	r3, #16
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f001 fb4b 	bl	801646c <xTaskRemoveFromEventList>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d012      	beq.n	8014e02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014ddc:	4b0c      	ldr	r3, [pc, #48]	; (8014e10 <xQueueGenericReset+0xcc>)
 8014dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014de2:	601a      	str	r2, [r3, #0]
 8014de4:	f3bf 8f4f 	dsb	sy
 8014de8:	f3bf 8f6f 	isb	sy
 8014dec:	e009      	b.n	8014e02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	3310      	adds	r3, #16
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff fef2 	bl	8014bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	3324      	adds	r3, #36	; 0x24
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7ff feed 	bl	8014bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014e02:	f002 f86f 	bl	8016ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014e06:	2301      	movs	r3, #1
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3710      	adds	r7, #16
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	e000ed04 	.word	0xe000ed04

08014e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b08e      	sub	sp, #56	; 0x38
 8014e18:	af02      	add	r7, sp, #8
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
 8014e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d10a      	bne.n	8014e3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e2c:	f383 8811 	msr	BASEPRI, r3
 8014e30:	f3bf 8f6f 	isb	sy
 8014e34:	f3bf 8f4f 	dsb	sy
 8014e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014e3a:	bf00      	nop
 8014e3c:	e7fe      	b.n	8014e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10a      	bne.n	8014e5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e48:	f383 8811 	msr	BASEPRI, r3
 8014e4c:	f3bf 8f6f 	isb	sy
 8014e50:	f3bf 8f4f 	dsb	sy
 8014e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014e56:	bf00      	nop
 8014e58:	e7fe      	b.n	8014e58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d002      	beq.n	8014e66 <xQueueGenericCreateStatic+0x52>
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d001      	beq.n	8014e6a <xQueueGenericCreateStatic+0x56>
 8014e66:	2301      	movs	r3, #1
 8014e68:	e000      	b.n	8014e6c <xQueueGenericCreateStatic+0x58>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d10a      	bne.n	8014e86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e74:	f383 8811 	msr	BASEPRI, r3
 8014e78:	f3bf 8f6f 	isb	sy
 8014e7c:	f3bf 8f4f 	dsb	sy
 8014e80:	623b      	str	r3, [r7, #32]
}
 8014e82:	bf00      	nop
 8014e84:	e7fe      	b.n	8014e84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d102      	bne.n	8014e92 <xQueueGenericCreateStatic+0x7e>
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <xQueueGenericCreateStatic+0x82>
 8014e92:	2301      	movs	r3, #1
 8014e94:	e000      	b.n	8014e98 <xQueueGenericCreateStatic+0x84>
 8014e96:	2300      	movs	r3, #0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10a      	bne.n	8014eb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea0:	f383 8811 	msr	BASEPRI, r3
 8014ea4:	f3bf 8f6f 	isb	sy
 8014ea8:	f3bf 8f4f 	dsb	sy
 8014eac:	61fb      	str	r3, [r7, #28]
}
 8014eae:	bf00      	nop
 8014eb0:	e7fe      	b.n	8014eb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014eb2:	2348      	movs	r3, #72	; 0x48
 8014eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b48      	cmp	r3, #72	; 0x48
 8014eba:	d00a      	beq.n	8014ed2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec0:	f383 8811 	msr	BASEPRI, r3
 8014ec4:	f3bf 8f6f 	isb	sy
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	61bb      	str	r3, [r7, #24]
}
 8014ece:	bf00      	nop
 8014ed0:	e7fe      	b.n	8014ed0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014ed2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d00d      	beq.n	8014efa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	4613      	mov	r3, r2
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	68b9      	ldr	r1, [r7, #8]
 8014ef4:	68f8      	ldr	r0, [r7, #12]
 8014ef6:	f000 f83f 	bl	8014f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3730      	adds	r7, #48	; 0x30
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b08a      	sub	sp, #40	; 0x28
 8014f08:	af02      	add	r7, sp, #8
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	4613      	mov	r3, r2
 8014f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d10a      	bne.n	8014f2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8014f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f1c:	f383 8811 	msr	BASEPRI, r3
 8014f20:	f3bf 8f6f 	isb	sy
 8014f24:	f3bf 8f4f 	dsb	sy
 8014f28:	613b      	str	r3, [r7, #16]
}
 8014f2a:	bf00      	nop
 8014f2c:	e7fe      	b.n	8014f2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	68ba      	ldr	r2, [r7, #8]
 8014f32:	fb02 f303 	mul.w	r3, r2, r3
 8014f36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	3348      	adds	r3, #72	; 0x48
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f002 f8c3 	bl	80170c8 <pvPortMalloc>
 8014f42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d011      	beq.n	8014f6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	3348      	adds	r3, #72	; 0x48
 8014f52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	2200      	movs	r2, #0
 8014f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014f5c:	79fa      	ldrb	r2, [r7, #7]
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	4613      	mov	r3, r2
 8014f64:	697a      	ldr	r2, [r7, #20]
 8014f66:	68b9      	ldr	r1, [r7, #8]
 8014f68:	68f8      	ldr	r0, [r7, #12]
 8014f6a:	f000 f805 	bl	8014f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3720      	adds	r7, #32
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b084      	sub	sp, #16
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
 8014f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d103      	bne.n	8014f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	69ba      	ldr	r2, [r7, #24]
 8014f90:	601a      	str	r2, [r3, #0]
 8014f92:	e002      	b.n	8014f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	687a      	ldr	r2, [r7, #4]
 8014f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	68ba      	ldr	r2, [r7, #8]
 8014fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014fa6:	2101      	movs	r1, #1
 8014fa8:	69b8      	ldr	r0, [r7, #24]
 8014faa:	f7ff fecb 	bl	8014d44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014fae:	bf00      	nop
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
	...

08014fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b08e      	sub	sp, #56	; 0x38
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	607a      	str	r2, [r7, #4]
 8014fc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d10a      	bne.n	8014fea <xQueueGenericSend+0x32>
	__asm volatile
 8014fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014fe6:	bf00      	nop
 8014fe8:	e7fe      	b.n	8014fe8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d103      	bne.n	8014ff8 <xQueueGenericSend+0x40>
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d101      	bne.n	8014ffc <xQueueGenericSend+0x44>
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e000      	b.n	8014ffe <xQueueGenericSend+0x46>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d10a      	bne.n	8015018 <xQueueGenericSend+0x60>
	__asm volatile
 8015002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015006:	f383 8811 	msr	BASEPRI, r3
 801500a:	f3bf 8f6f 	isb	sy
 801500e:	f3bf 8f4f 	dsb	sy
 8015012:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015014:	bf00      	nop
 8015016:	e7fe      	b.n	8015016 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2b02      	cmp	r3, #2
 801501c:	d103      	bne.n	8015026 <xQueueGenericSend+0x6e>
 801501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015022:	2b01      	cmp	r3, #1
 8015024:	d101      	bne.n	801502a <xQueueGenericSend+0x72>
 8015026:	2301      	movs	r3, #1
 8015028:	e000      	b.n	801502c <xQueueGenericSend+0x74>
 801502a:	2300      	movs	r3, #0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d10a      	bne.n	8015046 <xQueueGenericSend+0x8e>
	__asm volatile
 8015030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	623b      	str	r3, [r7, #32]
}
 8015042:	bf00      	nop
 8015044:	e7fe      	b.n	8015044 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015046:	f001 fbd1 	bl	80167ec <xTaskGetSchedulerState>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d102      	bne.n	8015056 <xQueueGenericSend+0x9e>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d101      	bne.n	801505a <xQueueGenericSend+0xa2>
 8015056:	2301      	movs	r3, #1
 8015058:	e000      	b.n	801505c <xQueueGenericSend+0xa4>
 801505a:	2300      	movs	r3, #0
 801505c:	2b00      	cmp	r3, #0
 801505e:	d10a      	bne.n	8015076 <xQueueGenericSend+0xbe>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	f383 8811 	msr	BASEPRI, r3
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	61fb      	str	r3, [r7, #28]
}
 8015072:	bf00      	nop
 8015074:	e7fe      	b.n	8015074 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015076:	f001 ff05 	bl	8016e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801507c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015082:	429a      	cmp	r2, r3
 8015084:	d302      	bcc.n	801508c <xQueueGenericSend+0xd4>
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	2b02      	cmp	r3, #2
 801508a:	d129      	bne.n	80150e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801508c:	683a      	ldr	r2, [r7, #0]
 801508e:	68b9      	ldr	r1, [r7, #8]
 8015090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015092:	f000 fc5e 	bl	8015952 <prvCopyDataToQueue>
 8015096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801509c:	2b00      	cmp	r3, #0
 801509e:	d010      	beq.n	80150c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80150a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a2:	3324      	adds	r3, #36	; 0x24
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 f9e1 	bl	801646c <xTaskRemoveFromEventList>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d013      	beq.n	80150d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80150b0:	4b3f      	ldr	r3, [pc, #252]	; (80151b0 <xQueueGenericSend+0x1f8>)
 80150b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150b6:	601a      	str	r2, [r3, #0]
 80150b8:	f3bf 8f4f 	dsb	sy
 80150bc:	f3bf 8f6f 	isb	sy
 80150c0:	e00a      	b.n	80150d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80150c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d007      	beq.n	80150d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80150c8:	4b39      	ldr	r3, [pc, #228]	; (80151b0 <xQueueGenericSend+0x1f8>)
 80150ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150ce:	601a      	str	r2, [r3, #0]
 80150d0:	f3bf 8f4f 	dsb	sy
 80150d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80150d8:	f001 ff04 	bl	8016ee4 <vPortExitCritical>
				return pdPASS;
 80150dc:	2301      	movs	r3, #1
 80150de:	e063      	b.n	80151a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d103      	bne.n	80150ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80150e6:	f001 fefd 	bl	8016ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80150ea:	2300      	movs	r3, #0
 80150ec:	e05c      	b.n	80151a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80150ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d106      	bne.n	8015102 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80150f4:	f107 0314 	add.w	r3, r7, #20
 80150f8:	4618      	mov	r0, r3
 80150fa:	f001 fa19 	bl	8016530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80150fe:	2301      	movs	r3, #1
 8015100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015102:	f001 feef 	bl	8016ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015106:	f000 ffa7 	bl	8016058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801510a:	f001 febb 	bl	8016e84 <vPortEnterCritical>
 801510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015114:	b25b      	sxtb	r3, r3
 8015116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801511a:	d103      	bne.n	8015124 <xQueueGenericSend+0x16c>
 801511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511e:	2200      	movs	r2, #0
 8015120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801512a:	b25b      	sxtb	r3, r3
 801512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015130:	d103      	bne.n	801513a <xQueueGenericSend+0x182>
 8015132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015134:	2200      	movs	r2, #0
 8015136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801513a:	f001 fed3 	bl	8016ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801513e:	1d3a      	adds	r2, r7, #4
 8015140:	f107 0314 	add.w	r3, r7, #20
 8015144:	4611      	mov	r1, r2
 8015146:	4618      	mov	r0, r3
 8015148:	f001 fa08 	bl	801655c <xTaskCheckForTimeOut>
 801514c:	4603      	mov	r3, r0
 801514e:	2b00      	cmp	r3, #0
 8015150:	d124      	bne.n	801519c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015154:	f000 fcf5 	bl	8015b42 <prvIsQueueFull>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	d018      	beq.n	8015190 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015160:	3310      	adds	r3, #16
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	4611      	mov	r1, r2
 8015166:	4618      	mov	r0, r3
 8015168:	f001 f95c 	bl	8016424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801516c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801516e:	f000 fc80 	bl	8015a72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015172:	f000 ff7f 	bl	8016074 <xTaskResumeAll>
 8015176:	4603      	mov	r3, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	f47f af7c 	bne.w	8015076 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801517e:	4b0c      	ldr	r3, [pc, #48]	; (80151b0 <xQueueGenericSend+0x1f8>)
 8015180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015184:	601a      	str	r2, [r3, #0]
 8015186:	f3bf 8f4f 	dsb	sy
 801518a:	f3bf 8f6f 	isb	sy
 801518e:	e772      	b.n	8015076 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015192:	f000 fc6e 	bl	8015a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015196:	f000 ff6d 	bl	8016074 <xTaskResumeAll>
 801519a:	e76c      	b.n	8015076 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801519c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801519e:	f000 fc68 	bl	8015a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80151a2:	f000 ff67 	bl	8016074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80151a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3738      	adds	r7, #56	; 0x38
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	e000ed04 	.word	0xe000ed04

080151b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b090      	sub	sp, #64	; 0x40
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
 80151c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80151c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d10a      	bne.n	80151e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80151cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d0:	f383 8811 	msr	BASEPRI, r3
 80151d4:	f3bf 8f6f 	isb	sy
 80151d8:	f3bf 8f4f 	dsb	sy
 80151dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80151de:	bf00      	nop
 80151e0:	e7fe      	b.n	80151e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d103      	bne.n	80151f0 <xQueueGenericSendFromISR+0x3c>
 80151e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <xQueueGenericSendFromISR+0x40>
 80151f0:	2301      	movs	r3, #1
 80151f2:	e000      	b.n	80151f6 <xQueueGenericSendFromISR+0x42>
 80151f4:	2300      	movs	r3, #0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d10a      	bne.n	8015210 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80151fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fe:	f383 8811 	msr	BASEPRI, r3
 8015202:	f3bf 8f6f 	isb	sy
 8015206:	f3bf 8f4f 	dsb	sy
 801520a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801520c:	bf00      	nop
 801520e:	e7fe      	b.n	801520e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	2b02      	cmp	r3, #2
 8015214:	d103      	bne.n	801521e <xQueueGenericSendFromISR+0x6a>
 8015216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801521a:	2b01      	cmp	r3, #1
 801521c:	d101      	bne.n	8015222 <xQueueGenericSendFromISR+0x6e>
 801521e:	2301      	movs	r3, #1
 8015220:	e000      	b.n	8015224 <xQueueGenericSendFromISR+0x70>
 8015222:	2300      	movs	r3, #0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d10a      	bne.n	801523e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801522c:	f383 8811 	msr	BASEPRI, r3
 8015230:	f3bf 8f6f 	isb	sy
 8015234:	f3bf 8f4f 	dsb	sy
 8015238:	623b      	str	r3, [r7, #32]
}
 801523a:	bf00      	nop
 801523c:	e7fe      	b.n	801523c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801523e:	f001 ff03 	bl	8017048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015242:	f3ef 8211 	mrs	r2, BASEPRI
 8015246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801524a:	f383 8811 	msr	BASEPRI, r3
 801524e:	f3bf 8f6f 	isb	sy
 8015252:	f3bf 8f4f 	dsb	sy
 8015256:	61fa      	str	r2, [r7, #28]
 8015258:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801525a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801525c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015266:	429a      	cmp	r2, r3
 8015268:	d302      	bcc.n	8015270 <xQueueGenericSendFromISR+0xbc>
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	2b02      	cmp	r3, #2
 801526e:	d12f      	bne.n	80152d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801527a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801527e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015280:	683a      	ldr	r2, [r7, #0]
 8015282:	68b9      	ldr	r1, [r7, #8]
 8015284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015286:	f000 fb64 	bl	8015952 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801528a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015292:	d112      	bne.n	80152ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015298:	2b00      	cmp	r3, #0
 801529a:	d016      	beq.n	80152ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801529e:	3324      	adds	r3, #36	; 0x24
 80152a0:	4618      	mov	r0, r3
 80152a2:	f001 f8e3 	bl	801646c <xTaskRemoveFromEventList>
 80152a6:	4603      	mov	r3, r0
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00e      	beq.n	80152ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00b      	beq.n	80152ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2201      	movs	r2, #1
 80152b6:	601a      	str	r2, [r3, #0]
 80152b8:	e007      	b.n	80152ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80152ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80152be:	3301      	adds	r3, #1
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	b25a      	sxtb	r2, r3
 80152c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80152ca:	2301      	movs	r3, #1
 80152cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80152ce:	e001      	b.n	80152d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80152d0:	2300      	movs	r3, #0
 80152d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80152de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80152e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3740      	adds	r7, #64	; 0x40
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b08e      	sub	sp, #56	; 0x38
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80152f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d10a      	bne.n	8015314 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80152fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015302:	f383 8811 	msr	BASEPRI, r3
 8015306:	f3bf 8f6f 	isb	sy
 801530a:	f3bf 8f4f 	dsb	sy
 801530e:	623b      	str	r3, [r7, #32]
}
 8015310:	bf00      	nop
 8015312:	e7fe      	b.n	8015312 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015318:	2b00      	cmp	r3, #0
 801531a:	d00a      	beq.n	8015332 <xQueueGiveFromISR+0x48>
	__asm volatile
 801531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015320:	f383 8811 	msr	BASEPRI, r3
 8015324:	f3bf 8f6f 	isb	sy
 8015328:	f3bf 8f4f 	dsb	sy
 801532c:	61fb      	str	r3, [r7, #28]
}
 801532e:	bf00      	nop
 8015330:	e7fe      	b.n	8015330 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d103      	bne.n	8015342 <xQueueGiveFromISR+0x58>
 801533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533c:	689b      	ldr	r3, [r3, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <xQueueGiveFromISR+0x5c>
 8015342:	2301      	movs	r3, #1
 8015344:	e000      	b.n	8015348 <xQueueGiveFromISR+0x5e>
 8015346:	2300      	movs	r3, #0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d10a      	bne.n	8015362 <xQueueGiveFromISR+0x78>
	__asm volatile
 801534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015350:	f383 8811 	msr	BASEPRI, r3
 8015354:	f3bf 8f6f 	isb	sy
 8015358:	f3bf 8f4f 	dsb	sy
 801535c:	61bb      	str	r3, [r7, #24]
}
 801535e:	bf00      	nop
 8015360:	e7fe      	b.n	8015360 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015362:	f001 fe71 	bl	8017048 <vPortValidateInterruptPriority>
	__asm volatile
 8015366:	f3ef 8211 	mrs	r2, BASEPRI
 801536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536e:	f383 8811 	msr	BASEPRI, r3
 8015372:	f3bf 8f6f 	isb	sy
 8015376:	f3bf 8f4f 	dsb	sy
 801537a:	617a      	str	r2, [r7, #20]
 801537c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801537e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801538e:	429a      	cmp	r2, r3
 8015390:	d22b      	bcs.n	80153ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80153a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80153a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ac:	d112      	bne.n	80153d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d016      	beq.n	80153e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b8:	3324      	adds	r3, #36	; 0x24
 80153ba:	4618      	mov	r0, r3
 80153bc:	f001 f856 	bl	801646c <xTaskRemoveFromEventList>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00e      	beq.n	80153e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d00b      	beq.n	80153e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	2201      	movs	r2, #1
 80153d0:	601a      	str	r2, [r3, #0]
 80153d2:	e007      	b.n	80153e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80153d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153d8:	3301      	adds	r3, #1
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	b25a      	sxtb	r2, r3
 80153de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80153e4:	2301      	movs	r3, #1
 80153e6:	637b      	str	r3, [r7, #52]	; 0x34
 80153e8:	e001      	b.n	80153ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80153ea:	2300      	movs	r3, #0
 80153ec:	637b      	str	r3, [r7, #52]	; 0x34
 80153ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f383 8811 	msr	BASEPRI, r3
}
 80153f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80153fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3738      	adds	r7, #56	; 0x38
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b08c      	sub	sp, #48	; 0x30
 8015408:	af00      	add	r7, sp, #0
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015410:	2300      	movs	r3, #0
 8015412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541a:	2b00      	cmp	r3, #0
 801541c:	d10a      	bne.n	8015434 <xQueueReceive+0x30>
	__asm volatile
 801541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015422:	f383 8811 	msr	BASEPRI, r3
 8015426:	f3bf 8f6f 	isb	sy
 801542a:	f3bf 8f4f 	dsb	sy
 801542e:	623b      	str	r3, [r7, #32]
}
 8015430:	bf00      	nop
 8015432:	e7fe      	b.n	8015432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d103      	bne.n	8015442 <xQueueReceive+0x3e>
 801543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801543e:	2b00      	cmp	r3, #0
 8015440:	d101      	bne.n	8015446 <xQueueReceive+0x42>
 8015442:	2301      	movs	r3, #1
 8015444:	e000      	b.n	8015448 <xQueueReceive+0x44>
 8015446:	2300      	movs	r3, #0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d10a      	bne.n	8015462 <xQueueReceive+0x5e>
	__asm volatile
 801544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015450:	f383 8811 	msr	BASEPRI, r3
 8015454:	f3bf 8f6f 	isb	sy
 8015458:	f3bf 8f4f 	dsb	sy
 801545c:	61fb      	str	r3, [r7, #28]
}
 801545e:	bf00      	nop
 8015460:	e7fe      	b.n	8015460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015462:	f001 f9c3 	bl	80167ec <xTaskGetSchedulerState>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d102      	bne.n	8015472 <xQueueReceive+0x6e>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d101      	bne.n	8015476 <xQueueReceive+0x72>
 8015472:	2301      	movs	r3, #1
 8015474:	e000      	b.n	8015478 <xQueueReceive+0x74>
 8015476:	2300      	movs	r3, #0
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10a      	bne.n	8015492 <xQueueReceive+0x8e>
	__asm volatile
 801547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015480:	f383 8811 	msr	BASEPRI, r3
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	f3bf 8f4f 	dsb	sy
 801548c:	61bb      	str	r3, [r7, #24]
}
 801548e:	bf00      	nop
 8015490:	e7fe      	b.n	8015490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015492:	f001 fcf7 	bl	8016e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801549a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d01f      	beq.n	80154e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80154a2:	68b9      	ldr	r1, [r7, #8]
 80154a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154a6:	f000 fabe 	bl	8015a26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80154aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ac:	1e5a      	subs	r2, r3, #1
 80154ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80154b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00f      	beq.n	80154da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154bc:	3310      	adds	r3, #16
 80154be:	4618      	mov	r0, r3
 80154c0:	f000 ffd4 	bl	801646c <xTaskRemoveFromEventList>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d007      	beq.n	80154da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80154ca:	4b3d      	ldr	r3, [pc, #244]	; (80155c0 <xQueueReceive+0x1bc>)
 80154cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80154da:	f001 fd03 	bl	8016ee4 <vPortExitCritical>
				return pdPASS;
 80154de:	2301      	movs	r3, #1
 80154e0:	e069      	b.n	80155b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d103      	bne.n	80154f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80154e8:	f001 fcfc 	bl	8016ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80154ec:	2300      	movs	r3, #0
 80154ee:	e062      	b.n	80155b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80154f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d106      	bne.n	8015504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80154f6:	f107 0310 	add.w	r3, r7, #16
 80154fa:	4618      	mov	r0, r3
 80154fc:	f001 f818 	bl	8016530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015500:	2301      	movs	r3, #1
 8015502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015504:	f001 fcee 	bl	8016ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015508:	f000 fda6 	bl	8016058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801550c:	f001 fcba 	bl	8016e84 <vPortEnterCritical>
 8015510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015516:	b25b      	sxtb	r3, r3
 8015518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551c:	d103      	bne.n	8015526 <xQueueReceive+0x122>
 801551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015520:	2200      	movs	r2, #0
 8015522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801552c:	b25b      	sxtb	r3, r3
 801552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015532:	d103      	bne.n	801553c <xQueueReceive+0x138>
 8015534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015536:	2200      	movs	r2, #0
 8015538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801553c:	f001 fcd2 	bl	8016ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015540:	1d3a      	adds	r2, r7, #4
 8015542:	f107 0310 	add.w	r3, r7, #16
 8015546:	4611      	mov	r1, r2
 8015548:	4618      	mov	r0, r3
 801554a:	f001 f807 	bl	801655c <xTaskCheckForTimeOut>
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	d123      	bne.n	801559c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015556:	f000 fade 	bl	8015b16 <prvIsQueueEmpty>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d017      	beq.n	8015590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015562:	3324      	adds	r3, #36	; 0x24
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	4611      	mov	r1, r2
 8015568:	4618      	mov	r0, r3
 801556a:	f000 ff5b 	bl	8016424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801556e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015570:	f000 fa7f 	bl	8015a72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015574:	f000 fd7e 	bl	8016074 <xTaskResumeAll>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d189      	bne.n	8015492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801557e:	4b10      	ldr	r3, [pc, #64]	; (80155c0 <xQueueReceive+0x1bc>)
 8015580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015584:	601a      	str	r2, [r3, #0]
 8015586:	f3bf 8f4f 	dsb	sy
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	e780      	b.n	8015492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015592:	f000 fa6e 	bl	8015a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015596:	f000 fd6d 	bl	8016074 <xTaskResumeAll>
 801559a:	e77a      	b.n	8015492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801559c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801559e:	f000 fa68 	bl	8015a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155a2:	f000 fd67 	bl	8016074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80155a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155a8:	f000 fab5 	bl	8015b16 <prvIsQueueEmpty>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f43f af6f 	beq.w	8015492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80155b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3730      	adds	r7, #48	; 0x30
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	e000ed04 	.word	0xe000ed04

080155c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b08e      	sub	sp, #56	; 0x38
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80155ce:	2300      	movs	r3, #0
 80155d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80155d6:	2300      	movs	r3, #0
 80155d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80155da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d10a      	bne.n	80155f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80155e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e4:	f383 8811 	msr	BASEPRI, r3
 80155e8:	f3bf 8f6f 	isb	sy
 80155ec:	f3bf 8f4f 	dsb	sy
 80155f0:	623b      	str	r3, [r7, #32]
}
 80155f2:	bf00      	nop
 80155f4:	e7fe      	b.n	80155f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80155f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00a      	beq.n	8015614 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80155fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015602:	f383 8811 	msr	BASEPRI, r3
 8015606:	f3bf 8f6f 	isb	sy
 801560a:	f3bf 8f4f 	dsb	sy
 801560e:	61fb      	str	r3, [r7, #28]
}
 8015610:	bf00      	nop
 8015612:	e7fe      	b.n	8015612 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015614:	f001 f8ea 	bl	80167ec <xTaskGetSchedulerState>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d102      	bne.n	8015624 <xQueueSemaphoreTake+0x60>
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d101      	bne.n	8015628 <xQueueSemaphoreTake+0x64>
 8015624:	2301      	movs	r3, #1
 8015626:	e000      	b.n	801562a <xQueueSemaphoreTake+0x66>
 8015628:	2300      	movs	r3, #0
 801562a:	2b00      	cmp	r3, #0
 801562c:	d10a      	bne.n	8015644 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015632:	f383 8811 	msr	BASEPRI, r3
 8015636:	f3bf 8f6f 	isb	sy
 801563a:	f3bf 8f4f 	dsb	sy
 801563e:	61bb      	str	r3, [r7, #24]
}
 8015640:	bf00      	nop
 8015642:	e7fe      	b.n	8015642 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015644:	f001 fc1e 	bl	8016e84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801564c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015650:	2b00      	cmp	r3, #0
 8015652:	d024      	beq.n	801569e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015656:	1e5a      	subs	r2, r3, #1
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d104      	bne.n	801566e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015664:	f001 fa6a 	bl	8016b3c <pvTaskIncrementMutexHeldCount>
 8015668:	4602      	mov	r2, r0
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015670:	691b      	ldr	r3, [r3, #16]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d00f      	beq.n	8015696 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015678:	3310      	adds	r3, #16
 801567a:	4618      	mov	r0, r3
 801567c:	f000 fef6 	bl	801646c <xTaskRemoveFromEventList>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d007      	beq.n	8015696 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015686:	4b54      	ldr	r3, [pc, #336]	; (80157d8 <xQueueSemaphoreTake+0x214>)
 8015688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	f3bf 8f4f 	dsb	sy
 8015692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015696:	f001 fc25 	bl	8016ee4 <vPortExitCritical>
				return pdPASS;
 801569a:	2301      	movs	r3, #1
 801569c:	e097      	b.n	80157ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d111      	bne.n	80156c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80156a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d00a      	beq.n	80156c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80156aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ae:	f383 8811 	msr	BASEPRI, r3
 80156b2:	f3bf 8f6f 	isb	sy
 80156b6:	f3bf 8f4f 	dsb	sy
 80156ba:	617b      	str	r3, [r7, #20]
}
 80156bc:	bf00      	nop
 80156be:	e7fe      	b.n	80156be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80156c0:	f001 fc10 	bl	8016ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80156c4:	2300      	movs	r3, #0
 80156c6:	e082      	b.n	80157ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80156c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d106      	bne.n	80156dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80156ce:	f107 030c 	add.w	r3, r7, #12
 80156d2:	4618      	mov	r0, r3
 80156d4:	f000 ff2c 	bl	8016530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80156d8:	2301      	movs	r3, #1
 80156da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80156dc:	f001 fc02 	bl	8016ee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80156e0:	f000 fcba 	bl	8016058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80156e4:	f001 fbce 	bl	8016e84 <vPortEnterCritical>
 80156e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156ee:	b25b      	sxtb	r3, r3
 80156f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156f4:	d103      	bne.n	80156fe <xQueueSemaphoreTake+0x13a>
 80156f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f8:	2200      	movs	r2, #0
 80156fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015704:	b25b      	sxtb	r3, r3
 8015706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801570a:	d103      	bne.n	8015714 <xQueueSemaphoreTake+0x150>
 801570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570e:	2200      	movs	r2, #0
 8015710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015714:	f001 fbe6 	bl	8016ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015718:	463a      	mov	r2, r7
 801571a:	f107 030c 	add.w	r3, r7, #12
 801571e:	4611      	mov	r1, r2
 8015720:	4618      	mov	r0, r3
 8015722:	f000 ff1b 	bl	801655c <xTaskCheckForTimeOut>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d132      	bne.n	8015792 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801572c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801572e:	f000 f9f2 	bl	8015b16 <prvIsQueueEmpty>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d026      	beq.n	8015786 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d109      	bne.n	8015754 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015740:	f001 fba0 	bl	8016e84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015746:	689b      	ldr	r3, [r3, #8]
 8015748:	4618      	mov	r0, r3
 801574a:	f001 f86d 	bl	8016828 <xTaskPriorityInherit>
 801574e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015750:	f001 fbc8 	bl	8016ee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015756:	3324      	adds	r3, #36	; 0x24
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	4611      	mov	r1, r2
 801575c:	4618      	mov	r0, r3
 801575e:	f000 fe61 	bl	8016424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015764:	f000 f985 	bl	8015a72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015768:	f000 fc84 	bl	8016074 <xTaskResumeAll>
 801576c:	4603      	mov	r3, r0
 801576e:	2b00      	cmp	r3, #0
 8015770:	f47f af68 	bne.w	8015644 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015774:	4b18      	ldr	r3, [pc, #96]	; (80157d8 <xQueueSemaphoreTake+0x214>)
 8015776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801577a:	601a      	str	r2, [r3, #0]
 801577c:	f3bf 8f4f 	dsb	sy
 8015780:	f3bf 8f6f 	isb	sy
 8015784:	e75e      	b.n	8015644 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015788:	f000 f973 	bl	8015a72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801578c:	f000 fc72 	bl	8016074 <xTaskResumeAll>
 8015790:	e758      	b.n	8015644 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015794:	f000 f96d 	bl	8015a72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015798:	f000 fc6c 	bl	8016074 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801579c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801579e:	f000 f9ba 	bl	8015b16 <prvIsQueueEmpty>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	f43f af4d 	beq.w	8015644 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80157aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d00d      	beq.n	80157cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80157b0:	f001 fb68 	bl	8016e84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80157b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157b6:	f000 f8b4 	bl	8015922 <prvGetDisinheritPriorityAfterTimeout>
 80157ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	689b      	ldr	r3, [r3, #8]
 80157c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157c2:	4618      	mov	r0, r3
 80157c4:	f001 f92c 	bl	8016a20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80157c8:	f001 fb8c 	bl	8016ee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80157cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3738      	adds	r7, #56	; 0x38
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	e000ed04 	.word	0xe000ed04

080157dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b08e      	sub	sp, #56	; 0x38
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d10a      	bne.n	8015808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80157f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f6:	f383 8811 	msr	BASEPRI, r3
 80157fa:	f3bf 8f6f 	isb	sy
 80157fe:	f3bf 8f4f 	dsb	sy
 8015802:	623b      	str	r3, [r7, #32]
}
 8015804:	bf00      	nop
 8015806:	e7fe      	b.n	8015806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d103      	bne.n	8015816 <xQueueReceiveFromISR+0x3a>
 801580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <xQueueReceiveFromISR+0x3e>
 8015816:	2301      	movs	r3, #1
 8015818:	e000      	b.n	801581c <xQueueReceiveFromISR+0x40>
 801581a:	2300      	movs	r3, #0
 801581c:	2b00      	cmp	r3, #0
 801581e:	d10a      	bne.n	8015836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015824:	f383 8811 	msr	BASEPRI, r3
 8015828:	f3bf 8f6f 	isb	sy
 801582c:	f3bf 8f4f 	dsb	sy
 8015830:	61fb      	str	r3, [r7, #28]
}
 8015832:	bf00      	nop
 8015834:	e7fe      	b.n	8015834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015836:	f001 fc07 	bl	8017048 <vPortValidateInterruptPriority>
	__asm volatile
 801583a:	f3ef 8211 	mrs	r2, BASEPRI
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	61ba      	str	r2, [r7, #24]
 8015850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801585a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585e:	2b00      	cmp	r3, #0
 8015860:	d02f      	beq.n	80158c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801586c:	68b9      	ldr	r1, [r7, #8]
 801586e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015870:	f000 f8d9 	bl	8015a26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015876:	1e5a      	subs	r2, r3, #1
 8015878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801587a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801587c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015884:	d112      	bne.n	80158ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015888:	691b      	ldr	r3, [r3, #16]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d016      	beq.n	80158bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015890:	3310      	adds	r3, #16
 8015892:	4618      	mov	r0, r3
 8015894:	f000 fdea 	bl	801646c <xTaskRemoveFromEventList>
 8015898:	4603      	mov	r3, r0
 801589a:	2b00      	cmp	r3, #0
 801589c:	d00e      	beq.n	80158bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d00b      	beq.n	80158bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2201      	movs	r2, #1
 80158a8:	601a      	str	r2, [r3, #0]
 80158aa:	e007      	b.n	80158bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80158ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158b0:	3301      	adds	r3, #1
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	b25a      	sxtb	r2, r3
 80158b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80158bc:	2301      	movs	r3, #1
 80158be:	637b      	str	r3, [r7, #52]	; 0x34
 80158c0:	e001      	b.n	80158c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80158c2:	2300      	movs	r3, #0
 80158c4:	637b      	str	r3, [r7, #52]	; 0x34
 80158c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	f383 8811 	msr	BASEPRI, r3
}
 80158d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80158d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3738      	adds	r7, #56	; 0x38
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d10a      	bne.n	8015904 <vQueueDelete+0x28>
	__asm volatile
 80158ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f2:	f383 8811 	msr	BASEPRI, r3
 80158f6:	f3bf 8f6f 	isb	sy
 80158fa:	f3bf 8f4f 	dsb	sy
 80158fe:	60bb      	str	r3, [r7, #8]
}
 8015900:	bf00      	nop
 8015902:	e7fe      	b.n	8015902 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015904:	68f8      	ldr	r0, [r7, #12]
 8015906:	f000 f935 	bl	8015b74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015910:	2b00      	cmp	r3, #0
 8015912:	d102      	bne.n	801591a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015914:	68f8      	ldr	r0, [r7, #12]
 8015916:	f001 fca3 	bl	8017260 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801591a:	bf00      	nop
 801591c:	3710      	adds	r7, #16
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}

08015922 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015922:	b480      	push	{r7}
 8015924:	b085      	sub	sp, #20
 8015926:	af00      	add	r7, sp, #0
 8015928:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801592e:	2b00      	cmp	r3, #0
 8015930:	d006      	beq.n	8015940 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f1c3 0307 	rsb	r3, r3, #7
 801593c:	60fb      	str	r3, [r7, #12]
 801593e:	e001      	b.n	8015944 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015940:	2300      	movs	r3, #0
 8015942:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015944:	68fb      	ldr	r3, [r7, #12]
	}
 8015946:	4618      	mov	r0, r3
 8015948:	3714      	adds	r7, #20
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr

08015952 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015952:	b580      	push	{r7, lr}
 8015954:	b086      	sub	sp, #24
 8015956:	af00      	add	r7, sp, #0
 8015958:	60f8      	str	r0, [r7, #12]
 801595a:	60b9      	str	r1, [r7, #8]
 801595c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801595e:	2300      	movs	r3, #0
 8015960:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015966:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10d      	bne.n	801598c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d14d      	bne.n	8015a14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	4618      	mov	r0, r3
 801597e:	f000 ffc9 	bl	8016914 <xTaskPriorityDisinherit>
 8015982:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2200      	movs	r2, #0
 8015988:	609a      	str	r2, [r3, #8]
 801598a:	e043      	b.n	8015a14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d119      	bne.n	80159c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	6858      	ldr	r0, [r3, #4]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801599a:	461a      	mov	r2, r3
 801599c:	68b9      	ldr	r1, [r7, #8]
 801599e:	f003 fd8b 	bl	80194b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	685a      	ldr	r2, [r3, #4]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159aa:	441a      	add	r2, r3
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	685a      	ldr	r2, [r3, #4]
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	689b      	ldr	r3, [r3, #8]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d32b      	bcc.n	8015a14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	605a      	str	r2, [r3, #4]
 80159c4:	e026      	b.n	8015a14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	68d8      	ldr	r0, [r3, #12]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159ce:	461a      	mov	r2, r3
 80159d0:	68b9      	ldr	r1, [r7, #8]
 80159d2:	f003 fd71 	bl	80194b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	68da      	ldr	r2, [r3, #12]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159de:	425b      	negs	r3, r3
 80159e0:	441a      	add	r2, r3
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	68da      	ldr	r2, [r3, #12]
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d207      	bcs.n	8015a02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	689a      	ldr	r2, [r3, #8]
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159fa:	425b      	negs	r3, r3
 80159fc:	441a      	add	r2, r3
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b02      	cmp	r3, #2
 8015a06:	d105      	bne.n	8015a14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d002      	beq.n	8015a14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	3b01      	subs	r3, #1
 8015a12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	1c5a      	adds	r2, r3, #1
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015a1c:	697b      	ldr	r3, [r7, #20]
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3718      	adds	r7, #24
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b082      	sub	sp, #8
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d018      	beq.n	8015a6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	68da      	ldr	r2, [r3, #12]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a40:	441a      	add	r2, r3
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	68da      	ldr	r2, [r3, #12]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	689b      	ldr	r3, [r3, #8]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d303      	bcc.n	8015a5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681a      	ldr	r2, [r3, #0]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	68d9      	ldr	r1, [r3, #12]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a62:	461a      	mov	r2, r3
 8015a64:	6838      	ldr	r0, [r7, #0]
 8015a66:	f003 fd27 	bl	80194b8 <memcpy>
	}
}
 8015a6a:	bf00      	nop
 8015a6c:	3708      	adds	r7, #8
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}

08015a72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015a72:	b580      	push	{r7, lr}
 8015a74:	b084      	sub	sp, #16
 8015a76:	af00      	add	r7, sp, #0
 8015a78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015a7a:	f001 fa03 	bl	8016e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015a86:	e011      	b.n	8015aac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d012      	beq.n	8015ab6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	3324      	adds	r3, #36	; 0x24
 8015a94:	4618      	mov	r0, r3
 8015a96:	f000 fce9 	bl	801646c <xTaskRemoveFromEventList>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d001      	beq.n	8015aa4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015aa0:	f000 fdbe 	bl	8016620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015aa4:	7bfb      	ldrb	r3, [r7, #15]
 8015aa6:	3b01      	subs	r3, #1
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	dce9      	bgt.n	8015a88 <prvUnlockQueue+0x16>
 8015ab4:	e000      	b.n	8015ab8 <prvUnlockQueue+0x46>
					break;
 8015ab6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	22ff      	movs	r2, #255	; 0xff
 8015abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015ac0:	f001 fa10 	bl	8016ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015ac4:	f001 f9de 	bl	8016e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ace:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015ad0:	e011      	b.n	8015af6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	691b      	ldr	r3, [r3, #16]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d012      	beq.n	8015b00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	3310      	adds	r3, #16
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 fcc4 	bl	801646c <xTaskRemoveFromEventList>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d001      	beq.n	8015aee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015aea:	f000 fd99 	bl	8016620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015aee:	7bbb      	ldrb	r3, [r7, #14]
 8015af0:	3b01      	subs	r3, #1
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	dce9      	bgt.n	8015ad2 <prvUnlockQueue+0x60>
 8015afe:	e000      	b.n	8015b02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015b00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	22ff      	movs	r2, #255	; 0xff
 8015b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015b0a:	f001 f9eb 	bl	8016ee4 <vPortExitCritical>
}
 8015b0e:	bf00      	nop
 8015b10:	3710      	adds	r7, #16
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b084      	sub	sp, #16
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015b1e:	f001 f9b1 	bl	8016e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d102      	bne.n	8015b30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	60fb      	str	r3, [r7, #12]
 8015b2e:	e001      	b.n	8015b34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015b30:	2300      	movs	r3, #0
 8015b32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015b34:	f001 f9d6 	bl	8016ee4 <vPortExitCritical>

	return xReturn;
 8015b38:	68fb      	ldr	r3, [r7, #12]
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}

08015b42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015b42:	b580      	push	{r7, lr}
 8015b44:	b084      	sub	sp, #16
 8015b46:	af00      	add	r7, sp, #0
 8015b48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015b4a:	f001 f99b 	bl	8016e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d102      	bne.n	8015b60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	60fb      	str	r3, [r7, #12]
 8015b5e:	e001      	b.n	8015b64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015b60:	2300      	movs	r3, #0
 8015b62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015b64:	f001 f9be 	bl	8016ee4 <vPortExitCritical>

	return xReturn;
 8015b68:	68fb      	ldr	r3, [r7, #12]
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3710      	adds	r7, #16
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
	...

08015b74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015b74:	b480      	push	{r7}
 8015b76:	b085      	sub	sp, #20
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	60fb      	str	r3, [r7, #12]
 8015b80:	e016      	b.n	8015bb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015b82:	4a10      	ldr	r2, [pc, #64]	; (8015bc4 <vQueueUnregisterQueue+0x50>)
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	00db      	lsls	r3, r3, #3
 8015b88:	4413      	add	r3, r2
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d10b      	bne.n	8015baa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015b92:	4a0c      	ldr	r2, [pc, #48]	; (8015bc4 <vQueueUnregisterQueue+0x50>)
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2100      	movs	r1, #0
 8015b98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015b9c:	4a09      	ldr	r2, [pc, #36]	; (8015bc4 <vQueueUnregisterQueue+0x50>)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	00db      	lsls	r3, r3, #3
 8015ba2:	4413      	add	r3, r2
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	605a      	str	r2, [r3, #4]
				break;
 8015ba8:	e006      	b.n	8015bb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	3301      	adds	r3, #1
 8015bae:	60fb      	str	r3, [r7, #12]
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	2b07      	cmp	r3, #7
 8015bb4:	d9e5      	bls.n	8015b82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015bb6:	bf00      	nop
 8015bb8:	bf00      	nop
 8015bba:	3714      	adds	r7, #20
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc2:	4770      	bx	lr
 8015bc4:	20003254 	.word	0x20003254

08015bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b08e      	sub	sp, #56	; 0x38
 8015bcc:	af04      	add	r7, sp, #16
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	60b9      	str	r1, [r7, #8]
 8015bd2:	607a      	str	r2, [r7, #4]
 8015bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d10a      	bne.n	8015bf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8015bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015be0:	f383 8811 	msr	BASEPRI, r3
 8015be4:	f3bf 8f6f 	isb	sy
 8015be8:	f3bf 8f4f 	dsb	sy
 8015bec:	623b      	str	r3, [r7, #32]
}
 8015bee:	bf00      	nop
 8015bf0:	e7fe      	b.n	8015bf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d10a      	bne.n	8015c0e <xTaskCreateStatic+0x46>
	__asm volatile
 8015bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfc:	f383 8811 	msr	BASEPRI, r3
 8015c00:	f3bf 8f6f 	isb	sy
 8015c04:	f3bf 8f4f 	dsb	sy
 8015c08:	61fb      	str	r3, [r7, #28]
}
 8015c0a:	bf00      	nop
 8015c0c:	e7fe      	b.n	8015c0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015c0e:	23a0      	movs	r3, #160	; 0xa0
 8015c10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	2ba0      	cmp	r3, #160	; 0xa0
 8015c16:	d00a      	beq.n	8015c2e <xTaskCreateStatic+0x66>
	__asm volatile
 8015c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1c:	f383 8811 	msr	BASEPRI, r3
 8015c20:	f3bf 8f6f 	isb	sy
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	61bb      	str	r3, [r7, #24]
}
 8015c2a:	bf00      	nop
 8015c2c:	e7fe      	b.n	8015c2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d01e      	beq.n	8015c74 <xTaskCreateStatic+0xac>
 8015c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d01b      	beq.n	8015c74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c48:	2202      	movs	r2, #2
 8015c4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015c4e:	2300      	movs	r3, #0
 8015c50:	9303      	str	r3, [sp, #12]
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	9302      	str	r3, [sp, #8]
 8015c56:	f107 0314 	add.w	r3, r7, #20
 8015c5a:	9301      	str	r3, [sp, #4]
 8015c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	687a      	ldr	r2, [r7, #4]
 8015c64:	68b9      	ldr	r1, [r7, #8]
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f000 f850 	bl	8015d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c6e:	f000 f8eb 	bl	8015e48 <prvAddNewTaskToReadyList>
 8015c72:	e001      	b.n	8015c78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8015c74:	2300      	movs	r3, #0
 8015c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015c78:	697b      	ldr	r3, [r7, #20]
	}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3728      	adds	r7, #40	; 0x28
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}

08015c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b08c      	sub	sp, #48	; 0x30
 8015c86:	af04      	add	r7, sp, #16
 8015c88:	60f8      	str	r0, [r7, #12]
 8015c8a:	60b9      	str	r1, [r7, #8]
 8015c8c:	603b      	str	r3, [r7, #0]
 8015c8e:	4613      	mov	r3, r2
 8015c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015c92:	88fb      	ldrh	r3, [r7, #6]
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	4618      	mov	r0, r3
 8015c98:	f001 fa16 	bl	80170c8 <pvPortMalloc>
 8015c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00e      	beq.n	8015cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015ca4:	20a0      	movs	r0, #160	; 0xa0
 8015ca6:	f001 fa0f 	bl	80170c8 <pvPortMalloc>
 8015caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d003      	beq.n	8015cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	697a      	ldr	r2, [r7, #20]
 8015cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8015cb8:	e005      	b.n	8015cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015cba:	6978      	ldr	r0, [r7, #20]
 8015cbc:	f001 fad0 	bl	8017260 <vPortFree>
 8015cc0:	e001      	b.n	8015cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015cc6:	69fb      	ldr	r3, [r7, #28]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d017      	beq.n	8015cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015ccc:	69fb      	ldr	r3, [r7, #28]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015cd4:	88fa      	ldrh	r2, [r7, #6]
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	9303      	str	r3, [sp, #12]
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	9302      	str	r3, [sp, #8]
 8015cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce0:	9301      	str	r3, [sp, #4]
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	9300      	str	r3, [sp, #0]
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	68b9      	ldr	r1, [r7, #8]
 8015cea:	68f8      	ldr	r0, [r7, #12]
 8015cec:	f000 f80e 	bl	8015d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015cf0:	69f8      	ldr	r0, [r7, #28]
 8015cf2:	f000 f8a9 	bl	8015e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	61bb      	str	r3, [r7, #24]
 8015cfa:	e002      	b.n	8015d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015d02:	69bb      	ldr	r3, [r7, #24]
	}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3720      	adds	r7, #32
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b088      	sub	sp, #32
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
 8015d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d24:	3b01      	subs	r3, #1
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4413      	add	r3, r2
 8015d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	f023 0307 	bic.w	r3, r3, #7
 8015d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015d34:	69bb      	ldr	r3, [r7, #24]
 8015d36:	f003 0307 	and.w	r3, r3, #7
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d00a      	beq.n	8015d54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	617b      	str	r3, [r7, #20]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d01f      	beq.n	8015d9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	61fb      	str	r3, [r7, #28]
 8015d5e:	e012      	b.n	8015d86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	4413      	add	r3, r2
 8015d66:	7819      	ldrb	r1, [r3, #0]
 8015d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	3334      	adds	r3, #52	; 0x34
 8015d70:	460a      	mov	r2, r1
 8015d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015d74:	68ba      	ldr	r2, [r7, #8]
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	4413      	add	r3, r2
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d006      	beq.n	8015d8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	3301      	adds	r3, #1
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	2b0f      	cmp	r3, #15
 8015d8a:	d9e9      	bls.n	8015d60 <prvInitialiseNewTask+0x54>
 8015d8c:	e000      	b.n	8015d90 <prvInitialiseNewTask+0x84>
			{
				break;
 8015d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d92:	2200      	movs	r2, #0
 8015d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015d98:	e003      	b.n	8015da2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da4:	2b06      	cmp	r3, #6
 8015da6:	d901      	bls.n	8015dac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015da8:	2306      	movs	r3, #6
 8015daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	2200      	movs	r2, #0
 8015dbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc0:	3304      	adds	r3, #4
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fe ff2a 	bl	8014c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dca:	3318      	adds	r3, #24
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7fe ff25 	bl	8014c1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	f1c3 0207 	rsb	r2, r3, #7
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfa:	334c      	adds	r3, #76	; 0x4c
 8015dfc:	224c      	movs	r2, #76	; 0x4c
 8015dfe:	2100      	movs	r1, #0
 8015e00:	4618      	mov	r0, r3
 8015e02:	f003 fa65 	bl	80192d0 <memset>
 8015e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e08:	4a0c      	ldr	r2, [pc, #48]	; (8015e3c <prvInitialiseNewTask+0x130>)
 8015e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8015e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0e:	4a0c      	ldr	r2, [pc, #48]	; (8015e40 <prvInitialiseNewTask+0x134>)
 8015e10:	655a      	str	r2, [r3, #84]	; 0x54
 8015e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e14:	4a0b      	ldr	r2, [pc, #44]	; (8015e44 <prvInitialiseNewTask+0x138>)
 8015e16:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e18:	683a      	ldr	r2, [r7, #0]
 8015e1a:	68f9      	ldr	r1, [r7, #12]
 8015e1c:	69b8      	ldr	r0, [r7, #24]
 8015e1e:	f000 ff07 	bl	8016c30 <pxPortInitialiseStack>
 8015e22:	4602      	mov	r2, r0
 8015e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d002      	beq.n	8015e34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015e34:	bf00      	nop
 8015e36:	3720      	adds	r7, #32
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	20007c50 	.word	0x20007c50
 8015e40:	20007cb8 	.word	0x20007cb8
 8015e44:	20007d20 	.word	0x20007d20

08015e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015e50:	f001 f818 	bl	8016e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015e54:	4b2a      	ldr	r3, [pc, #168]	; (8015f00 <prvAddNewTaskToReadyList+0xb8>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	4a29      	ldr	r2, [pc, #164]	; (8015f00 <prvAddNewTaskToReadyList+0xb8>)
 8015e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015e5e:	4b29      	ldr	r3, [pc, #164]	; (8015f04 <prvAddNewTaskToReadyList+0xbc>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d109      	bne.n	8015e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015e66:	4a27      	ldr	r2, [pc, #156]	; (8015f04 <prvAddNewTaskToReadyList+0xbc>)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015e6c:	4b24      	ldr	r3, [pc, #144]	; (8015f00 <prvAddNewTaskToReadyList+0xb8>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	d110      	bne.n	8015e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015e74:	f000 fbf8 	bl	8016668 <prvInitialiseTaskLists>
 8015e78:	e00d      	b.n	8015e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015e7a:	4b23      	ldr	r3, [pc, #140]	; (8015f08 <prvAddNewTaskToReadyList+0xc0>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d109      	bne.n	8015e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015e82:	4b20      	ldr	r3, [pc, #128]	; (8015f04 <prvAddNewTaskToReadyList+0xbc>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d802      	bhi.n	8015e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015e90:	4a1c      	ldr	r2, [pc, #112]	; (8015f04 <prvAddNewTaskToReadyList+0xbc>)
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015e96:	4b1d      	ldr	r3, [pc, #116]	; (8015f0c <prvAddNewTaskToReadyList+0xc4>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	4a1b      	ldr	r2, [pc, #108]	; (8015f0c <prvAddNewTaskToReadyList+0xc4>)
 8015e9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ea4:	2201      	movs	r2, #1
 8015ea6:	409a      	lsls	r2, r3
 8015ea8:	4b19      	ldr	r3, [pc, #100]	; (8015f10 <prvAddNewTaskToReadyList+0xc8>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	4313      	orrs	r3, r2
 8015eae:	4a18      	ldr	r2, [pc, #96]	; (8015f10 <prvAddNewTaskToReadyList+0xc8>)
 8015eb0:	6013      	str	r3, [r2, #0]
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eb6:	4613      	mov	r3, r2
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	4413      	add	r3, r2
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	4a15      	ldr	r2, [pc, #84]	; (8015f14 <prvAddNewTaskToReadyList+0xcc>)
 8015ec0:	441a      	add	r2, r3
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	4610      	mov	r0, r2
 8015eca:	f7fe feb4 	bl	8014c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ece:	f001 f809 	bl	8016ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ed2:	4b0d      	ldr	r3, [pc, #52]	; (8015f08 <prvAddNewTaskToReadyList+0xc0>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00e      	beq.n	8015ef8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015eda:	4b0a      	ldr	r3, [pc, #40]	; (8015f04 <prvAddNewTaskToReadyList+0xbc>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d207      	bcs.n	8015ef8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015ee8:	4b0b      	ldr	r3, [pc, #44]	; (8015f18 <prvAddNewTaskToReadyList+0xd0>)
 8015eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015eee:	601a      	str	r2, [r3, #0]
 8015ef0:	f3bf 8f4f 	dsb	sy
 8015ef4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ef8:	bf00      	nop
 8015efa:	3708      	adds	r7, #8
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	20003394 	.word	0x20003394
 8015f04:	20003294 	.word	0x20003294
 8015f08:	200033a0 	.word	0x200033a0
 8015f0c:	200033b0 	.word	0x200033b0
 8015f10:	2000339c 	.word	0x2000339c
 8015f14:	20003298 	.word	0x20003298
 8015f18:	e000ed04 	.word	0xe000ed04

08015f1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015f24:	2300      	movs	r3, #0
 8015f26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d017      	beq.n	8015f5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015f2e:	4b13      	ldr	r3, [pc, #76]	; (8015f7c <vTaskDelay+0x60>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d00a      	beq.n	8015f4c <vTaskDelay+0x30>
	__asm volatile
 8015f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f3a:	f383 8811 	msr	BASEPRI, r3
 8015f3e:	f3bf 8f6f 	isb	sy
 8015f42:	f3bf 8f4f 	dsb	sy
 8015f46:	60bb      	str	r3, [r7, #8]
}
 8015f48:	bf00      	nop
 8015f4a:	e7fe      	b.n	8015f4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015f4c:	f000 f884 	bl	8016058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015f50:	2100      	movs	r1, #0
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 fe06 	bl	8016b64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015f58:	f000 f88c 	bl	8016074 <xTaskResumeAll>
 8015f5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d107      	bne.n	8015f74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015f64:	4b06      	ldr	r3, [pc, #24]	; (8015f80 <vTaskDelay+0x64>)
 8015f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f6a:	601a      	str	r2, [r3, #0]
 8015f6c:	f3bf 8f4f 	dsb	sy
 8015f70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	200033bc 	.word	0x200033bc
 8015f80:	e000ed04 	.word	0xe000ed04

08015f84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08a      	sub	sp, #40	; 0x28
 8015f88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015f92:	463a      	mov	r2, r7
 8015f94:	1d39      	adds	r1, r7, #4
 8015f96:	f107 0308 	add.w	r3, r7, #8
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7eb fd70 	bl	8001a80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015fa0:	6839      	ldr	r1, [r7, #0]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	68ba      	ldr	r2, [r7, #8]
 8015fa6:	9202      	str	r2, [sp, #8]
 8015fa8:	9301      	str	r3, [sp, #4]
 8015faa:	2300      	movs	r3, #0
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	2300      	movs	r3, #0
 8015fb0:	460a      	mov	r2, r1
 8015fb2:	4921      	ldr	r1, [pc, #132]	; (8016038 <vTaskStartScheduler+0xb4>)
 8015fb4:	4821      	ldr	r0, [pc, #132]	; (801603c <vTaskStartScheduler+0xb8>)
 8015fb6:	f7ff fe07 	bl	8015bc8 <xTaskCreateStatic>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	4a20      	ldr	r2, [pc, #128]	; (8016040 <vTaskStartScheduler+0xbc>)
 8015fbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015fc0:	4b1f      	ldr	r3, [pc, #124]	; (8016040 <vTaskStartScheduler+0xbc>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d002      	beq.n	8015fce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	617b      	str	r3, [r7, #20]
 8015fcc:	e001      	b.n	8015fd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d11b      	bne.n	8016010 <vTaskStartScheduler+0x8c>
	__asm volatile
 8015fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fdc:	f383 8811 	msr	BASEPRI, r3
 8015fe0:	f3bf 8f6f 	isb	sy
 8015fe4:	f3bf 8f4f 	dsb	sy
 8015fe8:	613b      	str	r3, [r7, #16]
}
 8015fea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015fec:	4b15      	ldr	r3, [pc, #84]	; (8016044 <vTaskStartScheduler+0xc0>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	334c      	adds	r3, #76	; 0x4c
 8015ff2:	4a15      	ldr	r2, [pc, #84]	; (8016048 <vTaskStartScheduler+0xc4>)
 8015ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015ff6:	4b15      	ldr	r3, [pc, #84]	; (801604c <vTaskStartScheduler+0xc8>)
 8015ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8015ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015ffe:	4b14      	ldr	r3, [pc, #80]	; (8016050 <vTaskStartScheduler+0xcc>)
 8016000:	2201      	movs	r2, #1
 8016002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016004:	4b13      	ldr	r3, [pc, #76]	; (8016054 <vTaskStartScheduler+0xd0>)
 8016006:	2200      	movs	r2, #0
 8016008:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801600a:	f000 fe99 	bl	8016d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801600e:	e00e      	b.n	801602e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016016:	d10a      	bne.n	801602e <vTaskStartScheduler+0xaa>
	__asm volatile
 8016018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801601c:	f383 8811 	msr	BASEPRI, r3
 8016020:	f3bf 8f6f 	isb	sy
 8016024:	f3bf 8f4f 	dsb	sy
 8016028:	60fb      	str	r3, [r7, #12]
}
 801602a:	bf00      	nop
 801602c:	e7fe      	b.n	801602c <vTaskStartScheduler+0xa8>
}
 801602e:	bf00      	nop
 8016030:	3718      	adds	r7, #24
 8016032:	46bd      	mov	sp, r7
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	0801d6dc 	.word	0x0801d6dc
 801603c:	08016639 	.word	0x08016639
 8016040:	200033b8 	.word	0x200033b8
 8016044:	20003294 	.word	0x20003294
 8016048:	20000198 	.word	0x20000198
 801604c:	200033b4 	.word	0x200033b4
 8016050:	200033a0 	.word	0x200033a0
 8016054:	20003398 	.word	0x20003398

08016058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016058:	b480      	push	{r7}
 801605a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801605c:	4b04      	ldr	r3, [pc, #16]	; (8016070 <vTaskSuspendAll+0x18>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	3301      	adds	r3, #1
 8016062:	4a03      	ldr	r2, [pc, #12]	; (8016070 <vTaskSuspendAll+0x18>)
 8016064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016066:	bf00      	nop
 8016068:	46bd      	mov	sp, r7
 801606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606e:	4770      	bx	lr
 8016070:	200033bc 	.word	0x200033bc

08016074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801607a:	2300      	movs	r3, #0
 801607c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801607e:	2300      	movs	r3, #0
 8016080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016082:	4b41      	ldr	r3, [pc, #260]	; (8016188 <xTaskResumeAll+0x114>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d10a      	bne.n	80160a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801608e:	f383 8811 	msr	BASEPRI, r3
 8016092:	f3bf 8f6f 	isb	sy
 8016096:	f3bf 8f4f 	dsb	sy
 801609a:	603b      	str	r3, [r7, #0]
}
 801609c:	bf00      	nop
 801609e:	e7fe      	b.n	801609e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80160a0:	f000 fef0 	bl	8016e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80160a4:	4b38      	ldr	r3, [pc, #224]	; (8016188 <xTaskResumeAll+0x114>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	3b01      	subs	r3, #1
 80160aa:	4a37      	ldr	r2, [pc, #220]	; (8016188 <xTaskResumeAll+0x114>)
 80160ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160ae:	4b36      	ldr	r3, [pc, #216]	; (8016188 <xTaskResumeAll+0x114>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d161      	bne.n	801617a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80160b6:	4b35      	ldr	r3, [pc, #212]	; (801618c <xTaskResumeAll+0x118>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d05d      	beq.n	801617a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80160be:	e02e      	b.n	801611e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80160c0:	4b33      	ldr	r3, [pc, #204]	; (8016190 <xTaskResumeAll+0x11c>)
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	3318      	adds	r3, #24
 80160cc:	4618      	mov	r0, r3
 80160ce:	f7fe fe0f 	bl	8014cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	3304      	adds	r3, #4
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7fe fe0a 	bl	8014cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160e0:	2201      	movs	r2, #1
 80160e2:	409a      	lsls	r2, r3
 80160e4:	4b2b      	ldr	r3, [pc, #172]	; (8016194 <xTaskResumeAll+0x120>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4313      	orrs	r3, r2
 80160ea:	4a2a      	ldr	r2, [pc, #168]	; (8016194 <xTaskResumeAll+0x120>)
 80160ec:	6013      	str	r3, [r2, #0]
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160f2:	4613      	mov	r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	4413      	add	r3, r2
 80160f8:	009b      	lsls	r3, r3, #2
 80160fa:	4a27      	ldr	r2, [pc, #156]	; (8016198 <xTaskResumeAll+0x124>)
 80160fc:	441a      	add	r2, r3
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	3304      	adds	r3, #4
 8016102:	4619      	mov	r1, r3
 8016104:	4610      	mov	r0, r2
 8016106:	f7fe fd96 	bl	8014c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801610e:	4b23      	ldr	r3, [pc, #140]	; (801619c <xTaskResumeAll+0x128>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016114:	429a      	cmp	r2, r3
 8016116:	d302      	bcc.n	801611e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016118:	4b21      	ldr	r3, [pc, #132]	; (80161a0 <xTaskResumeAll+0x12c>)
 801611a:	2201      	movs	r2, #1
 801611c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801611e:	4b1c      	ldr	r3, [pc, #112]	; (8016190 <xTaskResumeAll+0x11c>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d1cc      	bne.n	80160c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801612c:	f000 fb3e 	bl	80167ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016130:	4b1c      	ldr	r3, [pc, #112]	; (80161a4 <xTaskResumeAll+0x130>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d010      	beq.n	801615e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801613c:	f000 f858 	bl	80161f0 <xTaskIncrementTick>
 8016140:	4603      	mov	r3, r0
 8016142:	2b00      	cmp	r3, #0
 8016144:	d002      	beq.n	801614c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016146:	4b16      	ldr	r3, [pc, #88]	; (80161a0 <xTaskResumeAll+0x12c>)
 8016148:	2201      	movs	r2, #1
 801614a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	3b01      	subs	r3, #1
 8016150:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1f1      	bne.n	801613c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016158:	4b12      	ldr	r3, [pc, #72]	; (80161a4 <xTaskResumeAll+0x130>)
 801615a:	2200      	movs	r2, #0
 801615c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801615e:	4b10      	ldr	r3, [pc, #64]	; (80161a0 <xTaskResumeAll+0x12c>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d009      	beq.n	801617a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016166:	2301      	movs	r3, #1
 8016168:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801616a:	4b0f      	ldr	r3, [pc, #60]	; (80161a8 <xTaskResumeAll+0x134>)
 801616c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016170:	601a      	str	r2, [r3, #0]
 8016172:	f3bf 8f4f 	dsb	sy
 8016176:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801617a:	f000 feb3 	bl	8016ee4 <vPortExitCritical>

	return xAlreadyYielded;
 801617e:	68bb      	ldr	r3, [r7, #8]
}
 8016180:	4618      	mov	r0, r3
 8016182:	3710      	adds	r7, #16
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}
 8016188:	200033bc 	.word	0x200033bc
 801618c:	20003394 	.word	0x20003394
 8016190:	20003354 	.word	0x20003354
 8016194:	2000339c 	.word	0x2000339c
 8016198:	20003298 	.word	0x20003298
 801619c:	20003294 	.word	0x20003294
 80161a0:	200033a8 	.word	0x200033a8
 80161a4:	200033a4 	.word	0x200033a4
 80161a8:	e000ed04 	.word	0xe000ed04

080161ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80161b2:	4b05      	ldr	r3, [pc, #20]	; (80161c8 <xTaskGetTickCount+0x1c>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80161b8:	687b      	ldr	r3, [r7, #4]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	370c      	adds	r7, #12
 80161be:	46bd      	mov	sp, r7
 80161c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c4:	4770      	bx	lr
 80161c6:	bf00      	nop
 80161c8:	20003398 	.word	0x20003398

080161cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80161d2:	f000 ff39 	bl	8017048 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80161d6:	2300      	movs	r3, #0
 80161d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80161da:	4b04      	ldr	r3, [pc, #16]	; (80161ec <xTaskGetTickCountFromISR+0x20>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80161e0:	683b      	ldr	r3, [r7, #0]
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	20003398 	.word	0x20003398

080161f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b086      	sub	sp, #24
 80161f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80161f6:	2300      	movs	r3, #0
 80161f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80161fa:	4b4e      	ldr	r3, [pc, #312]	; (8016334 <xTaskIncrementTick+0x144>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f040 808e 	bne.w	8016320 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016204:	4b4c      	ldr	r3, [pc, #304]	; (8016338 <xTaskIncrementTick+0x148>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	3301      	adds	r3, #1
 801620a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801620c:	4a4a      	ldr	r2, [pc, #296]	; (8016338 <xTaskIncrementTick+0x148>)
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d120      	bne.n	801625a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016218:	4b48      	ldr	r3, [pc, #288]	; (801633c <xTaskIncrementTick+0x14c>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d00a      	beq.n	8016238 <xTaskIncrementTick+0x48>
	__asm volatile
 8016222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016226:	f383 8811 	msr	BASEPRI, r3
 801622a:	f3bf 8f6f 	isb	sy
 801622e:	f3bf 8f4f 	dsb	sy
 8016232:	603b      	str	r3, [r7, #0]
}
 8016234:	bf00      	nop
 8016236:	e7fe      	b.n	8016236 <xTaskIncrementTick+0x46>
 8016238:	4b40      	ldr	r3, [pc, #256]	; (801633c <xTaskIncrementTick+0x14c>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	60fb      	str	r3, [r7, #12]
 801623e:	4b40      	ldr	r3, [pc, #256]	; (8016340 <xTaskIncrementTick+0x150>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	4a3e      	ldr	r2, [pc, #248]	; (801633c <xTaskIncrementTick+0x14c>)
 8016244:	6013      	str	r3, [r2, #0]
 8016246:	4a3e      	ldr	r2, [pc, #248]	; (8016340 <xTaskIncrementTick+0x150>)
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	6013      	str	r3, [r2, #0]
 801624c:	4b3d      	ldr	r3, [pc, #244]	; (8016344 <xTaskIncrementTick+0x154>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	3301      	adds	r3, #1
 8016252:	4a3c      	ldr	r2, [pc, #240]	; (8016344 <xTaskIncrementTick+0x154>)
 8016254:	6013      	str	r3, [r2, #0]
 8016256:	f000 faa9 	bl	80167ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801625a:	4b3b      	ldr	r3, [pc, #236]	; (8016348 <xTaskIncrementTick+0x158>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	693a      	ldr	r2, [r7, #16]
 8016260:	429a      	cmp	r2, r3
 8016262:	d348      	bcc.n	80162f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016264:	4b35      	ldr	r3, [pc, #212]	; (801633c <xTaskIncrementTick+0x14c>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d104      	bne.n	8016278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801626e:	4b36      	ldr	r3, [pc, #216]	; (8016348 <xTaskIncrementTick+0x158>)
 8016270:	f04f 32ff 	mov.w	r2, #4294967295
 8016274:	601a      	str	r2, [r3, #0]
					break;
 8016276:	e03e      	b.n	80162f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016278:	4b30      	ldr	r3, [pc, #192]	; (801633c <xTaskIncrementTick+0x14c>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016288:	693a      	ldr	r2, [r7, #16]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	429a      	cmp	r2, r3
 801628e:	d203      	bcs.n	8016298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016290:	4a2d      	ldr	r2, [pc, #180]	; (8016348 <xTaskIncrementTick+0x158>)
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016296:	e02e      	b.n	80162f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	3304      	adds	r3, #4
 801629c:	4618      	mov	r0, r3
 801629e:	f7fe fd27 	bl	8014cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d004      	beq.n	80162b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	3318      	adds	r3, #24
 80162ae:	4618      	mov	r0, r3
 80162b0:	f7fe fd1e 	bl	8014cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162b8:	2201      	movs	r2, #1
 80162ba:	409a      	lsls	r2, r3
 80162bc:	4b23      	ldr	r3, [pc, #140]	; (801634c <xTaskIncrementTick+0x15c>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	4313      	orrs	r3, r2
 80162c2:	4a22      	ldr	r2, [pc, #136]	; (801634c <xTaskIncrementTick+0x15c>)
 80162c4:	6013      	str	r3, [r2, #0]
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162ca:	4613      	mov	r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	4a1f      	ldr	r2, [pc, #124]	; (8016350 <xTaskIncrementTick+0x160>)
 80162d4:	441a      	add	r2, r3
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	3304      	adds	r3, #4
 80162da:	4619      	mov	r1, r3
 80162dc:	4610      	mov	r0, r2
 80162de:	f7fe fcaa 	bl	8014c36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162e6:	4b1b      	ldr	r3, [pc, #108]	; (8016354 <xTaskIncrementTick+0x164>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d3b9      	bcc.n	8016264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80162f0:	2301      	movs	r3, #1
 80162f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80162f4:	e7b6      	b.n	8016264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80162f6:	4b17      	ldr	r3, [pc, #92]	; (8016354 <xTaskIncrementTick+0x164>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162fc:	4914      	ldr	r1, [pc, #80]	; (8016350 <xTaskIncrementTick+0x160>)
 80162fe:	4613      	mov	r3, r2
 8016300:	009b      	lsls	r3, r3, #2
 8016302:	4413      	add	r3, r2
 8016304:	009b      	lsls	r3, r3, #2
 8016306:	440b      	add	r3, r1
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	2b01      	cmp	r3, #1
 801630c:	d901      	bls.n	8016312 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801630e:	2301      	movs	r3, #1
 8016310:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016312:	4b11      	ldr	r3, [pc, #68]	; (8016358 <xTaskIncrementTick+0x168>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d007      	beq.n	801632a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801631a:	2301      	movs	r3, #1
 801631c:	617b      	str	r3, [r7, #20]
 801631e:	e004      	b.n	801632a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016320:	4b0e      	ldr	r3, [pc, #56]	; (801635c <xTaskIncrementTick+0x16c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	3301      	adds	r3, #1
 8016326:	4a0d      	ldr	r2, [pc, #52]	; (801635c <xTaskIncrementTick+0x16c>)
 8016328:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801632a:	697b      	ldr	r3, [r7, #20]
}
 801632c:	4618      	mov	r0, r3
 801632e:	3718      	adds	r7, #24
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	200033bc 	.word	0x200033bc
 8016338:	20003398 	.word	0x20003398
 801633c:	2000334c 	.word	0x2000334c
 8016340:	20003350 	.word	0x20003350
 8016344:	200033ac 	.word	0x200033ac
 8016348:	200033b4 	.word	0x200033b4
 801634c:	2000339c 	.word	0x2000339c
 8016350:	20003298 	.word	0x20003298
 8016354:	20003294 	.word	0x20003294
 8016358:	200033a8 	.word	0x200033a8
 801635c:	200033a4 	.word	0x200033a4

08016360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016360:	b480      	push	{r7}
 8016362:	b087      	sub	sp, #28
 8016364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016366:	4b29      	ldr	r3, [pc, #164]	; (801640c <vTaskSwitchContext+0xac>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d003      	beq.n	8016376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801636e:	4b28      	ldr	r3, [pc, #160]	; (8016410 <vTaskSwitchContext+0xb0>)
 8016370:	2201      	movs	r2, #1
 8016372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016374:	e044      	b.n	8016400 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8016376:	4b26      	ldr	r3, [pc, #152]	; (8016410 <vTaskSwitchContext+0xb0>)
 8016378:	2200      	movs	r2, #0
 801637a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801637c:	4b25      	ldr	r3, [pc, #148]	; (8016414 <vTaskSwitchContext+0xb4>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	fab3 f383 	clz	r3, r3
 8016388:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801638a:	7afb      	ldrb	r3, [r7, #11]
 801638c:	f1c3 031f 	rsb	r3, r3, #31
 8016390:	617b      	str	r3, [r7, #20]
 8016392:	4921      	ldr	r1, [pc, #132]	; (8016418 <vTaskSwitchContext+0xb8>)
 8016394:	697a      	ldr	r2, [r7, #20]
 8016396:	4613      	mov	r3, r2
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	4413      	add	r3, r2
 801639c:	009b      	lsls	r3, r3, #2
 801639e:	440b      	add	r3, r1
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d10a      	bne.n	80163bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80163a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163aa:	f383 8811 	msr	BASEPRI, r3
 80163ae:	f3bf 8f6f 	isb	sy
 80163b2:	f3bf 8f4f 	dsb	sy
 80163b6:	607b      	str	r3, [r7, #4]
}
 80163b8:	bf00      	nop
 80163ba:	e7fe      	b.n	80163ba <vTaskSwitchContext+0x5a>
 80163bc:	697a      	ldr	r2, [r7, #20]
 80163be:	4613      	mov	r3, r2
 80163c0:	009b      	lsls	r3, r3, #2
 80163c2:	4413      	add	r3, r2
 80163c4:	009b      	lsls	r3, r3, #2
 80163c6:	4a14      	ldr	r2, [pc, #80]	; (8016418 <vTaskSwitchContext+0xb8>)
 80163c8:	4413      	add	r3, r2
 80163ca:	613b      	str	r3, [r7, #16]
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	685a      	ldr	r2, [r3, #4]
 80163d2:	693b      	ldr	r3, [r7, #16]
 80163d4:	605a      	str	r2, [r3, #4]
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	685a      	ldr	r2, [r3, #4]
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	3308      	adds	r3, #8
 80163de:	429a      	cmp	r2, r3
 80163e0:	d104      	bne.n	80163ec <vTaskSwitchContext+0x8c>
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	685a      	ldr	r2, [r3, #4]
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	605a      	str	r2, [r3, #4]
 80163ec:	693b      	ldr	r3, [r7, #16]
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	68db      	ldr	r3, [r3, #12]
 80163f2:	4a0a      	ldr	r2, [pc, #40]	; (801641c <vTaskSwitchContext+0xbc>)
 80163f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80163f6:	4b09      	ldr	r3, [pc, #36]	; (801641c <vTaskSwitchContext+0xbc>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	334c      	adds	r3, #76	; 0x4c
 80163fc:	4a08      	ldr	r2, [pc, #32]	; (8016420 <vTaskSwitchContext+0xc0>)
 80163fe:	6013      	str	r3, [r2, #0]
}
 8016400:	bf00      	nop
 8016402:	371c      	adds	r7, #28
 8016404:	46bd      	mov	sp, r7
 8016406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640a:	4770      	bx	lr
 801640c:	200033bc 	.word	0x200033bc
 8016410:	200033a8 	.word	0x200033a8
 8016414:	2000339c 	.word	0x2000339c
 8016418:	20003298 	.word	0x20003298
 801641c:	20003294 	.word	0x20003294
 8016420:	20000198 	.word	0x20000198

08016424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d10a      	bne.n	801644a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016438:	f383 8811 	msr	BASEPRI, r3
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	60fb      	str	r3, [r7, #12]
}
 8016446:	bf00      	nop
 8016448:	e7fe      	b.n	8016448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801644a:	4b07      	ldr	r3, [pc, #28]	; (8016468 <vTaskPlaceOnEventList+0x44>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	3318      	adds	r3, #24
 8016450:	4619      	mov	r1, r3
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f7fe fc13 	bl	8014c7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016458:	2101      	movs	r1, #1
 801645a:	6838      	ldr	r0, [r7, #0]
 801645c:	f000 fb82 	bl	8016b64 <prvAddCurrentTaskToDelayedList>
}
 8016460:	bf00      	nop
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	20003294 	.word	0x20003294

0801646c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b086      	sub	sp, #24
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	68db      	ldr	r3, [r3, #12]
 801647a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d10a      	bne.n	8016498 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016486:	f383 8811 	msr	BASEPRI, r3
 801648a:	f3bf 8f6f 	isb	sy
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	60fb      	str	r3, [r7, #12]
}
 8016494:	bf00      	nop
 8016496:	e7fe      	b.n	8016496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	3318      	adds	r3, #24
 801649c:	4618      	mov	r0, r3
 801649e:	f7fe fc27 	bl	8014cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164a2:	4b1d      	ldr	r3, [pc, #116]	; (8016518 <xTaskRemoveFromEventList+0xac>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d11c      	bne.n	80164e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	3304      	adds	r3, #4
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fe fc1e 	bl	8014cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164b8:	2201      	movs	r2, #1
 80164ba:	409a      	lsls	r2, r3
 80164bc:	4b17      	ldr	r3, [pc, #92]	; (801651c <xTaskRemoveFromEventList+0xb0>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4313      	orrs	r3, r2
 80164c2:	4a16      	ldr	r2, [pc, #88]	; (801651c <xTaskRemoveFromEventList+0xb0>)
 80164c4:	6013      	str	r3, [r2, #0]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164ca:	4613      	mov	r3, r2
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	4413      	add	r3, r2
 80164d0:	009b      	lsls	r3, r3, #2
 80164d2:	4a13      	ldr	r2, [pc, #76]	; (8016520 <xTaskRemoveFromEventList+0xb4>)
 80164d4:	441a      	add	r2, r3
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	3304      	adds	r3, #4
 80164da:	4619      	mov	r1, r3
 80164dc:	4610      	mov	r0, r2
 80164de:	f7fe fbaa 	bl	8014c36 <vListInsertEnd>
 80164e2:	e005      	b.n	80164f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	3318      	adds	r3, #24
 80164e8:	4619      	mov	r1, r3
 80164ea:	480e      	ldr	r0, [pc, #56]	; (8016524 <xTaskRemoveFromEventList+0xb8>)
 80164ec:	f7fe fba3 	bl	8014c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164f4:	4b0c      	ldr	r3, [pc, #48]	; (8016528 <xTaskRemoveFromEventList+0xbc>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d905      	bls.n	801650a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80164fe:	2301      	movs	r3, #1
 8016500:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016502:	4b0a      	ldr	r3, [pc, #40]	; (801652c <xTaskRemoveFromEventList+0xc0>)
 8016504:	2201      	movs	r2, #1
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	e001      	b.n	801650e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801650a:	2300      	movs	r3, #0
 801650c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801650e:	697b      	ldr	r3, [r7, #20]
}
 8016510:	4618      	mov	r0, r3
 8016512:	3718      	adds	r7, #24
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	200033bc 	.word	0x200033bc
 801651c:	2000339c 	.word	0x2000339c
 8016520:	20003298 	.word	0x20003298
 8016524:	20003354 	.word	0x20003354
 8016528:	20003294 	.word	0x20003294
 801652c:	200033a8 	.word	0x200033a8

08016530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016538:	4b06      	ldr	r3, [pc, #24]	; (8016554 <vTaskInternalSetTimeOutState+0x24>)
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016540:	4b05      	ldr	r3, [pc, #20]	; (8016558 <vTaskInternalSetTimeOutState+0x28>)
 8016542:	681a      	ldr	r2, [r3, #0]
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	605a      	str	r2, [r3, #4]
}
 8016548:	bf00      	nop
 801654a:	370c      	adds	r7, #12
 801654c:	46bd      	mov	sp, r7
 801654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016552:	4770      	bx	lr
 8016554:	200033ac 	.word	0x200033ac
 8016558:	20003398 	.word	0x20003398

0801655c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b088      	sub	sp, #32
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d10a      	bne.n	8016582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016570:	f383 8811 	msr	BASEPRI, r3
 8016574:	f3bf 8f6f 	isb	sy
 8016578:	f3bf 8f4f 	dsb	sy
 801657c:	613b      	str	r3, [r7, #16]
}
 801657e:	bf00      	nop
 8016580:	e7fe      	b.n	8016580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d10a      	bne.n	801659e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801658c:	f383 8811 	msr	BASEPRI, r3
 8016590:	f3bf 8f6f 	isb	sy
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	60fb      	str	r3, [r7, #12]
}
 801659a:	bf00      	nop
 801659c:	e7fe      	b.n	801659c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801659e:	f000 fc71 	bl	8016e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80165a2:	4b1d      	ldr	r3, [pc, #116]	; (8016618 <xTaskCheckForTimeOut+0xbc>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	685b      	ldr	r3, [r3, #4]
 80165ac:	69ba      	ldr	r2, [r7, #24]
 80165ae:	1ad3      	subs	r3, r2, r3
 80165b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ba:	d102      	bne.n	80165c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80165bc:	2300      	movs	r3, #0
 80165be:	61fb      	str	r3, [r7, #28]
 80165c0:	e023      	b.n	801660a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	4b15      	ldr	r3, [pc, #84]	; (801661c <xTaskCheckForTimeOut+0xc0>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d007      	beq.n	80165de <xTaskCheckForTimeOut+0x82>
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	69ba      	ldr	r2, [r7, #24]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d302      	bcc.n	80165de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80165d8:	2301      	movs	r3, #1
 80165da:	61fb      	str	r3, [r7, #28]
 80165dc:	e015      	b.n	801660a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	697a      	ldr	r2, [r7, #20]
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d20b      	bcs.n	8016600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	1ad2      	subs	r2, r2, r3
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f7ff ff9b 	bl	8016530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80165fa:	2300      	movs	r3, #0
 80165fc:	61fb      	str	r3, [r7, #28]
 80165fe:	e004      	b.n	801660a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	2200      	movs	r2, #0
 8016604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016606:	2301      	movs	r3, #1
 8016608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801660a:	f000 fc6b 	bl	8016ee4 <vPortExitCritical>

	return xReturn;
 801660e:	69fb      	ldr	r3, [r7, #28]
}
 8016610:	4618      	mov	r0, r3
 8016612:	3720      	adds	r7, #32
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	20003398 	.word	0x20003398
 801661c:	200033ac 	.word	0x200033ac

08016620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016620:	b480      	push	{r7}
 8016622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016624:	4b03      	ldr	r3, [pc, #12]	; (8016634 <vTaskMissedYield+0x14>)
 8016626:	2201      	movs	r2, #1
 8016628:	601a      	str	r2, [r3, #0]
}
 801662a:	bf00      	nop
 801662c:	46bd      	mov	sp, r7
 801662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016632:	4770      	bx	lr
 8016634:	200033a8 	.word	0x200033a8

08016638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016640:	f000 f852 	bl	80166e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016644:	4b06      	ldr	r3, [pc, #24]	; (8016660 <prvIdleTask+0x28>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b01      	cmp	r3, #1
 801664a:	d9f9      	bls.n	8016640 <prvIdleTask+0x8>
			{
				taskYIELD();
 801664c:	4b05      	ldr	r3, [pc, #20]	; (8016664 <prvIdleTask+0x2c>)
 801664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016652:	601a      	str	r2, [r3, #0]
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801665c:	e7f0      	b.n	8016640 <prvIdleTask+0x8>
 801665e:	bf00      	nop
 8016660:	20003298 	.word	0x20003298
 8016664:	e000ed04 	.word	0xe000ed04

08016668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801666e:	2300      	movs	r3, #0
 8016670:	607b      	str	r3, [r7, #4]
 8016672:	e00c      	b.n	801668e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016674:	687a      	ldr	r2, [r7, #4]
 8016676:	4613      	mov	r3, r2
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	4413      	add	r3, r2
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	4a12      	ldr	r2, [pc, #72]	; (80166c8 <prvInitialiseTaskLists+0x60>)
 8016680:	4413      	add	r3, r2
 8016682:	4618      	mov	r0, r3
 8016684:	f7fe faaa 	bl	8014bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	3301      	adds	r3, #1
 801668c:	607b      	str	r3, [r7, #4]
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2b06      	cmp	r3, #6
 8016692:	d9ef      	bls.n	8016674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016694:	480d      	ldr	r0, [pc, #52]	; (80166cc <prvInitialiseTaskLists+0x64>)
 8016696:	f7fe faa1 	bl	8014bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801669a:	480d      	ldr	r0, [pc, #52]	; (80166d0 <prvInitialiseTaskLists+0x68>)
 801669c:	f7fe fa9e 	bl	8014bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80166a0:	480c      	ldr	r0, [pc, #48]	; (80166d4 <prvInitialiseTaskLists+0x6c>)
 80166a2:	f7fe fa9b 	bl	8014bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80166a6:	480c      	ldr	r0, [pc, #48]	; (80166d8 <prvInitialiseTaskLists+0x70>)
 80166a8:	f7fe fa98 	bl	8014bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80166ac:	480b      	ldr	r0, [pc, #44]	; (80166dc <prvInitialiseTaskLists+0x74>)
 80166ae:	f7fe fa95 	bl	8014bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80166b2:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <prvInitialiseTaskLists+0x78>)
 80166b4:	4a05      	ldr	r2, [pc, #20]	; (80166cc <prvInitialiseTaskLists+0x64>)
 80166b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80166b8:	4b0a      	ldr	r3, [pc, #40]	; (80166e4 <prvInitialiseTaskLists+0x7c>)
 80166ba:	4a05      	ldr	r2, [pc, #20]	; (80166d0 <prvInitialiseTaskLists+0x68>)
 80166bc:	601a      	str	r2, [r3, #0]
}
 80166be:	bf00      	nop
 80166c0:	3708      	adds	r7, #8
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}
 80166c6:	bf00      	nop
 80166c8:	20003298 	.word	0x20003298
 80166cc:	20003324 	.word	0x20003324
 80166d0:	20003338 	.word	0x20003338
 80166d4:	20003354 	.word	0x20003354
 80166d8:	20003368 	.word	0x20003368
 80166dc:	20003380 	.word	0x20003380
 80166e0:	2000334c 	.word	0x2000334c
 80166e4:	20003350 	.word	0x20003350

080166e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166ee:	e019      	b.n	8016724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80166f0:	f000 fbc8 	bl	8016e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166f4:	4b10      	ldr	r3, [pc, #64]	; (8016738 <prvCheckTasksWaitingTermination+0x50>)
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	3304      	adds	r3, #4
 8016700:	4618      	mov	r0, r3
 8016702:	f7fe faf5 	bl	8014cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016706:	4b0d      	ldr	r3, [pc, #52]	; (801673c <prvCheckTasksWaitingTermination+0x54>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	3b01      	subs	r3, #1
 801670c:	4a0b      	ldr	r2, [pc, #44]	; (801673c <prvCheckTasksWaitingTermination+0x54>)
 801670e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016710:	4b0b      	ldr	r3, [pc, #44]	; (8016740 <prvCheckTasksWaitingTermination+0x58>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	3b01      	subs	r3, #1
 8016716:	4a0a      	ldr	r2, [pc, #40]	; (8016740 <prvCheckTasksWaitingTermination+0x58>)
 8016718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801671a:	f000 fbe3 	bl	8016ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f000 f810 	bl	8016744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016724:	4b06      	ldr	r3, [pc, #24]	; (8016740 <prvCheckTasksWaitingTermination+0x58>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d1e1      	bne.n	80166f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801672c:	bf00      	nop
 801672e:	bf00      	nop
 8016730:	3708      	adds	r7, #8
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	20003368 	.word	0x20003368
 801673c:	20003394 	.word	0x20003394
 8016740:	2000337c 	.word	0x2000337c

08016744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	334c      	adds	r3, #76	; 0x4c
 8016750:	4618      	mov	r0, r3
 8016752:	f002 fde9 	bl	8019328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801675c:	2b00      	cmp	r3, #0
 801675e:	d108      	bne.n	8016772 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016764:	4618      	mov	r0, r3
 8016766:	f000 fd7b 	bl	8017260 <vPortFree>
				vPortFree( pxTCB );
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f000 fd78 	bl	8017260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016770:	e018      	b.n	80167a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8016778:	2b01      	cmp	r3, #1
 801677a:	d103      	bne.n	8016784 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 fd6f 	bl	8017260 <vPortFree>
	}
 8016782:	e00f      	b.n	80167a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801678a:	2b02      	cmp	r3, #2
 801678c:	d00a      	beq.n	80167a4 <prvDeleteTCB+0x60>
	__asm volatile
 801678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016792:	f383 8811 	msr	BASEPRI, r3
 8016796:	f3bf 8f6f 	isb	sy
 801679a:	f3bf 8f4f 	dsb	sy
 801679e:	60fb      	str	r3, [r7, #12]
}
 80167a0:	bf00      	nop
 80167a2:	e7fe      	b.n	80167a2 <prvDeleteTCB+0x5e>
	}
 80167a4:	bf00      	nop
 80167a6:	3710      	adds	r7, #16
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80167b2:	4b0c      	ldr	r3, [pc, #48]	; (80167e4 <prvResetNextTaskUnblockTime+0x38>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d104      	bne.n	80167c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80167bc:	4b0a      	ldr	r3, [pc, #40]	; (80167e8 <prvResetNextTaskUnblockTime+0x3c>)
 80167be:	f04f 32ff 	mov.w	r2, #4294967295
 80167c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80167c4:	e008      	b.n	80167d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167c6:	4b07      	ldr	r3, [pc, #28]	; (80167e4 <prvResetNextTaskUnblockTime+0x38>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	68db      	ldr	r3, [r3, #12]
 80167cc:	68db      	ldr	r3, [r3, #12]
 80167ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	685b      	ldr	r3, [r3, #4]
 80167d4:	4a04      	ldr	r2, [pc, #16]	; (80167e8 <prvResetNextTaskUnblockTime+0x3c>)
 80167d6:	6013      	str	r3, [r2, #0]
}
 80167d8:	bf00      	nop
 80167da:	370c      	adds	r7, #12
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr
 80167e4:	2000334c 	.word	0x2000334c
 80167e8:	200033b4 	.word	0x200033b4

080167ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80167ec:	b480      	push	{r7}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80167f2:	4b0b      	ldr	r3, [pc, #44]	; (8016820 <xTaskGetSchedulerState+0x34>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d102      	bne.n	8016800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80167fa:	2301      	movs	r3, #1
 80167fc:	607b      	str	r3, [r7, #4]
 80167fe:	e008      	b.n	8016812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016800:	4b08      	ldr	r3, [pc, #32]	; (8016824 <xTaskGetSchedulerState+0x38>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d102      	bne.n	801680e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016808:	2302      	movs	r3, #2
 801680a:	607b      	str	r3, [r7, #4]
 801680c:	e001      	b.n	8016812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801680e:	2300      	movs	r3, #0
 8016810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016812:	687b      	ldr	r3, [r7, #4]
	}
 8016814:	4618      	mov	r0, r3
 8016816:	370c      	adds	r7, #12
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr
 8016820:	200033a0 	.word	0x200033a0
 8016824:	200033bc 	.word	0x200033bc

08016828 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016828:	b580      	push	{r7, lr}
 801682a:	b084      	sub	sp, #16
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016834:	2300      	movs	r3, #0
 8016836:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d05e      	beq.n	80168fc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016842:	4b31      	ldr	r3, [pc, #196]	; (8016908 <xTaskPriorityInherit+0xe0>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016848:	429a      	cmp	r2, r3
 801684a:	d24e      	bcs.n	80168ea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	699b      	ldr	r3, [r3, #24]
 8016850:	2b00      	cmp	r3, #0
 8016852:	db06      	blt.n	8016862 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016854:	4b2c      	ldr	r3, [pc, #176]	; (8016908 <xTaskPriorityInherit+0xe0>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801685a:	f1c3 0207 	rsb	r2, r3, #7
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	6959      	ldr	r1, [r3, #20]
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801686a:	4613      	mov	r3, r2
 801686c:	009b      	lsls	r3, r3, #2
 801686e:	4413      	add	r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	4a26      	ldr	r2, [pc, #152]	; (801690c <xTaskPriorityInherit+0xe4>)
 8016874:	4413      	add	r3, r2
 8016876:	4299      	cmp	r1, r3
 8016878:	d12f      	bne.n	80168da <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	3304      	adds	r3, #4
 801687e:	4618      	mov	r0, r3
 8016880:	f7fe fa36 	bl	8014cf0 <uxListRemove>
 8016884:	4603      	mov	r3, r0
 8016886:	2b00      	cmp	r3, #0
 8016888:	d10a      	bne.n	80168a0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801688e:	2201      	movs	r2, #1
 8016890:	fa02 f303 	lsl.w	r3, r2, r3
 8016894:	43da      	mvns	r2, r3
 8016896:	4b1e      	ldr	r3, [pc, #120]	; (8016910 <xTaskPriorityInherit+0xe8>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	4013      	ands	r3, r2
 801689c:	4a1c      	ldr	r2, [pc, #112]	; (8016910 <xTaskPriorityInherit+0xe8>)
 801689e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80168a0:	4b19      	ldr	r3, [pc, #100]	; (8016908 <xTaskPriorityInherit+0xe0>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ae:	2201      	movs	r2, #1
 80168b0:	409a      	lsls	r2, r3
 80168b2:	4b17      	ldr	r3, [pc, #92]	; (8016910 <xTaskPriorityInherit+0xe8>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	4313      	orrs	r3, r2
 80168b8:	4a15      	ldr	r2, [pc, #84]	; (8016910 <xTaskPriorityInherit+0xe8>)
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168c0:	4613      	mov	r3, r2
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	4413      	add	r3, r2
 80168c6:	009b      	lsls	r3, r3, #2
 80168c8:	4a10      	ldr	r2, [pc, #64]	; (801690c <xTaskPriorityInherit+0xe4>)
 80168ca:	441a      	add	r2, r3
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	3304      	adds	r3, #4
 80168d0:	4619      	mov	r1, r3
 80168d2:	4610      	mov	r0, r2
 80168d4:	f7fe f9af 	bl	8014c36 <vListInsertEnd>
 80168d8:	e004      	b.n	80168e4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80168da:	4b0b      	ldr	r3, [pc, #44]	; (8016908 <xTaskPriorityInherit+0xe0>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80168e4:	2301      	movs	r3, #1
 80168e6:	60fb      	str	r3, [r7, #12]
 80168e8:	e008      	b.n	80168fc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80168ee:	4b06      	ldr	r3, [pc, #24]	; (8016908 <xTaskPriorityInherit+0xe0>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168f4:	429a      	cmp	r2, r3
 80168f6:	d201      	bcs.n	80168fc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80168f8:	2301      	movs	r3, #1
 80168fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80168fc:	68fb      	ldr	r3, [r7, #12]
	}
 80168fe:	4618      	mov	r0, r3
 8016900:	3710      	adds	r7, #16
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	20003294 	.word	0x20003294
 801690c:	20003298 	.word	0x20003298
 8016910:	2000339c 	.word	0x2000339c

08016914 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016914:	b580      	push	{r7, lr}
 8016916:	b086      	sub	sp, #24
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016920:	2300      	movs	r3, #0
 8016922:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d06e      	beq.n	8016a08 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801692a:	4b3a      	ldr	r3, [pc, #232]	; (8016a14 <xTaskPriorityDisinherit+0x100>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	693a      	ldr	r2, [r7, #16]
 8016930:	429a      	cmp	r2, r3
 8016932:	d00a      	beq.n	801694a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016938:	f383 8811 	msr	BASEPRI, r3
 801693c:	f3bf 8f6f 	isb	sy
 8016940:	f3bf 8f4f 	dsb	sy
 8016944:	60fb      	str	r3, [r7, #12]
}
 8016946:	bf00      	nop
 8016948:	e7fe      	b.n	8016948 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801694a:	693b      	ldr	r3, [r7, #16]
 801694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801694e:	2b00      	cmp	r3, #0
 8016950:	d10a      	bne.n	8016968 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016956:	f383 8811 	msr	BASEPRI, r3
 801695a:	f3bf 8f6f 	isb	sy
 801695e:	f3bf 8f4f 	dsb	sy
 8016962:	60bb      	str	r3, [r7, #8]
}
 8016964:	bf00      	nop
 8016966:	e7fe      	b.n	8016966 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801696c:	1e5a      	subs	r2, r3, #1
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016972:	693b      	ldr	r3, [r7, #16]
 8016974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801697a:	429a      	cmp	r2, r3
 801697c:	d044      	beq.n	8016a08 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016982:	2b00      	cmp	r3, #0
 8016984:	d140      	bne.n	8016a08 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	3304      	adds	r3, #4
 801698a:	4618      	mov	r0, r3
 801698c:	f7fe f9b0 	bl	8014cf0 <uxListRemove>
 8016990:	4603      	mov	r3, r0
 8016992:	2b00      	cmp	r3, #0
 8016994:	d115      	bne.n	80169c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801699a:	491f      	ldr	r1, [pc, #124]	; (8016a18 <xTaskPriorityDisinherit+0x104>)
 801699c:	4613      	mov	r3, r2
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	4413      	add	r3, r2
 80169a2:	009b      	lsls	r3, r3, #2
 80169a4:	440b      	add	r3, r1
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d10a      	bne.n	80169c2 <xTaskPriorityDisinherit+0xae>
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169b0:	2201      	movs	r2, #1
 80169b2:	fa02 f303 	lsl.w	r3, r2, r3
 80169b6:	43da      	mvns	r2, r3
 80169b8:	4b18      	ldr	r3, [pc, #96]	; (8016a1c <xTaskPriorityDisinherit+0x108>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	4013      	ands	r3, r2
 80169be:	4a17      	ldr	r2, [pc, #92]	; (8016a1c <xTaskPriorityDisinherit+0x108>)
 80169c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ce:	f1c3 0207 	rsb	r2, r3, #7
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169da:	2201      	movs	r2, #1
 80169dc:	409a      	lsls	r2, r3
 80169de:	4b0f      	ldr	r3, [pc, #60]	; (8016a1c <xTaskPriorityDisinherit+0x108>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	4313      	orrs	r3, r2
 80169e4:	4a0d      	ldr	r2, [pc, #52]	; (8016a1c <xTaskPriorityDisinherit+0x108>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169ec:	4613      	mov	r3, r2
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	4413      	add	r3, r2
 80169f2:	009b      	lsls	r3, r3, #2
 80169f4:	4a08      	ldr	r2, [pc, #32]	; (8016a18 <xTaskPriorityDisinherit+0x104>)
 80169f6:	441a      	add	r2, r3
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	3304      	adds	r3, #4
 80169fc:	4619      	mov	r1, r3
 80169fe:	4610      	mov	r0, r2
 8016a00:	f7fe f919 	bl	8014c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016a04:	2301      	movs	r3, #1
 8016a06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016a08:	697b      	ldr	r3, [r7, #20]
	}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3718      	adds	r7, #24
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20003294 	.word	0x20003294
 8016a18:	20003298 	.word	0x20003298
 8016a1c:	2000339c 	.word	0x2000339c

08016a20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b088      	sub	sp, #32
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016a2e:	2301      	movs	r3, #1
 8016a30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d077      	beq.n	8016b28 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d10a      	bne.n	8016a56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a44:	f383 8811 	msr	BASEPRI, r3
 8016a48:	f3bf 8f6f 	isb	sy
 8016a4c:	f3bf 8f4f 	dsb	sy
 8016a50:	60fb      	str	r3, [r7, #12]
}
 8016a52:	bf00      	nop
 8016a54:	e7fe      	b.n	8016a54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a5a:	683a      	ldr	r2, [r7, #0]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d902      	bls.n	8016a66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	61fb      	str	r3, [r7, #28]
 8016a64:	e002      	b.n	8016a6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a70:	69fa      	ldr	r2, [r7, #28]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d058      	beq.n	8016b28 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a7a:	697a      	ldr	r2, [r7, #20]
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d153      	bne.n	8016b28 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016a80:	4b2b      	ldr	r3, [pc, #172]	; (8016b30 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	69ba      	ldr	r2, [r7, #24]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d10a      	bne.n	8016aa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8e:	f383 8811 	msr	BASEPRI, r3
 8016a92:	f3bf 8f6f 	isb	sy
 8016a96:	f3bf 8f4f 	dsb	sy
 8016a9a:	60bb      	str	r3, [r7, #8]
}
 8016a9c:	bf00      	nop
 8016a9e:	e7fe      	b.n	8016a9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016aa6:	69bb      	ldr	r3, [r7, #24]
 8016aa8:	69fa      	ldr	r2, [r7, #28]
 8016aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016aac:	69bb      	ldr	r3, [r7, #24]
 8016aae:	699b      	ldr	r3, [r3, #24]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	db04      	blt.n	8016abe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ab4:	69fb      	ldr	r3, [r7, #28]
 8016ab6:	f1c3 0207 	rsb	r2, r3, #7
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	6959      	ldr	r1, [r3, #20]
 8016ac2:	693a      	ldr	r2, [r7, #16]
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	009b      	lsls	r3, r3, #2
 8016ac8:	4413      	add	r3, r2
 8016aca:	009b      	lsls	r3, r3, #2
 8016acc:	4a19      	ldr	r2, [pc, #100]	; (8016b34 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016ace:	4413      	add	r3, r2
 8016ad0:	4299      	cmp	r1, r3
 8016ad2:	d129      	bne.n	8016b28 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ad4:	69bb      	ldr	r3, [r7, #24]
 8016ad6:	3304      	adds	r3, #4
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7fe f909 	bl	8014cf0 <uxListRemove>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d10a      	bne.n	8016afa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae8:	2201      	movs	r2, #1
 8016aea:	fa02 f303 	lsl.w	r3, r2, r3
 8016aee:	43da      	mvns	r2, r3
 8016af0:	4b11      	ldr	r3, [pc, #68]	; (8016b38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4013      	ands	r3, r2
 8016af6:	4a10      	ldr	r2, [pc, #64]	; (8016b38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016af8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016afa:	69bb      	ldr	r3, [r7, #24]
 8016afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016afe:	2201      	movs	r2, #1
 8016b00:	409a      	lsls	r2, r3
 8016b02:	4b0d      	ldr	r3, [pc, #52]	; (8016b38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4313      	orrs	r3, r2
 8016b08:	4a0b      	ldr	r2, [pc, #44]	; (8016b38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016b0a:	6013      	str	r3, [r2, #0]
 8016b0c:	69bb      	ldr	r3, [r7, #24]
 8016b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b10:	4613      	mov	r3, r2
 8016b12:	009b      	lsls	r3, r3, #2
 8016b14:	4413      	add	r3, r2
 8016b16:	009b      	lsls	r3, r3, #2
 8016b18:	4a06      	ldr	r2, [pc, #24]	; (8016b34 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016b1a:	441a      	add	r2, r3
 8016b1c:	69bb      	ldr	r3, [r7, #24]
 8016b1e:	3304      	adds	r3, #4
 8016b20:	4619      	mov	r1, r3
 8016b22:	4610      	mov	r0, r2
 8016b24:	f7fe f887 	bl	8014c36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016b28:	bf00      	nop
 8016b2a:	3720      	adds	r7, #32
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	20003294 	.word	0x20003294
 8016b34:	20003298 	.word	0x20003298
 8016b38:	2000339c 	.word	0x2000339c

08016b3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016b3c:	b480      	push	{r7}
 8016b3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016b40:	4b07      	ldr	r3, [pc, #28]	; (8016b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d004      	beq.n	8016b52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016b48:	4b05      	ldr	r3, [pc, #20]	; (8016b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016b4e:	3201      	adds	r2, #1
 8016b50:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016b52:	4b03      	ldr	r3, [pc, #12]	; (8016b60 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b54:	681b      	ldr	r3, [r3, #0]
	}
 8016b56:	4618      	mov	r0, r3
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5e:	4770      	bx	lr
 8016b60:	20003294 	.word	0x20003294

08016b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016b6e:	4b29      	ldr	r3, [pc, #164]	; (8016c14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b74:	4b28      	ldr	r3, [pc, #160]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	3304      	adds	r3, #4
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7fe f8b8 	bl	8014cf0 <uxListRemove>
 8016b80:	4603      	mov	r3, r0
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d10b      	bne.n	8016b9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016b86:	4b24      	ldr	r3, [pc, #144]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8016b92:	43da      	mvns	r2, r3
 8016b94:	4b21      	ldr	r3, [pc, #132]	; (8016c1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4013      	ands	r3, r2
 8016b9a:	4a20      	ldr	r2, [pc, #128]	; (8016c1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016b9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ba4:	d10a      	bne.n	8016bbc <prvAddCurrentTaskToDelayedList+0x58>
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d007      	beq.n	8016bbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bac:	4b1a      	ldr	r3, [pc, #104]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	4619      	mov	r1, r3
 8016bb4:	481a      	ldr	r0, [pc, #104]	; (8016c20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016bb6:	f7fe f83e 	bl	8014c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016bba:	e026      	b.n	8016c0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016bbc:	68fa      	ldr	r2, [r7, #12]
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016bc4:	4b14      	ldr	r3, [pc, #80]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	68ba      	ldr	r2, [r7, #8]
 8016bca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016bcc:	68ba      	ldr	r2, [r7, #8]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d209      	bcs.n	8016be8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bd4:	4b13      	ldr	r3, [pc, #76]	; (8016c24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	4b0f      	ldr	r3, [pc, #60]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	3304      	adds	r3, #4
 8016bde:	4619      	mov	r1, r3
 8016be0:	4610      	mov	r0, r2
 8016be2:	f7fe f84c 	bl	8014c7e <vListInsert>
}
 8016be6:	e010      	b.n	8016c0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016be8:	4b0f      	ldr	r3, [pc, #60]	; (8016c28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	4b0a      	ldr	r3, [pc, #40]	; (8016c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	3304      	adds	r3, #4
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	f7fe f842 	bl	8014c7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016bfa:	4b0c      	ldr	r3, [pc, #48]	; (8016c2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	68ba      	ldr	r2, [r7, #8]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d202      	bcs.n	8016c0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016c04:	4a09      	ldr	r2, [pc, #36]	; (8016c2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	6013      	str	r3, [r2, #0]
}
 8016c0a:	bf00      	nop
 8016c0c:	3710      	adds	r7, #16
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	20003398 	.word	0x20003398
 8016c18:	20003294 	.word	0x20003294
 8016c1c:	2000339c 	.word	0x2000339c
 8016c20:	20003380 	.word	0x20003380
 8016c24:	20003350 	.word	0x20003350
 8016c28:	2000334c 	.word	0x2000334c
 8016c2c:	200033b4 	.word	0x200033b4

08016c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016c30:	b480      	push	{r7}
 8016c32:	b085      	sub	sp, #20
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	3b04      	subs	r3, #4
 8016c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	3b04      	subs	r3, #4
 8016c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	f023 0201 	bic.w	r2, r3, #1
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	3b04      	subs	r3, #4
 8016c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016c60:	4a0c      	ldr	r2, [pc, #48]	; (8016c94 <pxPortInitialiseStack+0x64>)
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	3b14      	subs	r3, #20
 8016c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	3b04      	subs	r3, #4
 8016c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f06f 0202 	mvn.w	r2, #2
 8016c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	3b20      	subs	r3, #32
 8016c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016c86:	68fb      	ldr	r3, [r7, #12]
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3714      	adds	r7, #20
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c92:	4770      	bx	lr
 8016c94:	08016c99 	.word	0x08016c99

08016c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b085      	sub	sp, #20
 8016c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016ca2:	4b12      	ldr	r3, [pc, #72]	; (8016cec <prvTaskExitError+0x54>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016caa:	d00a      	beq.n	8016cc2 <prvTaskExitError+0x2a>
	__asm volatile
 8016cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb0:	f383 8811 	msr	BASEPRI, r3
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	60fb      	str	r3, [r7, #12]
}
 8016cbe:	bf00      	nop
 8016cc0:	e7fe      	b.n	8016cc0 <prvTaskExitError+0x28>
	__asm volatile
 8016cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cc6:	f383 8811 	msr	BASEPRI, r3
 8016cca:	f3bf 8f6f 	isb	sy
 8016cce:	f3bf 8f4f 	dsb	sy
 8016cd2:	60bb      	str	r3, [r7, #8]
}
 8016cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016cd6:	bf00      	nop
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d0fc      	beq.n	8016cd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016cde:	bf00      	nop
 8016ce0:	bf00      	nop
 8016ce2:	3714      	adds	r7, #20
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cea:	4770      	bx	lr
 8016cec:	200000bc 	.word	0x200000bc

08016cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016cf0:	4b07      	ldr	r3, [pc, #28]	; (8016d10 <pxCurrentTCBConst2>)
 8016cf2:	6819      	ldr	r1, [r3, #0]
 8016cf4:	6808      	ldr	r0, [r1, #0]
 8016cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cfa:	f380 8809 	msr	PSP, r0
 8016cfe:	f3bf 8f6f 	isb	sy
 8016d02:	f04f 0000 	mov.w	r0, #0
 8016d06:	f380 8811 	msr	BASEPRI, r0
 8016d0a:	4770      	bx	lr
 8016d0c:	f3af 8000 	nop.w

08016d10 <pxCurrentTCBConst2>:
 8016d10:	20003294 	.word	0x20003294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016d14:	bf00      	nop
 8016d16:	bf00      	nop

08016d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016d18:	4808      	ldr	r0, [pc, #32]	; (8016d3c <prvPortStartFirstTask+0x24>)
 8016d1a:	6800      	ldr	r0, [r0, #0]
 8016d1c:	6800      	ldr	r0, [r0, #0]
 8016d1e:	f380 8808 	msr	MSP, r0
 8016d22:	f04f 0000 	mov.w	r0, #0
 8016d26:	f380 8814 	msr	CONTROL, r0
 8016d2a:	b662      	cpsie	i
 8016d2c:	b661      	cpsie	f
 8016d2e:	f3bf 8f4f 	dsb	sy
 8016d32:	f3bf 8f6f 	isb	sy
 8016d36:	df00      	svc	0
 8016d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016d3a:	bf00      	nop
 8016d3c:	e000ed08 	.word	0xe000ed08

08016d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b086      	sub	sp, #24
 8016d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016d46:	4b46      	ldr	r3, [pc, #280]	; (8016e60 <xPortStartScheduler+0x120>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	4a46      	ldr	r2, [pc, #280]	; (8016e64 <xPortStartScheduler+0x124>)
 8016d4c:	4293      	cmp	r3, r2
 8016d4e:	d10a      	bne.n	8016d66 <xPortStartScheduler+0x26>
	__asm volatile
 8016d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d54:	f383 8811 	msr	BASEPRI, r3
 8016d58:	f3bf 8f6f 	isb	sy
 8016d5c:	f3bf 8f4f 	dsb	sy
 8016d60:	613b      	str	r3, [r7, #16]
}
 8016d62:	bf00      	nop
 8016d64:	e7fe      	b.n	8016d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016d66:	4b3e      	ldr	r3, [pc, #248]	; (8016e60 <xPortStartScheduler+0x120>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	4a3f      	ldr	r2, [pc, #252]	; (8016e68 <xPortStartScheduler+0x128>)
 8016d6c:	4293      	cmp	r3, r2
 8016d6e:	d10a      	bne.n	8016d86 <xPortStartScheduler+0x46>
	__asm volatile
 8016d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d74:	f383 8811 	msr	BASEPRI, r3
 8016d78:	f3bf 8f6f 	isb	sy
 8016d7c:	f3bf 8f4f 	dsb	sy
 8016d80:	60fb      	str	r3, [r7, #12]
}
 8016d82:	bf00      	nop
 8016d84:	e7fe      	b.n	8016d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016d86:	4b39      	ldr	r3, [pc, #228]	; (8016e6c <xPortStartScheduler+0x12c>)
 8016d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	b2db      	uxtb	r3, r3
 8016d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	22ff      	movs	r2, #255	; 0xff
 8016d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	781b      	ldrb	r3, [r3, #0]
 8016d9c:	b2db      	uxtb	r3, r3
 8016d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016da0:	78fb      	ldrb	r3, [r7, #3]
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016da8:	b2da      	uxtb	r2, r3
 8016daa:	4b31      	ldr	r3, [pc, #196]	; (8016e70 <xPortStartScheduler+0x130>)
 8016dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016dae:	4b31      	ldr	r3, [pc, #196]	; (8016e74 <xPortStartScheduler+0x134>)
 8016db0:	2207      	movs	r2, #7
 8016db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016db4:	e009      	b.n	8016dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016db6:	4b2f      	ldr	r3, [pc, #188]	; (8016e74 <xPortStartScheduler+0x134>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	3b01      	subs	r3, #1
 8016dbc:	4a2d      	ldr	r2, [pc, #180]	; (8016e74 <xPortStartScheduler+0x134>)
 8016dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016dc0:	78fb      	ldrb	r3, [r7, #3]
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	005b      	lsls	r3, r3, #1
 8016dc6:	b2db      	uxtb	r3, r3
 8016dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016dca:	78fb      	ldrb	r3, [r7, #3]
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016dd2:	2b80      	cmp	r3, #128	; 0x80
 8016dd4:	d0ef      	beq.n	8016db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016dd6:	4b27      	ldr	r3, [pc, #156]	; (8016e74 <xPortStartScheduler+0x134>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f1c3 0307 	rsb	r3, r3, #7
 8016dde:	2b04      	cmp	r3, #4
 8016de0:	d00a      	beq.n	8016df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8016de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de6:	f383 8811 	msr	BASEPRI, r3
 8016dea:	f3bf 8f6f 	isb	sy
 8016dee:	f3bf 8f4f 	dsb	sy
 8016df2:	60bb      	str	r3, [r7, #8]
}
 8016df4:	bf00      	nop
 8016df6:	e7fe      	b.n	8016df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016df8:	4b1e      	ldr	r3, [pc, #120]	; (8016e74 <xPortStartScheduler+0x134>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	021b      	lsls	r3, r3, #8
 8016dfe:	4a1d      	ldr	r2, [pc, #116]	; (8016e74 <xPortStartScheduler+0x134>)
 8016e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016e02:	4b1c      	ldr	r3, [pc, #112]	; (8016e74 <xPortStartScheduler+0x134>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016e0a:	4a1a      	ldr	r2, [pc, #104]	; (8016e74 <xPortStartScheduler+0x134>)
 8016e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	b2da      	uxtb	r2, r3
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016e16:	4b18      	ldr	r3, [pc, #96]	; (8016e78 <xPortStartScheduler+0x138>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	4a17      	ldr	r2, [pc, #92]	; (8016e78 <xPortStartScheduler+0x138>)
 8016e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016e22:	4b15      	ldr	r3, [pc, #84]	; (8016e78 <xPortStartScheduler+0x138>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	4a14      	ldr	r2, [pc, #80]	; (8016e78 <xPortStartScheduler+0x138>)
 8016e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016e2e:	f000 f8dd 	bl	8016fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016e32:	4b12      	ldr	r3, [pc, #72]	; (8016e7c <xPortStartScheduler+0x13c>)
 8016e34:	2200      	movs	r2, #0
 8016e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016e38:	f000 f8fc 	bl	8017034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016e3c:	4b10      	ldr	r3, [pc, #64]	; (8016e80 <xPortStartScheduler+0x140>)
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	4a0f      	ldr	r2, [pc, #60]	; (8016e80 <xPortStartScheduler+0x140>)
 8016e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016e48:	f7ff ff66 	bl	8016d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016e4c:	f7ff fa88 	bl	8016360 <vTaskSwitchContext>
	prvTaskExitError();
 8016e50:	f7ff ff22 	bl	8016c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016e54:	2300      	movs	r3, #0
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	e000ed00 	.word	0xe000ed00
 8016e64:	410fc271 	.word	0x410fc271
 8016e68:	410fc270 	.word	0x410fc270
 8016e6c:	e000e400 	.word	0xe000e400
 8016e70:	200033c0 	.word	0x200033c0
 8016e74:	200033c4 	.word	0x200033c4
 8016e78:	e000ed20 	.word	0xe000ed20
 8016e7c:	200000bc 	.word	0x200000bc
 8016e80:	e000ef34 	.word	0xe000ef34

08016e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016e84:	b480      	push	{r7}
 8016e86:	b083      	sub	sp, #12
 8016e88:	af00      	add	r7, sp, #0
	__asm volatile
 8016e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e8e:	f383 8811 	msr	BASEPRI, r3
 8016e92:	f3bf 8f6f 	isb	sy
 8016e96:	f3bf 8f4f 	dsb	sy
 8016e9a:	607b      	str	r3, [r7, #4]
}
 8016e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016e9e:	4b0f      	ldr	r3, [pc, #60]	; (8016edc <vPortEnterCritical+0x58>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	4a0d      	ldr	r2, [pc, #52]	; (8016edc <vPortEnterCritical+0x58>)
 8016ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016ea8:	4b0c      	ldr	r3, [pc, #48]	; (8016edc <vPortEnterCritical+0x58>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d10f      	bne.n	8016ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016eb0:	4b0b      	ldr	r3, [pc, #44]	; (8016ee0 <vPortEnterCritical+0x5c>)
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00a      	beq.n	8016ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8016eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ebe:	f383 8811 	msr	BASEPRI, r3
 8016ec2:	f3bf 8f6f 	isb	sy
 8016ec6:	f3bf 8f4f 	dsb	sy
 8016eca:	603b      	str	r3, [r7, #0]
}
 8016ecc:	bf00      	nop
 8016ece:	e7fe      	b.n	8016ece <vPortEnterCritical+0x4a>
	}
}
 8016ed0:	bf00      	nop
 8016ed2:	370c      	adds	r7, #12
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr
 8016edc:	200000bc 	.word	0x200000bc
 8016ee0:	e000ed04 	.word	0xe000ed04

08016ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b083      	sub	sp, #12
 8016ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016eea:	4b12      	ldr	r3, [pc, #72]	; (8016f34 <vPortExitCritical+0x50>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d10a      	bne.n	8016f08 <vPortExitCritical+0x24>
	__asm volatile
 8016ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef6:	f383 8811 	msr	BASEPRI, r3
 8016efa:	f3bf 8f6f 	isb	sy
 8016efe:	f3bf 8f4f 	dsb	sy
 8016f02:	607b      	str	r3, [r7, #4]
}
 8016f04:	bf00      	nop
 8016f06:	e7fe      	b.n	8016f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016f08:	4b0a      	ldr	r3, [pc, #40]	; (8016f34 <vPortExitCritical+0x50>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	3b01      	subs	r3, #1
 8016f0e:	4a09      	ldr	r2, [pc, #36]	; (8016f34 <vPortExitCritical+0x50>)
 8016f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016f12:	4b08      	ldr	r3, [pc, #32]	; (8016f34 <vPortExitCritical+0x50>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d105      	bne.n	8016f26 <vPortExitCritical+0x42>
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016f1e:	683b      	ldr	r3, [r7, #0]
 8016f20:	f383 8811 	msr	BASEPRI, r3
}
 8016f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016f26:	bf00      	nop
 8016f28:	370c      	adds	r7, #12
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f30:	4770      	bx	lr
 8016f32:	bf00      	nop
 8016f34:	200000bc 	.word	0x200000bc
	...

08016f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016f40:	f3ef 8009 	mrs	r0, PSP
 8016f44:	f3bf 8f6f 	isb	sy
 8016f48:	4b15      	ldr	r3, [pc, #84]	; (8016fa0 <pxCurrentTCBConst>)
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	f01e 0f10 	tst.w	lr, #16
 8016f50:	bf08      	it	eq
 8016f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5a:	6010      	str	r0, [r2, #0]
 8016f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016f64:	f380 8811 	msr	BASEPRI, r0
 8016f68:	f3bf 8f4f 	dsb	sy
 8016f6c:	f3bf 8f6f 	isb	sy
 8016f70:	f7ff f9f6 	bl	8016360 <vTaskSwitchContext>
 8016f74:	f04f 0000 	mov.w	r0, #0
 8016f78:	f380 8811 	msr	BASEPRI, r0
 8016f7c:	bc09      	pop	{r0, r3}
 8016f7e:	6819      	ldr	r1, [r3, #0]
 8016f80:	6808      	ldr	r0, [r1, #0]
 8016f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f86:	f01e 0f10 	tst.w	lr, #16
 8016f8a:	bf08      	it	eq
 8016f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016f90:	f380 8809 	msr	PSP, r0
 8016f94:	f3bf 8f6f 	isb	sy
 8016f98:	4770      	bx	lr
 8016f9a:	bf00      	nop
 8016f9c:	f3af 8000 	nop.w

08016fa0 <pxCurrentTCBConst>:
 8016fa0:	20003294 	.word	0x20003294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016fa4:	bf00      	nop
 8016fa6:	bf00      	nop

08016fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
	__asm volatile
 8016fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb2:	f383 8811 	msr	BASEPRI, r3
 8016fb6:	f3bf 8f6f 	isb	sy
 8016fba:	f3bf 8f4f 	dsb	sy
 8016fbe:	607b      	str	r3, [r7, #4]
}
 8016fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016fc2:	f7ff f915 	bl	80161f0 <xTaskIncrementTick>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d003      	beq.n	8016fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016fcc:	4b06      	ldr	r3, [pc, #24]	; (8016fe8 <SysTick_Handler+0x40>)
 8016fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fd2:	601a      	str	r2, [r3, #0]
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	f383 8811 	msr	BASEPRI, r3
}
 8016fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016fe0:	bf00      	nop
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	e000ed04 	.word	0xe000ed04

08016fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016fec:	b480      	push	{r7}
 8016fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016ff0:	4b0b      	ldr	r3, [pc, #44]	; (8017020 <vPortSetupTimerInterrupt+0x34>)
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016ff6:	4b0b      	ldr	r3, [pc, #44]	; (8017024 <vPortSetupTimerInterrupt+0x38>)
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016ffc:	4b0a      	ldr	r3, [pc, #40]	; (8017028 <vPortSetupTimerInterrupt+0x3c>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	4a0a      	ldr	r2, [pc, #40]	; (801702c <vPortSetupTimerInterrupt+0x40>)
 8017002:	fba2 2303 	umull	r2, r3, r2, r3
 8017006:	099b      	lsrs	r3, r3, #6
 8017008:	4a09      	ldr	r2, [pc, #36]	; (8017030 <vPortSetupTimerInterrupt+0x44>)
 801700a:	3b01      	subs	r3, #1
 801700c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801700e:	4b04      	ldr	r3, [pc, #16]	; (8017020 <vPortSetupTimerInterrupt+0x34>)
 8017010:	2207      	movs	r2, #7
 8017012:	601a      	str	r2, [r3, #0]
}
 8017014:	bf00      	nop
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop
 8017020:	e000e010 	.word	0xe000e010
 8017024:	e000e018 	.word	0xe000e018
 8017028:	20000008 	.word	0x20000008
 801702c:	10624dd3 	.word	0x10624dd3
 8017030:	e000e014 	.word	0xe000e014

08017034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017044 <vPortEnableVFP+0x10>
 8017038:	6801      	ldr	r1, [r0, #0]
 801703a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801703e:	6001      	str	r1, [r0, #0]
 8017040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017042:	bf00      	nop
 8017044:	e000ed88 	.word	0xe000ed88

08017048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017048:	b480      	push	{r7}
 801704a:	b085      	sub	sp, #20
 801704c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801704e:	f3ef 8305 	mrs	r3, IPSR
 8017052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	2b0f      	cmp	r3, #15
 8017058:	d914      	bls.n	8017084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801705a:	4a17      	ldr	r2, [pc, #92]	; (80170b8 <vPortValidateInterruptPriority+0x70>)
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	4413      	add	r3, r2
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017064:	4b15      	ldr	r3, [pc, #84]	; (80170bc <vPortValidateInterruptPriority+0x74>)
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	7afa      	ldrb	r2, [r7, #11]
 801706a:	429a      	cmp	r2, r3
 801706c:	d20a      	bcs.n	8017084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017072:	f383 8811 	msr	BASEPRI, r3
 8017076:	f3bf 8f6f 	isb	sy
 801707a:	f3bf 8f4f 	dsb	sy
 801707e:	607b      	str	r3, [r7, #4]
}
 8017080:	bf00      	nop
 8017082:	e7fe      	b.n	8017082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017084:	4b0e      	ldr	r3, [pc, #56]	; (80170c0 <vPortValidateInterruptPriority+0x78>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801708c:	4b0d      	ldr	r3, [pc, #52]	; (80170c4 <vPortValidateInterruptPriority+0x7c>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	429a      	cmp	r2, r3
 8017092:	d90a      	bls.n	80170aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017098:	f383 8811 	msr	BASEPRI, r3
 801709c:	f3bf 8f6f 	isb	sy
 80170a0:	f3bf 8f4f 	dsb	sy
 80170a4:	603b      	str	r3, [r7, #0]
}
 80170a6:	bf00      	nop
 80170a8:	e7fe      	b.n	80170a8 <vPortValidateInterruptPriority+0x60>
	}
 80170aa:	bf00      	nop
 80170ac:	3714      	adds	r7, #20
 80170ae:	46bd      	mov	sp, r7
 80170b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b4:	4770      	bx	lr
 80170b6:	bf00      	nop
 80170b8:	e000e3f0 	.word	0xe000e3f0
 80170bc:	200033c0 	.word	0x200033c0
 80170c0:	e000ed0c 	.word	0xe000ed0c
 80170c4:	200033c4 	.word	0x200033c4

080170c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b08a      	sub	sp, #40	; 0x28
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80170d0:	2300      	movs	r3, #0
 80170d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80170d4:	f7fe ffc0 	bl	8016058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80170d8:	4b5b      	ldr	r3, [pc, #364]	; (8017248 <pvPortMalloc+0x180>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d101      	bne.n	80170e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80170e0:	f000 f920 	bl	8017324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80170e4:	4b59      	ldr	r3, [pc, #356]	; (801724c <pvPortMalloc+0x184>)
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	4013      	ands	r3, r2
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	f040 8093 	bne.w	8017218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d01d      	beq.n	8017134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80170f8:	2208      	movs	r2, #8
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	4413      	add	r3, r2
 80170fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f003 0307 	and.w	r3, r3, #7
 8017106:	2b00      	cmp	r3, #0
 8017108:	d014      	beq.n	8017134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	f023 0307 	bic.w	r3, r3, #7
 8017110:	3308      	adds	r3, #8
 8017112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	f003 0307 	and.w	r3, r3, #7
 801711a:	2b00      	cmp	r3, #0
 801711c:	d00a      	beq.n	8017134 <pvPortMalloc+0x6c>
	__asm volatile
 801711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017122:	f383 8811 	msr	BASEPRI, r3
 8017126:	f3bf 8f6f 	isb	sy
 801712a:	f3bf 8f4f 	dsb	sy
 801712e:	617b      	str	r3, [r7, #20]
}
 8017130:	bf00      	nop
 8017132:	e7fe      	b.n	8017132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d06e      	beq.n	8017218 <pvPortMalloc+0x150>
 801713a:	4b45      	ldr	r3, [pc, #276]	; (8017250 <pvPortMalloc+0x188>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	687a      	ldr	r2, [r7, #4]
 8017140:	429a      	cmp	r2, r3
 8017142:	d869      	bhi.n	8017218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017144:	4b43      	ldr	r3, [pc, #268]	; (8017254 <pvPortMalloc+0x18c>)
 8017146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017148:	4b42      	ldr	r3, [pc, #264]	; (8017254 <pvPortMalloc+0x18c>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801714e:	e004      	b.n	801715a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	687a      	ldr	r2, [r7, #4]
 8017160:	429a      	cmp	r2, r3
 8017162:	d903      	bls.n	801716c <pvPortMalloc+0xa4>
 8017164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d1f1      	bne.n	8017150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801716c:	4b36      	ldr	r3, [pc, #216]	; (8017248 <pvPortMalloc+0x180>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017172:	429a      	cmp	r2, r3
 8017174:	d050      	beq.n	8017218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017176:	6a3b      	ldr	r3, [r7, #32]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	2208      	movs	r2, #8
 801717c:	4413      	add	r3, r2
 801717e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	6a3b      	ldr	r3, [r7, #32]
 8017186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718a:	685a      	ldr	r2, [r3, #4]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	1ad2      	subs	r2, r2, r3
 8017190:	2308      	movs	r3, #8
 8017192:	005b      	lsls	r3, r3, #1
 8017194:	429a      	cmp	r2, r3
 8017196:	d91f      	bls.n	80171d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4413      	add	r3, r2
 801719e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	f003 0307 	and.w	r3, r3, #7
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d00a      	beq.n	80171c0 <pvPortMalloc+0xf8>
	__asm volatile
 80171aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ae:	f383 8811 	msr	BASEPRI, r3
 80171b2:	f3bf 8f6f 	isb	sy
 80171b6:	f3bf 8f4f 	dsb	sy
 80171ba:	613b      	str	r3, [r7, #16]
}
 80171bc:	bf00      	nop
 80171be:	e7fe      	b.n	80171be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80171c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c2:	685a      	ldr	r2, [r3, #4]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	1ad2      	subs	r2, r2, r3
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80171cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80171d2:	69b8      	ldr	r0, [r7, #24]
 80171d4:	f000 f908 	bl	80173e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80171d8:	4b1d      	ldr	r3, [pc, #116]	; (8017250 <pvPortMalloc+0x188>)
 80171da:	681a      	ldr	r2, [r3, #0]
 80171dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	1ad3      	subs	r3, r2, r3
 80171e2:	4a1b      	ldr	r2, [pc, #108]	; (8017250 <pvPortMalloc+0x188>)
 80171e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80171e6:	4b1a      	ldr	r3, [pc, #104]	; (8017250 <pvPortMalloc+0x188>)
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	4b1b      	ldr	r3, [pc, #108]	; (8017258 <pvPortMalloc+0x190>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d203      	bcs.n	80171fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80171f2:	4b17      	ldr	r3, [pc, #92]	; (8017250 <pvPortMalloc+0x188>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4a18      	ldr	r2, [pc, #96]	; (8017258 <pvPortMalloc+0x190>)
 80171f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80171fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171fc:	685a      	ldr	r2, [r3, #4]
 80171fe:	4b13      	ldr	r3, [pc, #76]	; (801724c <pvPortMalloc+0x184>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	431a      	orrs	r2, r3
 8017204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720a:	2200      	movs	r2, #0
 801720c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801720e:	4b13      	ldr	r3, [pc, #76]	; (801725c <pvPortMalloc+0x194>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	3301      	adds	r3, #1
 8017214:	4a11      	ldr	r2, [pc, #68]	; (801725c <pvPortMalloc+0x194>)
 8017216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017218:	f7fe ff2c 	bl	8016074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801721c:	69fb      	ldr	r3, [r7, #28]
 801721e:	f003 0307 	and.w	r3, r3, #7
 8017222:	2b00      	cmp	r3, #0
 8017224:	d00a      	beq.n	801723c <pvPortMalloc+0x174>
	__asm volatile
 8017226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801722a:	f383 8811 	msr	BASEPRI, r3
 801722e:	f3bf 8f6f 	isb	sy
 8017232:	f3bf 8f4f 	dsb	sy
 8017236:	60fb      	str	r3, [r7, #12]
}
 8017238:	bf00      	nop
 801723a:	e7fe      	b.n	801723a <pvPortMalloc+0x172>
	return pvReturn;
 801723c:	69fb      	ldr	r3, [r7, #28]
}
 801723e:	4618      	mov	r0, r3
 8017240:	3728      	adds	r7, #40	; 0x28
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}
 8017246:	bf00      	nop
 8017248:	20006fd0 	.word	0x20006fd0
 801724c:	20006fe4 	.word	0x20006fe4
 8017250:	20006fd4 	.word	0x20006fd4
 8017254:	20006fc8 	.word	0x20006fc8
 8017258:	20006fd8 	.word	0x20006fd8
 801725c:	20006fdc 	.word	0x20006fdc

08017260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b086      	sub	sp, #24
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d04d      	beq.n	801730e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017272:	2308      	movs	r3, #8
 8017274:	425b      	negs	r3, r3
 8017276:	697a      	ldr	r2, [r7, #20]
 8017278:	4413      	add	r3, r2
 801727a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	685a      	ldr	r2, [r3, #4]
 8017284:	4b24      	ldr	r3, [pc, #144]	; (8017318 <vPortFree+0xb8>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	4013      	ands	r3, r2
 801728a:	2b00      	cmp	r3, #0
 801728c:	d10a      	bne.n	80172a4 <vPortFree+0x44>
	__asm volatile
 801728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017292:	f383 8811 	msr	BASEPRI, r3
 8017296:	f3bf 8f6f 	isb	sy
 801729a:	f3bf 8f4f 	dsb	sy
 801729e:	60fb      	str	r3, [r7, #12]
}
 80172a0:	bf00      	nop
 80172a2:	e7fe      	b.n	80172a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d00a      	beq.n	80172c2 <vPortFree+0x62>
	__asm volatile
 80172ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172b0:	f383 8811 	msr	BASEPRI, r3
 80172b4:	f3bf 8f6f 	isb	sy
 80172b8:	f3bf 8f4f 	dsb	sy
 80172bc:	60bb      	str	r3, [r7, #8]
}
 80172be:	bf00      	nop
 80172c0:	e7fe      	b.n	80172c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	685a      	ldr	r2, [r3, #4]
 80172c6:	4b14      	ldr	r3, [pc, #80]	; (8017318 <vPortFree+0xb8>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	4013      	ands	r3, r2
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d01e      	beq.n	801730e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d11a      	bne.n	801730e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80172d8:	693b      	ldr	r3, [r7, #16]
 80172da:	685a      	ldr	r2, [r3, #4]
 80172dc:	4b0e      	ldr	r3, [pc, #56]	; (8017318 <vPortFree+0xb8>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	43db      	mvns	r3, r3
 80172e2:	401a      	ands	r2, r3
 80172e4:	693b      	ldr	r3, [r7, #16]
 80172e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80172e8:	f7fe feb6 	bl	8016058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	685a      	ldr	r2, [r3, #4]
 80172f0:	4b0a      	ldr	r3, [pc, #40]	; (801731c <vPortFree+0xbc>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	4413      	add	r3, r2
 80172f6:	4a09      	ldr	r2, [pc, #36]	; (801731c <vPortFree+0xbc>)
 80172f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80172fa:	6938      	ldr	r0, [r7, #16]
 80172fc:	f000 f874 	bl	80173e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017300:	4b07      	ldr	r3, [pc, #28]	; (8017320 <vPortFree+0xc0>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	3301      	adds	r3, #1
 8017306:	4a06      	ldr	r2, [pc, #24]	; (8017320 <vPortFree+0xc0>)
 8017308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801730a:	f7fe feb3 	bl	8016074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801730e:	bf00      	nop
 8017310:	3718      	adds	r7, #24
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
 8017316:	bf00      	nop
 8017318:	20006fe4 	.word	0x20006fe4
 801731c:	20006fd4 	.word	0x20006fd4
 8017320:	20006fe0 	.word	0x20006fe0

08017324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017324:	b480      	push	{r7}
 8017326:	b085      	sub	sp, #20
 8017328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801732a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801732e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017330:	4b27      	ldr	r3, [pc, #156]	; (80173d0 <prvHeapInit+0xac>)
 8017332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	f003 0307 	and.w	r3, r3, #7
 801733a:	2b00      	cmp	r3, #0
 801733c:	d00c      	beq.n	8017358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	3307      	adds	r3, #7
 8017342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	f023 0307 	bic.w	r3, r3, #7
 801734a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801734c:	68ba      	ldr	r2, [r7, #8]
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	1ad3      	subs	r3, r2, r3
 8017352:	4a1f      	ldr	r2, [pc, #124]	; (80173d0 <prvHeapInit+0xac>)
 8017354:	4413      	add	r3, r2
 8017356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801735c:	4a1d      	ldr	r2, [pc, #116]	; (80173d4 <prvHeapInit+0xb0>)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017362:	4b1c      	ldr	r3, [pc, #112]	; (80173d4 <prvHeapInit+0xb0>)
 8017364:	2200      	movs	r2, #0
 8017366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	68ba      	ldr	r2, [r7, #8]
 801736c:	4413      	add	r3, r2
 801736e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017370:	2208      	movs	r2, #8
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	1a9b      	subs	r3, r3, r2
 8017376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	f023 0307 	bic.w	r3, r3, #7
 801737e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	4a15      	ldr	r2, [pc, #84]	; (80173d8 <prvHeapInit+0xb4>)
 8017384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017386:	4b14      	ldr	r3, [pc, #80]	; (80173d8 <prvHeapInit+0xb4>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	2200      	movs	r2, #0
 801738c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801738e:	4b12      	ldr	r3, [pc, #72]	; (80173d8 <prvHeapInit+0xb4>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	2200      	movs	r2, #0
 8017394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	1ad2      	subs	r2, r2, r3
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80173a4:	4b0c      	ldr	r3, [pc, #48]	; (80173d8 <prvHeapInit+0xb4>)
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	4a0a      	ldr	r2, [pc, #40]	; (80173dc <prvHeapInit+0xb8>)
 80173b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	4a09      	ldr	r2, [pc, #36]	; (80173e0 <prvHeapInit+0xbc>)
 80173ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80173bc:	4b09      	ldr	r3, [pc, #36]	; (80173e4 <prvHeapInit+0xc0>)
 80173be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80173c2:	601a      	str	r2, [r3, #0]
}
 80173c4:	bf00      	nop
 80173c6:	3714      	adds	r7, #20
 80173c8:	46bd      	mov	sp, r7
 80173ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ce:	4770      	bx	lr
 80173d0:	200033c8 	.word	0x200033c8
 80173d4:	20006fc8 	.word	0x20006fc8
 80173d8:	20006fd0 	.word	0x20006fd0
 80173dc:	20006fd8 	.word	0x20006fd8
 80173e0:	20006fd4 	.word	0x20006fd4
 80173e4:	20006fe4 	.word	0x20006fe4

080173e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80173e8:	b480      	push	{r7}
 80173ea:	b085      	sub	sp, #20
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80173f0:	4b28      	ldr	r3, [pc, #160]	; (8017494 <prvInsertBlockIntoFreeList+0xac>)
 80173f2:	60fb      	str	r3, [r7, #12]
 80173f4:	e002      	b.n	80173fc <prvInsertBlockIntoFreeList+0x14>
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	60fb      	str	r3, [r7, #12]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	429a      	cmp	r2, r3
 8017404:	d8f7      	bhi.n	80173f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	68ba      	ldr	r2, [r7, #8]
 8017410:	4413      	add	r3, r2
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	429a      	cmp	r2, r3
 8017416:	d108      	bne.n	801742a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	685a      	ldr	r2, [r3, #4]
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	441a      	add	r2, r3
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	68ba      	ldr	r2, [r7, #8]
 8017434:	441a      	add	r2, r3
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	429a      	cmp	r2, r3
 801743c:	d118      	bne.n	8017470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	4b15      	ldr	r3, [pc, #84]	; (8017498 <prvInsertBlockIntoFreeList+0xb0>)
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	429a      	cmp	r2, r3
 8017448:	d00d      	beq.n	8017466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	685a      	ldr	r2, [r3, #4]
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	441a      	add	r2, r3
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	601a      	str	r2, [r3, #0]
 8017464:	e008      	b.n	8017478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <prvInsertBlockIntoFreeList+0xb0>)
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	601a      	str	r2, [r3, #0]
 801746e:	e003      	b.n	8017478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017478:	68fa      	ldr	r2, [r7, #12]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	429a      	cmp	r2, r3
 801747e:	d002      	beq.n	8017486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	687a      	ldr	r2, [r7, #4]
 8017484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017486:	bf00      	nop
 8017488:	3714      	adds	r7, #20
 801748a:	46bd      	mov	sp, r7
 801748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	20006fc8 	.word	0x20006fc8
 8017498:	20006fd0 	.word	0x20006fd0

0801749c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80174a0:	2200      	movs	r2, #0
 80174a2:	4912      	ldr	r1, [pc, #72]	; (80174ec <MX_USB_DEVICE_Init+0x50>)
 80174a4:	4812      	ldr	r0, [pc, #72]	; (80174f0 <MX_USB_DEVICE_Init+0x54>)
 80174a6:	f7f8 f930 	bl	800f70a <USBD_Init>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d001      	beq.n	80174b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80174b0:	f7ea ff94 	bl	80023dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80174b4:	490f      	ldr	r1, [pc, #60]	; (80174f4 <MX_USB_DEVICE_Init+0x58>)
 80174b6:	480e      	ldr	r0, [pc, #56]	; (80174f0 <MX_USB_DEVICE_Init+0x54>)
 80174b8:	f7f8 f957 	bl	800f76a <USBD_RegisterClass>
 80174bc:	4603      	mov	r3, r0
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d001      	beq.n	80174c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80174c2:	f7ea ff8b 	bl	80023dc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80174c6:	490c      	ldr	r1, [pc, #48]	; (80174f8 <MX_USB_DEVICE_Init+0x5c>)
 80174c8:	4809      	ldr	r0, [pc, #36]	; (80174f0 <MX_USB_DEVICE_Init+0x54>)
 80174ca:	f7f6 fc01 	bl	800dcd0 <USBD_MSC_RegisterStorage>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d001      	beq.n	80174d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80174d4:	f7ea ff82 	bl	80023dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80174d8:	4805      	ldr	r0, [pc, #20]	; (80174f0 <MX_USB_DEVICE_Init+0x54>)
 80174da:	f7f8 f97c 	bl	800f7d6 <USBD_Start>
 80174de:	4603      	mov	r3, r0
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d001      	beq.n	80174e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80174e4:	f7ea ff7a 	bl	80023dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80174e8:	bf00      	nop
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	200000c0 	.word	0x200000c0
 80174f0:	20006fe8 	.word	0x20006fe8
 80174f4:	20000014 	.word	0x20000014
 80174f8:	20000120 	.word	0x20000120

080174fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174fc:	b480      	push	{r7}
 80174fe:	b083      	sub	sp, #12
 8017500:	af00      	add	r7, sp, #0
 8017502:	4603      	mov	r3, r0
 8017504:	6039      	str	r1, [r7, #0]
 8017506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	2212      	movs	r2, #18
 801750c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801750e:	4b03      	ldr	r3, [pc, #12]	; (801751c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017510:	4618      	mov	r0, r3
 8017512:	370c      	adds	r7, #12
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr
 801751c:	200000e0 	.word	0x200000e0

08017520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017520:	b480      	push	{r7}
 8017522:	b083      	sub	sp, #12
 8017524:	af00      	add	r7, sp, #0
 8017526:	4603      	mov	r3, r0
 8017528:	6039      	str	r1, [r7, #0]
 801752a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	2204      	movs	r2, #4
 8017530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017532:	4b03      	ldr	r3, [pc, #12]	; (8017540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017534:	4618      	mov	r0, r3
 8017536:	370c      	adds	r7, #12
 8017538:	46bd      	mov	sp, r7
 801753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753e:	4770      	bx	lr
 8017540:	20000100 	.word	0x20000100

08017544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	4603      	mov	r3, r0
 801754c:	6039      	str	r1, [r7, #0]
 801754e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017550:	79fb      	ldrb	r3, [r7, #7]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d105      	bne.n	8017562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017556:	683a      	ldr	r2, [r7, #0]
 8017558:	4907      	ldr	r1, [pc, #28]	; (8017578 <USBD_FS_ProductStrDescriptor+0x34>)
 801755a:	4808      	ldr	r0, [pc, #32]	; (801757c <USBD_FS_ProductStrDescriptor+0x38>)
 801755c:	f7f9 fb12 	bl	8010b84 <USBD_GetString>
 8017560:	e004      	b.n	801756c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017562:	683a      	ldr	r2, [r7, #0]
 8017564:	4904      	ldr	r1, [pc, #16]	; (8017578 <USBD_FS_ProductStrDescriptor+0x34>)
 8017566:	4805      	ldr	r0, [pc, #20]	; (801757c <USBD_FS_ProductStrDescriptor+0x38>)
 8017568:	f7f9 fb0c 	bl	8010b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 801756c:	4b02      	ldr	r3, [pc, #8]	; (8017578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801756e:	4618      	mov	r0, r3
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	200072c4 	.word	0x200072c4
 801757c:	0801d6e4 	.word	0x0801d6e4

08017580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	4603      	mov	r3, r0
 8017588:	6039      	str	r1, [r7, #0]
 801758a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801758c:	683a      	ldr	r2, [r7, #0]
 801758e:	4904      	ldr	r1, [pc, #16]	; (80175a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017590:	4804      	ldr	r0, [pc, #16]	; (80175a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017592:	f7f9 faf7 	bl	8010b84 <USBD_GetString>
  return USBD_StrDesc;
 8017596:	4b02      	ldr	r3, [pc, #8]	; (80175a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017598:	4618      	mov	r0, r3
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	200072c4 	.word	0x200072c4
 80175a4:	0801d6f8 	.word	0x0801d6f8

080175a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b082      	sub	sp, #8
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	4603      	mov	r3, r0
 80175b0:	6039      	str	r1, [r7, #0]
 80175b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	221a      	movs	r2, #26
 80175b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80175ba:	f000 f855 	bl	8017668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80175be:	4b02      	ldr	r3, [pc, #8]	; (80175c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3708      	adds	r7, #8
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	20000104 	.word	0x20000104

080175cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	4603      	mov	r3, r0
 80175d4:	6039      	str	r1, [r7, #0]
 80175d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80175d8:	79fb      	ldrb	r3, [r7, #7]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d105      	bne.n	80175ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80175de:	683a      	ldr	r2, [r7, #0]
 80175e0:	4907      	ldr	r1, [pc, #28]	; (8017600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80175e2:	4808      	ldr	r0, [pc, #32]	; (8017604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80175e4:	f7f9 face 	bl	8010b84 <USBD_GetString>
 80175e8:	e004      	b.n	80175f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80175ea:	683a      	ldr	r2, [r7, #0]
 80175ec:	4904      	ldr	r1, [pc, #16]	; (8017600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80175ee:	4805      	ldr	r0, [pc, #20]	; (8017604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80175f0:	f7f9 fac8 	bl	8010b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80175f4:	4b02      	ldr	r3, [pc, #8]	; (8017600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}
 80175fe:	bf00      	nop
 8017600:	200072c4 	.word	0x200072c4
 8017604:	0801d70c 	.word	0x0801d70c

08017608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	4603      	mov	r3, r0
 8017610:	6039      	str	r1, [r7, #0]
 8017612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017614:	79fb      	ldrb	r3, [r7, #7]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d105      	bne.n	8017626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801761a:	683a      	ldr	r2, [r7, #0]
 801761c:	4907      	ldr	r1, [pc, #28]	; (801763c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801761e:	4808      	ldr	r0, [pc, #32]	; (8017640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017620:	f7f9 fab0 	bl	8010b84 <USBD_GetString>
 8017624:	e004      	b.n	8017630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017626:	683a      	ldr	r2, [r7, #0]
 8017628:	4904      	ldr	r1, [pc, #16]	; (801763c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801762a:	4805      	ldr	r0, [pc, #20]	; (8017640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801762c:	f7f9 faaa 	bl	8010b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017630:	4b02      	ldr	r3, [pc, #8]	; (801763c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017632:	4618      	mov	r0, r3
 8017634:	3708      	adds	r7, #8
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	bf00      	nop
 801763c:	200072c4 	.word	0x200072c4
 8017640:	0801d718 	.word	0x0801d718

08017644 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	4603      	mov	r3, r0
 801764c:	6039      	str	r1, [r7, #0]
 801764e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	220c      	movs	r2, #12
 8017654:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017656:	4b03      	ldr	r3, [pc, #12]	; (8017664 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017658:	4618      	mov	r0, r3
 801765a:	370c      	adds	r7, #12
 801765c:	46bd      	mov	sp, r7
 801765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017662:	4770      	bx	lr
 8017664:	200000f4 	.word	0x200000f4

08017668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b084      	sub	sp, #16
 801766c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801766e:	4b0f      	ldr	r3, [pc, #60]	; (80176ac <Get_SerialNum+0x44>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017674:	4b0e      	ldr	r3, [pc, #56]	; (80176b0 <Get_SerialNum+0x48>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801767a:	4b0e      	ldr	r3, [pc, #56]	; (80176b4 <Get_SerialNum+0x4c>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	4413      	add	r3, r2
 8017686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d009      	beq.n	80176a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801768e:	2208      	movs	r2, #8
 8017690:	4909      	ldr	r1, [pc, #36]	; (80176b8 <Get_SerialNum+0x50>)
 8017692:	68f8      	ldr	r0, [r7, #12]
 8017694:	f000 f814 	bl	80176c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017698:	2204      	movs	r2, #4
 801769a:	4908      	ldr	r1, [pc, #32]	; (80176bc <Get_SerialNum+0x54>)
 801769c:	68b8      	ldr	r0, [r7, #8]
 801769e:	f000 f80f 	bl	80176c0 <IntToUnicode>
  }
}
 80176a2:	bf00      	nop
 80176a4:	3710      	adds	r7, #16
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}
 80176aa:	bf00      	nop
 80176ac:	1fff7a10 	.word	0x1fff7a10
 80176b0:	1fff7a14 	.word	0x1fff7a14
 80176b4:	1fff7a18 	.word	0x1fff7a18
 80176b8:	20000106 	.word	0x20000106
 80176bc:	20000116 	.word	0x20000116

080176c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80176c0:	b480      	push	{r7}
 80176c2:	b087      	sub	sp, #28
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	4613      	mov	r3, r2
 80176cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80176ce:	2300      	movs	r3, #0
 80176d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80176d2:	2300      	movs	r3, #0
 80176d4:	75fb      	strb	r3, [r7, #23]
 80176d6:	e027      	b.n	8017728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	0f1b      	lsrs	r3, r3, #28
 80176dc:	2b09      	cmp	r3, #9
 80176de:	d80b      	bhi.n	80176f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	0f1b      	lsrs	r3, r3, #28
 80176e4:	b2da      	uxtb	r2, r3
 80176e6:	7dfb      	ldrb	r3, [r7, #23]
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	4619      	mov	r1, r3
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	440b      	add	r3, r1
 80176f0:	3230      	adds	r2, #48	; 0x30
 80176f2:	b2d2      	uxtb	r2, r2
 80176f4:	701a      	strb	r2, [r3, #0]
 80176f6:	e00a      	b.n	801770e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	0f1b      	lsrs	r3, r3, #28
 80176fc:	b2da      	uxtb	r2, r3
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
 8017700:	005b      	lsls	r3, r3, #1
 8017702:	4619      	mov	r1, r3
 8017704:	68bb      	ldr	r3, [r7, #8]
 8017706:	440b      	add	r3, r1
 8017708:	3237      	adds	r2, #55	; 0x37
 801770a:	b2d2      	uxtb	r2, r2
 801770c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	011b      	lsls	r3, r3, #4
 8017712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017714:	7dfb      	ldrb	r3, [r7, #23]
 8017716:	005b      	lsls	r3, r3, #1
 8017718:	3301      	adds	r3, #1
 801771a:	68ba      	ldr	r2, [r7, #8]
 801771c:	4413      	add	r3, r2
 801771e:	2200      	movs	r2, #0
 8017720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017722:	7dfb      	ldrb	r3, [r7, #23]
 8017724:	3301      	adds	r3, #1
 8017726:	75fb      	strb	r3, [r7, #23]
 8017728:	7dfa      	ldrb	r2, [r7, #23]
 801772a:	79fb      	ldrb	r3, [r7, #7]
 801772c:	429a      	cmp	r2, r3
 801772e:	d3d3      	bcc.n	80176d8 <IntToUnicode+0x18>
  }
}
 8017730:	bf00      	nop
 8017732:	bf00      	nop
 8017734:	371c      	adds	r7, #28
 8017736:	46bd      	mov	sp, r7
 8017738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773c:	4770      	bx	lr

0801773e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801773e:	b480      	push	{r7}
 8017740:	b083      	sub	sp, #12
 8017742:	af00      	add	r7, sp, #0
 8017744:	4603      	mov	r3, r0
 8017746:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	UNUSED(lun);

	return (USBD_OK);
 8017748:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801774a:	4618      	mov	r0, r3
 801774c:	370c      	adds	r7, #12
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr
	...

08017758 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b08e      	sub	sp, #56	; 0x38
 801775c:	af00      	add	r7, sp, #0
 801775e:	4603      	mov	r3, r0
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	607a      	str	r2, [r7, #4]
 8017764:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	int8_t ret = -1;
 8017766:	23ff      	movs	r3, #255	; 0xff
 8017768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_SD_GetCardInfo(&hsd, &info);
 801776c:	f107 0314 	add.w	r3, r7, #20
 8017770:	4619      	mov	r1, r3
 8017772:	480a      	ldr	r0, [pc, #40]	; (801779c <STORAGE_GetCapacity_FS+0x44>)
 8017774:	f7f2 f872 	bl	800985c <HAL_SD_GetCardInfo>

	*block_num = info.LogBlockNbr - 1;
 8017778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801777a:	1e5a      	subs	r2, r3, #1
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	601a      	str	r2, [r3, #0]
	*block_size = info.LogBlockSize;
 8017780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017782:	b29a      	uxth	r2, r3
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	801a      	strh	r2, [r3, #0]
	ret = 0;
 8017788:	2300      	movs	r3, #0
 801778a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	return ret;
 801778e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017792:	4618      	mov	r0, r3
 8017794:	3738      	adds	r7, #56	; 0x38
 8017796:	46bd      	mov	sp, r7
 8017798:	bd80      	pop	{r7, pc}
 801779a:	bf00      	nop
 801779c:	20002874 	.word	0x20002874

080177a0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80177a0:	b480      	push	{r7}
 80177a2:	b083      	sub	sp, #12
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	4603      	mov	r3, r0
 80177a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	UNUSED(lun);

	return (USBD_OK);
 80177aa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	370c      	adds	r7, #12
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80177b8:	b480      	push	{r7}
 80177ba:	b083      	sub	sp, #12
 80177bc:	af00      	add	r7, sp, #0
 80177be:	4603      	mov	r3, r0
 80177c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	UNUSED(lun);

	return (USBD_OK);
 80177c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b088      	sub	sp, #32
 80177d4:	af02      	add	r7, sp, #8
 80177d6:	60b9      	str	r1, [r7, #8]
 80177d8:	607a      	str	r2, [r7, #4]
 80177da:	461a      	mov	r2, r3
 80177dc:	4603      	mov	r3, r0
 80177de:	73fb      	strb	r3, [r7, #15]
 80177e0:	4613      	mov	r3, r2
 80177e2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 80177e4:	23ff      	movs	r3, #255	; 0xff
 80177e6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80177e8:	89bb      	ldrh	r3, [r7, #12]
 80177ea:	f04f 32ff 	mov.w	r2, #4294967295
 80177ee:	9200      	str	r2, [sp, #0]
 80177f0:	687a      	ldr	r2, [r7, #4]
 80177f2:	68b9      	ldr	r1, [r7, #8]
 80177f4:	4808      	ldr	r0, [pc, #32]	; (8017818 <STORAGE_Read_FS+0x48>)
 80177f6:	f7f0 ffe7 	bl	80087c8 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 80177fa:	bf00      	nop
 80177fc:	4806      	ldr	r0, [pc, #24]	; (8017818 <STORAGE_Read_FS+0x48>)
 80177fe:	f7f2 f859 	bl	80098b4 <HAL_SD_GetCardState>
 8017802:	4603      	mov	r3, r0
 8017804:	2b04      	cmp	r3, #4
 8017806:	d1f9      	bne.n	80177fc <STORAGE_Read_FS+0x2c>
	{
	}
	ret = 0;
 8017808:	2300      	movs	r3, #0
 801780a:	75fb      	strb	r3, [r7, #23]
	return ret;
 801780c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017810:	4618      	mov	r0, r3
 8017812:	3718      	adds	r7, #24
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	20002874 	.word	0x20002874

0801781c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b088      	sub	sp, #32
 8017820:	af02      	add	r7, sp, #8
 8017822:	60b9      	str	r1, [r7, #8]
 8017824:	607a      	str	r2, [r7, #4]
 8017826:	461a      	mov	r2, r3
 8017828:	4603      	mov	r3, r0
 801782a:	73fb      	strb	r3, [r7, #15]
 801782c:	4613      	mov	r3, r2
 801782e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017830:	23ff      	movs	r3, #255	; 0xff
 8017832:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017834:	89bb      	ldrh	r3, [r7, #12]
 8017836:	f04f 32ff 	mov.w	r2, #4294967295
 801783a:	9200      	str	r2, [sp, #0]
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	68b9      	ldr	r1, [r7, #8]
 8017840:	4808      	ldr	r0, [pc, #32]	; (8017864 <STORAGE_Write_FS+0x48>)
 8017842:	f7f1 f99f 	bl	8008b84 <HAL_SD_WriteBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
 8017846:	bf00      	nop
 8017848:	4806      	ldr	r0, [pc, #24]	; (8017864 <STORAGE_Write_FS+0x48>)
 801784a:	f7f2 f833 	bl	80098b4 <HAL_SD_GetCardState>
 801784e:	4603      	mov	r3, r0
 8017850:	2b04      	cmp	r3, #4
 8017852:	d1f9      	bne.n	8017848 <STORAGE_Write_FS+0x2c>
	{
	}
	ret = 0;
 8017854:	2300      	movs	r3, #0
 8017856:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017858:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801785c:	4618      	mov	r0, r3
 801785e:	3718      	adds	r7, #24
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	20002874 	.word	0x20002874

08017868 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017868:	b480      	push	{r7}
 801786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 801786c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801786e:	4618      	mov	r0, r3
 8017870:	46bd      	mov	sp, r7
 8017872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017876:	4770      	bx	lr

08017878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b0a0      	sub	sp, #128	; 0x80
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017880:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017884:	2200      	movs	r2, #0
 8017886:	601a      	str	r2, [r3, #0]
 8017888:	605a      	str	r2, [r3, #4]
 801788a:	609a      	str	r2, [r3, #8]
 801788c:	60da      	str	r2, [r3, #12]
 801788e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017890:	f107 0310 	add.w	r3, r7, #16
 8017894:	225c      	movs	r2, #92	; 0x5c
 8017896:	2100      	movs	r1, #0
 8017898:	4618      	mov	r0, r3
 801789a:	f001 fd19 	bl	80192d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80178a6:	d149      	bne.n	801793c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80178a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80178ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80178ae:	2300      	movs	r3, #0
 80178b0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178b2:	f107 0310 	add.w	r3, r7, #16
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7ef fee0 	bl	800767c <HAL_RCCEx_PeriphCLKConfig>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d001      	beq.n	80178c6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80178c2:	f7ea fd8b 	bl	80023dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80178c6:	2300      	movs	r3, #0
 80178c8:	60fb      	str	r3, [r7, #12]
 80178ca:	4b1e      	ldr	r3, [pc, #120]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 80178cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178ce:	4a1d      	ldr	r2, [pc, #116]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 80178d0:	f043 0301 	orr.w	r3, r3, #1
 80178d4:	6313      	str	r3, [r2, #48]	; 0x30
 80178d6:	4b1b      	ldr	r3, [pc, #108]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 80178d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178da:	f003 0301 	and.w	r3, r3, #1
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80178e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80178e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178e8:	2302      	movs	r3, #2
 80178ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178ec:	2300      	movs	r3, #0
 80178ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80178f0:	2303      	movs	r3, #3
 80178f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80178f4:	230a      	movs	r3, #10
 80178f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80178f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80178fc:	4619      	mov	r1, r3
 80178fe:	4812      	ldr	r0, [pc, #72]	; (8017948 <HAL_PCD_MspInit+0xd0>)
 8017900:	f7ed fb68 	bl	8004fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017904:	4b0f      	ldr	r3, [pc, #60]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 8017906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017908:	4a0e      	ldr	r2, [pc, #56]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 801790a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801790e:	6353      	str	r3, [r2, #52]	; 0x34
 8017910:	2300      	movs	r3, #0
 8017912:	60bb      	str	r3, [r7, #8]
 8017914:	4b0b      	ldr	r3, [pc, #44]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 8017916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017918:	4a0a      	ldr	r2, [pc, #40]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 801791a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801791e:	6453      	str	r3, [r2, #68]	; 0x44
 8017920:	4b08      	ldr	r3, [pc, #32]	; (8017944 <HAL_PCD_MspInit+0xcc>)
 8017922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017928:	60bb      	str	r3, [r7, #8]
 801792a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801792c:	2200      	movs	r2, #0
 801792e:	2105      	movs	r1, #5
 8017930:	2043      	movs	r0, #67	; 0x43
 8017932:	f7ec ff17 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017936:	2043      	movs	r0, #67	; 0x43
 8017938:	f7ec ff30 	bl	800479c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801793c:	bf00      	nop
 801793e:	3780      	adds	r7, #128	; 0x80
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}
 8017944:	40023800 	.word	0x40023800
 8017948:	40020000 	.word	0x40020000

0801794c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017960:	4619      	mov	r1, r3
 8017962:	4610      	mov	r0, r2
 8017964:	f7f7 ff84 	bl	800f870 <USBD_LL_SetupStage>
}
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	460b      	mov	r3, r1
 801797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017982:	78fa      	ldrb	r2, [r7, #3]
 8017984:	6879      	ldr	r1, [r7, #4]
 8017986:	4613      	mov	r3, r2
 8017988:	00db      	lsls	r3, r3, #3
 801798a:	4413      	add	r3, r2
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	440b      	add	r3, r1
 8017990:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	78fb      	ldrb	r3, [r7, #3]
 8017998:	4619      	mov	r1, r3
 801799a:	f7f7 ffbe 	bl	800f91a <USBD_LL_DataOutStage>
}
 801799e:	bf00      	nop
 80179a0:	3708      	adds	r7, #8
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b082      	sub	sp, #8
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
 80179ae:	460b      	mov	r3, r1
 80179b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80179b8:	78fa      	ldrb	r2, [r7, #3]
 80179ba:	6879      	ldr	r1, [r7, #4]
 80179bc:	4613      	mov	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	4413      	add	r3, r2
 80179c2:	009b      	lsls	r3, r3, #2
 80179c4:	440b      	add	r3, r1
 80179c6:	334c      	adds	r3, #76	; 0x4c
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	78fb      	ldrb	r3, [r7, #3]
 80179cc:	4619      	mov	r1, r3
 80179ce:	f7f8 f857 	bl	800fa80 <USBD_LL_DataInStage>
}
 80179d2:	bf00      	nop
 80179d4:	3708      	adds	r7, #8
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179da:	b580      	push	{r7, lr}
 80179dc:	b082      	sub	sp, #8
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7f8 f98b 	bl	800fd04 <USBD_LL_SOF>
}
 80179ee:	bf00      	nop
 80179f0:	3708      	adds	r7, #8
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}

080179f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b084      	sub	sp, #16
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80179fe:	2301      	movs	r3, #1
 8017a00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	68db      	ldr	r3, [r3, #12]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d102      	bne.n	8017a10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	73fb      	strb	r3, [r7, #15]
 8017a0e:	e008      	b.n	8017a22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	2b02      	cmp	r3, #2
 8017a16:	d102      	bne.n	8017a1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	73fb      	strb	r3, [r7, #15]
 8017a1c:	e001      	b.n	8017a22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017a1e:	f7ea fcdd 	bl	80023dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a28:	7bfa      	ldrb	r2, [r7, #15]
 8017a2a:	4611      	mov	r1, r2
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7f8 f92b 	bl	800fc88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f8 f8d3 	bl	800fbe4 <USBD_LL_Reset>
}
 8017a3e:	bf00      	nop
 8017a40:	3710      	adds	r7, #16
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
	...

08017a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7f8 f926 	bl	800fca8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	6812      	ldr	r2, [r2, #0]
 8017a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a6e:	f043 0301 	orr.w	r3, r3, #1
 8017a72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	6a1b      	ldr	r3, [r3, #32]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d005      	beq.n	8017a88 <HAL_PCD_SuspendCallback+0x40>
	{
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 8017a7c:	4b04      	ldr	r3, [pc, #16]	; (8017a90 <HAL_PCD_SuspendCallback+0x48>)
 8017a7e:	691b      	ldr	r3, [r3, #16]
 8017a80:	4a03      	ldr	r2, [pc, #12]	; (8017a90 <HAL_PCD_SuspendCallback+0x48>)
 8017a82:	f043 0306 	orr.w	r3, r3, #6
 8017a86:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
  /* USER CODE END 2 */
}
 8017a88:	bf00      	nop
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	e000ed00 	.word	0xe000ed00

08017a94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7f8 f916 	bl	800fcd4 <USBD_LL_Resume>
}
 8017aa8:	bf00      	nop
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}

08017ab0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b082      	sub	sp, #8
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
 8017ab8:	460b      	mov	r3, r1
 8017aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ac2:	78fa      	ldrb	r2, [r7, #3]
 8017ac4:	4611      	mov	r1, r2
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7f8 f96e 	bl	800fda8 <USBD_LL_IsoOUTIncomplete>
}
 8017acc:	bf00      	nop
 8017ace:	3708      	adds	r7, #8
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}

08017ad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
 8017adc:	460b      	mov	r3, r1
 8017ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ae6:	78fa      	ldrb	r2, [r7, #3]
 8017ae8:	4611      	mov	r1, r2
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7f8 f92a 	bl	800fd44 <USBD_LL_IsoINIncomplete>
}
 8017af0:	bf00      	nop
 8017af2:	3708      	adds	r7, #8
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}

08017af8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b082      	sub	sp, #8
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f8 f980 	bl	800fe0c <USBD_LL_DevConnected>
}
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017b22:	4618      	mov	r0, r3
 8017b24:	f7f8 f97d 	bl	800fe22 <USBD_LL_DevDisconnected>
}
 8017b28:	bf00      	nop
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d13c      	bne.n	8017bba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017b40:	4a20      	ldr	r2, [pc, #128]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	4a1e      	ldr	r2, [pc, #120]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b4c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017b50:	4b1c      	ldr	r3, [pc, #112]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017b58:	4b1a      	ldr	r3, [pc, #104]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b5a:	2206      	movs	r2, #6
 8017b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017b5e:	4b19      	ldr	r3, [pc, #100]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b60:	2202      	movs	r2, #2
 8017b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017b64:	4b17      	ldr	r3, [pc, #92]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b66:	2200      	movs	r2, #0
 8017b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017b6a:	4b16      	ldr	r3, [pc, #88]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017b70:	4b14      	ldr	r3, [pc, #80]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b72:	2200      	movs	r2, #0
 8017b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017b76:	4b13      	ldr	r3, [pc, #76]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b78:	2200      	movs	r2, #0
 8017b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017b7c:	4b11      	ldr	r3, [pc, #68]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b7e:	2200      	movs	r2, #0
 8017b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017b82:	4b10      	ldr	r3, [pc, #64]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b84:	2200      	movs	r2, #0
 8017b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017b88:	4b0e      	ldr	r3, [pc, #56]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017b8e:	480d      	ldr	r0, [pc, #52]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017b90:	f7ee f945 	bl	8005e1e <HAL_PCD_Init>
 8017b94:	4603      	mov	r3, r0
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d001      	beq.n	8017b9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017b9a:	f7ea fc1f 	bl	80023dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017b9e:	2180      	movs	r1, #128	; 0x80
 8017ba0:	4808      	ldr	r0, [pc, #32]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017ba2:	f7ef fbfe 	bl	80073a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017ba6:	2240      	movs	r2, #64	; 0x40
 8017ba8:	2100      	movs	r1, #0
 8017baa:	4806      	ldr	r0, [pc, #24]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017bac:	f7ef fbb2 	bl	8007314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017bb0:	2280      	movs	r2, #128	; 0x80
 8017bb2:	2101      	movs	r1, #1
 8017bb4:	4803      	ldr	r0, [pc, #12]	; (8017bc4 <USBD_LL_Init+0x94>)
 8017bb6:	f7ef fbad 	bl	8007314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017bba:	2300      	movs	r3, #0
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}
 8017bc4:	200074c4 	.word	0x200074c4

08017bc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b084      	sub	sp, #16
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7ee fa41 	bl	8006066 <HAL_PCD_Start>
 8017be4:	4603      	mov	r3, r0
 8017be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017be8:	7bfb      	ldrb	r3, [r7, #15]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f000 f9b0 	bl	8017f50 <USBD_Get_USB_Status>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3710      	adds	r7, #16
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}

08017bfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017bfe:	b580      	push	{r7, lr}
 8017c00:	b084      	sub	sp, #16
 8017c02:	af00      	add	r7, sp, #0
 8017c04:	6078      	str	r0, [r7, #4]
 8017c06:	4608      	mov	r0, r1
 8017c08:	4611      	mov	r1, r2
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	70fb      	strb	r3, [r7, #3]
 8017c10:	460b      	mov	r3, r1
 8017c12:	70bb      	strb	r3, [r7, #2]
 8017c14:	4613      	mov	r3, r2
 8017c16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017c26:	78bb      	ldrb	r3, [r7, #2]
 8017c28:	883a      	ldrh	r2, [r7, #0]
 8017c2a:	78f9      	ldrb	r1, [r7, #3]
 8017c2c:	f7ee ff3f 	bl	8006aae <HAL_PCD_EP_Open>
 8017c30:	4603      	mov	r3, r0
 8017c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c34:	7bfb      	ldrb	r3, [r7, #15]
 8017c36:	4618      	mov	r0, r3
 8017c38:	f000 f98a 	bl	8017f50 <USBD_Get_USB_Status>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3710      	adds	r7, #16
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c4a:	b580      	push	{r7, lr}
 8017c4c:	b084      	sub	sp, #16
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
 8017c52:	460b      	mov	r3, r1
 8017c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c56:	2300      	movs	r3, #0
 8017c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c64:	78fa      	ldrb	r2, [r7, #3]
 8017c66:	4611      	mov	r1, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7ee ff88 	bl	8006b7e <HAL_PCD_EP_Close>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c72:	7bfb      	ldrb	r3, [r7, #15]
 8017c74:	4618      	mov	r0, r3
 8017c76:	f000 f96b 	bl	8017f50 <USBD_Get_USB_Status>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c80:	4618      	mov	r0, r3
 8017c82:	3710      	adds	r7, #16
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}

08017c88 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b084      	sub	sp, #16
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
 8017c90:	460b      	mov	r3, r1
 8017c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c94:	2300      	movs	r3, #0
 8017c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ca2:	78fa      	ldrb	r2, [r7, #3]
 8017ca4:	4611      	mov	r1, r2
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f7ef f94b 	bl	8006f42 <HAL_PCD_EP_Flush>
 8017cac:	4603      	mov	r3, r0
 8017cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cb0:	7bfb      	ldrb	r3, [r7, #15]
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f000 f94c 	bl	8017f50 <USBD_Get_USB_Status>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3710      	adds	r7, #16
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}

08017cc6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cc6:	b580      	push	{r7, lr}
 8017cc8:	b084      	sub	sp, #16
 8017cca:	af00      	add	r7, sp, #0
 8017ccc:	6078      	str	r0, [r7, #4]
 8017cce:	460b      	mov	r3, r1
 8017cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ce0:	78fa      	ldrb	r2, [r7, #3]
 8017ce2:	4611      	mov	r1, r2
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7ef f841 	bl	8006d6c <HAL_PCD_EP_SetStall>
 8017cea:	4603      	mov	r3, r0
 8017cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cee:	7bfb      	ldrb	r3, [r7, #15]
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f000 f92d 	bl	8017f50 <USBD_Get_USB_Status>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3710      	adds	r7, #16
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b084      	sub	sp, #16
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
 8017d0c:	460b      	mov	r3, r1
 8017d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d10:	2300      	movs	r3, #0
 8017d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d14:	2300      	movs	r3, #0
 8017d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d1e:	78fa      	ldrb	r2, [r7, #3]
 8017d20:	4611      	mov	r1, r2
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7ef f886 	bl	8006e34 <HAL_PCD_EP_ClrStall>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d2c:	7bfb      	ldrb	r3, [r7, #15]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f000 f90e 	bl	8017f50 <USBD_Get_USB_Status>
 8017d34:	4603      	mov	r3, r0
 8017d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}

08017d42 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d42:	b480      	push	{r7}
 8017d44:	b085      	sub	sp, #20
 8017d46:	af00      	add	r7, sp, #0
 8017d48:	6078      	str	r0, [r7, #4]
 8017d4a:	460b      	mov	r3, r1
 8017d4c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d54:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	da0b      	bge.n	8017d76 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017d5e:	78fb      	ldrb	r3, [r7, #3]
 8017d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d64:	68f9      	ldr	r1, [r7, #12]
 8017d66:	4613      	mov	r3, r2
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	4413      	add	r3, r2
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	440b      	add	r3, r1
 8017d70:	333e      	adds	r3, #62	; 0x3e
 8017d72:	781b      	ldrb	r3, [r3, #0]
 8017d74:	e00b      	b.n	8017d8e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017d76:	78fb      	ldrb	r3, [r7, #3]
 8017d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017d7c:	68f9      	ldr	r1, [r7, #12]
 8017d7e:	4613      	mov	r3, r2
 8017d80:	00db      	lsls	r3, r3, #3
 8017d82:	4413      	add	r3, r2
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	440b      	add	r3, r1
 8017d88:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017d8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3714      	adds	r7, #20
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr

08017d9a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d9a:	b580      	push	{r7, lr}
 8017d9c:	b084      	sub	sp, #16
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	6078      	str	r0, [r7, #4]
 8017da2:	460b      	mov	r3, r1
 8017da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da6:	2300      	movs	r3, #0
 8017da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017daa:	2300      	movs	r3, #0
 8017dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017db4:	78fa      	ldrb	r2, [r7, #3]
 8017db6:	4611      	mov	r1, r2
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7ee fe53 	bl	8006a64 <HAL_PCD_SetAddress>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dc2:	7bfb      	ldrb	r3, [r7, #15]
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f000 f8c3 	bl	8017f50 <USBD_Get_USB_Status>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3710      	adds	r7, #16
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b086      	sub	sp, #24
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	60f8      	str	r0, [r7, #12]
 8017de0:	607a      	str	r2, [r7, #4]
 8017de2:	603b      	str	r3, [r7, #0]
 8017de4:	460b      	mov	r3, r1
 8017de6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de8:	2300      	movs	r3, #0
 8017dea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dec:	2300      	movs	r3, #0
 8017dee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017df6:	7af9      	ldrb	r1, [r7, #11]
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	f7ee ff6c 	bl	8006cd8 <HAL_PCD_EP_Transmit>
 8017e00:	4603      	mov	r3, r0
 8017e02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e04:	7dfb      	ldrb	r3, [r7, #23]
 8017e06:	4618      	mov	r0, r3
 8017e08:	f000 f8a2 	bl	8017f50 <USBD_Get_USB_Status>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017e10:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	3718      	adds	r7, #24
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd80      	pop	{r7, pc}

08017e1a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b086      	sub	sp, #24
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	60f8      	str	r0, [r7, #12]
 8017e22:	607a      	str	r2, [r7, #4]
 8017e24:	603b      	str	r3, [r7, #0]
 8017e26:	460b      	mov	r3, r1
 8017e28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017e38:	7af9      	ldrb	r1, [r7, #11]
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	687a      	ldr	r2, [r7, #4]
 8017e3e:	f7ee fee8 	bl	8006c12 <HAL_PCD_EP_Receive>
 8017e42:	4603      	mov	r3, r0
 8017e44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e46:	7dfb      	ldrb	r3, [r7, #23]
 8017e48:	4618      	mov	r0, r3
 8017e4a:	f000 f881 	bl	8017f50 <USBD_Get_USB_Status>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017e52:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3718      	adds	r7, #24
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}

08017e5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
 8017e64:	460b      	mov	r3, r1
 8017e66:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e6e:	78fa      	ldrb	r2, [r7, #3]
 8017e70:	4611      	mov	r1, r2
 8017e72:	4618      	mov	r0, r3
 8017e74:	f7ee ff18 	bl	8006ca8 <HAL_PCD_EP_GetRxCount>
 8017e78:	4603      	mov	r3, r0
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	3708      	adds	r7, #8
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
	...

08017e84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b082      	sub	sp, #8
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017e90:	78fb      	ldrb	r3, [r7, #3]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d002      	beq.n	8017e9c <HAL_PCDEx_LPM_Callback+0x18>
 8017e96:	2b01      	cmp	r3, #1
 8017e98:	d01f      	beq.n	8017eda <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017e9a:	e03b      	b.n	8017f14 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6a1b      	ldr	r3, [r3, #32]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d007      	beq.n	8017eb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017ea4:	f7ea fa1c 	bl	80022e0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ea8:	4b1c      	ldr	r3, [pc, #112]	; (8017f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8017eaa:	691b      	ldr	r3, [r3, #16]
 8017eac:	4a1b      	ldr	r2, [pc, #108]	; (8017f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8017eae:	f023 0306 	bic.w	r3, r3, #6
 8017eb2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	6812      	ldr	r2, [r2, #0]
 8017ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ec6:	f023 0301 	bic.w	r3, r3, #1
 8017eca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f7 fefe 	bl	800fcd4 <USBD_LL_Resume>
    break;
 8017ed8:	e01c      	b.n	8017f14 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	6812      	ldr	r2, [r2, #0]
 8017ee8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017eec:	f043 0301 	orr.w	r3, r3, #1
 8017ef0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7f7 fed5 	bl	800fca8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	6a1b      	ldr	r3, [r3, #32]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d005      	beq.n	8017f12 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f06:	4b05      	ldr	r3, [pc, #20]	; (8017f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8017f08:	691b      	ldr	r3, [r3, #16]
 8017f0a:	4a04      	ldr	r2, [pc, #16]	; (8017f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8017f0c:	f043 0306 	orr.w	r3, r3, #6
 8017f10:	6113      	str	r3, [r2, #16]
    break;
 8017f12:	bf00      	nop
}
 8017f14:	bf00      	nop
 8017f16:	3708      	adds	r7, #8
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}
 8017f1c:	e000ed00 	.word	0xe000ed00

08017f20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017f28:	4b03      	ldr	r3, [pc, #12]	; (8017f38 <USBD_static_malloc+0x18>)
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	370c      	adds	r7, #12
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f34:	4770      	bx	lr
 8017f36:	bf00      	nop
 8017f38:	200079d0 	.word	0x200079d0

08017f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]

}
 8017f44:	bf00      	nop
 8017f46:	370c      	adds	r7, #12
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017f50:	b480      	push	{r7}
 8017f52:	b085      	sub	sp, #20
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	4603      	mov	r3, r0
 8017f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017f5e:	79fb      	ldrb	r3, [r7, #7]
 8017f60:	2b03      	cmp	r3, #3
 8017f62:	d817      	bhi.n	8017f94 <USBD_Get_USB_Status+0x44>
 8017f64:	a201      	add	r2, pc, #4	; (adr r2, 8017f6c <USBD_Get_USB_Status+0x1c>)
 8017f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f6a:	bf00      	nop
 8017f6c:	08017f7d 	.word	0x08017f7d
 8017f70:	08017f83 	.word	0x08017f83
 8017f74:	08017f89 	.word	0x08017f89
 8017f78:	08017f8f 	.word	0x08017f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8017f80:	e00b      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017f82:	2303      	movs	r3, #3
 8017f84:	73fb      	strb	r3, [r7, #15]
    break;
 8017f86:	e008      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017f88:	2301      	movs	r3, #1
 8017f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8017f8c:	e005      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017f8e:	2303      	movs	r3, #3
 8017f90:	73fb      	strb	r3, [r7, #15]
    break;
 8017f92:	e002      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017f94:	2303      	movs	r3, #3
 8017f96:	73fb      	strb	r3, [r7, #15]
    break;
 8017f98:	bf00      	nop
  }
  return usb_status;
 8017f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	3714      	adds	r7, #20
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa6:	4770      	bx	lr

08017fa8 <calloc>:
 8017fa8:	4b02      	ldr	r3, [pc, #8]	; (8017fb4 <calloc+0xc>)
 8017faa:	460a      	mov	r2, r1
 8017fac:	4601      	mov	r1, r0
 8017fae:	6818      	ldr	r0, [r3, #0]
 8017fb0:	f000 b802 	b.w	8017fb8 <_calloc_r>
 8017fb4:	20000198 	.word	0x20000198

08017fb8 <_calloc_r>:
 8017fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fba:	fba1 2402 	umull	r2, r4, r1, r2
 8017fbe:	b94c      	cbnz	r4, 8017fd4 <_calloc_r+0x1c>
 8017fc0:	4611      	mov	r1, r2
 8017fc2:	9201      	str	r2, [sp, #4]
 8017fc4:	f000 f83e 	bl	8018044 <_malloc_r>
 8017fc8:	9a01      	ldr	r2, [sp, #4]
 8017fca:	4605      	mov	r5, r0
 8017fcc:	b930      	cbnz	r0, 8017fdc <_calloc_r+0x24>
 8017fce:	4628      	mov	r0, r5
 8017fd0:	b003      	add	sp, #12
 8017fd2:	bd30      	pop	{r4, r5, pc}
 8017fd4:	220c      	movs	r2, #12
 8017fd6:	6002      	str	r2, [r0, #0]
 8017fd8:	2500      	movs	r5, #0
 8017fda:	e7f8      	b.n	8017fce <_calloc_r+0x16>
 8017fdc:	4621      	mov	r1, r4
 8017fde:	f001 f977 	bl	80192d0 <memset>
 8017fe2:	e7f4      	b.n	8017fce <_calloc_r+0x16>

08017fe4 <malloc>:
 8017fe4:	4b02      	ldr	r3, [pc, #8]	; (8017ff0 <malloc+0xc>)
 8017fe6:	4601      	mov	r1, r0
 8017fe8:	6818      	ldr	r0, [r3, #0]
 8017fea:	f000 b82b 	b.w	8018044 <_malloc_r>
 8017fee:	bf00      	nop
 8017ff0:	20000198 	.word	0x20000198

08017ff4 <free>:
 8017ff4:	4b02      	ldr	r3, [pc, #8]	; (8018000 <free+0xc>)
 8017ff6:	4601      	mov	r1, r0
 8017ff8:	6818      	ldr	r0, [r3, #0]
 8017ffa:	f002 b8eb 	b.w	801a1d4 <_free_r>
 8017ffe:	bf00      	nop
 8018000:	20000198 	.word	0x20000198

08018004 <sbrk_aligned>:
 8018004:	b570      	push	{r4, r5, r6, lr}
 8018006:	4e0e      	ldr	r6, [pc, #56]	; (8018040 <sbrk_aligned+0x3c>)
 8018008:	460c      	mov	r4, r1
 801800a:	6831      	ldr	r1, [r6, #0]
 801800c:	4605      	mov	r5, r0
 801800e:	b911      	cbnz	r1, 8018016 <sbrk_aligned+0x12>
 8018010:	f001 fa04 	bl	801941c <_sbrk_r>
 8018014:	6030      	str	r0, [r6, #0]
 8018016:	4621      	mov	r1, r4
 8018018:	4628      	mov	r0, r5
 801801a:	f001 f9ff 	bl	801941c <_sbrk_r>
 801801e:	1c43      	adds	r3, r0, #1
 8018020:	d00a      	beq.n	8018038 <sbrk_aligned+0x34>
 8018022:	1cc4      	adds	r4, r0, #3
 8018024:	f024 0403 	bic.w	r4, r4, #3
 8018028:	42a0      	cmp	r0, r4
 801802a:	d007      	beq.n	801803c <sbrk_aligned+0x38>
 801802c:	1a21      	subs	r1, r4, r0
 801802e:	4628      	mov	r0, r5
 8018030:	f001 f9f4 	bl	801941c <_sbrk_r>
 8018034:	3001      	adds	r0, #1
 8018036:	d101      	bne.n	801803c <sbrk_aligned+0x38>
 8018038:	f04f 34ff 	mov.w	r4, #4294967295
 801803c:	4620      	mov	r0, r4
 801803e:	bd70      	pop	{r4, r5, r6, pc}
 8018040:	20007c4c 	.word	0x20007c4c

08018044 <_malloc_r>:
 8018044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018048:	1ccd      	adds	r5, r1, #3
 801804a:	f025 0503 	bic.w	r5, r5, #3
 801804e:	3508      	adds	r5, #8
 8018050:	2d0c      	cmp	r5, #12
 8018052:	bf38      	it	cc
 8018054:	250c      	movcc	r5, #12
 8018056:	2d00      	cmp	r5, #0
 8018058:	4607      	mov	r7, r0
 801805a:	db01      	blt.n	8018060 <_malloc_r+0x1c>
 801805c:	42a9      	cmp	r1, r5
 801805e:	d905      	bls.n	801806c <_malloc_r+0x28>
 8018060:	230c      	movs	r3, #12
 8018062:	603b      	str	r3, [r7, #0]
 8018064:	2600      	movs	r6, #0
 8018066:	4630      	mov	r0, r6
 8018068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801806c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018140 <_malloc_r+0xfc>
 8018070:	f000 f868 	bl	8018144 <__malloc_lock>
 8018074:	f8d8 3000 	ldr.w	r3, [r8]
 8018078:	461c      	mov	r4, r3
 801807a:	bb5c      	cbnz	r4, 80180d4 <_malloc_r+0x90>
 801807c:	4629      	mov	r1, r5
 801807e:	4638      	mov	r0, r7
 8018080:	f7ff ffc0 	bl	8018004 <sbrk_aligned>
 8018084:	1c43      	adds	r3, r0, #1
 8018086:	4604      	mov	r4, r0
 8018088:	d155      	bne.n	8018136 <_malloc_r+0xf2>
 801808a:	f8d8 4000 	ldr.w	r4, [r8]
 801808e:	4626      	mov	r6, r4
 8018090:	2e00      	cmp	r6, #0
 8018092:	d145      	bne.n	8018120 <_malloc_r+0xdc>
 8018094:	2c00      	cmp	r4, #0
 8018096:	d048      	beq.n	801812a <_malloc_r+0xe6>
 8018098:	6823      	ldr	r3, [r4, #0]
 801809a:	4631      	mov	r1, r6
 801809c:	4638      	mov	r0, r7
 801809e:	eb04 0903 	add.w	r9, r4, r3
 80180a2:	f001 f9bb 	bl	801941c <_sbrk_r>
 80180a6:	4581      	cmp	r9, r0
 80180a8:	d13f      	bne.n	801812a <_malloc_r+0xe6>
 80180aa:	6821      	ldr	r1, [r4, #0]
 80180ac:	1a6d      	subs	r5, r5, r1
 80180ae:	4629      	mov	r1, r5
 80180b0:	4638      	mov	r0, r7
 80180b2:	f7ff ffa7 	bl	8018004 <sbrk_aligned>
 80180b6:	3001      	adds	r0, #1
 80180b8:	d037      	beq.n	801812a <_malloc_r+0xe6>
 80180ba:	6823      	ldr	r3, [r4, #0]
 80180bc:	442b      	add	r3, r5
 80180be:	6023      	str	r3, [r4, #0]
 80180c0:	f8d8 3000 	ldr.w	r3, [r8]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d038      	beq.n	801813a <_malloc_r+0xf6>
 80180c8:	685a      	ldr	r2, [r3, #4]
 80180ca:	42a2      	cmp	r2, r4
 80180cc:	d12b      	bne.n	8018126 <_malloc_r+0xe2>
 80180ce:	2200      	movs	r2, #0
 80180d0:	605a      	str	r2, [r3, #4]
 80180d2:	e00f      	b.n	80180f4 <_malloc_r+0xb0>
 80180d4:	6822      	ldr	r2, [r4, #0]
 80180d6:	1b52      	subs	r2, r2, r5
 80180d8:	d41f      	bmi.n	801811a <_malloc_r+0xd6>
 80180da:	2a0b      	cmp	r2, #11
 80180dc:	d917      	bls.n	801810e <_malloc_r+0xca>
 80180de:	1961      	adds	r1, r4, r5
 80180e0:	42a3      	cmp	r3, r4
 80180e2:	6025      	str	r5, [r4, #0]
 80180e4:	bf18      	it	ne
 80180e6:	6059      	strne	r1, [r3, #4]
 80180e8:	6863      	ldr	r3, [r4, #4]
 80180ea:	bf08      	it	eq
 80180ec:	f8c8 1000 	streq.w	r1, [r8]
 80180f0:	5162      	str	r2, [r4, r5]
 80180f2:	604b      	str	r3, [r1, #4]
 80180f4:	4638      	mov	r0, r7
 80180f6:	f104 060b 	add.w	r6, r4, #11
 80180fa:	f000 f829 	bl	8018150 <__malloc_unlock>
 80180fe:	f026 0607 	bic.w	r6, r6, #7
 8018102:	1d23      	adds	r3, r4, #4
 8018104:	1af2      	subs	r2, r6, r3
 8018106:	d0ae      	beq.n	8018066 <_malloc_r+0x22>
 8018108:	1b9b      	subs	r3, r3, r6
 801810a:	50a3      	str	r3, [r4, r2]
 801810c:	e7ab      	b.n	8018066 <_malloc_r+0x22>
 801810e:	42a3      	cmp	r3, r4
 8018110:	6862      	ldr	r2, [r4, #4]
 8018112:	d1dd      	bne.n	80180d0 <_malloc_r+0x8c>
 8018114:	f8c8 2000 	str.w	r2, [r8]
 8018118:	e7ec      	b.n	80180f4 <_malloc_r+0xb0>
 801811a:	4623      	mov	r3, r4
 801811c:	6864      	ldr	r4, [r4, #4]
 801811e:	e7ac      	b.n	801807a <_malloc_r+0x36>
 8018120:	4634      	mov	r4, r6
 8018122:	6876      	ldr	r6, [r6, #4]
 8018124:	e7b4      	b.n	8018090 <_malloc_r+0x4c>
 8018126:	4613      	mov	r3, r2
 8018128:	e7cc      	b.n	80180c4 <_malloc_r+0x80>
 801812a:	230c      	movs	r3, #12
 801812c:	603b      	str	r3, [r7, #0]
 801812e:	4638      	mov	r0, r7
 8018130:	f000 f80e 	bl	8018150 <__malloc_unlock>
 8018134:	e797      	b.n	8018066 <_malloc_r+0x22>
 8018136:	6025      	str	r5, [r4, #0]
 8018138:	e7dc      	b.n	80180f4 <_malloc_r+0xb0>
 801813a:	605b      	str	r3, [r3, #4]
 801813c:	deff      	udf	#255	; 0xff
 801813e:	bf00      	nop
 8018140:	20007c48 	.word	0x20007c48

08018144 <__malloc_lock>:
 8018144:	4801      	ldr	r0, [pc, #4]	; (801814c <__malloc_lock+0x8>)
 8018146:	f001 b9b5 	b.w	80194b4 <__retarget_lock_acquire_recursive>
 801814a:	bf00      	nop
 801814c:	20007d90 	.word	0x20007d90

08018150 <__malloc_unlock>:
 8018150:	4801      	ldr	r0, [pc, #4]	; (8018158 <__malloc_unlock+0x8>)
 8018152:	f001 b9b0 	b.w	80194b6 <__retarget_lock_release_recursive>
 8018156:	bf00      	nop
 8018158:	20007d90 	.word	0x20007d90

0801815c <__cvt>:
 801815c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018160:	ec55 4b10 	vmov	r4, r5, d0
 8018164:	2d00      	cmp	r5, #0
 8018166:	460e      	mov	r6, r1
 8018168:	4619      	mov	r1, r3
 801816a:	462b      	mov	r3, r5
 801816c:	bfbb      	ittet	lt
 801816e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018172:	461d      	movlt	r5, r3
 8018174:	2300      	movge	r3, #0
 8018176:	232d      	movlt	r3, #45	; 0x2d
 8018178:	700b      	strb	r3, [r1, #0]
 801817a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801817c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018180:	4691      	mov	r9, r2
 8018182:	f023 0820 	bic.w	r8, r3, #32
 8018186:	bfbc      	itt	lt
 8018188:	4622      	movlt	r2, r4
 801818a:	4614      	movlt	r4, r2
 801818c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018190:	d005      	beq.n	801819e <__cvt+0x42>
 8018192:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018196:	d100      	bne.n	801819a <__cvt+0x3e>
 8018198:	3601      	adds	r6, #1
 801819a:	2102      	movs	r1, #2
 801819c:	e000      	b.n	80181a0 <__cvt+0x44>
 801819e:	2103      	movs	r1, #3
 80181a0:	ab03      	add	r3, sp, #12
 80181a2:	9301      	str	r3, [sp, #4]
 80181a4:	ab02      	add	r3, sp, #8
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	ec45 4b10 	vmov	d0, r4, r5
 80181ac:	4653      	mov	r3, sl
 80181ae:	4632      	mov	r2, r6
 80181b0:	f001 fa1e 	bl	80195f0 <_dtoa_r>
 80181b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80181b8:	4607      	mov	r7, r0
 80181ba:	d102      	bne.n	80181c2 <__cvt+0x66>
 80181bc:	f019 0f01 	tst.w	r9, #1
 80181c0:	d022      	beq.n	8018208 <__cvt+0xac>
 80181c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80181c6:	eb07 0906 	add.w	r9, r7, r6
 80181ca:	d110      	bne.n	80181ee <__cvt+0x92>
 80181cc:	783b      	ldrb	r3, [r7, #0]
 80181ce:	2b30      	cmp	r3, #48	; 0x30
 80181d0:	d10a      	bne.n	80181e8 <__cvt+0x8c>
 80181d2:	2200      	movs	r2, #0
 80181d4:	2300      	movs	r3, #0
 80181d6:	4620      	mov	r0, r4
 80181d8:	4629      	mov	r1, r5
 80181da:	f7e8 fca5 	bl	8000b28 <__aeabi_dcmpeq>
 80181de:	b918      	cbnz	r0, 80181e8 <__cvt+0x8c>
 80181e0:	f1c6 0601 	rsb	r6, r6, #1
 80181e4:	f8ca 6000 	str.w	r6, [sl]
 80181e8:	f8da 3000 	ldr.w	r3, [sl]
 80181ec:	4499      	add	r9, r3
 80181ee:	2200      	movs	r2, #0
 80181f0:	2300      	movs	r3, #0
 80181f2:	4620      	mov	r0, r4
 80181f4:	4629      	mov	r1, r5
 80181f6:	f7e8 fc97 	bl	8000b28 <__aeabi_dcmpeq>
 80181fa:	b108      	cbz	r0, 8018200 <__cvt+0xa4>
 80181fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8018200:	2230      	movs	r2, #48	; 0x30
 8018202:	9b03      	ldr	r3, [sp, #12]
 8018204:	454b      	cmp	r3, r9
 8018206:	d307      	bcc.n	8018218 <__cvt+0xbc>
 8018208:	9b03      	ldr	r3, [sp, #12]
 801820a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801820c:	1bdb      	subs	r3, r3, r7
 801820e:	4638      	mov	r0, r7
 8018210:	6013      	str	r3, [r2, #0]
 8018212:	b004      	add	sp, #16
 8018214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018218:	1c59      	adds	r1, r3, #1
 801821a:	9103      	str	r1, [sp, #12]
 801821c:	701a      	strb	r2, [r3, #0]
 801821e:	e7f0      	b.n	8018202 <__cvt+0xa6>

08018220 <__exponent>:
 8018220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018222:	4603      	mov	r3, r0
 8018224:	2900      	cmp	r1, #0
 8018226:	bfb8      	it	lt
 8018228:	4249      	neglt	r1, r1
 801822a:	f803 2b02 	strb.w	r2, [r3], #2
 801822e:	bfb4      	ite	lt
 8018230:	222d      	movlt	r2, #45	; 0x2d
 8018232:	222b      	movge	r2, #43	; 0x2b
 8018234:	2909      	cmp	r1, #9
 8018236:	7042      	strb	r2, [r0, #1]
 8018238:	dd2a      	ble.n	8018290 <__exponent+0x70>
 801823a:	f10d 0207 	add.w	r2, sp, #7
 801823e:	4617      	mov	r7, r2
 8018240:	260a      	movs	r6, #10
 8018242:	4694      	mov	ip, r2
 8018244:	fb91 f5f6 	sdiv	r5, r1, r6
 8018248:	fb06 1415 	mls	r4, r6, r5, r1
 801824c:	3430      	adds	r4, #48	; 0x30
 801824e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018252:	460c      	mov	r4, r1
 8018254:	2c63      	cmp	r4, #99	; 0x63
 8018256:	f102 32ff 	add.w	r2, r2, #4294967295
 801825a:	4629      	mov	r1, r5
 801825c:	dcf1      	bgt.n	8018242 <__exponent+0x22>
 801825e:	3130      	adds	r1, #48	; 0x30
 8018260:	f1ac 0402 	sub.w	r4, ip, #2
 8018264:	f802 1c01 	strb.w	r1, [r2, #-1]
 8018268:	1c41      	adds	r1, r0, #1
 801826a:	4622      	mov	r2, r4
 801826c:	42ba      	cmp	r2, r7
 801826e:	d30a      	bcc.n	8018286 <__exponent+0x66>
 8018270:	f10d 0209 	add.w	r2, sp, #9
 8018274:	eba2 020c 	sub.w	r2, r2, ip
 8018278:	42bc      	cmp	r4, r7
 801827a:	bf88      	it	hi
 801827c:	2200      	movhi	r2, #0
 801827e:	4413      	add	r3, r2
 8018280:	1a18      	subs	r0, r3, r0
 8018282:	b003      	add	sp, #12
 8018284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018286:	f812 5b01 	ldrb.w	r5, [r2], #1
 801828a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801828e:	e7ed      	b.n	801826c <__exponent+0x4c>
 8018290:	2330      	movs	r3, #48	; 0x30
 8018292:	3130      	adds	r1, #48	; 0x30
 8018294:	7083      	strb	r3, [r0, #2]
 8018296:	70c1      	strb	r1, [r0, #3]
 8018298:	1d03      	adds	r3, r0, #4
 801829a:	e7f1      	b.n	8018280 <__exponent+0x60>

0801829c <_printf_float>:
 801829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a0:	ed2d 8b02 	vpush	{d8}
 80182a4:	b08d      	sub	sp, #52	; 0x34
 80182a6:	460c      	mov	r4, r1
 80182a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80182ac:	4616      	mov	r6, r2
 80182ae:	461f      	mov	r7, r3
 80182b0:	4605      	mov	r5, r0
 80182b2:	f001 f825 	bl	8019300 <_localeconv_r>
 80182b6:	f8d0 a000 	ldr.w	sl, [r0]
 80182ba:	4650      	mov	r0, sl
 80182bc:	f7e8 f808 	bl	80002d0 <strlen>
 80182c0:	2300      	movs	r3, #0
 80182c2:	930a      	str	r3, [sp, #40]	; 0x28
 80182c4:	6823      	ldr	r3, [r4, #0]
 80182c6:	9305      	str	r3, [sp, #20]
 80182c8:	f8d8 3000 	ldr.w	r3, [r8]
 80182cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80182d0:	3307      	adds	r3, #7
 80182d2:	f023 0307 	bic.w	r3, r3, #7
 80182d6:	f103 0208 	add.w	r2, r3, #8
 80182da:	f8c8 2000 	str.w	r2, [r8]
 80182de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80182e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80182e6:	9307      	str	r3, [sp, #28]
 80182e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80182ec:	ee08 0a10 	vmov	s16, r0
 80182f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80182f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80182f8:	4b9e      	ldr	r3, [pc, #632]	; (8018574 <_printf_float+0x2d8>)
 80182fa:	f04f 32ff 	mov.w	r2, #4294967295
 80182fe:	f7e8 fc45 	bl	8000b8c <__aeabi_dcmpun>
 8018302:	bb88      	cbnz	r0, 8018368 <_printf_float+0xcc>
 8018304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018308:	4b9a      	ldr	r3, [pc, #616]	; (8018574 <_printf_float+0x2d8>)
 801830a:	f04f 32ff 	mov.w	r2, #4294967295
 801830e:	f7e8 fc1f 	bl	8000b50 <__aeabi_dcmple>
 8018312:	bb48      	cbnz	r0, 8018368 <_printf_float+0xcc>
 8018314:	2200      	movs	r2, #0
 8018316:	2300      	movs	r3, #0
 8018318:	4640      	mov	r0, r8
 801831a:	4649      	mov	r1, r9
 801831c:	f7e8 fc0e 	bl	8000b3c <__aeabi_dcmplt>
 8018320:	b110      	cbz	r0, 8018328 <_printf_float+0x8c>
 8018322:	232d      	movs	r3, #45	; 0x2d
 8018324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018328:	4a93      	ldr	r2, [pc, #588]	; (8018578 <_printf_float+0x2dc>)
 801832a:	4b94      	ldr	r3, [pc, #592]	; (801857c <_printf_float+0x2e0>)
 801832c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018330:	bf94      	ite	ls
 8018332:	4690      	movls	r8, r2
 8018334:	4698      	movhi	r8, r3
 8018336:	2303      	movs	r3, #3
 8018338:	6123      	str	r3, [r4, #16]
 801833a:	9b05      	ldr	r3, [sp, #20]
 801833c:	f023 0304 	bic.w	r3, r3, #4
 8018340:	6023      	str	r3, [r4, #0]
 8018342:	f04f 0900 	mov.w	r9, #0
 8018346:	9700      	str	r7, [sp, #0]
 8018348:	4633      	mov	r3, r6
 801834a:	aa0b      	add	r2, sp, #44	; 0x2c
 801834c:	4621      	mov	r1, r4
 801834e:	4628      	mov	r0, r5
 8018350:	f000 f9da 	bl	8018708 <_printf_common>
 8018354:	3001      	adds	r0, #1
 8018356:	f040 8090 	bne.w	801847a <_printf_float+0x1de>
 801835a:	f04f 30ff 	mov.w	r0, #4294967295
 801835e:	b00d      	add	sp, #52	; 0x34
 8018360:	ecbd 8b02 	vpop	{d8}
 8018364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018368:	4642      	mov	r2, r8
 801836a:	464b      	mov	r3, r9
 801836c:	4640      	mov	r0, r8
 801836e:	4649      	mov	r1, r9
 8018370:	f7e8 fc0c 	bl	8000b8c <__aeabi_dcmpun>
 8018374:	b140      	cbz	r0, 8018388 <_printf_float+0xec>
 8018376:	464b      	mov	r3, r9
 8018378:	2b00      	cmp	r3, #0
 801837a:	bfbc      	itt	lt
 801837c:	232d      	movlt	r3, #45	; 0x2d
 801837e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018382:	4a7f      	ldr	r2, [pc, #508]	; (8018580 <_printf_float+0x2e4>)
 8018384:	4b7f      	ldr	r3, [pc, #508]	; (8018584 <_printf_float+0x2e8>)
 8018386:	e7d1      	b.n	801832c <_printf_float+0x90>
 8018388:	6863      	ldr	r3, [r4, #4]
 801838a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801838e:	9206      	str	r2, [sp, #24]
 8018390:	1c5a      	adds	r2, r3, #1
 8018392:	d13f      	bne.n	8018414 <_printf_float+0x178>
 8018394:	2306      	movs	r3, #6
 8018396:	6063      	str	r3, [r4, #4]
 8018398:	9b05      	ldr	r3, [sp, #20]
 801839a:	6861      	ldr	r1, [r4, #4]
 801839c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80183a0:	2300      	movs	r3, #0
 80183a2:	9303      	str	r3, [sp, #12]
 80183a4:	ab0a      	add	r3, sp, #40	; 0x28
 80183a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80183aa:	ab09      	add	r3, sp, #36	; 0x24
 80183ac:	ec49 8b10 	vmov	d0, r8, r9
 80183b0:	9300      	str	r3, [sp, #0]
 80183b2:	6022      	str	r2, [r4, #0]
 80183b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80183b8:	4628      	mov	r0, r5
 80183ba:	f7ff fecf 	bl	801815c <__cvt>
 80183be:	9b06      	ldr	r3, [sp, #24]
 80183c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80183c2:	2b47      	cmp	r3, #71	; 0x47
 80183c4:	4680      	mov	r8, r0
 80183c6:	d108      	bne.n	80183da <_printf_float+0x13e>
 80183c8:	1cc8      	adds	r0, r1, #3
 80183ca:	db02      	blt.n	80183d2 <_printf_float+0x136>
 80183cc:	6863      	ldr	r3, [r4, #4]
 80183ce:	4299      	cmp	r1, r3
 80183d0:	dd41      	ble.n	8018456 <_printf_float+0x1ba>
 80183d2:	f1ab 0302 	sub.w	r3, fp, #2
 80183d6:	fa5f fb83 	uxtb.w	fp, r3
 80183da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80183de:	d820      	bhi.n	8018422 <_printf_float+0x186>
 80183e0:	3901      	subs	r1, #1
 80183e2:	465a      	mov	r2, fp
 80183e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80183e8:	9109      	str	r1, [sp, #36]	; 0x24
 80183ea:	f7ff ff19 	bl	8018220 <__exponent>
 80183ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183f0:	1813      	adds	r3, r2, r0
 80183f2:	2a01      	cmp	r2, #1
 80183f4:	4681      	mov	r9, r0
 80183f6:	6123      	str	r3, [r4, #16]
 80183f8:	dc02      	bgt.n	8018400 <_printf_float+0x164>
 80183fa:	6822      	ldr	r2, [r4, #0]
 80183fc:	07d2      	lsls	r2, r2, #31
 80183fe:	d501      	bpl.n	8018404 <_printf_float+0x168>
 8018400:	3301      	adds	r3, #1
 8018402:	6123      	str	r3, [r4, #16]
 8018404:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018408:	2b00      	cmp	r3, #0
 801840a:	d09c      	beq.n	8018346 <_printf_float+0xaa>
 801840c:	232d      	movs	r3, #45	; 0x2d
 801840e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018412:	e798      	b.n	8018346 <_printf_float+0xaa>
 8018414:	9a06      	ldr	r2, [sp, #24]
 8018416:	2a47      	cmp	r2, #71	; 0x47
 8018418:	d1be      	bne.n	8018398 <_printf_float+0xfc>
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1bc      	bne.n	8018398 <_printf_float+0xfc>
 801841e:	2301      	movs	r3, #1
 8018420:	e7b9      	b.n	8018396 <_printf_float+0xfa>
 8018422:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018426:	d118      	bne.n	801845a <_printf_float+0x1be>
 8018428:	2900      	cmp	r1, #0
 801842a:	6863      	ldr	r3, [r4, #4]
 801842c:	dd0b      	ble.n	8018446 <_printf_float+0x1aa>
 801842e:	6121      	str	r1, [r4, #16]
 8018430:	b913      	cbnz	r3, 8018438 <_printf_float+0x19c>
 8018432:	6822      	ldr	r2, [r4, #0]
 8018434:	07d0      	lsls	r0, r2, #31
 8018436:	d502      	bpl.n	801843e <_printf_float+0x1a2>
 8018438:	3301      	adds	r3, #1
 801843a:	440b      	add	r3, r1
 801843c:	6123      	str	r3, [r4, #16]
 801843e:	65a1      	str	r1, [r4, #88]	; 0x58
 8018440:	f04f 0900 	mov.w	r9, #0
 8018444:	e7de      	b.n	8018404 <_printf_float+0x168>
 8018446:	b913      	cbnz	r3, 801844e <_printf_float+0x1b2>
 8018448:	6822      	ldr	r2, [r4, #0]
 801844a:	07d2      	lsls	r2, r2, #31
 801844c:	d501      	bpl.n	8018452 <_printf_float+0x1b6>
 801844e:	3302      	adds	r3, #2
 8018450:	e7f4      	b.n	801843c <_printf_float+0x1a0>
 8018452:	2301      	movs	r3, #1
 8018454:	e7f2      	b.n	801843c <_printf_float+0x1a0>
 8018456:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801845a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801845c:	4299      	cmp	r1, r3
 801845e:	db05      	blt.n	801846c <_printf_float+0x1d0>
 8018460:	6823      	ldr	r3, [r4, #0]
 8018462:	6121      	str	r1, [r4, #16]
 8018464:	07d8      	lsls	r0, r3, #31
 8018466:	d5ea      	bpl.n	801843e <_printf_float+0x1a2>
 8018468:	1c4b      	adds	r3, r1, #1
 801846a:	e7e7      	b.n	801843c <_printf_float+0x1a0>
 801846c:	2900      	cmp	r1, #0
 801846e:	bfd4      	ite	le
 8018470:	f1c1 0202 	rsble	r2, r1, #2
 8018474:	2201      	movgt	r2, #1
 8018476:	4413      	add	r3, r2
 8018478:	e7e0      	b.n	801843c <_printf_float+0x1a0>
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	055a      	lsls	r2, r3, #21
 801847e:	d407      	bmi.n	8018490 <_printf_float+0x1f4>
 8018480:	6923      	ldr	r3, [r4, #16]
 8018482:	4642      	mov	r2, r8
 8018484:	4631      	mov	r1, r6
 8018486:	4628      	mov	r0, r5
 8018488:	47b8      	blx	r7
 801848a:	3001      	adds	r0, #1
 801848c:	d12c      	bne.n	80184e8 <_printf_float+0x24c>
 801848e:	e764      	b.n	801835a <_printf_float+0xbe>
 8018490:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018494:	f240 80e0 	bls.w	8018658 <_printf_float+0x3bc>
 8018498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801849c:	2200      	movs	r2, #0
 801849e:	2300      	movs	r3, #0
 80184a0:	f7e8 fb42 	bl	8000b28 <__aeabi_dcmpeq>
 80184a4:	2800      	cmp	r0, #0
 80184a6:	d034      	beq.n	8018512 <_printf_float+0x276>
 80184a8:	4a37      	ldr	r2, [pc, #220]	; (8018588 <_printf_float+0x2ec>)
 80184aa:	2301      	movs	r3, #1
 80184ac:	4631      	mov	r1, r6
 80184ae:	4628      	mov	r0, r5
 80184b0:	47b8      	blx	r7
 80184b2:	3001      	adds	r0, #1
 80184b4:	f43f af51 	beq.w	801835a <_printf_float+0xbe>
 80184b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80184bc:	429a      	cmp	r2, r3
 80184be:	db02      	blt.n	80184c6 <_printf_float+0x22a>
 80184c0:	6823      	ldr	r3, [r4, #0]
 80184c2:	07d8      	lsls	r0, r3, #31
 80184c4:	d510      	bpl.n	80184e8 <_printf_float+0x24c>
 80184c6:	ee18 3a10 	vmov	r3, s16
 80184ca:	4652      	mov	r2, sl
 80184cc:	4631      	mov	r1, r6
 80184ce:	4628      	mov	r0, r5
 80184d0:	47b8      	blx	r7
 80184d2:	3001      	adds	r0, #1
 80184d4:	f43f af41 	beq.w	801835a <_printf_float+0xbe>
 80184d8:	f04f 0800 	mov.w	r8, #0
 80184dc:	f104 091a 	add.w	r9, r4, #26
 80184e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184e2:	3b01      	subs	r3, #1
 80184e4:	4543      	cmp	r3, r8
 80184e6:	dc09      	bgt.n	80184fc <_printf_float+0x260>
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	079b      	lsls	r3, r3, #30
 80184ec:	f100 8107 	bmi.w	80186fe <_printf_float+0x462>
 80184f0:	68e0      	ldr	r0, [r4, #12]
 80184f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184f4:	4298      	cmp	r0, r3
 80184f6:	bfb8      	it	lt
 80184f8:	4618      	movlt	r0, r3
 80184fa:	e730      	b.n	801835e <_printf_float+0xc2>
 80184fc:	2301      	movs	r3, #1
 80184fe:	464a      	mov	r2, r9
 8018500:	4631      	mov	r1, r6
 8018502:	4628      	mov	r0, r5
 8018504:	47b8      	blx	r7
 8018506:	3001      	adds	r0, #1
 8018508:	f43f af27 	beq.w	801835a <_printf_float+0xbe>
 801850c:	f108 0801 	add.w	r8, r8, #1
 8018510:	e7e6      	b.n	80184e0 <_printf_float+0x244>
 8018512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018514:	2b00      	cmp	r3, #0
 8018516:	dc39      	bgt.n	801858c <_printf_float+0x2f0>
 8018518:	4a1b      	ldr	r2, [pc, #108]	; (8018588 <_printf_float+0x2ec>)
 801851a:	2301      	movs	r3, #1
 801851c:	4631      	mov	r1, r6
 801851e:	4628      	mov	r0, r5
 8018520:	47b8      	blx	r7
 8018522:	3001      	adds	r0, #1
 8018524:	f43f af19 	beq.w	801835a <_printf_float+0xbe>
 8018528:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801852c:	4313      	orrs	r3, r2
 801852e:	d102      	bne.n	8018536 <_printf_float+0x29a>
 8018530:	6823      	ldr	r3, [r4, #0]
 8018532:	07d9      	lsls	r1, r3, #31
 8018534:	d5d8      	bpl.n	80184e8 <_printf_float+0x24c>
 8018536:	ee18 3a10 	vmov	r3, s16
 801853a:	4652      	mov	r2, sl
 801853c:	4631      	mov	r1, r6
 801853e:	4628      	mov	r0, r5
 8018540:	47b8      	blx	r7
 8018542:	3001      	adds	r0, #1
 8018544:	f43f af09 	beq.w	801835a <_printf_float+0xbe>
 8018548:	f04f 0900 	mov.w	r9, #0
 801854c:	f104 0a1a 	add.w	sl, r4, #26
 8018550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018552:	425b      	negs	r3, r3
 8018554:	454b      	cmp	r3, r9
 8018556:	dc01      	bgt.n	801855c <_printf_float+0x2c0>
 8018558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801855a:	e792      	b.n	8018482 <_printf_float+0x1e6>
 801855c:	2301      	movs	r3, #1
 801855e:	4652      	mov	r2, sl
 8018560:	4631      	mov	r1, r6
 8018562:	4628      	mov	r0, r5
 8018564:	47b8      	blx	r7
 8018566:	3001      	adds	r0, #1
 8018568:	f43f aef7 	beq.w	801835a <_printf_float+0xbe>
 801856c:	f109 0901 	add.w	r9, r9, #1
 8018570:	e7ee      	b.n	8018550 <_printf_float+0x2b4>
 8018572:	bf00      	nop
 8018574:	7fefffff 	.word	0x7fefffff
 8018578:	0801df78 	.word	0x0801df78
 801857c:	0801df7c 	.word	0x0801df7c
 8018580:	0801df80 	.word	0x0801df80
 8018584:	0801df84 	.word	0x0801df84
 8018588:	0801e310 	.word	0x0801e310
 801858c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801858e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018590:	429a      	cmp	r2, r3
 8018592:	bfa8      	it	ge
 8018594:	461a      	movge	r2, r3
 8018596:	2a00      	cmp	r2, #0
 8018598:	4691      	mov	r9, r2
 801859a:	dc37      	bgt.n	801860c <_printf_float+0x370>
 801859c:	f04f 0b00 	mov.w	fp, #0
 80185a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80185a4:	f104 021a 	add.w	r2, r4, #26
 80185a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80185aa:	9305      	str	r3, [sp, #20]
 80185ac:	eba3 0309 	sub.w	r3, r3, r9
 80185b0:	455b      	cmp	r3, fp
 80185b2:	dc33      	bgt.n	801861c <_printf_float+0x380>
 80185b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80185b8:	429a      	cmp	r2, r3
 80185ba:	db3b      	blt.n	8018634 <_printf_float+0x398>
 80185bc:	6823      	ldr	r3, [r4, #0]
 80185be:	07da      	lsls	r2, r3, #31
 80185c0:	d438      	bmi.n	8018634 <_printf_float+0x398>
 80185c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80185c6:	eba2 0903 	sub.w	r9, r2, r3
 80185ca:	9b05      	ldr	r3, [sp, #20]
 80185cc:	1ad2      	subs	r2, r2, r3
 80185ce:	4591      	cmp	r9, r2
 80185d0:	bfa8      	it	ge
 80185d2:	4691      	movge	r9, r2
 80185d4:	f1b9 0f00 	cmp.w	r9, #0
 80185d8:	dc35      	bgt.n	8018646 <_printf_float+0x3aa>
 80185da:	f04f 0800 	mov.w	r8, #0
 80185de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80185e2:	f104 0a1a 	add.w	sl, r4, #26
 80185e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80185ea:	1a9b      	subs	r3, r3, r2
 80185ec:	eba3 0309 	sub.w	r3, r3, r9
 80185f0:	4543      	cmp	r3, r8
 80185f2:	f77f af79 	ble.w	80184e8 <_printf_float+0x24c>
 80185f6:	2301      	movs	r3, #1
 80185f8:	4652      	mov	r2, sl
 80185fa:	4631      	mov	r1, r6
 80185fc:	4628      	mov	r0, r5
 80185fe:	47b8      	blx	r7
 8018600:	3001      	adds	r0, #1
 8018602:	f43f aeaa 	beq.w	801835a <_printf_float+0xbe>
 8018606:	f108 0801 	add.w	r8, r8, #1
 801860a:	e7ec      	b.n	80185e6 <_printf_float+0x34a>
 801860c:	4613      	mov	r3, r2
 801860e:	4631      	mov	r1, r6
 8018610:	4642      	mov	r2, r8
 8018612:	4628      	mov	r0, r5
 8018614:	47b8      	blx	r7
 8018616:	3001      	adds	r0, #1
 8018618:	d1c0      	bne.n	801859c <_printf_float+0x300>
 801861a:	e69e      	b.n	801835a <_printf_float+0xbe>
 801861c:	2301      	movs	r3, #1
 801861e:	4631      	mov	r1, r6
 8018620:	4628      	mov	r0, r5
 8018622:	9205      	str	r2, [sp, #20]
 8018624:	47b8      	blx	r7
 8018626:	3001      	adds	r0, #1
 8018628:	f43f ae97 	beq.w	801835a <_printf_float+0xbe>
 801862c:	9a05      	ldr	r2, [sp, #20]
 801862e:	f10b 0b01 	add.w	fp, fp, #1
 8018632:	e7b9      	b.n	80185a8 <_printf_float+0x30c>
 8018634:	ee18 3a10 	vmov	r3, s16
 8018638:	4652      	mov	r2, sl
 801863a:	4631      	mov	r1, r6
 801863c:	4628      	mov	r0, r5
 801863e:	47b8      	blx	r7
 8018640:	3001      	adds	r0, #1
 8018642:	d1be      	bne.n	80185c2 <_printf_float+0x326>
 8018644:	e689      	b.n	801835a <_printf_float+0xbe>
 8018646:	9a05      	ldr	r2, [sp, #20]
 8018648:	464b      	mov	r3, r9
 801864a:	4442      	add	r2, r8
 801864c:	4631      	mov	r1, r6
 801864e:	4628      	mov	r0, r5
 8018650:	47b8      	blx	r7
 8018652:	3001      	adds	r0, #1
 8018654:	d1c1      	bne.n	80185da <_printf_float+0x33e>
 8018656:	e680      	b.n	801835a <_printf_float+0xbe>
 8018658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801865a:	2a01      	cmp	r2, #1
 801865c:	dc01      	bgt.n	8018662 <_printf_float+0x3c6>
 801865e:	07db      	lsls	r3, r3, #31
 8018660:	d53a      	bpl.n	80186d8 <_printf_float+0x43c>
 8018662:	2301      	movs	r3, #1
 8018664:	4642      	mov	r2, r8
 8018666:	4631      	mov	r1, r6
 8018668:	4628      	mov	r0, r5
 801866a:	47b8      	blx	r7
 801866c:	3001      	adds	r0, #1
 801866e:	f43f ae74 	beq.w	801835a <_printf_float+0xbe>
 8018672:	ee18 3a10 	vmov	r3, s16
 8018676:	4652      	mov	r2, sl
 8018678:	4631      	mov	r1, r6
 801867a:	4628      	mov	r0, r5
 801867c:	47b8      	blx	r7
 801867e:	3001      	adds	r0, #1
 8018680:	f43f ae6b 	beq.w	801835a <_printf_float+0xbe>
 8018684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018688:	2200      	movs	r2, #0
 801868a:	2300      	movs	r3, #0
 801868c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8018690:	f7e8 fa4a 	bl	8000b28 <__aeabi_dcmpeq>
 8018694:	b9d8      	cbnz	r0, 80186ce <_printf_float+0x432>
 8018696:	f10a 33ff 	add.w	r3, sl, #4294967295
 801869a:	f108 0201 	add.w	r2, r8, #1
 801869e:	4631      	mov	r1, r6
 80186a0:	4628      	mov	r0, r5
 80186a2:	47b8      	blx	r7
 80186a4:	3001      	adds	r0, #1
 80186a6:	d10e      	bne.n	80186c6 <_printf_float+0x42a>
 80186a8:	e657      	b.n	801835a <_printf_float+0xbe>
 80186aa:	2301      	movs	r3, #1
 80186ac:	4652      	mov	r2, sl
 80186ae:	4631      	mov	r1, r6
 80186b0:	4628      	mov	r0, r5
 80186b2:	47b8      	blx	r7
 80186b4:	3001      	adds	r0, #1
 80186b6:	f43f ae50 	beq.w	801835a <_printf_float+0xbe>
 80186ba:	f108 0801 	add.w	r8, r8, #1
 80186be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186c0:	3b01      	subs	r3, #1
 80186c2:	4543      	cmp	r3, r8
 80186c4:	dcf1      	bgt.n	80186aa <_printf_float+0x40e>
 80186c6:	464b      	mov	r3, r9
 80186c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80186cc:	e6da      	b.n	8018484 <_printf_float+0x1e8>
 80186ce:	f04f 0800 	mov.w	r8, #0
 80186d2:	f104 0a1a 	add.w	sl, r4, #26
 80186d6:	e7f2      	b.n	80186be <_printf_float+0x422>
 80186d8:	2301      	movs	r3, #1
 80186da:	4642      	mov	r2, r8
 80186dc:	e7df      	b.n	801869e <_printf_float+0x402>
 80186de:	2301      	movs	r3, #1
 80186e0:	464a      	mov	r2, r9
 80186e2:	4631      	mov	r1, r6
 80186e4:	4628      	mov	r0, r5
 80186e6:	47b8      	blx	r7
 80186e8:	3001      	adds	r0, #1
 80186ea:	f43f ae36 	beq.w	801835a <_printf_float+0xbe>
 80186ee:	f108 0801 	add.w	r8, r8, #1
 80186f2:	68e3      	ldr	r3, [r4, #12]
 80186f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80186f6:	1a5b      	subs	r3, r3, r1
 80186f8:	4543      	cmp	r3, r8
 80186fa:	dcf0      	bgt.n	80186de <_printf_float+0x442>
 80186fc:	e6f8      	b.n	80184f0 <_printf_float+0x254>
 80186fe:	f04f 0800 	mov.w	r8, #0
 8018702:	f104 0919 	add.w	r9, r4, #25
 8018706:	e7f4      	b.n	80186f2 <_printf_float+0x456>

08018708 <_printf_common>:
 8018708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801870c:	4616      	mov	r6, r2
 801870e:	4699      	mov	r9, r3
 8018710:	688a      	ldr	r2, [r1, #8]
 8018712:	690b      	ldr	r3, [r1, #16]
 8018714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018718:	4293      	cmp	r3, r2
 801871a:	bfb8      	it	lt
 801871c:	4613      	movlt	r3, r2
 801871e:	6033      	str	r3, [r6, #0]
 8018720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018724:	4607      	mov	r7, r0
 8018726:	460c      	mov	r4, r1
 8018728:	b10a      	cbz	r2, 801872e <_printf_common+0x26>
 801872a:	3301      	adds	r3, #1
 801872c:	6033      	str	r3, [r6, #0]
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	0699      	lsls	r1, r3, #26
 8018732:	bf42      	ittt	mi
 8018734:	6833      	ldrmi	r3, [r6, #0]
 8018736:	3302      	addmi	r3, #2
 8018738:	6033      	strmi	r3, [r6, #0]
 801873a:	6825      	ldr	r5, [r4, #0]
 801873c:	f015 0506 	ands.w	r5, r5, #6
 8018740:	d106      	bne.n	8018750 <_printf_common+0x48>
 8018742:	f104 0a19 	add.w	sl, r4, #25
 8018746:	68e3      	ldr	r3, [r4, #12]
 8018748:	6832      	ldr	r2, [r6, #0]
 801874a:	1a9b      	subs	r3, r3, r2
 801874c:	42ab      	cmp	r3, r5
 801874e:	dc26      	bgt.n	801879e <_printf_common+0x96>
 8018750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018754:	1e13      	subs	r3, r2, #0
 8018756:	6822      	ldr	r2, [r4, #0]
 8018758:	bf18      	it	ne
 801875a:	2301      	movne	r3, #1
 801875c:	0692      	lsls	r2, r2, #26
 801875e:	d42b      	bmi.n	80187b8 <_printf_common+0xb0>
 8018760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018764:	4649      	mov	r1, r9
 8018766:	4638      	mov	r0, r7
 8018768:	47c0      	blx	r8
 801876a:	3001      	adds	r0, #1
 801876c:	d01e      	beq.n	80187ac <_printf_common+0xa4>
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	6922      	ldr	r2, [r4, #16]
 8018772:	f003 0306 	and.w	r3, r3, #6
 8018776:	2b04      	cmp	r3, #4
 8018778:	bf02      	ittt	eq
 801877a:	68e5      	ldreq	r5, [r4, #12]
 801877c:	6833      	ldreq	r3, [r6, #0]
 801877e:	1aed      	subeq	r5, r5, r3
 8018780:	68a3      	ldr	r3, [r4, #8]
 8018782:	bf0c      	ite	eq
 8018784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018788:	2500      	movne	r5, #0
 801878a:	4293      	cmp	r3, r2
 801878c:	bfc4      	itt	gt
 801878e:	1a9b      	subgt	r3, r3, r2
 8018790:	18ed      	addgt	r5, r5, r3
 8018792:	2600      	movs	r6, #0
 8018794:	341a      	adds	r4, #26
 8018796:	42b5      	cmp	r5, r6
 8018798:	d11a      	bne.n	80187d0 <_printf_common+0xc8>
 801879a:	2000      	movs	r0, #0
 801879c:	e008      	b.n	80187b0 <_printf_common+0xa8>
 801879e:	2301      	movs	r3, #1
 80187a0:	4652      	mov	r2, sl
 80187a2:	4649      	mov	r1, r9
 80187a4:	4638      	mov	r0, r7
 80187a6:	47c0      	blx	r8
 80187a8:	3001      	adds	r0, #1
 80187aa:	d103      	bne.n	80187b4 <_printf_common+0xac>
 80187ac:	f04f 30ff 	mov.w	r0, #4294967295
 80187b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187b4:	3501      	adds	r5, #1
 80187b6:	e7c6      	b.n	8018746 <_printf_common+0x3e>
 80187b8:	18e1      	adds	r1, r4, r3
 80187ba:	1c5a      	adds	r2, r3, #1
 80187bc:	2030      	movs	r0, #48	; 0x30
 80187be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80187c2:	4422      	add	r2, r4
 80187c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80187c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80187cc:	3302      	adds	r3, #2
 80187ce:	e7c7      	b.n	8018760 <_printf_common+0x58>
 80187d0:	2301      	movs	r3, #1
 80187d2:	4622      	mov	r2, r4
 80187d4:	4649      	mov	r1, r9
 80187d6:	4638      	mov	r0, r7
 80187d8:	47c0      	blx	r8
 80187da:	3001      	adds	r0, #1
 80187dc:	d0e6      	beq.n	80187ac <_printf_common+0xa4>
 80187de:	3601      	adds	r6, #1
 80187e0:	e7d9      	b.n	8018796 <_printf_common+0x8e>
	...

080187e4 <_printf_i>:
 80187e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80187e8:	7e0f      	ldrb	r7, [r1, #24]
 80187ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80187ec:	2f78      	cmp	r7, #120	; 0x78
 80187ee:	4691      	mov	r9, r2
 80187f0:	4680      	mov	r8, r0
 80187f2:	460c      	mov	r4, r1
 80187f4:	469a      	mov	sl, r3
 80187f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80187fa:	d807      	bhi.n	801880c <_printf_i+0x28>
 80187fc:	2f62      	cmp	r7, #98	; 0x62
 80187fe:	d80a      	bhi.n	8018816 <_printf_i+0x32>
 8018800:	2f00      	cmp	r7, #0
 8018802:	f000 80d4 	beq.w	80189ae <_printf_i+0x1ca>
 8018806:	2f58      	cmp	r7, #88	; 0x58
 8018808:	f000 80c0 	beq.w	801898c <_printf_i+0x1a8>
 801880c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018814:	e03a      	b.n	801888c <_printf_i+0xa8>
 8018816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801881a:	2b15      	cmp	r3, #21
 801881c:	d8f6      	bhi.n	801880c <_printf_i+0x28>
 801881e:	a101      	add	r1, pc, #4	; (adr r1, 8018824 <_printf_i+0x40>)
 8018820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018824:	0801887d 	.word	0x0801887d
 8018828:	08018891 	.word	0x08018891
 801882c:	0801880d 	.word	0x0801880d
 8018830:	0801880d 	.word	0x0801880d
 8018834:	0801880d 	.word	0x0801880d
 8018838:	0801880d 	.word	0x0801880d
 801883c:	08018891 	.word	0x08018891
 8018840:	0801880d 	.word	0x0801880d
 8018844:	0801880d 	.word	0x0801880d
 8018848:	0801880d 	.word	0x0801880d
 801884c:	0801880d 	.word	0x0801880d
 8018850:	08018995 	.word	0x08018995
 8018854:	080188bd 	.word	0x080188bd
 8018858:	0801894f 	.word	0x0801894f
 801885c:	0801880d 	.word	0x0801880d
 8018860:	0801880d 	.word	0x0801880d
 8018864:	080189b7 	.word	0x080189b7
 8018868:	0801880d 	.word	0x0801880d
 801886c:	080188bd 	.word	0x080188bd
 8018870:	0801880d 	.word	0x0801880d
 8018874:	0801880d 	.word	0x0801880d
 8018878:	08018957 	.word	0x08018957
 801887c:	682b      	ldr	r3, [r5, #0]
 801887e:	1d1a      	adds	r2, r3, #4
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	602a      	str	r2, [r5, #0]
 8018884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801888c:	2301      	movs	r3, #1
 801888e:	e09f      	b.n	80189d0 <_printf_i+0x1ec>
 8018890:	6820      	ldr	r0, [r4, #0]
 8018892:	682b      	ldr	r3, [r5, #0]
 8018894:	0607      	lsls	r7, r0, #24
 8018896:	f103 0104 	add.w	r1, r3, #4
 801889a:	6029      	str	r1, [r5, #0]
 801889c:	d501      	bpl.n	80188a2 <_printf_i+0xbe>
 801889e:	681e      	ldr	r6, [r3, #0]
 80188a0:	e003      	b.n	80188aa <_printf_i+0xc6>
 80188a2:	0646      	lsls	r6, r0, #25
 80188a4:	d5fb      	bpl.n	801889e <_printf_i+0xba>
 80188a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80188aa:	2e00      	cmp	r6, #0
 80188ac:	da03      	bge.n	80188b6 <_printf_i+0xd2>
 80188ae:	232d      	movs	r3, #45	; 0x2d
 80188b0:	4276      	negs	r6, r6
 80188b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188b6:	485a      	ldr	r0, [pc, #360]	; (8018a20 <_printf_i+0x23c>)
 80188b8:	230a      	movs	r3, #10
 80188ba:	e012      	b.n	80188e2 <_printf_i+0xfe>
 80188bc:	682b      	ldr	r3, [r5, #0]
 80188be:	6820      	ldr	r0, [r4, #0]
 80188c0:	1d19      	adds	r1, r3, #4
 80188c2:	6029      	str	r1, [r5, #0]
 80188c4:	0605      	lsls	r5, r0, #24
 80188c6:	d501      	bpl.n	80188cc <_printf_i+0xe8>
 80188c8:	681e      	ldr	r6, [r3, #0]
 80188ca:	e002      	b.n	80188d2 <_printf_i+0xee>
 80188cc:	0641      	lsls	r1, r0, #25
 80188ce:	d5fb      	bpl.n	80188c8 <_printf_i+0xe4>
 80188d0:	881e      	ldrh	r6, [r3, #0]
 80188d2:	4853      	ldr	r0, [pc, #332]	; (8018a20 <_printf_i+0x23c>)
 80188d4:	2f6f      	cmp	r7, #111	; 0x6f
 80188d6:	bf0c      	ite	eq
 80188d8:	2308      	moveq	r3, #8
 80188da:	230a      	movne	r3, #10
 80188dc:	2100      	movs	r1, #0
 80188de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80188e2:	6865      	ldr	r5, [r4, #4]
 80188e4:	60a5      	str	r5, [r4, #8]
 80188e6:	2d00      	cmp	r5, #0
 80188e8:	bfa2      	ittt	ge
 80188ea:	6821      	ldrge	r1, [r4, #0]
 80188ec:	f021 0104 	bicge.w	r1, r1, #4
 80188f0:	6021      	strge	r1, [r4, #0]
 80188f2:	b90e      	cbnz	r6, 80188f8 <_printf_i+0x114>
 80188f4:	2d00      	cmp	r5, #0
 80188f6:	d04b      	beq.n	8018990 <_printf_i+0x1ac>
 80188f8:	4615      	mov	r5, r2
 80188fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80188fe:	fb03 6711 	mls	r7, r3, r1, r6
 8018902:	5dc7      	ldrb	r7, [r0, r7]
 8018904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018908:	4637      	mov	r7, r6
 801890a:	42bb      	cmp	r3, r7
 801890c:	460e      	mov	r6, r1
 801890e:	d9f4      	bls.n	80188fa <_printf_i+0x116>
 8018910:	2b08      	cmp	r3, #8
 8018912:	d10b      	bne.n	801892c <_printf_i+0x148>
 8018914:	6823      	ldr	r3, [r4, #0]
 8018916:	07de      	lsls	r6, r3, #31
 8018918:	d508      	bpl.n	801892c <_printf_i+0x148>
 801891a:	6923      	ldr	r3, [r4, #16]
 801891c:	6861      	ldr	r1, [r4, #4]
 801891e:	4299      	cmp	r1, r3
 8018920:	bfde      	ittt	le
 8018922:	2330      	movle	r3, #48	; 0x30
 8018924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018928:	f105 35ff 	addle.w	r5, r5, #4294967295
 801892c:	1b52      	subs	r2, r2, r5
 801892e:	6122      	str	r2, [r4, #16]
 8018930:	f8cd a000 	str.w	sl, [sp]
 8018934:	464b      	mov	r3, r9
 8018936:	aa03      	add	r2, sp, #12
 8018938:	4621      	mov	r1, r4
 801893a:	4640      	mov	r0, r8
 801893c:	f7ff fee4 	bl	8018708 <_printf_common>
 8018940:	3001      	adds	r0, #1
 8018942:	d14a      	bne.n	80189da <_printf_i+0x1f6>
 8018944:	f04f 30ff 	mov.w	r0, #4294967295
 8018948:	b004      	add	sp, #16
 801894a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801894e:	6823      	ldr	r3, [r4, #0]
 8018950:	f043 0320 	orr.w	r3, r3, #32
 8018954:	6023      	str	r3, [r4, #0]
 8018956:	4833      	ldr	r0, [pc, #204]	; (8018a24 <_printf_i+0x240>)
 8018958:	2778      	movs	r7, #120	; 0x78
 801895a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801895e:	6823      	ldr	r3, [r4, #0]
 8018960:	6829      	ldr	r1, [r5, #0]
 8018962:	061f      	lsls	r7, r3, #24
 8018964:	f851 6b04 	ldr.w	r6, [r1], #4
 8018968:	d402      	bmi.n	8018970 <_printf_i+0x18c>
 801896a:	065f      	lsls	r7, r3, #25
 801896c:	bf48      	it	mi
 801896e:	b2b6      	uxthmi	r6, r6
 8018970:	07df      	lsls	r7, r3, #31
 8018972:	bf48      	it	mi
 8018974:	f043 0320 	orrmi.w	r3, r3, #32
 8018978:	6029      	str	r1, [r5, #0]
 801897a:	bf48      	it	mi
 801897c:	6023      	strmi	r3, [r4, #0]
 801897e:	b91e      	cbnz	r6, 8018988 <_printf_i+0x1a4>
 8018980:	6823      	ldr	r3, [r4, #0]
 8018982:	f023 0320 	bic.w	r3, r3, #32
 8018986:	6023      	str	r3, [r4, #0]
 8018988:	2310      	movs	r3, #16
 801898a:	e7a7      	b.n	80188dc <_printf_i+0xf8>
 801898c:	4824      	ldr	r0, [pc, #144]	; (8018a20 <_printf_i+0x23c>)
 801898e:	e7e4      	b.n	801895a <_printf_i+0x176>
 8018990:	4615      	mov	r5, r2
 8018992:	e7bd      	b.n	8018910 <_printf_i+0x12c>
 8018994:	682b      	ldr	r3, [r5, #0]
 8018996:	6826      	ldr	r6, [r4, #0]
 8018998:	6961      	ldr	r1, [r4, #20]
 801899a:	1d18      	adds	r0, r3, #4
 801899c:	6028      	str	r0, [r5, #0]
 801899e:	0635      	lsls	r5, r6, #24
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	d501      	bpl.n	80189a8 <_printf_i+0x1c4>
 80189a4:	6019      	str	r1, [r3, #0]
 80189a6:	e002      	b.n	80189ae <_printf_i+0x1ca>
 80189a8:	0670      	lsls	r0, r6, #25
 80189aa:	d5fb      	bpl.n	80189a4 <_printf_i+0x1c0>
 80189ac:	8019      	strh	r1, [r3, #0]
 80189ae:	2300      	movs	r3, #0
 80189b0:	6123      	str	r3, [r4, #16]
 80189b2:	4615      	mov	r5, r2
 80189b4:	e7bc      	b.n	8018930 <_printf_i+0x14c>
 80189b6:	682b      	ldr	r3, [r5, #0]
 80189b8:	1d1a      	adds	r2, r3, #4
 80189ba:	602a      	str	r2, [r5, #0]
 80189bc:	681d      	ldr	r5, [r3, #0]
 80189be:	6862      	ldr	r2, [r4, #4]
 80189c0:	2100      	movs	r1, #0
 80189c2:	4628      	mov	r0, r5
 80189c4:	f7e7 fc34 	bl	8000230 <memchr>
 80189c8:	b108      	cbz	r0, 80189ce <_printf_i+0x1ea>
 80189ca:	1b40      	subs	r0, r0, r5
 80189cc:	6060      	str	r0, [r4, #4]
 80189ce:	6863      	ldr	r3, [r4, #4]
 80189d0:	6123      	str	r3, [r4, #16]
 80189d2:	2300      	movs	r3, #0
 80189d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189d8:	e7aa      	b.n	8018930 <_printf_i+0x14c>
 80189da:	6923      	ldr	r3, [r4, #16]
 80189dc:	462a      	mov	r2, r5
 80189de:	4649      	mov	r1, r9
 80189e0:	4640      	mov	r0, r8
 80189e2:	47d0      	blx	sl
 80189e4:	3001      	adds	r0, #1
 80189e6:	d0ad      	beq.n	8018944 <_printf_i+0x160>
 80189e8:	6823      	ldr	r3, [r4, #0]
 80189ea:	079b      	lsls	r3, r3, #30
 80189ec:	d413      	bmi.n	8018a16 <_printf_i+0x232>
 80189ee:	68e0      	ldr	r0, [r4, #12]
 80189f0:	9b03      	ldr	r3, [sp, #12]
 80189f2:	4298      	cmp	r0, r3
 80189f4:	bfb8      	it	lt
 80189f6:	4618      	movlt	r0, r3
 80189f8:	e7a6      	b.n	8018948 <_printf_i+0x164>
 80189fa:	2301      	movs	r3, #1
 80189fc:	4632      	mov	r2, r6
 80189fe:	4649      	mov	r1, r9
 8018a00:	4640      	mov	r0, r8
 8018a02:	47d0      	blx	sl
 8018a04:	3001      	adds	r0, #1
 8018a06:	d09d      	beq.n	8018944 <_printf_i+0x160>
 8018a08:	3501      	adds	r5, #1
 8018a0a:	68e3      	ldr	r3, [r4, #12]
 8018a0c:	9903      	ldr	r1, [sp, #12]
 8018a0e:	1a5b      	subs	r3, r3, r1
 8018a10:	42ab      	cmp	r3, r5
 8018a12:	dcf2      	bgt.n	80189fa <_printf_i+0x216>
 8018a14:	e7eb      	b.n	80189ee <_printf_i+0x20a>
 8018a16:	2500      	movs	r5, #0
 8018a18:	f104 0619 	add.w	r6, r4, #25
 8018a1c:	e7f5      	b.n	8018a0a <_printf_i+0x226>
 8018a1e:	bf00      	nop
 8018a20:	0801df88 	.word	0x0801df88
 8018a24:	0801df99 	.word	0x0801df99

08018a28 <_scanf_float>:
 8018a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a2c:	b087      	sub	sp, #28
 8018a2e:	4617      	mov	r7, r2
 8018a30:	9303      	str	r3, [sp, #12]
 8018a32:	688b      	ldr	r3, [r1, #8]
 8018a34:	1e5a      	subs	r2, r3, #1
 8018a36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018a3a:	bf83      	ittte	hi
 8018a3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018a40:	195b      	addhi	r3, r3, r5
 8018a42:	9302      	strhi	r3, [sp, #8]
 8018a44:	2300      	movls	r3, #0
 8018a46:	bf86      	itte	hi
 8018a48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018a4c:	608b      	strhi	r3, [r1, #8]
 8018a4e:	9302      	strls	r3, [sp, #8]
 8018a50:	680b      	ldr	r3, [r1, #0]
 8018a52:	468b      	mov	fp, r1
 8018a54:	2500      	movs	r5, #0
 8018a56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018a5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8018a5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018a62:	4680      	mov	r8, r0
 8018a64:	460c      	mov	r4, r1
 8018a66:	465e      	mov	r6, fp
 8018a68:	46aa      	mov	sl, r5
 8018a6a:	46a9      	mov	r9, r5
 8018a6c:	9501      	str	r5, [sp, #4]
 8018a6e:	68a2      	ldr	r2, [r4, #8]
 8018a70:	b152      	cbz	r2, 8018a88 <_scanf_float+0x60>
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	2b4e      	cmp	r3, #78	; 0x4e
 8018a78:	d864      	bhi.n	8018b44 <_scanf_float+0x11c>
 8018a7a:	2b40      	cmp	r3, #64	; 0x40
 8018a7c:	d83c      	bhi.n	8018af8 <_scanf_float+0xd0>
 8018a7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018a82:	b2c8      	uxtb	r0, r1
 8018a84:	280e      	cmp	r0, #14
 8018a86:	d93a      	bls.n	8018afe <_scanf_float+0xd6>
 8018a88:	f1b9 0f00 	cmp.w	r9, #0
 8018a8c:	d003      	beq.n	8018a96 <_scanf_float+0x6e>
 8018a8e:	6823      	ldr	r3, [r4, #0]
 8018a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018a9a:	f1ba 0f01 	cmp.w	sl, #1
 8018a9e:	f200 8113 	bhi.w	8018cc8 <_scanf_float+0x2a0>
 8018aa2:	455e      	cmp	r6, fp
 8018aa4:	f200 8105 	bhi.w	8018cb2 <_scanf_float+0x28a>
 8018aa8:	2501      	movs	r5, #1
 8018aaa:	4628      	mov	r0, r5
 8018aac:	b007      	add	sp, #28
 8018aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018ab6:	2a0d      	cmp	r2, #13
 8018ab8:	d8e6      	bhi.n	8018a88 <_scanf_float+0x60>
 8018aba:	a101      	add	r1, pc, #4	; (adr r1, 8018ac0 <_scanf_float+0x98>)
 8018abc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018ac0:	08018bff 	.word	0x08018bff
 8018ac4:	08018a89 	.word	0x08018a89
 8018ac8:	08018a89 	.word	0x08018a89
 8018acc:	08018a89 	.word	0x08018a89
 8018ad0:	08018c5f 	.word	0x08018c5f
 8018ad4:	08018c37 	.word	0x08018c37
 8018ad8:	08018a89 	.word	0x08018a89
 8018adc:	08018a89 	.word	0x08018a89
 8018ae0:	08018c0d 	.word	0x08018c0d
 8018ae4:	08018a89 	.word	0x08018a89
 8018ae8:	08018a89 	.word	0x08018a89
 8018aec:	08018a89 	.word	0x08018a89
 8018af0:	08018a89 	.word	0x08018a89
 8018af4:	08018bc5 	.word	0x08018bc5
 8018af8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018afc:	e7db      	b.n	8018ab6 <_scanf_float+0x8e>
 8018afe:	290e      	cmp	r1, #14
 8018b00:	d8c2      	bhi.n	8018a88 <_scanf_float+0x60>
 8018b02:	a001      	add	r0, pc, #4	; (adr r0, 8018b08 <_scanf_float+0xe0>)
 8018b04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018b08:	08018bb7 	.word	0x08018bb7
 8018b0c:	08018a89 	.word	0x08018a89
 8018b10:	08018bb7 	.word	0x08018bb7
 8018b14:	08018c4b 	.word	0x08018c4b
 8018b18:	08018a89 	.word	0x08018a89
 8018b1c:	08018b65 	.word	0x08018b65
 8018b20:	08018ba1 	.word	0x08018ba1
 8018b24:	08018ba1 	.word	0x08018ba1
 8018b28:	08018ba1 	.word	0x08018ba1
 8018b2c:	08018ba1 	.word	0x08018ba1
 8018b30:	08018ba1 	.word	0x08018ba1
 8018b34:	08018ba1 	.word	0x08018ba1
 8018b38:	08018ba1 	.word	0x08018ba1
 8018b3c:	08018ba1 	.word	0x08018ba1
 8018b40:	08018ba1 	.word	0x08018ba1
 8018b44:	2b6e      	cmp	r3, #110	; 0x6e
 8018b46:	d809      	bhi.n	8018b5c <_scanf_float+0x134>
 8018b48:	2b60      	cmp	r3, #96	; 0x60
 8018b4a:	d8b2      	bhi.n	8018ab2 <_scanf_float+0x8a>
 8018b4c:	2b54      	cmp	r3, #84	; 0x54
 8018b4e:	d077      	beq.n	8018c40 <_scanf_float+0x218>
 8018b50:	2b59      	cmp	r3, #89	; 0x59
 8018b52:	d199      	bne.n	8018a88 <_scanf_float+0x60>
 8018b54:	2d07      	cmp	r5, #7
 8018b56:	d197      	bne.n	8018a88 <_scanf_float+0x60>
 8018b58:	2508      	movs	r5, #8
 8018b5a:	e029      	b.n	8018bb0 <_scanf_float+0x188>
 8018b5c:	2b74      	cmp	r3, #116	; 0x74
 8018b5e:	d06f      	beq.n	8018c40 <_scanf_float+0x218>
 8018b60:	2b79      	cmp	r3, #121	; 0x79
 8018b62:	e7f6      	b.n	8018b52 <_scanf_float+0x12a>
 8018b64:	6821      	ldr	r1, [r4, #0]
 8018b66:	05c8      	lsls	r0, r1, #23
 8018b68:	d51a      	bpl.n	8018ba0 <_scanf_float+0x178>
 8018b6a:	9b02      	ldr	r3, [sp, #8]
 8018b6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018b70:	6021      	str	r1, [r4, #0]
 8018b72:	f109 0901 	add.w	r9, r9, #1
 8018b76:	b11b      	cbz	r3, 8018b80 <_scanf_float+0x158>
 8018b78:	3b01      	subs	r3, #1
 8018b7a:	3201      	adds	r2, #1
 8018b7c:	9302      	str	r3, [sp, #8]
 8018b7e:	60a2      	str	r2, [r4, #8]
 8018b80:	68a3      	ldr	r3, [r4, #8]
 8018b82:	3b01      	subs	r3, #1
 8018b84:	60a3      	str	r3, [r4, #8]
 8018b86:	6923      	ldr	r3, [r4, #16]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	6123      	str	r3, [r4, #16]
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	3b01      	subs	r3, #1
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	607b      	str	r3, [r7, #4]
 8018b94:	f340 8084 	ble.w	8018ca0 <_scanf_float+0x278>
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	603b      	str	r3, [r7, #0]
 8018b9e:	e766      	b.n	8018a6e <_scanf_float+0x46>
 8018ba0:	eb1a 0f05 	cmn.w	sl, r5
 8018ba4:	f47f af70 	bne.w	8018a88 <_scanf_float+0x60>
 8018ba8:	6822      	ldr	r2, [r4, #0]
 8018baa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018bae:	6022      	str	r2, [r4, #0]
 8018bb0:	f806 3b01 	strb.w	r3, [r6], #1
 8018bb4:	e7e4      	b.n	8018b80 <_scanf_float+0x158>
 8018bb6:	6822      	ldr	r2, [r4, #0]
 8018bb8:	0610      	lsls	r0, r2, #24
 8018bba:	f57f af65 	bpl.w	8018a88 <_scanf_float+0x60>
 8018bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018bc2:	e7f4      	b.n	8018bae <_scanf_float+0x186>
 8018bc4:	f1ba 0f00 	cmp.w	sl, #0
 8018bc8:	d10e      	bne.n	8018be8 <_scanf_float+0x1c0>
 8018bca:	f1b9 0f00 	cmp.w	r9, #0
 8018bce:	d10e      	bne.n	8018bee <_scanf_float+0x1c6>
 8018bd0:	6822      	ldr	r2, [r4, #0]
 8018bd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018bd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018bda:	d108      	bne.n	8018bee <_scanf_float+0x1c6>
 8018bdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018be0:	6022      	str	r2, [r4, #0]
 8018be2:	f04f 0a01 	mov.w	sl, #1
 8018be6:	e7e3      	b.n	8018bb0 <_scanf_float+0x188>
 8018be8:	f1ba 0f02 	cmp.w	sl, #2
 8018bec:	d055      	beq.n	8018c9a <_scanf_float+0x272>
 8018bee:	2d01      	cmp	r5, #1
 8018bf0:	d002      	beq.n	8018bf8 <_scanf_float+0x1d0>
 8018bf2:	2d04      	cmp	r5, #4
 8018bf4:	f47f af48 	bne.w	8018a88 <_scanf_float+0x60>
 8018bf8:	3501      	adds	r5, #1
 8018bfa:	b2ed      	uxtb	r5, r5
 8018bfc:	e7d8      	b.n	8018bb0 <_scanf_float+0x188>
 8018bfe:	f1ba 0f01 	cmp.w	sl, #1
 8018c02:	f47f af41 	bne.w	8018a88 <_scanf_float+0x60>
 8018c06:	f04f 0a02 	mov.w	sl, #2
 8018c0a:	e7d1      	b.n	8018bb0 <_scanf_float+0x188>
 8018c0c:	b97d      	cbnz	r5, 8018c2e <_scanf_float+0x206>
 8018c0e:	f1b9 0f00 	cmp.w	r9, #0
 8018c12:	f47f af3c 	bne.w	8018a8e <_scanf_float+0x66>
 8018c16:	6822      	ldr	r2, [r4, #0]
 8018c18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018c1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018c20:	f47f af39 	bne.w	8018a96 <_scanf_float+0x6e>
 8018c24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c28:	6022      	str	r2, [r4, #0]
 8018c2a:	2501      	movs	r5, #1
 8018c2c:	e7c0      	b.n	8018bb0 <_scanf_float+0x188>
 8018c2e:	2d03      	cmp	r5, #3
 8018c30:	d0e2      	beq.n	8018bf8 <_scanf_float+0x1d0>
 8018c32:	2d05      	cmp	r5, #5
 8018c34:	e7de      	b.n	8018bf4 <_scanf_float+0x1cc>
 8018c36:	2d02      	cmp	r5, #2
 8018c38:	f47f af26 	bne.w	8018a88 <_scanf_float+0x60>
 8018c3c:	2503      	movs	r5, #3
 8018c3e:	e7b7      	b.n	8018bb0 <_scanf_float+0x188>
 8018c40:	2d06      	cmp	r5, #6
 8018c42:	f47f af21 	bne.w	8018a88 <_scanf_float+0x60>
 8018c46:	2507      	movs	r5, #7
 8018c48:	e7b2      	b.n	8018bb0 <_scanf_float+0x188>
 8018c4a:	6822      	ldr	r2, [r4, #0]
 8018c4c:	0591      	lsls	r1, r2, #22
 8018c4e:	f57f af1b 	bpl.w	8018a88 <_scanf_float+0x60>
 8018c52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018c56:	6022      	str	r2, [r4, #0]
 8018c58:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c5c:	e7a8      	b.n	8018bb0 <_scanf_float+0x188>
 8018c5e:	6822      	ldr	r2, [r4, #0]
 8018c60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018c64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018c68:	d006      	beq.n	8018c78 <_scanf_float+0x250>
 8018c6a:	0550      	lsls	r0, r2, #21
 8018c6c:	f57f af0c 	bpl.w	8018a88 <_scanf_float+0x60>
 8018c70:	f1b9 0f00 	cmp.w	r9, #0
 8018c74:	f43f af0f 	beq.w	8018a96 <_scanf_float+0x6e>
 8018c78:	0591      	lsls	r1, r2, #22
 8018c7a:	bf58      	it	pl
 8018c7c:	9901      	ldrpl	r1, [sp, #4]
 8018c7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c82:	bf58      	it	pl
 8018c84:	eba9 0101 	subpl.w	r1, r9, r1
 8018c88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018c8c:	bf58      	it	pl
 8018c8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018c92:	6022      	str	r2, [r4, #0]
 8018c94:	f04f 0900 	mov.w	r9, #0
 8018c98:	e78a      	b.n	8018bb0 <_scanf_float+0x188>
 8018c9a:	f04f 0a03 	mov.w	sl, #3
 8018c9e:	e787      	b.n	8018bb0 <_scanf_float+0x188>
 8018ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018ca4:	4639      	mov	r1, r7
 8018ca6:	4640      	mov	r0, r8
 8018ca8:	4798      	blx	r3
 8018caa:	2800      	cmp	r0, #0
 8018cac:	f43f aedf 	beq.w	8018a6e <_scanf_float+0x46>
 8018cb0:	e6ea      	b.n	8018a88 <_scanf_float+0x60>
 8018cb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018cb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018cba:	463a      	mov	r2, r7
 8018cbc:	4640      	mov	r0, r8
 8018cbe:	4798      	blx	r3
 8018cc0:	6923      	ldr	r3, [r4, #16]
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	6123      	str	r3, [r4, #16]
 8018cc6:	e6ec      	b.n	8018aa2 <_scanf_float+0x7a>
 8018cc8:	1e6b      	subs	r3, r5, #1
 8018cca:	2b06      	cmp	r3, #6
 8018ccc:	d825      	bhi.n	8018d1a <_scanf_float+0x2f2>
 8018cce:	2d02      	cmp	r5, #2
 8018cd0:	d836      	bhi.n	8018d40 <_scanf_float+0x318>
 8018cd2:	455e      	cmp	r6, fp
 8018cd4:	f67f aee8 	bls.w	8018aa8 <_scanf_float+0x80>
 8018cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018cdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018ce0:	463a      	mov	r2, r7
 8018ce2:	4640      	mov	r0, r8
 8018ce4:	4798      	blx	r3
 8018ce6:	6923      	ldr	r3, [r4, #16]
 8018ce8:	3b01      	subs	r3, #1
 8018cea:	6123      	str	r3, [r4, #16]
 8018cec:	e7f1      	b.n	8018cd2 <_scanf_float+0x2aa>
 8018cee:	9802      	ldr	r0, [sp, #8]
 8018cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018cf4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018cf8:	9002      	str	r0, [sp, #8]
 8018cfa:	463a      	mov	r2, r7
 8018cfc:	4640      	mov	r0, r8
 8018cfe:	4798      	blx	r3
 8018d00:	6923      	ldr	r3, [r4, #16]
 8018d02:	3b01      	subs	r3, #1
 8018d04:	6123      	str	r3, [r4, #16]
 8018d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d0a:	fa5f fa8a 	uxtb.w	sl, sl
 8018d0e:	f1ba 0f02 	cmp.w	sl, #2
 8018d12:	d1ec      	bne.n	8018cee <_scanf_float+0x2c6>
 8018d14:	3d03      	subs	r5, #3
 8018d16:	b2ed      	uxtb	r5, r5
 8018d18:	1b76      	subs	r6, r6, r5
 8018d1a:	6823      	ldr	r3, [r4, #0]
 8018d1c:	05da      	lsls	r2, r3, #23
 8018d1e:	d52f      	bpl.n	8018d80 <_scanf_float+0x358>
 8018d20:	055b      	lsls	r3, r3, #21
 8018d22:	d510      	bpl.n	8018d46 <_scanf_float+0x31e>
 8018d24:	455e      	cmp	r6, fp
 8018d26:	f67f aebf 	bls.w	8018aa8 <_scanf_float+0x80>
 8018d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018d32:	463a      	mov	r2, r7
 8018d34:	4640      	mov	r0, r8
 8018d36:	4798      	blx	r3
 8018d38:	6923      	ldr	r3, [r4, #16]
 8018d3a:	3b01      	subs	r3, #1
 8018d3c:	6123      	str	r3, [r4, #16]
 8018d3e:	e7f1      	b.n	8018d24 <_scanf_float+0x2fc>
 8018d40:	46aa      	mov	sl, r5
 8018d42:	9602      	str	r6, [sp, #8]
 8018d44:	e7df      	b.n	8018d06 <_scanf_float+0x2de>
 8018d46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018d4a:	6923      	ldr	r3, [r4, #16]
 8018d4c:	2965      	cmp	r1, #101	; 0x65
 8018d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d52:	f106 35ff 	add.w	r5, r6, #4294967295
 8018d56:	6123      	str	r3, [r4, #16]
 8018d58:	d00c      	beq.n	8018d74 <_scanf_float+0x34c>
 8018d5a:	2945      	cmp	r1, #69	; 0x45
 8018d5c:	d00a      	beq.n	8018d74 <_scanf_float+0x34c>
 8018d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d62:	463a      	mov	r2, r7
 8018d64:	4640      	mov	r0, r8
 8018d66:	4798      	blx	r3
 8018d68:	6923      	ldr	r3, [r4, #16]
 8018d6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018d6e:	3b01      	subs	r3, #1
 8018d70:	1eb5      	subs	r5, r6, #2
 8018d72:	6123      	str	r3, [r4, #16]
 8018d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d78:	463a      	mov	r2, r7
 8018d7a:	4640      	mov	r0, r8
 8018d7c:	4798      	blx	r3
 8018d7e:	462e      	mov	r6, r5
 8018d80:	6825      	ldr	r5, [r4, #0]
 8018d82:	f015 0510 	ands.w	r5, r5, #16
 8018d86:	d158      	bne.n	8018e3a <_scanf_float+0x412>
 8018d88:	7035      	strb	r5, [r6, #0]
 8018d8a:	6823      	ldr	r3, [r4, #0]
 8018d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d94:	d11c      	bne.n	8018dd0 <_scanf_float+0x3a8>
 8018d96:	9b01      	ldr	r3, [sp, #4]
 8018d98:	454b      	cmp	r3, r9
 8018d9a:	eba3 0209 	sub.w	r2, r3, r9
 8018d9e:	d124      	bne.n	8018dea <_scanf_float+0x3c2>
 8018da0:	2200      	movs	r2, #0
 8018da2:	4659      	mov	r1, fp
 8018da4:	4640      	mov	r0, r8
 8018da6:	f002 fd1b 	bl	801b7e0 <_strtod_r>
 8018daa:	9b03      	ldr	r3, [sp, #12]
 8018dac:	6821      	ldr	r1, [r4, #0]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	f011 0f02 	tst.w	r1, #2
 8018db4:	ec57 6b10 	vmov	r6, r7, d0
 8018db8:	f103 0204 	add.w	r2, r3, #4
 8018dbc:	d020      	beq.n	8018e00 <_scanf_float+0x3d8>
 8018dbe:	9903      	ldr	r1, [sp, #12]
 8018dc0:	600a      	str	r2, [r1, #0]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	e9c3 6700 	strd	r6, r7, [r3]
 8018dc8:	68e3      	ldr	r3, [r4, #12]
 8018dca:	3301      	adds	r3, #1
 8018dcc:	60e3      	str	r3, [r4, #12]
 8018dce:	e66c      	b.n	8018aaa <_scanf_float+0x82>
 8018dd0:	9b04      	ldr	r3, [sp, #16]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d0e4      	beq.n	8018da0 <_scanf_float+0x378>
 8018dd6:	9905      	ldr	r1, [sp, #20]
 8018dd8:	230a      	movs	r3, #10
 8018dda:	462a      	mov	r2, r5
 8018ddc:	3101      	adds	r1, #1
 8018dde:	4640      	mov	r0, r8
 8018de0:	f002 fd86 	bl	801b8f0 <_strtol_r>
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	9e05      	ldr	r6, [sp, #20]
 8018de8:	1ac2      	subs	r2, r0, r3
 8018dea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018dee:	429e      	cmp	r6, r3
 8018df0:	bf28      	it	cs
 8018df2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018df6:	4912      	ldr	r1, [pc, #72]	; (8018e40 <_scanf_float+0x418>)
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f000 f943 	bl	8019084 <siprintf>
 8018dfe:	e7cf      	b.n	8018da0 <_scanf_float+0x378>
 8018e00:	f011 0f04 	tst.w	r1, #4
 8018e04:	9903      	ldr	r1, [sp, #12]
 8018e06:	600a      	str	r2, [r1, #0]
 8018e08:	d1db      	bne.n	8018dc2 <_scanf_float+0x39a>
 8018e0a:	f8d3 8000 	ldr.w	r8, [r3]
 8018e0e:	ee10 2a10 	vmov	r2, s0
 8018e12:	ee10 0a10 	vmov	r0, s0
 8018e16:	463b      	mov	r3, r7
 8018e18:	4639      	mov	r1, r7
 8018e1a:	f7e7 feb7 	bl	8000b8c <__aeabi_dcmpun>
 8018e1e:	b128      	cbz	r0, 8018e2c <_scanf_float+0x404>
 8018e20:	4808      	ldr	r0, [pc, #32]	; (8018e44 <_scanf_float+0x41c>)
 8018e22:	f000 fb57 	bl	80194d4 <nanf>
 8018e26:	ed88 0a00 	vstr	s0, [r8]
 8018e2a:	e7cd      	b.n	8018dc8 <_scanf_float+0x3a0>
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	4639      	mov	r1, r7
 8018e30:	f7e7 ff0a 	bl	8000c48 <__aeabi_d2f>
 8018e34:	f8c8 0000 	str.w	r0, [r8]
 8018e38:	e7c6      	b.n	8018dc8 <_scanf_float+0x3a0>
 8018e3a:	2500      	movs	r5, #0
 8018e3c:	e635      	b.n	8018aaa <_scanf_float+0x82>
 8018e3e:	bf00      	nop
 8018e40:	0801dfaa 	.word	0x0801dfaa
 8018e44:	0801e358 	.word	0x0801e358

08018e48 <std>:
 8018e48:	2300      	movs	r3, #0
 8018e4a:	b510      	push	{r4, lr}
 8018e4c:	4604      	mov	r4, r0
 8018e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8018e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e56:	6083      	str	r3, [r0, #8]
 8018e58:	8181      	strh	r1, [r0, #12]
 8018e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8018e5c:	81c2      	strh	r2, [r0, #14]
 8018e5e:	6183      	str	r3, [r0, #24]
 8018e60:	4619      	mov	r1, r3
 8018e62:	2208      	movs	r2, #8
 8018e64:	305c      	adds	r0, #92	; 0x5c
 8018e66:	f000 fa33 	bl	80192d0 <memset>
 8018e6a:	4b05      	ldr	r3, [pc, #20]	; (8018e80 <std+0x38>)
 8018e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8018e6e:	4b05      	ldr	r3, [pc, #20]	; (8018e84 <std+0x3c>)
 8018e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e72:	4b05      	ldr	r3, [pc, #20]	; (8018e88 <std+0x40>)
 8018e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e76:	4b05      	ldr	r3, [pc, #20]	; (8018e8c <std+0x44>)
 8018e78:	6224      	str	r4, [r4, #32]
 8018e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8018e7c:	bd10      	pop	{r4, pc}
 8018e7e:	bf00      	nop
 8018e80:	0801911d 	.word	0x0801911d
 8018e84:	08019143 	.word	0x08019143
 8018e88:	0801917b 	.word	0x0801917b
 8018e8c:	0801919f 	.word	0x0801919f

08018e90 <stdio_exit_handler>:
 8018e90:	4a02      	ldr	r2, [pc, #8]	; (8018e9c <stdio_exit_handler+0xc>)
 8018e92:	4903      	ldr	r1, [pc, #12]	; (8018ea0 <stdio_exit_handler+0x10>)
 8018e94:	4803      	ldr	r0, [pc, #12]	; (8018ea4 <stdio_exit_handler+0x14>)
 8018e96:	f000 b869 	b.w	8018f6c <_fwalk_sglue>
 8018e9a:	bf00      	nop
 8018e9c:	20000140 	.word	0x20000140
 8018ea0:	0801c579 	.word	0x0801c579
 8018ea4:	2000014c 	.word	0x2000014c

08018ea8 <cleanup_stdio>:
 8018ea8:	6841      	ldr	r1, [r0, #4]
 8018eaa:	4b0c      	ldr	r3, [pc, #48]	; (8018edc <cleanup_stdio+0x34>)
 8018eac:	4299      	cmp	r1, r3
 8018eae:	b510      	push	{r4, lr}
 8018eb0:	4604      	mov	r4, r0
 8018eb2:	d001      	beq.n	8018eb8 <cleanup_stdio+0x10>
 8018eb4:	f003 fb60 	bl	801c578 <_fflush_r>
 8018eb8:	68a1      	ldr	r1, [r4, #8]
 8018eba:	4b09      	ldr	r3, [pc, #36]	; (8018ee0 <cleanup_stdio+0x38>)
 8018ebc:	4299      	cmp	r1, r3
 8018ebe:	d002      	beq.n	8018ec6 <cleanup_stdio+0x1e>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f003 fb59 	bl	801c578 <_fflush_r>
 8018ec6:	68e1      	ldr	r1, [r4, #12]
 8018ec8:	4b06      	ldr	r3, [pc, #24]	; (8018ee4 <cleanup_stdio+0x3c>)
 8018eca:	4299      	cmp	r1, r3
 8018ecc:	d004      	beq.n	8018ed8 <cleanup_stdio+0x30>
 8018ece:	4620      	mov	r0, r4
 8018ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ed4:	f003 bb50 	b.w	801c578 <_fflush_r>
 8018ed8:	bd10      	pop	{r4, pc}
 8018eda:	bf00      	nop
 8018edc:	20007c50 	.word	0x20007c50
 8018ee0:	20007cb8 	.word	0x20007cb8
 8018ee4:	20007d20 	.word	0x20007d20

08018ee8 <global_stdio_init.part.0>:
 8018ee8:	b510      	push	{r4, lr}
 8018eea:	4b0b      	ldr	r3, [pc, #44]	; (8018f18 <global_stdio_init.part.0+0x30>)
 8018eec:	4c0b      	ldr	r4, [pc, #44]	; (8018f1c <global_stdio_init.part.0+0x34>)
 8018eee:	4a0c      	ldr	r2, [pc, #48]	; (8018f20 <global_stdio_init.part.0+0x38>)
 8018ef0:	601a      	str	r2, [r3, #0]
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	2104      	movs	r1, #4
 8018ef8:	f7ff ffa6 	bl	8018e48 <std>
 8018efc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018f00:	2201      	movs	r2, #1
 8018f02:	2109      	movs	r1, #9
 8018f04:	f7ff ffa0 	bl	8018e48 <std>
 8018f08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018f0c:	2202      	movs	r2, #2
 8018f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f12:	2112      	movs	r1, #18
 8018f14:	f7ff bf98 	b.w	8018e48 <std>
 8018f18:	20007d88 	.word	0x20007d88
 8018f1c:	20007c50 	.word	0x20007c50
 8018f20:	08018e91 	.word	0x08018e91

08018f24 <__sfp_lock_acquire>:
 8018f24:	4801      	ldr	r0, [pc, #4]	; (8018f2c <__sfp_lock_acquire+0x8>)
 8018f26:	f000 bac5 	b.w	80194b4 <__retarget_lock_acquire_recursive>
 8018f2a:	bf00      	nop
 8018f2c:	20007d91 	.word	0x20007d91

08018f30 <__sfp_lock_release>:
 8018f30:	4801      	ldr	r0, [pc, #4]	; (8018f38 <__sfp_lock_release+0x8>)
 8018f32:	f000 bac0 	b.w	80194b6 <__retarget_lock_release_recursive>
 8018f36:	bf00      	nop
 8018f38:	20007d91 	.word	0x20007d91

08018f3c <__sinit>:
 8018f3c:	b510      	push	{r4, lr}
 8018f3e:	4604      	mov	r4, r0
 8018f40:	f7ff fff0 	bl	8018f24 <__sfp_lock_acquire>
 8018f44:	6a23      	ldr	r3, [r4, #32]
 8018f46:	b11b      	cbz	r3, 8018f50 <__sinit+0x14>
 8018f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f4c:	f7ff bff0 	b.w	8018f30 <__sfp_lock_release>
 8018f50:	4b04      	ldr	r3, [pc, #16]	; (8018f64 <__sinit+0x28>)
 8018f52:	6223      	str	r3, [r4, #32]
 8018f54:	4b04      	ldr	r3, [pc, #16]	; (8018f68 <__sinit+0x2c>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d1f5      	bne.n	8018f48 <__sinit+0xc>
 8018f5c:	f7ff ffc4 	bl	8018ee8 <global_stdio_init.part.0>
 8018f60:	e7f2      	b.n	8018f48 <__sinit+0xc>
 8018f62:	bf00      	nop
 8018f64:	08018ea9 	.word	0x08018ea9
 8018f68:	20007d88 	.word	0x20007d88

08018f6c <_fwalk_sglue>:
 8018f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f70:	4607      	mov	r7, r0
 8018f72:	4688      	mov	r8, r1
 8018f74:	4614      	mov	r4, r2
 8018f76:	2600      	movs	r6, #0
 8018f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8018f80:	d505      	bpl.n	8018f8e <_fwalk_sglue+0x22>
 8018f82:	6824      	ldr	r4, [r4, #0]
 8018f84:	2c00      	cmp	r4, #0
 8018f86:	d1f7      	bne.n	8018f78 <_fwalk_sglue+0xc>
 8018f88:	4630      	mov	r0, r6
 8018f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f8e:	89ab      	ldrh	r3, [r5, #12]
 8018f90:	2b01      	cmp	r3, #1
 8018f92:	d907      	bls.n	8018fa4 <_fwalk_sglue+0x38>
 8018f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f98:	3301      	adds	r3, #1
 8018f9a:	d003      	beq.n	8018fa4 <_fwalk_sglue+0x38>
 8018f9c:	4629      	mov	r1, r5
 8018f9e:	4638      	mov	r0, r7
 8018fa0:	47c0      	blx	r8
 8018fa2:	4306      	orrs	r6, r0
 8018fa4:	3568      	adds	r5, #104	; 0x68
 8018fa6:	e7e9      	b.n	8018f7c <_fwalk_sglue+0x10>

08018fa8 <iprintf>:
 8018fa8:	b40f      	push	{r0, r1, r2, r3}
 8018faa:	b507      	push	{r0, r1, r2, lr}
 8018fac:	4906      	ldr	r1, [pc, #24]	; (8018fc8 <iprintf+0x20>)
 8018fae:	ab04      	add	r3, sp, #16
 8018fb0:	6808      	ldr	r0, [r1, #0]
 8018fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fb6:	6881      	ldr	r1, [r0, #8]
 8018fb8:	9301      	str	r3, [sp, #4]
 8018fba:	f002 ffef 	bl	801bf9c <_vfiprintf_r>
 8018fbe:	b003      	add	sp, #12
 8018fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fc4:	b004      	add	sp, #16
 8018fc6:	4770      	bx	lr
 8018fc8:	20000198 	.word	0x20000198

08018fcc <_puts_r>:
 8018fcc:	6a03      	ldr	r3, [r0, #32]
 8018fce:	b570      	push	{r4, r5, r6, lr}
 8018fd0:	6884      	ldr	r4, [r0, #8]
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	460e      	mov	r6, r1
 8018fd6:	b90b      	cbnz	r3, 8018fdc <_puts_r+0x10>
 8018fd8:	f7ff ffb0 	bl	8018f3c <__sinit>
 8018fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018fde:	07db      	lsls	r3, r3, #31
 8018fe0:	d405      	bmi.n	8018fee <_puts_r+0x22>
 8018fe2:	89a3      	ldrh	r3, [r4, #12]
 8018fe4:	0598      	lsls	r0, r3, #22
 8018fe6:	d402      	bmi.n	8018fee <_puts_r+0x22>
 8018fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018fea:	f000 fa63 	bl	80194b4 <__retarget_lock_acquire_recursive>
 8018fee:	89a3      	ldrh	r3, [r4, #12]
 8018ff0:	0719      	lsls	r1, r3, #28
 8018ff2:	d513      	bpl.n	801901c <_puts_r+0x50>
 8018ff4:	6923      	ldr	r3, [r4, #16]
 8018ff6:	b18b      	cbz	r3, 801901c <_puts_r+0x50>
 8018ff8:	3e01      	subs	r6, #1
 8018ffa:	68a3      	ldr	r3, [r4, #8]
 8018ffc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019000:	3b01      	subs	r3, #1
 8019002:	60a3      	str	r3, [r4, #8]
 8019004:	b9e9      	cbnz	r1, 8019042 <_puts_r+0x76>
 8019006:	2b00      	cmp	r3, #0
 8019008:	da2e      	bge.n	8019068 <_puts_r+0x9c>
 801900a:	4622      	mov	r2, r4
 801900c:	210a      	movs	r1, #10
 801900e:	4628      	mov	r0, r5
 8019010:	f000 f8c9 	bl	80191a6 <__swbuf_r>
 8019014:	3001      	adds	r0, #1
 8019016:	d007      	beq.n	8019028 <_puts_r+0x5c>
 8019018:	250a      	movs	r5, #10
 801901a:	e007      	b.n	801902c <_puts_r+0x60>
 801901c:	4621      	mov	r1, r4
 801901e:	4628      	mov	r0, r5
 8019020:	f000 f8fe 	bl	8019220 <__swsetup_r>
 8019024:	2800      	cmp	r0, #0
 8019026:	d0e7      	beq.n	8018ff8 <_puts_r+0x2c>
 8019028:	f04f 35ff 	mov.w	r5, #4294967295
 801902c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801902e:	07da      	lsls	r2, r3, #31
 8019030:	d405      	bmi.n	801903e <_puts_r+0x72>
 8019032:	89a3      	ldrh	r3, [r4, #12]
 8019034:	059b      	lsls	r3, r3, #22
 8019036:	d402      	bmi.n	801903e <_puts_r+0x72>
 8019038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801903a:	f000 fa3c 	bl	80194b6 <__retarget_lock_release_recursive>
 801903e:	4628      	mov	r0, r5
 8019040:	bd70      	pop	{r4, r5, r6, pc}
 8019042:	2b00      	cmp	r3, #0
 8019044:	da04      	bge.n	8019050 <_puts_r+0x84>
 8019046:	69a2      	ldr	r2, [r4, #24]
 8019048:	429a      	cmp	r2, r3
 801904a:	dc06      	bgt.n	801905a <_puts_r+0x8e>
 801904c:	290a      	cmp	r1, #10
 801904e:	d004      	beq.n	801905a <_puts_r+0x8e>
 8019050:	6823      	ldr	r3, [r4, #0]
 8019052:	1c5a      	adds	r2, r3, #1
 8019054:	6022      	str	r2, [r4, #0]
 8019056:	7019      	strb	r1, [r3, #0]
 8019058:	e7cf      	b.n	8018ffa <_puts_r+0x2e>
 801905a:	4622      	mov	r2, r4
 801905c:	4628      	mov	r0, r5
 801905e:	f000 f8a2 	bl	80191a6 <__swbuf_r>
 8019062:	3001      	adds	r0, #1
 8019064:	d1c9      	bne.n	8018ffa <_puts_r+0x2e>
 8019066:	e7df      	b.n	8019028 <_puts_r+0x5c>
 8019068:	6823      	ldr	r3, [r4, #0]
 801906a:	250a      	movs	r5, #10
 801906c:	1c5a      	adds	r2, r3, #1
 801906e:	6022      	str	r2, [r4, #0]
 8019070:	701d      	strb	r5, [r3, #0]
 8019072:	e7db      	b.n	801902c <_puts_r+0x60>

08019074 <puts>:
 8019074:	4b02      	ldr	r3, [pc, #8]	; (8019080 <puts+0xc>)
 8019076:	4601      	mov	r1, r0
 8019078:	6818      	ldr	r0, [r3, #0]
 801907a:	f7ff bfa7 	b.w	8018fcc <_puts_r>
 801907e:	bf00      	nop
 8019080:	20000198 	.word	0x20000198

08019084 <siprintf>:
 8019084:	b40e      	push	{r1, r2, r3}
 8019086:	b500      	push	{lr}
 8019088:	b09c      	sub	sp, #112	; 0x70
 801908a:	ab1d      	add	r3, sp, #116	; 0x74
 801908c:	9002      	str	r0, [sp, #8]
 801908e:	9006      	str	r0, [sp, #24]
 8019090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019094:	4809      	ldr	r0, [pc, #36]	; (80190bc <siprintf+0x38>)
 8019096:	9107      	str	r1, [sp, #28]
 8019098:	9104      	str	r1, [sp, #16]
 801909a:	4909      	ldr	r1, [pc, #36]	; (80190c0 <siprintf+0x3c>)
 801909c:	f853 2b04 	ldr.w	r2, [r3], #4
 80190a0:	9105      	str	r1, [sp, #20]
 80190a2:	6800      	ldr	r0, [r0, #0]
 80190a4:	9301      	str	r3, [sp, #4]
 80190a6:	a902      	add	r1, sp, #8
 80190a8:	f002 fc7e 	bl	801b9a8 <_svfiprintf_r>
 80190ac:	9b02      	ldr	r3, [sp, #8]
 80190ae:	2200      	movs	r2, #0
 80190b0:	701a      	strb	r2, [r3, #0]
 80190b2:	b01c      	add	sp, #112	; 0x70
 80190b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80190b8:	b003      	add	sp, #12
 80190ba:	4770      	bx	lr
 80190bc:	20000198 	.word	0x20000198
 80190c0:	ffff0208 	.word	0xffff0208

080190c4 <siscanf>:
 80190c4:	b40e      	push	{r1, r2, r3}
 80190c6:	b510      	push	{r4, lr}
 80190c8:	b09f      	sub	sp, #124	; 0x7c
 80190ca:	ac21      	add	r4, sp, #132	; 0x84
 80190cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80190d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80190d4:	9201      	str	r2, [sp, #4]
 80190d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80190da:	9004      	str	r0, [sp, #16]
 80190dc:	9008      	str	r0, [sp, #32]
 80190de:	f7e7 f8f7 	bl	80002d0 <strlen>
 80190e2:	4b0c      	ldr	r3, [pc, #48]	; (8019114 <siscanf+0x50>)
 80190e4:	9005      	str	r0, [sp, #20]
 80190e6:	9009      	str	r0, [sp, #36]	; 0x24
 80190e8:	930d      	str	r3, [sp, #52]	; 0x34
 80190ea:	480b      	ldr	r0, [pc, #44]	; (8019118 <siscanf+0x54>)
 80190ec:	9a01      	ldr	r2, [sp, #4]
 80190ee:	6800      	ldr	r0, [r0, #0]
 80190f0:	9403      	str	r4, [sp, #12]
 80190f2:	2300      	movs	r3, #0
 80190f4:	9311      	str	r3, [sp, #68]	; 0x44
 80190f6:	9316      	str	r3, [sp, #88]	; 0x58
 80190f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019100:	a904      	add	r1, sp, #16
 8019102:	4623      	mov	r3, r4
 8019104:	f002 fda8 	bl	801bc58 <__ssvfiscanf_r>
 8019108:	b01f      	add	sp, #124	; 0x7c
 801910a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801910e:	b003      	add	sp, #12
 8019110:	4770      	bx	lr
 8019112:	bf00      	nop
 8019114:	0801913f 	.word	0x0801913f
 8019118:	20000198 	.word	0x20000198

0801911c <__sread>:
 801911c:	b510      	push	{r4, lr}
 801911e:	460c      	mov	r4, r1
 8019120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019124:	f000 f968 	bl	80193f8 <_read_r>
 8019128:	2800      	cmp	r0, #0
 801912a:	bfab      	itete	ge
 801912c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801912e:	89a3      	ldrhlt	r3, [r4, #12]
 8019130:	181b      	addge	r3, r3, r0
 8019132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019136:	bfac      	ite	ge
 8019138:	6563      	strge	r3, [r4, #84]	; 0x54
 801913a:	81a3      	strhlt	r3, [r4, #12]
 801913c:	bd10      	pop	{r4, pc}

0801913e <__seofread>:
 801913e:	2000      	movs	r0, #0
 8019140:	4770      	bx	lr

08019142 <__swrite>:
 8019142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019146:	461f      	mov	r7, r3
 8019148:	898b      	ldrh	r3, [r1, #12]
 801914a:	05db      	lsls	r3, r3, #23
 801914c:	4605      	mov	r5, r0
 801914e:	460c      	mov	r4, r1
 8019150:	4616      	mov	r6, r2
 8019152:	d505      	bpl.n	8019160 <__swrite+0x1e>
 8019154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019158:	2302      	movs	r3, #2
 801915a:	2200      	movs	r2, #0
 801915c:	f000 f93a 	bl	80193d4 <_lseek_r>
 8019160:	89a3      	ldrh	r3, [r4, #12]
 8019162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801916a:	81a3      	strh	r3, [r4, #12]
 801916c:	4632      	mov	r2, r6
 801916e:	463b      	mov	r3, r7
 8019170:	4628      	mov	r0, r5
 8019172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019176:	f000 b961 	b.w	801943c <_write_r>

0801917a <__sseek>:
 801917a:	b510      	push	{r4, lr}
 801917c:	460c      	mov	r4, r1
 801917e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019182:	f000 f927 	bl	80193d4 <_lseek_r>
 8019186:	1c43      	adds	r3, r0, #1
 8019188:	89a3      	ldrh	r3, [r4, #12]
 801918a:	bf15      	itete	ne
 801918c:	6560      	strne	r0, [r4, #84]	; 0x54
 801918e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019196:	81a3      	strheq	r3, [r4, #12]
 8019198:	bf18      	it	ne
 801919a:	81a3      	strhne	r3, [r4, #12]
 801919c:	bd10      	pop	{r4, pc}

0801919e <__sclose>:
 801919e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191a2:	f000 b8b1 	b.w	8019308 <_close_r>

080191a6 <__swbuf_r>:
 80191a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191a8:	460e      	mov	r6, r1
 80191aa:	4614      	mov	r4, r2
 80191ac:	4605      	mov	r5, r0
 80191ae:	b118      	cbz	r0, 80191b8 <__swbuf_r+0x12>
 80191b0:	6a03      	ldr	r3, [r0, #32]
 80191b2:	b90b      	cbnz	r3, 80191b8 <__swbuf_r+0x12>
 80191b4:	f7ff fec2 	bl	8018f3c <__sinit>
 80191b8:	69a3      	ldr	r3, [r4, #24]
 80191ba:	60a3      	str	r3, [r4, #8]
 80191bc:	89a3      	ldrh	r3, [r4, #12]
 80191be:	071a      	lsls	r2, r3, #28
 80191c0:	d525      	bpl.n	801920e <__swbuf_r+0x68>
 80191c2:	6923      	ldr	r3, [r4, #16]
 80191c4:	b31b      	cbz	r3, 801920e <__swbuf_r+0x68>
 80191c6:	6823      	ldr	r3, [r4, #0]
 80191c8:	6922      	ldr	r2, [r4, #16]
 80191ca:	1a98      	subs	r0, r3, r2
 80191cc:	6963      	ldr	r3, [r4, #20]
 80191ce:	b2f6      	uxtb	r6, r6
 80191d0:	4283      	cmp	r3, r0
 80191d2:	4637      	mov	r7, r6
 80191d4:	dc04      	bgt.n	80191e0 <__swbuf_r+0x3a>
 80191d6:	4621      	mov	r1, r4
 80191d8:	4628      	mov	r0, r5
 80191da:	f003 f9cd 	bl	801c578 <_fflush_r>
 80191de:	b9e0      	cbnz	r0, 801921a <__swbuf_r+0x74>
 80191e0:	68a3      	ldr	r3, [r4, #8]
 80191e2:	3b01      	subs	r3, #1
 80191e4:	60a3      	str	r3, [r4, #8]
 80191e6:	6823      	ldr	r3, [r4, #0]
 80191e8:	1c5a      	adds	r2, r3, #1
 80191ea:	6022      	str	r2, [r4, #0]
 80191ec:	701e      	strb	r6, [r3, #0]
 80191ee:	6962      	ldr	r2, [r4, #20]
 80191f0:	1c43      	adds	r3, r0, #1
 80191f2:	429a      	cmp	r2, r3
 80191f4:	d004      	beq.n	8019200 <__swbuf_r+0x5a>
 80191f6:	89a3      	ldrh	r3, [r4, #12]
 80191f8:	07db      	lsls	r3, r3, #31
 80191fa:	d506      	bpl.n	801920a <__swbuf_r+0x64>
 80191fc:	2e0a      	cmp	r6, #10
 80191fe:	d104      	bne.n	801920a <__swbuf_r+0x64>
 8019200:	4621      	mov	r1, r4
 8019202:	4628      	mov	r0, r5
 8019204:	f003 f9b8 	bl	801c578 <_fflush_r>
 8019208:	b938      	cbnz	r0, 801921a <__swbuf_r+0x74>
 801920a:	4638      	mov	r0, r7
 801920c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801920e:	4621      	mov	r1, r4
 8019210:	4628      	mov	r0, r5
 8019212:	f000 f805 	bl	8019220 <__swsetup_r>
 8019216:	2800      	cmp	r0, #0
 8019218:	d0d5      	beq.n	80191c6 <__swbuf_r+0x20>
 801921a:	f04f 37ff 	mov.w	r7, #4294967295
 801921e:	e7f4      	b.n	801920a <__swbuf_r+0x64>

08019220 <__swsetup_r>:
 8019220:	b538      	push	{r3, r4, r5, lr}
 8019222:	4b2a      	ldr	r3, [pc, #168]	; (80192cc <__swsetup_r+0xac>)
 8019224:	4605      	mov	r5, r0
 8019226:	6818      	ldr	r0, [r3, #0]
 8019228:	460c      	mov	r4, r1
 801922a:	b118      	cbz	r0, 8019234 <__swsetup_r+0x14>
 801922c:	6a03      	ldr	r3, [r0, #32]
 801922e:	b90b      	cbnz	r3, 8019234 <__swsetup_r+0x14>
 8019230:	f7ff fe84 	bl	8018f3c <__sinit>
 8019234:	89a3      	ldrh	r3, [r4, #12]
 8019236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801923a:	0718      	lsls	r0, r3, #28
 801923c:	d422      	bmi.n	8019284 <__swsetup_r+0x64>
 801923e:	06d9      	lsls	r1, r3, #27
 8019240:	d407      	bmi.n	8019252 <__swsetup_r+0x32>
 8019242:	2309      	movs	r3, #9
 8019244:	602b      	str	r3, [r5, #0]
 8019246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801924a:	81a3      	strh	r3, [r4, #12]
 801924c:	f04f 30ff 	mov.w	r0, #4294967295
 8019250:	e034      	b.n	80192bc <__swsetup_r+0x9c>
 8019252:	0758      	lsls	r0, r3, #29
 8019254:	d512      	bpl.n	801927c <__swsetup_r+0x5c>
 8019256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019258:	b141      	cbz	r1, 801926c <__swsetup_r+0x4c>
 801925a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801925e:	4299      	cmp	r1, r3
 8019260:	d002      	beq.n	8019268 <__swsetup_r+0x48>
 8019262:	4628      	mov	r0, r5
 8019264:	f000 ffb6 	bl	801a1d4 <_free_r>
 8019268:	2300      	movs	r3, #0
 801926a:	6363      	str	r3, [r4, #52]	; 0x34
 801926c:	89a3      	ldrh	r3, [r4, #12]
 801926e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019272:	81a3      	strh	r3, [r4, #12]
 8019274:	2300      	movs	r3, #0
 8019276:	6063      	str	r3, [r4, #4]
 8019278:	6923      	ldr	r3, [r4, #16]
 801927a:	6023      	str	r3, [r4, #0]
 801927c:	89a3      	ldrh	r3, [r4, #12]
 801927e:	f043 0308 	orr.w	r3, r3, #8
 8019282:	81a3      	strh	r3, [r4, #12]
 8019284:	6923      	ldr	r3, [r4, #16]
 8019286:	b94b      	cbnz	r3, 801929c <__swsetup_r+0x7c>
 8019288:	89a3      	ldrh	r3, [r4, #12]
 801928a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801928e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019292:	d003      	beq.n	801929c <__swsetup_r+0x7c>
 8019294:	4621      	mov	r1, r4
 8019296:	4628      	mov	r0, r5
 8019298:	f003 f9bc 	bl	801c614 <__smakebuf_r>
 801929c:	89a0      	ldrh	r0, [r4, #12]
 801929e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192a2:	f010 0301 	ands.w	r3, r0, #1
 80192a6:	d00a      	beq.n	80192be <__swsetup_r+0x9e>
 80192a8:	2300      	movs	r3, #0
 80192aa:	60a3      	str	r3, [r4, #8]
 80192ac:	6963      	ldr	r3, [r4, #20]
 80192ae:	425b      	negs	r3, r3
 80192b0:	61a3      	str	r3, [r4, #24]
 80192b2:	6923      	ldr	r3, [r4, #16]
 80192b4:	b943      	cbnz	r3, 80192c8 <__swsetup_r+0xa8>
 80192b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80192ba:	d1c4      	bne.n	8019246 <__swsetup_r+0x26>
 80192bc:	bd38      	pop	{r3, r4, r5, pc}
 80192be:	0781      	lsls	r1, r0, #30
 80192c0:	bf58      	it	pl
 80192c2:	6963      	ldrpl	r3, [r4, #20]
 80192c4:	60a3      	str	r3, [r4, #8]
 80192c6:	e7f4      	b.n	80192b2 <__swsetup_r+0x92>
 80192c8:	2000      	movs	r0, #0
 80192ca:	e7f7      	b.n	80192bc <__swsetup_r+0x9c>
 80192cc:	20000198 	.word	0x20000198

080192d0 <memset>:
 80192d0:	4402      	add	r2, r0
 80192d2:	4603      	mov	r3, r0
 80192d4:	4293      	cmp	r3, r2
 80192d6:	d100      	bne.n	80192da <memset+0xa>
 80192d8:	4770      	bx	lr
 80192da:	f803 1b01 	strb.w	r1, [r3], #1
 80192de:	e7f9      	b.n	80192d4 <memset+0x4>

080192e0 <strcat>:
 80192e0:	b510      	push	{r4, lr}
 80192e2:	4602      	mov	r2, r0
 80192e4:	7814      	ldrb	r4, [r2, #0]
 80192e6:	4613      	mov	r3, r2
 80192e8:	3201      	adds	r2, #1
 80192ea:	2c00      	cmp	r4, #0
 80192ec:	d1fa      	bne.n	80192e4 <strcat+0x4>
 80192ee:	3b01      	subs	r3, #1
 80192f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80192f8:	2a00      	cmp	r2, #0
 80192fa:	d1f9      	bne.n	80192f0 <strcat+0x10>
 80192fc:	bd10      	pop	{r4, pc}
	...

08019300 <_localeconv_r>:
 8019300:	4800      	ldr	r0, [pc, #0]	; (8019304 <_localeconv_r+0x4>)
 8019302:	4770      	bx	lr
 8019304:	2000028c 	.word	0x2000028c

08019308 <_close_r>:
 8019308:	b538      	push	{r3, r4, r5, lr}
 801930a:	4d06      	ldr	r5, [pc, #24]	; (8019324 <_close_r+0x1c>)
 801930c:	2300      	movs	r3, #0
 801930e:	4604      	mov	r4, r0
 8019310:	4608      	mov	r0, r1
 8019312:	602b      	str	r3, [r5, #0]
 8019314:	f7e9 ff09 	bl	800312a <_close>
 8019318:	1c43      	adds	r3, r0, #1
 801931a:	d102      	bne.n	8019322 <_close_r+0x1a>
 801931c:	682b      	ldr	r3, [r5, #0]
 801931e:	b103      	cbz	r3, 8019322 <_close_r+0x1a>
 8019320:	6023      	str	r3, [r4, #0]
 8019322:	bd38      	pop	{r3, r4, r5, pc}
 8019324:	20007d8c 	.word	0x20007d8c

08019328 <_reclaim_reent>:
 8019328:	4b29      	ldr	r3, [pc, #164]	; (80193d0 <_reclaim_reent+0xa8>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4283      	cmp	r3, r0
 801932e:	b570      	push	{r4, r5, r6, lr}
 8019330:	4604      	mov	r4, r0
 8019332:	d04b      	beq.n	80193cc <_reclaim_reent+0xa4>
 8019334:	69c3      	ldr	r3, [r0, #28]
 8019336:	b143      	cbz	r3, 801934a <_reclaim_reent+0x22>
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d144      	bne.n	80193c8 <_reclaim_reent+0xa0>
 801933e:	69e3      	ldr	r3, [r4, #28]
 8019340:	6819      	ldr	r1, [r3, #0]
 8019342:	b111      	cbz	r1, 801934a <_reclaim_reent+0x22>
 8019344:	4620      	mov	r0, r4
 8019346:	f000 ff45 	bl	801a1d4 <_free_r>
 801934a:	6961      	ldr	r1, [r4, #20]
 801934c:	b111      	cbz	r1, 8019354 <_reclaim_reent+0x2c>
 801934e:	4620      	mov	r0, r4
 8019350:	f000 ff40 	bl	801a1d4 <_free_r>
 8019354:	69e1      	ldr	r1, [r4, #28]
 8019356:	b111      	cbz	r1, 801935e <_reclaim_reent+0x36>
 8019358:	4620      	mov	r0, r4
 801935a:	f000 ff3b 	bl	801a1d4 <_free_r>
 801935e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019360:	b111      	cbz	r1, 8019368 <_reclaim_reent+0x40>
 8019362:	4620      	mov	r0, r4
 8019364:	f000 ff36 	bl	801a1d4 <_free_r>
 8019368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801936a:	b111      	cbz	r1, 8019372 <_reclaim_reent+0x4a>
 801936c:	4620      	mov	r0, r4
 801936e:	f000 ff31 	bl	801a1d4 <_free_r>
 8019372:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019374:	b111      	cbz	r1, 801937c <_reclaim_reent+0x54>
 8019376:	4620      	mov	r0, r4
 8019378:	f000 ff2c 	bl	801a1d4 <_free_r>
 801937c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801937e:	b111      	cbz	r1, 8019386 <_reclaim_reent+0x5e>
 8019380:	4620      	mov	r0, r4
 8019382:	f000 ff27 	bl	801a1d4 <_free_r>
 8019386:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019388:	b111      	cbz	r1, 8019390 <_reclaim_reent+0x68>
 801938a:	4620      	mov	r0, r4
 801938c:	f000 ff22 	bl	801a1d4 <_free_r>
 8019390:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019392:	b111      	cbz	r1, 801939a <_reclaim_reent+0x72>
 8019394:	4620      	mov	r0, r4
 8019396:	f000 ff1d 	bl	801a1d4 <_free_r>
 801939a:	6a23      	ldr	r3, [r4, #32]
 801939c:	b1b3      	cbz	r3, 80193cc <_reclaim_reent+0xa4>
 801939e:	4620      	mov	r0, r4
 80193a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193a4:	4718      	bx	r3
 80193a6:	5949      	ldr	r1, [r1, r5]
 80193a8:	b941      	cbnz	r1, 80193bc <_reclaim_reent+0x94>
 80193aa:	3504      	adds	r5, #4
 80193ac:	69e3      	ldr	r3, [r4, #28]
 80193ae:	2d80      	cmp	r5, #128	; 0x80
 80193b0:	68d9      	ldr	r1, [r3, #12]
 80193b2:	d1f8      	bne.n	80193a6 <_reclaim_reent+0x7e>
 80193b4:	4620      	mov	r0, r4
 80193b6:	f000 ff0d 	bl	801a1d4 <_free_r>
 80193ba:	e7c0      	b.n	801933e <_reclaim_reent+0x16>
 80193bc:	680e      	ldr	r6, [r1, #0]
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 ff08 	bl	801a1d4 <_free_r>
 80193c4:	4631      	mov	r1, r6
 80193c6:	e7ef      	b.n	80193a8 <_reclaim_reent+0x80>
 80193c8:	2500      	movs	r5, #0
 80193ca:	e7ef      	b.n	80193ac <_reclaim_reent+0x84>
 80193cc:	bd70      	pop	{r4, r5, r6, pc}
 80193ce:	bf00      	nop
 80193d0:	20000198 	.word	0x20000198

080193d4 <_lseek_r>:
 80193d4:	b538      	push	{r3, r4, r5, lr}
 80193d6:	4d07      	ldr	r5, [pc, #28]	; (80193f4 <_lseek_r+0x20>)
 80193d8:	4604      	mov	r4, r0
 80193da:	4608      	mov	r0, r1
 80193dc:	4611      	mov	r1, r2
 80193de:	2200      	movs	r2, #0
 80193e0:	602a      	str	r2, [r5, #0]
 80193e2:	461a      	mov	r2, r3
 80193e4:	f7e9 fec8 	bl	8003178 <_lseek>
 80193e8:	1c43      	adds	r3, r0, #1
 80193ea:	d102      	bne.n	80193f2 <_lseek_r+0x1e>
 80193ec:	682b      	ldr	r3, [r5, #0]
 80193ee:	b103      	cbz	r3, 80193f2 <_lseek_r+0x1e>
 80193f0:	6023      	str	r3, [r4, #0]
 80193f2:	bd38      	pop	{r3, r4, r5, pc}
 80193f4:	20007d8c 	.word	0x20007d8c

080193f8 <_read_r>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4d07      	ldr	r5, [pc, #28]	; (8019418 <_read_r+0x20>)
 80193fc:	4604      	mov	r4, r0
 80193fe:	4608      	mov	r0, r1
 8019400:	4611      	mov	r1, r2
 8019402:	2200      	movs	r2, #0
 8019404:	602a      	str	r2, [r5, #0]
 8019406:	461a      	mov	r2, r3
 8019408:	f7e9 fe56 	bl	80030b8 <_read>
 801940c:	1c43      	adds	r3, r0, #1
 801940e:	d102      	bne.n	8019416 <_read_r+0x1e>
 8019410:	682b      	ldr	r3, [r5, #0]
 8019412:	b103      	cbz	r3, 8019416 <_read_r+0x1e>
 8019414:	6023      	str	r3, [r4, #0]
 8019416:	bd38      	pop	{r3, r4, r5, pc}
 8019418:	20007d8c 	.word	0x20007d8c

0801941c <_sbrk_r>:
 801941c:	b538      	push	{r3, r4, r5, lr}
 801941e:	4d06      	ldr	r5, [pc, #24]	; (8019438 <_sbrk_r+0x1c>)
 8019420:	2300      	movs	r3, #0
 8019422:	4604      	mov	r4, r0
 8019424:	4608      	mov	r0, r1
 8019426:	602b      	str	r3, [r5, #0]
 8019428:	f7e9 feb4 	bl	8003194 <_sbrk>
 801942c:	1c43      	adds	r3, r0, #1
 801942e:	d102      	bne.n	8019436 <_sbrk_r+0x1a>
 8019430:	682b      	ldr	r3, [r5, #0]
 8019432:	b103      	cbz	r3, 8019436 <_sbrk_r+0x1a>
 8019434:	6023      	str	r3, [r4, #0]
 8019436:	bd38      	pop	{r3, r4, r5, pc}
 8019438:	20007d8c 	.word	0x20007d8c

0801943c <_write_r>:
 801943c:	b538      	push	{r3, r4, r5, lr}
 801943e:	4d07      	ldr	r5, [pc, #28]	; (801945c <_write_r+0x20>)
 8019440:	4604      	mov	r4, r0
 8019442:	4608      	mov	r0, r1
 8019444:	4611      	mov	r1, r2
 8019446:	2200      	movs	r2, #0
 8019448:	602a      	str	r2, [r5, #0]
 801944a:	461a      	mov	r2, r3
 801944c:	f7e9 fe51 	bl	80030f2 <_write>
 8019450:	1c43      	adds	r3, r0, #1
 8019452:	d102      	bne.n	801945a <_write_r+0x1e>
 8019454:	682b      	ldr	r3, [r5, #0]
 8019456:	b103      	cbz	r3, 801945a <_write_r+0x1e>
 8019458:	6023      	str	r3, [r4, #0]
 801945a:	bd38      	pop	{r3, r4, r5, pc}
 801945c:	20007d8c 	.word	0x20007d8c

08019460 <__errno>:
 8019460:	4b01      	ldr	r3, [pc, #4]	; (8019468 <__errno+0x8>)
 8019462:	6818      	ldr	r0, [r3, #0]
 8019464:	4770      	bx	lr
 8019466:	bf00      	nop
 8019468:	20000198 	.word	0x20000198

0801946c <__libc_init_array>:
 801946c:	b570      	push	{r4, r5, r6, lr}
 801946e:	4d0d      	ldr	r5, [pc, #52]	; (80194a4 <__libc_init_array+0x38>)
 8019470:	4c0d      	ldr	r4, [pc, #52]	; (80194a8 <__libc_init_array+0x3c>)
 8019472:	1b64      	subs	r4, r4, r5
 8019474:	10a4      	asrs	r4, r4, #2
 8019476:	2600      	movs	r6, #0
 8019478:	42a6      	cmp	r6, r4
 801947a:	d109      	bne.n	8019490 <__libc_init_array+0x24>
 801947c:	4d0b      	ldr	r5, [pc, #44]	; (80194ac <__libc_init_array+0x40>)
 801947e:	4c0c      	ldr	r4, [pc, #48]	; (80194b0 <__libc_init_array+0x44>)
 8019480:	f003 fe6c 	bl	801d15c <_init>
 8019484:	1b64      	subs	r4, r4, r5
 8019486:	10a4      	asrs	r4, r4, #2
 8019488:	2600      	movs	r6, #0
 801948a:	42a6      	cmp	r6, r4
 801948c:	d105      	bne.n	801949a <__libc_init_array+0x2e>
 801948e:	bd70      	pop	{r4, r5, r6, pc}
 8019490:	f855 3b04 	ldr.w	r3, [r5], #4
 8019494:	4798      	blx	r3
 8019496:	3601      	adds	r6, #1
 8019498:	e7ee      	b.n	8019478 <__libc_init_array+0xc>
 801949a:	f855 3b04 	ldr.w	r3, [r5], #4
 801949e:	4798      	blx	r3
 80194a0:	3601      	adds	r6, #1
 80194a2:	e7f2      	b.n	801948a <__libc_init_array+0x1e>
 80194a4:	0801e3c4 	.word	0x0801e3c4
 80194a8:	0801e3c4 	.word	0x0801e3c4
 80194ac:	0801e3c4 	.word	0x0801e3c4
 80194b0:	0801e3c8 	.word	0x0801e3c8

080194b4 <__retarget_lock_acquire_recursive>:
 80194b4:	4770      	bx	lr

080194b6 <__retarget_lock_release_recursive>:
 80194b6:	4770      	bx	lr

080194b8 <memcpy>:
 80194b8:	440a      	add	r2, r1
 80194ba:	4291      	cmp	r1, r2
 80194bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80194c0:	d100      	bne.n	80194c4 <memcpy+0xc>
 80194c2:	4770      	bx	lr
 80194c4:	b510      	push	{r4, lr}
 80194c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194ce:	4291      	cmp	r1, r2
 80194d0:	d1f9      	bne.n	80194c6 <memcpy+0xe>
 80194d2:	bd10      	pop	{r4, pc}

080194d4 <nanf>:
 80194d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194dc <nanf+0x8>
 80194d8:	4770      	bx	lr
 80194da:	bf00      	nop
 80194dc:	7fc00000 	.word	0x7fc00000

080194e0 <quorem>:
 80194e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e4:	6903      	ldr	r3, [r0, #16]
 80194e6:	690c      	ldr	r4, [r1, #16]
 80194e8:	42a3      	cmp	r3, r4
 80194ea:	4607      	mov	r7, r0
 80194ec:	db7e      	blt.n	80195ec <quorem+0x10c>
 80194ee:	3c01      	subs	r4, #1
 80194f0:	f101 0814 	add.w	r8, r1, #20
 80194f4:	f100 0514 	add.w	r5, r0, #20
 80194f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80194fc:	9301      	str	r3, [sp, #4]
 80194fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019506:	3301      	adds	r3, #1
 8019508:	429a      	cmp	r2, r3
 801950a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801950e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019512:	fbb2 f6f3 	udiv	r6, r2, r3
 8019516:	d331      	bcc.n	801957c <quorem+0x9c>
 8019518:	f04f 0e00 	mov.w	lr, #0
 801951c:	4640      	mov	r0, r8
 801951e:	46ac      	mov	ip, r5
 8019520:	46f2      	mov	sl, lr
 8019522:	f850 2b04 	ldr.w	r2, [r0], #4
 8019526:	b293      	uxth	r3, r2
 8019528:	fb06 e303 	mla	r3, r6, r3, lr
 801952c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019530:	0c1a      	lsrs	r2, r3, #16
 8019532:	b29b      	uxth	r3, r3
 8019534:	ebaa 0303 	sub.w	r3, sl, r3
 8019538:	f8dc a000 	ldr.w	sl, [ip]
 801953c:	fa13 f38a 	uxtah	r3, r3, sl
 8019540:	fb06 220e 	mla	r2, r6, lr, r2
 8019544:	9300      	str	r3, [sp, #0]
 8019546:	9b00      	ldr	r3, [sp, #0]
 8019548:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801954c:	b292      	uxth	r2, r2
 801954e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019552:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019556:	f8bd 3000 	ldrh.w	r3, [sp]
 801955a:	4581      	cmp	r9, r0
 801955c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019560:	f84c 3b04 	str.w	r3, [ip], #4
 8019564:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019568:	d2db      	bcs.n	8019522 <quorem+0x42>
 801956a:	f855 300b 	ldr.w	r3, [r5, fp]
 801956e:	b92b      	cbnz	r3, 801957c <quorem+0x9c>
 8019570:	9b01      	ldr	r3, [sp, #4]
 8019572:	3b04      	subs	r3, #4
 8019574:	429d      	cmp	r5, r3
 8019576:	461a      	mov	r2, r3
 8019578:	d32c      	bcc.n	80195d4 <quorem+0xf4>
 801957a:	613c      	str	r4, [r7, #16]
 801957c:	4638      	mov	r0, r7
 801957e:	f001 f93b 	bl	801a7f8 <__mcmp>
 8019582:	2800      	cmp	r0, #0
 8019584:	db22      	blt.n	80195cc <quorem+0xec>
 8019586:	3601      	adds	r6, #1
 8019588:	4629      	mov	r1, r5
 801958a:	2000      	movs	r0, #0
 801958c:	f858 2b04 	ldr.w	r2, [r8], #4
 8019590:	f8d1 c000 	ldr.w	ip, [r1]
 8019594:	b293      	uxth	r3, r2
 8019596:	1ac3      	subs	r3, r0, r3
 8019598:	0c12      	lsrs	r2, r2, #16
 801959a:	fa13 f38c 	uxtah	r3, r3, ip
 801959e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80195a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80195ac:	45c1      	cmp	r9, r8
 80195ae:	f841 3b04 	str.w	r3, [r1], #4
 80195b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80195b6:	d2e9      	bcs.n	801958c <quorem+0xac>
 80195b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80195bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80195c0:	b922      	cbnz	r2, 80195cc <quorem+0xec>
 80195c2:	3b04      	subs	r3, #4
 80195c4:	429d      	cmp	r5, r3
 80195c6:	461a      	mov	r2, r3
 80195c8:	d30a      	bcc.n	80195e0 <quorem+0x100>
 80195ca:	613c      	str	r4, [r7, #16]
 80195cc:	4630      	mov	r0, r6
 80195ce:	b003      	add	sp, #12
 80195d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195d4:	6812      	ldr	r2, [r2, #0]
 80195d6:	3b04      	subs	r3, #4
 80195d8:	2a00      	cmp	r2, #0
 80195da:	d1ce      	bne.n	801957a <quorem+0x9a>
 80195dc:	3c01      	subs	r4, #1
 80195de:	e7c9      	b.n	8019574 <quorem+0x94>
 80195e0:	6812      	ldr	r2, [r2, #0]
 80195e2:	3b04      	subs	r3, #4
 80195e4:	2a00      	cmp	r2, #0
 80195e6:	d1f0      	bne.n	80195ca <quorem+0xea>
 80195e8:	3c01      	subs	r4, #1
 80195ea:	e7eb      	b.n	80195c4 <quorem+0xe4>
 80195ec:	2000      	movs	r0, #0
 80195ee:	e7ee      	b.n	80195ce <quorem+0xee>

080195f0 <_dtoa_r>:
 80195f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f4:	ed2d 8b04 	vpush	{d8-d9}
 80195f8:	69c5      	ldr	r5, [r0, #28]
 80195fa:	b093      	sub	sp, #76	; 0x4c
 80195fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019600:	ec57 6b10 	vmov	r6, r7, d0
 8019604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019608:	9107      	str	r1, [sp, #28]
 801960a:	4604      	mov	r4, r0
 801960c:	920a      	str	r2, [sp, #40]	; 0x28
 801960e:	930d      	str	r3, [sp, #52]	; 0x34
 8019610:	b975      	cbnz	r5, 8019630 <_dtoa_r+0x40>
 8019612:	2010      	movs	r0, #16
 8019614:	f7fe fce6 	bl	8017fe4 <malloc>
 8019618:	4602      	mov	r2, r0
 801961a:	61e0      	str	r0, [r4, #28]
 801961c:	b920      	cbnz	r0, 8019628 <_dtoa_r+0x38>
 801961e:	4bae      	ldr	r3, [pc, #696]	; (80198d8 <_dtoa_r+0x2e8>)
 8019620:	21ef      	movs	r1, #239	; 0xef
 8019622:	48ae      	ldr	r0, [pc, #696]	; (80198dc <_dtoa_r+0x2ec>)
 8019624:	f003 f8fc 	bl	801c820 <__assert_func>
 8019628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801962c:	6005      	str	r5, [r0, #0]
 801962e:	60c5      	str	r5, [r0, #12]
 8019630:	69e3      	ldr	r3, [r4, #28]
 8019632:	6819      	ldr	r1, [r3, #0]
 8019634:	b151      	cbz	r1, 801964c <_dtoa_r+0x5c>
 8019636:	685a      	ldr	r2, [r3, #4]
 8019638:	604a      	str	r2, [r1, #4]
 801963a:	2301      	movs	r3, #1
 801963c:	4093      	lsls	r3, r2
 801963e:	608b      	str	r3, [r1, #8]
 8019640:	4620      	mov	r0, r4
 8019642:	f000 fe53 	bl	801a2ec <_Bfree>
 8019646:	69e3      	ldr	r3, [r4, #28]
 8019648:	2200      	movs	r2, #0
 801964a:	601a      	str	r2, [r3, #0]
 801964c:	1e3b      	subs	r3, r7, #0
 801964e:	bfbb      	ittet	lt
 8019650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019654:	9303      	strlt	r3, [sp, #12]
 8019656:	2300      	movge	r3, #0
 8019658:	2201      	movlt	r2, #1
 801965a:	bfac      	ite	ge
 801965c:	f8c8 3000 	strge.w	r3, [r8]
 8019660:	f8c8 2000 	strlt.w	r2, [r8]
 8019664:	4b9e      	ldr	r3, [pc, #632]	; (80198e0 <_dtoa_r+0x2f0>)
 8019666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801966a:	ea33 0308 	bics.w	r3, r3, r8
 801966e:	d11b      	bne.n	80196a8 <_dtoa_r+0xb8>
 8019670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019672:	f242 730f 	movw	r3, #9999	; 0x270f
 8019676:	6013      	str	r3, [r2, #0]
 8019678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801967c:	4333      	orrs	r3, r6
 801967e:	f000 8593 	beq.w	801a1a8 <_dtoa_r+0xbb8>
 8019682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019684:	b963      	cbnz	r3, 80196a0 <_dtoa_r+0xb0>
 8019686:	4b97      	ldr	r3, [pc, #604]	; (80198e4 <_dtoa_r+0x2f4>)
 8019688:	e027      	b.n	80196da <_dtoa_r+0xea>
 801968a:	4b97      	ldr	r3, [pc, #604]	; (80198e8 <_dtoa_r+0x2f8>)
 801968c:	9300      	str	r3, [sp, #0]
 801968e:	3308      	adds	r3, #8
 8019690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019692:	6013      	str	r3, [r2, #0]
 8019694:	9800      	ldr	r0, [sp, #0]
 8019696:	b013      	add	sp, #76	; 0x4c
 8019698:	ecbd 8b04 	vpop	{d8-d9}
 801969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a0:	4b90      	ldr	r3, [pc, #576]	; (80198e4 <_dtoa_r+0x2f4>)
 80196a2:	9300      	str	r3, [sp, #0]
 80196a4:	3303      	adds	r3, #3
 80196a6:	e7f3      	b.n	8019690 <_dtoa_r+0xa0>
 80196a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80196ac:	2200      	movs	r2, #0
 80196ae:	ec51 0b17 	vmov	r0, r1, d7
 80196b2:	eeb0 8a47 	vmov.f32	s16, s14
 80196b6:	eef0 8a67 	vmov.f32	s17, s15
 80196ba:	2300      	movs	r3, #0
 80196bc:	f7e7 fa34 	bl	8000b28 <__aeabi_dcmpeq>
 80196c0:	4681      	mov	r9, r0
 80196c2:	b160      	cbz	r0, 80196de <_dtoa_r+0xee>
 80196c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196c6:	2301      	movs	r3, #1
 80196c8:	6013      	str	r3, [r2, #0]
 80196ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f000 8568 	beq.w	801a1a2 <_dtoa_r+0xbb2>
 80196d2:	4b86      	ldr	r3, [pc, #536]	; (80198ec <_dtoa_r+0x2fc>)
 80196d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80196d6:	6013      	str	r3, [r2, #0]
 80196d8:	3b01      	subs	r3, #1
 80196da:	9300      	str	r3, [sp, #0]
 80196dc:	e7da      	b.n	8019694 <_dtoa_r+0xa4>
 80196de:	aa10      	add	r2, sp, #64	; 0x40
 80196e0:	a911      	add	r1, sp, #68	; 0x44
 80196e2:	4620      	mov	r0, r4
 80196e4:	eeb0 0a48 	vmov.f32	s0, s16
 80196e8:	eef0 0a68 	vmov.f32	s1, s17
 80196ec:	f001 f99a 	bl	801aa24 <__d2b>
 80196f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80196f4:	4682      	mov	sl, r0
 80196f6:	2d00      	cmp	r5, #0
 80196f8:	d07f      	beq.n	80197fa <_dtoa_r+0x20a>
 80196fa:	ee18 3a90 	vmov	r3, s17
 80196fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019706:	ec51 0b18 	vmov	r0, r1, d8
 801970a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801970e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019716:	4619      	mov	r1, r3
 8019718:	2200      	movs	r2, #0
 801971a:	4b75      	ldr	r3, [pc, #468]	; (80198f0 <_dtoa_r+0x300>)
 801971c:	f7e6 fde4 	bl	80002e8 <__aeabi_dsub>
 8019720:	a367      	add	r3, pc, #412	; (adr r3, 80198c0 <_dtoa_r+0x2d0>)
 8019722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019726:	f7e6 ff97 	bl	8000658 <__aeabi_dmul>
 801972a:	a367      	add	r3, pc, #412	; (adr r3, 80198c8 <_dtoa_r+0x2d8>)
 801972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019730:	f7e6 fddc 	bl	80002ec <__adddf3>
 8019734:	4606      	mov	r6, r0
 8019736:	4628      	mov	r0, r5
 8019738:	460f      	mov	r7, r1
 801973a:	f7e6 ff23 	bl	8000584 <__aeabi_i2d>
 801973e:	a364      	add	r3, pc, #400	; (adr r3, 80198d0 <_dtoa_r+0x2e0>)
 8019740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019744:	f7e6 ff88 	bl	8000658 <__aeabi_dmul>
 8019748:	4602      	mov	r2, r0
 801974a:	460b      	mov	r3, r1
 801974c:	4630      	mov	r0, r6
 801974e:	4639      	mov	r1, r7
 8019750:	f7e6 fdcc 	bl	80002ec <__adddf3>
 8019754:	4606      	mov	r6, r0
 8019756:	460f      	mov	r7, r1
 8019758:	f7e7 fa2e 	bl	8000bb8 <__aeabi_d2iz>
 801975c:	2200      	movs	r2, #0
 801975e:	4683      	mov	fp, r0
 8019760:	2300      	movs	r3, #0
 8019762:	4630      	mov	r0, r6
 8019764:	4639      	mov	r1, r7
 8019766:	f7e7 f9e9 	bl	8000b3c <__aeabi_dcmplt>
 801976a:	b148      	cbz	r0, 8019780 <_dtoa_r+0x190>
 801976c:	4658      	mov	r0, fp
 801976e:	f7e6 ff09 	bl	8000584 <__aeabi_i2d>
 8019772:	4632      	mov	r2, r6
 8019774:	463b      	mov	r3, r7
 8019776:	f7e7 f9d7 	bl	8000b28 <__aeabi_dcmpeq>
 801977a:	b908      	cbnz	r0, 8019780 <_dtoa_r+0x190>
 801977c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019780:	f1bb 0f16 	cmp.w	fp, #22
 8019784:	d857      	bhi.n	8019836 <_dtoa_r+0x246>
 8019786:	4b5b      	ldr	r3, [pc, #364]	; (80198f4 <_dtoa_r+0x304>)
 8019788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019790:	ec51 0b18 	vmov	r0, r1, d8
 8019794:	f7e7 f9d2 	bl	8000b3c <__aeabi_dcmplt>
 8019798:	2800      	cmp	r0, #0
 801979a:	d04e      	beq.n	801983a <_dtoa_r+0x24a>
 801979c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80197a0:	2300      	movs	r3, #0
 80197a2:	930c      	str	r3, [sp, #48]	; 0x30
 80197a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80197a6:	1b5b      	subs	r3, r3, r5
 80197a8:	1e5a      	subs	r2, r3, #1
 80197aa:	bf45      	ittet	mi
 80197ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80197b0:	9305      	strmi	r3, [sp, #20]
 80197b2:	2300      	movpl	r3, #0
 80197b4:	2300      	movmi	r3, #0
 80197b6:	9206      	str	r2, [sp, #24]
 80197b8:	bf54      	ite	pl
 80197ba:	9305      	strpl	r3, [sp, #20]
 80197bc:	9306      	strmi	r3, [sp, #24]
 80197be:	f1bb 0f00 	cmp.w	fp, #0
 80197c2:	db3c      	blt.n	801983e <_dtoa_r+0x24e>
 80197c4:	9b06      	ldr	r3, [sp, #24]
 80197c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80197ca:	445b      	add	r3, fp
 80197cc:	9306      	str	r3, [sp, #24]
 80197ce:	2300      	movs	r3, #0
 80197d0:	9308      	str	r3, [sp, #32]
 80197d2:	9b07      	ldr	r3, [sp, #28]
 80197d4:	2b09      	cmp	r3, #9
 80197d6:	d868      	bhi.n	80198aa <_dtoa_r+0x2ba>
 80197d8:	2b05      	cmp	r3, #5
 80197da:	bfc4      	itt	gt
 80197dc:	3b04      	subgt	r3, #4
 80197de:	9307      	strgt	r3, [sp, #28]
 80197e0:	9b07      	ldr	r3, [sp, #28]
 80197e2:	f1a3 0302 	sub.w	r3, r3, #2
 80197e6:	bfcc      	ite	gt
 80197e8:	2500      	movgt	r5, #0
 80197ea:	2501      	movle	r5, #1
 80197ec:	2b03      	cmp	r3, #3
 80197ee:	f200 8085 	bhi.w	80198fc <_dtoa_r+0x30c>
 80197f2:	e8df f003 	tbb	[pc, r3]
 80197f6:	3b2e      	.short	0x3b2e
 80197f8:	5839      	.short	0x5839
 80197fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80197fe:	441d      	add	r5, r3
 8019800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019804:	2b20      	cmp	r3, #32
 8019806:	bfc1      	itttt	gt
 8019808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801980c:	fa08 f803 	lslgt.w	r8, r8, r3
 8019810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8019814:	fa26 f303 	lsrgt.w	r3, r6, r3
 8019818:	bfd6      	itet	le
 801981a:	f1c3 0320 	rsble	r3, r3, #32
 801981e:	ea48 0003 	orrgt.w	r0, r8, r3
 8019822:	fa06 f003 	lslle.w	r0, r6, r3
 8019826:	f7e6 fe9d 	bl	8000564 <__aeabi_ui2d>
 801982a:	2201      	movs	r2, #1
 801982c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8019830:	3d01      	subs	r5, #1
 8019832:	920e      	str	r2, [sp, #56]	; 0x38
 8019834:	e76f      	b.n	8019716 <_dtoa_r+0x126>
 8019836:	2301      	movs	r3, #1
 8019838:	e7b3      	b.n	80197a2 <_dtoa_r+0x1b2>
 801983a:	900c      	str	r0, [sp, #48]	; 0x30
 801983c:	e7b2      	b.n	80197a4 <_dtoa_r+0x1b4>
 801983e:	9b05      	ldr	r3, [sp, #20]
 8019840:	eba3 030b 	sub.w	r3, r3, fp
 8019844:	9305      	str	r3, [sp, #20]
 8019846:	f1cb 0300 	rsb	r3, fp, #0
 801984a:	9308      	str	r3, [sp, #32]
 801984c:	2300      	movs	r3, #0
 801984e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019850:	e7bf      	b.n	80197d2 <_dtoa_r+0x1e2>
 8019852:	2300      	movs	r3, #0
 8019854:	9309      	str	r3, [sp, #36]	; 0x24
 8019856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019858:	2b00      	cmp	r3, #0
 801985a:	dc52      	bgt.n	8019902 <_dtoa_r+0x312>
 801985c:	2301      	movs	r3, #1
 801985e:	9301      	str	r3, [sp, #4]
 8019860:	9304      	str	r3, [sp, #16]
 8019862:	461a      	mov	r2, r3
 8019864:	920a      	str	r2, [sp, #40]	; 0x28
 8019866:	e00b      	b.n	8019880 <_dtoa_r+0x290>
 8019868:	2301      	movs	r3, #1
 801986a:	e7f3      	b.n	8019854 <_dtoa_r+0x264>
 801986c:	2300      	movs	r3, #0
 801986e:	9309      	str	r3, [sp, #36]	; 0x24
 8019870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019872:	445b      	add	r3, fp
 8019874:	9301      	str	r3, [sp, #4]
 8019876:	3301      	adds	r3, #1
 8019878:	2b01      	cmp	r3, #1
 801987a:	9304      	str	r3, [sp, #16]
 801987c:	bfb8      	it	lt
 801987e:	2301      	movlt	r3, #1
 8019880:	69e0      	ldr	r0, [r4, #28]
 8019882:	2100      	movs	r1, #0
 8019884:	2204      	movs	r2, #4
 8019886:	f102 0614 	add.w	r6, r2, #20
 801988a:	429e      	cmp	r6, r3
 801988c:	d93d      	bls.n	801990a <_dtoa_r+0x31a>
 801988e:	6041      	str	r1, [r0, #4]
 8019890:	4620      	mov	r0, r4
 8019892:	f000 fceb 	bl	801a26c <_Balloc>
 8019896:	9000      	str	r0, [sp, #0]
 8019898:	2800      	cmp	r0, #0
 801989a:	d139      	bne.n	8019910 <_dtoa_r+0x320>
 801989c:	4b16      	ldr	r3, [pc, #88]	; (80198f8 <_dtoa_r+0x308>)
 801989e:	4602      	mov	r2, r0
 80198a0:	f240 11af 	movw	r1, #431	; 0x1af
 80198a4:	e6bd      	b.n	8019622 <_dtoa_r+0x32>
 80198a6:	2301      	movs	r3, #1
 80198a8:	e7e1      	b.n	801986e <_dtoa_r+0x27e>
 80198aa:	2501      	movs	r5, #1
 80198ac:	2300      	movs	r3, #0
 80198ae:	9307      	str	r3, [sp, #28]
 80198b0:	9509      	str	r5, [sp, #36]	; 0x24
 80198b2:	f04f 33ff 	mov.w	r3, #4294967295
 80198b6:	9301      	str	r3, [sp, #4]
 80198b8:	9304      	str	r3, [sp, #16]
 80198ba:	2200      	movs	r2, #0
 80198bc:	2312      	movs	r3, #18
 80198be:	e7d1      	b.n	8019864 <_dtoa_r+0x274>
 80198c0:	636f4361 	.word	0x636f4361
 80198c4:	3fd287a7 	.word	0x3fd287a7
 80198c8:	8b60c8b3 	.word	0x8b60c8b3
 80198cc:	3fc68a28 	.word	0x3fc68a28
 80198d0:	509f79fb 	.word	0x509f79fb
 80198d4:	3fd34413 	.word	0x3fd34413
 80198d8:	0801dfbc 	.word	0x0801dfbc
 80198dc:	0801dfd3 	.word	0x0801dfd3
 80198e0:	7ff00000 	.word	0x7ff00000
 80198e4:	0801dfb8 	.word	0x0801dfb8
 80198e8:	0801dfaf 	.word	0x0801dfaf
 80198ec:	0801e311 	.word	0x0801e311
 80198f0:	3ff80000 	.word	0x3ff80000
 80198f4:	0801e0c0 	.word	0x0801e0c0
 80198f8:	0801e02b 	.word	0x0801e02b
 80198fc:	2301      	movs	r3, #1
 80198fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019900:	e7d7      	b.n	80198b2 <_dtoa_r+0x2c2>
 8019902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019904:	9301      	str	r3, [sp, #4]
 8019906:	9304      	str	r3, [sp, #16]
 8019908:	e7ba      	b.n	8019880 <_dtoa_r+0x290>
 801990a:	3101      	adds	r1, #1
 801990c:	0052      	lsls	r2, r2, #1
 801990e:	e7ba      	b.n	8019886 <_dtoa_r+0x296>
 8019910:	69e3      	ldr	r3, [r4, #28]
 8019912:	9a00      	ldr	r2, [sp, #0]
 8019914:	601a      	str	r2, [r3, #0]
 8019916:	9b04      	ldr	r3, [sp, #16]
 8019918:	2b0e      	cmp	r3, #14
 801991a:	f200 80a8 	bhi.w	8019a6e <_dtoa_r+0x47e>
 801991e:	2d00      	cmp	r5, #0
 8019920:	f000 80a5 	beq.w	8019a6e <_dtoa_r+0x47e>
 8019924:	f1bb 0f00 	cmp.w	fp, #0
 8019928:	dd38      	ble.n	801999c <_dtoa_r+0x3ac>
 801992a:	4bc0      	ldr	r3, [pc, #768]	; (8019c2c <_dtoa_r+0x63c>)
 801992c:	f00b 020f 	and.w	r2, fp, #15
 8019930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019938:	e9d3 6700 	ldrd	r6, r7, [r3]
 801993c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8019940:	d019      	beq.n	8019976 <_dtoa_r+0x386>
 8019942:	4bbb      	ldr	r3, [pc, #748]	; (8019c30 <_dtoa_r+0x640>)
 8019944:	ec51 0b18 	vmov	r0, r1, d8
 8019948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801994c:	f7e6 ffae 	bl	80008ac <__aeabi_ddiv>
 8019950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019954:	f008 080f 	and.w	r8, r8, #15
 8019958:	2503      	movs	r5, #3
 801995a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8019c30 <_dtoa_r+0x640>
 801995e:	f1b8 0f00 	cmp.w	r8, #0
 8019962:	d10a      	bne.n	801997a <_dtoa_r+0x38a>
 8019964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019968:	4632      	mov	r2, r6
 801996a:	463b      	mov	r3, r7
 801996c:	f7e6 ff9e 	bl	80008ac <__aeabi_ddiv>
 8019970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019974:	e02b      	b.n	80199ce <_dtoa_r+0x3de>
 8019976:	2502      	movs	r5, #2
 8019978:	e7ef      	b.n	801995a <_dtoa_r+0x36a>
 801997a:	f018 0f01 	tst.w	r8, #1
 801997e:	d008      	beq.n	8019992 <_dtoa_r+0x3a2>
 8019980:	4630      	mov	r0, r6
 8019982:	4639      	mov	r1, r7
 8019984:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019988:	f7e6 fe66 	bl	8000658 <__aeabi_dmul>
 801998c:	3501      	adds	r5, #1
 801998e:	4606      	mov	r6, r0
 8019990:	460f      	mov	r7, r1
 8019992:	ea4f 0868 	mov.w	r8, r8, asr #1
 8019996:	f109 0908 	add.w	r9, r9, #8
 801999a:	e7e0      	b.n	801995e <_dtoa_r+0x36e>
 801999c:	f000 809f 	beq.w	8019ade <_dtoa_r+0x4ee>
 80199a0:	f1cb 0600 	rsb	r6, fp, #0
 80199a4:	4ba1      	ldr	r3, [pc, #644]	; (8019c2c <_dtoa_r+0x63c>)
 80199a6:	4fa2      	ldr	r7, [pc, #648]	; (8019c30 <_dtoa_r+0x640>)
 80199a8:	f006 020f 	and.w	r2, r6, #15
 80199ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80199b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b4:	ec51 0b18 	vmov	r0, r1, d8
 80199b8:	f7e6 fe4e 	bl	8000658 <__aeabi_dmul>
 80199bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80199c0:	1136      	asrs	r6, r6, #4
 80199c2:	2300      	movs	r3, #0
 80199c4:	2502      	movs	r5, #2
 80199c6:	2e00      	cmp	r6, #0
 80199c8:	d17e      	bne.n	8019ac8 <_dtoa_r+0x4d8>
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d1d0      	bne.n	8019970 <_dtoa_r+0x380>
 80199ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	f000 8084 	beq.w	8019ae2 <_dtoa_r+0x4f2>
 80199da:	4b96      	ldr	r3, [pc, #600]	; (8019c34 <_dtoa_r+0x644>)
 80199dc:	2200      	movs	r2, #0
 80199de:	4640      	mov	r0, r8
 80199e0:	4649      	mov	r1, r9
 80199e2:	f7e7 f8ab 	bl	8000b3c <__aeabi_dcmplt>
 80199e6:	2800      	cmp	r0, #0
 80199e8:	d07b      	beq.n	8019ae2 <_dtoa_r+0x4f2>
 80199ea:	9b04      	ldr	r3, [sp, #16]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d078      	beq.n	8019ae2 <_dtoa_r+0x4f2>
 80199f0:	9b01      	ldr	r3, [sp, #4]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	dd39      	ble.n	8019a6a <_dtoa_r+0x47a>
 80199f6:	4b90      	ldr	r3, [pc, #576]	; (8019c38 <_dtoa_r+0x648>)
 80199f8:	2200      	movs	r2, #0
 80199fa:	4640      	mov	r0, r8
 80199fc:	4649      	mov	r1, r9
 80199fe:	f7e6 fe2b 	bl	8000658 <__aeabi_dmul>
 8019a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a06:	9e01      	ldr	r6, [sp, #4]
 8019a08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8019a0c:	3501      	adds	r5, #1
 8019a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019a12:	4628      	mov	r0, r5
 8019a14:	f7e6 fdb6 	bl	8000584 <__aeabi_i2d>
 8019a18:	4642      	mov	r2, r8
 8019a1a:	464b      	mov	r3, r9
 8019a1c:	f7e6 fe1c 	bl	8000658 <__aeabi_dmul>
 8019a20:	4b86      	ldr	r3, [pc, #536]	; (8019c3c <_dtoa_r+0x64c>)
 8019a22:	2200      	movs	r2, #0
 8019a24:	f7e6 fc62 	bl	80002ec <__adddf3>
 8019a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a30:	9303      	str	r3, [sp, #12]
 8019a32:	2e00      	cmp	r6, #0
 8019a34:	d158      	bne.n	8019ae8 <_dtoa_r+0x4f8>
 8019a36:	4b82      	ldr	r3, [pc, #520]	; (8019c40 <_dtoa_r+0x650>)
 8019a38:	2200      	movs	r2, #0
 8019a3a:	4640      	mov	r0, r8
 8019a3c:	4649      	mov	r1, r9
 8019a3e:	f7e6 fc53 	bl	80002e8 <__aeabi_dsub>
 8019a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a46:	4680      	mov	r8, r0
 8019a48:	4689      	mov	r9, r1
 8019a4a:	f7e7 f895 	bl	8000b78 <__aeabi_dcmpgt>
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f040 8296 	bne.w	8019f80 <_dtoa_r+0x990>
 8019a54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019a58:	4640      	mov	r0, r8
 8019a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a5e:	4649      	mov	r1, r9
 8019a60:	f7e7 f86c 	bl	8000b3c <__aeabi_dcmplt>
 8019a64:	2800      	cmp	r0, #0
 8019a66:	f040 8289 	bne.w	8019f7c <_dtoa_r+0x98c>
 8019a6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	f2c0 814e 	blt.w	8019d12 <_dtoa_r+0x722>
 8019a76:	f1bb 0f0e 	cmp.w	fp, #14
 8019a7a:	f300 814a 	bgt.w	8019d12 <_dtoa_r+0x722>
 8019a7e:	4b6b      	ldr	r3, [pc, #428]	; (8019c2c <_dtoa_r+0x63c>)
 8019a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	f280 80dc 	bge.w	8019c48 <_dtoa_r+0x658>
 8019a90:	9b04      	ldr	r3, [sp, #16]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	f300 80d8 	bgt.w	8019c48 <_dtoa_r+0x658>
 8019a98:	f040 826f 	bne.w	8019f7a <_dtoa_r+0x98a>
 8019a9c:	4b68      	ldr	r3, [pc, #416]	; (8019c40 <_dtoa_r+0x650>)
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	4640      	mov	r0, r8
 8019aa2:	4649      	mov	r1, r9
 8019aa4:	f7e6 fdd8 	bl	8000658 <__aeabi_dmul>
 8019aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019aac:	f7e7 f85a 	bl	8000b64 <__aeabi_dcmpge>
 8019ab0:	9e04      	ldr	r6, [sp, #16]
 8019ab2:	4637      	mov	r7, r6
 8019ab4:	2800      	cmp	r0, #0
 8019ab6:	f040 8245 	bne.w	8019f44 <_dtoa_r+0x954>
 8019aba:	9d00      	ldr	r5, [sp, #0]
 8019abc:	2331      	movs	r3, #49	; 0x31
 8019abe:	f805 3b01 	strb.w	r3, [r5], #1
 8019ac2:	f10b 0b01 	add.w	fp, fp, #1
 8019ac6:	e241      	b.n	8019f4c <_dtoa_r+0x95c>
 8019ac8:	07f2      	lsls	r2, r6, #31
 8019aca:	d505      	bpl.n	8019ad8 <_dtoa_r+0x4e8>
 8019acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019ad0:	f7e6 fdc2 	bl	8000658 <__aeabi_dmul>
 8019ad4:	3501      	adds	r5, #1
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	1076      	asrs	r6, r6, #1
 8019ada:	3708      	adds	r7, #8
 8019adc:	e773      	b.n	80199c6 <_dtoa_r+0x3d6>
 8019ade:	2502      	movs	r5, #2
 8019ae0:	e775      	b.n	80199ce <_dtoa_r+0x3de>
 8019ae2:	9e04      	ldr	r6, [sp, #16]
 8019ae4:	465f      	mov	r7, fp
 8019ae6:	e792      	b.n	8019a0e <_dtoa_r+0x41e>
 8019ae8:	9900      	ldr	r1, [sp, #0]
 8019aea:	4b50      	ldr	r3, [pc, #320]	; (8019c2c <_dtoa_r+0x63c>)
 8019aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019af0:	4431      	add	r1, r6
 8019af2:	9102      	str	r1, [sp, #8]
 8019af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019af6:	eeb0 9a47 	vmov.f32	s18, s14
 8019afa:	eef0 9a67 	vmov.f32	s19, s15
 8019afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019b06:	2900      	cmp	r1, #0
 8019b08:	d044      	beq.n	8019b94 <_dtoa_r+0x5a4>
 8019b0a:	494e      	ldr	r1, [pc, #312]	; (8019c44 <_dtoa_r+0x654>)
 8019b0c:	2000      	movs	r0, #0
 8019b0e:	f7e6 fecd 	bl	80008ac <__aeabi_ddiv>
 8019b12:	ec53 2b19 	vmov	r2, r3, d9
 8019b16:	f7e6 fbe7 	bl	80002e8 <__aeabi_dsub>
 8019b1a:	9d00      	ldr	r5, [sp, #0]
 8019b1c:	ec41 0b19 	vmov	d9, r0, r1
 8019b20:	4649      	mov	r1, r9
 8019b22:	4640      	mov	r0, r8
 8019b24:	f7e7 f848 	bl	8000bb8 <__aeabi_d2iz>
 8019b28:	4606      	mov	r6, r0
 8019b2a:	f7e6 fd2b 	bl	8000584 <__aeabi_i2d>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	460b      	mov	r3, r1
 8019b32:	4640      	mov	r0, r8
 8019b34:	4649      	mov	r1, r9
 8019b36:	f7e6 fbd7 	bl	80002e8 <__aeabi_dsub>
 8019b3a:	3630      	adds	r6, #48	; 0x30
 8019b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8019b40:	ec53 2b19 	vmov	r2, r3, d9
 8019b44:	4680      	mov	r8, r0
 8019b46:	4689      	mov	r9, r1
 8019b48:	f7e6 fff8 	bl	8000b3c <__aeabi_dcmplt>
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	d164      	bne.n	8019c1a <_dtoa_r+0x62a>
 8019b50:	4642      	mov	r2, r8
 8019b52:	464b      	mov	r3, r9
 8019b54:	4937      	ldr	r1, [pc, #220]	; (8019c34 <_dtoa_r+0x644>)
 8019b56:	2000      	movs	r0, #0
 8019b58:	f7e6 fbc6 	bl	80002e8 <__aeabi_dsub>
 8019b5c:	ec53 2b19 	vmov	r2, r3, d9
 8019b60:	f7e6 ffec 	bl	8000b3c <__aeabi_dcmplt>
 8019b64:	2800      	cmp	r0, #0
 8019b66:	f040 80b6 	bne.w	8019cd6 <_dtoa_r+0x6e6>
 8019b6a:	9b02      	ldr	r3, [sp, #8]
 8019b6c:	429d      	cmp	r5, r3
 8019b6e:	f43f af7c 	beq.w	8019a6a <_dtoa_r+0x47a>
 8019b72:	4b31      	ldr	r3, [pc, #196]	; (8019c38 <_dtoa_r+0x648>)
 8019b74:	ec51 0b19 	vmov	r0, r1, d9
 8019b78:	2200      	movs	r2, #0
 8019b7a:	f7e6 fd6d 	bl	8000658 <__aeabi_dmul>
 8019b7e:	4b2e      	ldr	r3, [pc, #184]	; (8019c38 <_dtoa_r+0x648>)
 8019b80:	ec41 0b19 	vmov	d9, r0, r1
 8019b84:	2200      	movs	r2, #0
 8019b86:	4640      	mov	r0, r8
 8019b88:	4649      	mov	r1, r9
 8019b8a:	f7e6 fd65 	bl	8000658 <__aeabi_dmul>
 8019b8e:	4680      	mov	r8, r0
 8019b90:	4689      	mov	r9, r1
 8019b92:	e7c5      	b.n	8019b20 <_dtoa_r+0x530>
 8019b94:	ec51 0b17 	vmov	r0, r1, d7
 8019b98:	f7e6 fd5e 	bl	8000658 <__aeabi_dmul>
 8019b9c:	9b02      	ldr	r3, [sp, #8]
 8019b9e:	9d00      	ldr	r5, [sp, #0]
 8019ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba2:	ec41 0b19 	vmov	d9, r0, r1
 8019ba6:	4649      	mov	r1, r9
 8019ba8:	4640      	mov	r0, r8
 8019baa:	f7e7 f805 	bl	8000bb8 <__aeabi_d2iz>
 8019bae:	4606      	mov	r6, r0
 8019bb0:	f7e6 fce8 	bl	8000584 <__aeabi_i2d>
 8019bb4:	3630      	adds	r6, #48	; 0x30
 8019bb6:	4602      	mov	r2, r0
 8019bb8:	460b      	mov	r3, r1
 8019bba:	4640      	mov	r0, r8
 8019bbc:	4649      	mov	r1, r9
 8019bbe:	f7e6 fb93 	bl	80002e8 <__aeabi_dsub>
 8019bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8019bc6:	9b02      	ldr	r3, [sp, #8]
 8019bc8:	429d      	cmp	r5, r3
 8019bca:	4680      	mov	r8, r0
 8019bcc:	4689      	mov	r9, r1
 8019bce:	f04f 0200 	mov.w	r2, #0
 8019bd2:	d124      	bne.n	8019c1e <_dtoa_r+0x62e>
 8019bd4:	4b1b      	ldr	r3, [pc, #108]	; (8019c44 <_dtoa_r+0x654>)
 8019bd6:	ec51 0b19 	vmov	r0, r1, d9
 8019bda:	f7e6 fb87 	bl	80002ec <__adddf3>
 8019bde:	4602      	mov	r2, r0
 8019be0:	460b      	mov	r3, r1
 8019be2:	4640      	mov	r0, r8
 8019be4:	4649      	mov	r1, r9
 8019be6:	f7e6 ffc7 	bl	8000b78 <__aeabi_dcmpgt>
 8019bea:	2800      	cmp	r0, #0
 8019bec:	d173      	bne.n	8019cd6 <_dtoa_r+0x6e6>
 8019bee:	ec53 2b19 	vmov	r2, r3, d9
 8019bf2:	4914      	ldr	r1, [pc, #80]	; (8019c44 <_dtoa_r+0x654>)
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	f7e6 fb77 	bl	80002e8 <__aeabi_dsub>
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	4640      	mov	r0, r8
 8019c00:	4649      	mov	r1, r9
 8019c02:	f7e6 ff9b 	bl	8000b3c <__aeabi_dcmplt>
 8019c06:	2800      	cmp	r0, #0
 8019c08:	f43f af2f 	beq.w	8019a6a <_dtoa_r+0x47a>
 8019c0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019c0e:	1e6b      	subs	r3, r5, #1
 8019c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019c16:	2b30      	cmp	r3, #48	; 0x30
 8019c18:	d0f8      	beq.n	8019c0c <_dtoa_r+0x61c>
 8019c1a:	46bb      	mov	fp, r7
 8019c1c:	e04a      	b.n	8019cb4 <_dtoa_r+0x6c4>
 8019c1e:	4b06      	ldr	r3, [pc, #24]	; (8019c38 <_dtoa_r+0x648>)
 8019c20:	f7e6 fd1a 	bl	8000658 <__aeabi_dmul>
 8019c24:	4680      	mov	r8, r0
 8019c26:	4689      	mov	r9, r1
 8019c28:	e7bd      	b.n	8019ba6 <_dtoa_r+0x5b6>
 8019c2a:	bf00      	nop
 8019c2c:	0801e0c0 	.word	0x0801e0c0
 8019c30:	0801e098 	.word	0x0801e098
 8019c34:	3ff00000 	.word	0x3ff00000
 8019c38:	40240000 	.word	0x40240000
 8019c3c:	401c0000 	.word	0x401c0000
 8019c40:	40140000 	.word	0x40140000
 8019c44:	3fe00000 	.word	0x3fe00000
 8019c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019c4c:	9d00      	ldr	r5, [sp, #0]
 8019c4e:	4642      	mov	r2, r8
 8019c50:	464b      	mov	r3, r9
 8019c52:	4630      	mov	r0, r6
 8019c54:	4639      	mov	r1, r7
 8019c56:	f7e6 fe29 	bl	80008ac <__aeabi_ddiv>
 8019c5a:	f7e6 ffad 	bl	8000bb8 <__aeabi_d2iz>
 8019c5e:	9001      	str	r0, [sp, #4]
 8019c60:	f7e6 fc90 	bl	8000584 <__aeabi_i2d>
 8019c64:	4642      	mov	r2, r8
 8019c66:	464b      	mov	r3, r9
 8019c68:	f7e6 fcf6 	bl	8000658 <__aeabi_dmul>
 8019c6c:	4602      	mov	r2, r0
 8019c6e:	460b      	mov	r3, r1
 8019c70:	4630      	mov	r0, r6
 8019c72:	4639      	mov	r1, r7
 8019c74:	f7e6 fb38 	bl	80002e8 <__aeabi_dsub>
 8019c78:	9e01      	ldr	r6, [sp, #4]
 8019c7a:	9f04      	ldr	r7, [sp, #16]
 8019c7c:	3630      	adds	r6, #48	; 0x30
 8019c7e:	f805 6b01 	strb.w	r6, [r5], #1
 8019c82:	9e00      	ldr	r6, [sp, #0]
 8019c84:	1bae      	subs	r6, r5, r6
 8019c86:	42b7      	cmp	r7, r6
 8019c88:	4602      	mov	r2, r0
 8019c8a:	460b      	mov	r3, r1
 8019c8c:	d134      	bne.n	8019cf8 <_dtoa_r+0x708>
 8019c8e:	f7e6 fb2d 	bl	80002ec <__adddf3>
 8019c92:	4642      	mov	r2, r8
 8019c94:	464b      	mov	r3, r9
 8019c96:	4606      	mov	r6, r0
 8019c98:	460f      	mov	r7, r1
 8019c9a:	f7e6 ff6d 	bl	8000b78 <__aeabi_dcmpgt>
 8019c9e:	b9c8      	cbnz	r0, 8019cd4 <_dtoa_r+0x6e4>
 8019ca0:	4642      	mov	r2, r8
 8019ca2:	464b      	mov	r3, r9
 8019ca4:	4630      	mov	r0, r6
 8019ca6:	4639      	mov	r1, r7
 8019ca8:	f7e6 ff3e 	bl	8000b28 <__aeabi_dcmpeq>
 8019cac:	b110      	cbz	r0, 8019cb4 <_dtoa_r+0x6c4>
 8019cae:	9b01      	ldr	r3, [sp, #4]
 8019cb0:	07db      	lsls	r3, r3, #31
 8019cb2:	d40f      	bmi.n	8019cd4 <_dtoa_r+0x6e4>
 8019cb4:	4651      	mov	r1, sl
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	f000 fb18 	bl	801a2ec <_Bfree>
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019cc0:	702b      	strb	r3, [r5, #0]
 8019cc2:	f10b 0301 	add.w	r3, fp, #1
 8019cc6:	6013      	str	r3, [r2, #0]
 8019cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	f43f ace2 	beq.w	8019694 <_dtoa_r+0xa4>
 8019cd0:	601d      	str	r5, [r3, #0]
 8019cd2:	e4df      	b.n	8019694 <_dtoa_r+0xa4>
 8019cd4:	465f      	mov	r7, fp
 8019cd6:	462b      	mov	r3, r5
 8019cd8:	461d      	mov	r5, r3
 8019cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019cde:	2a39      	cmp	r2, #57	; 0x39
 8019ce0:	d106      	bne.n	8019cf0 <_dtoa_r+0x700>
 8019ce2:	9a00      	ldr	r2, [sp, #0]
 8019ce4:	429a      	cmp	r2, r3
 8019ce6:	d1f7      	bne.n	8019cd8 <_dtoa_r+0x6e8>
 8019ce8:	9900      	ldr	r1, [sp, #0]
 8019cea:	2230      	movs	r2, #48	; 0x30
 8019cec:	3701      	adds	r7, #1
 8019cee:	700a      	strb	r2, [r1, #0]
 8019cf0:	781a      	ldrb	r2, [r3, #0]
 8019cf2:	3201      	adds	r2, #1
 8019cf4:	701a      	strb	r2, [r3, #0]
 8019cf6:	e790      	b.n	8019c1a <_dtoa_r+0x62a>
 8019cf8:	4ba3      	ldr	r3, [pc, #652]	; (8019f88 <_dtoa_r+0x998>)
 8019cfa:	2200      	movs	r2, #0
 8019cfc:	f7e6 fcac 	bl	8000658 <__aeabi_dmul>
 8019d00:	2200      	movs	r2, #0
 8019d02:	2300      	movs	r3, #0
 8019d04:	4606      	mov	r6, r0
 8019d06:	460f      	mov	r7, r1
 8019d08:	f7e6 ff0e 	bl	8000b28 <__aeabi_dcmpeq>
 8019d0c:	2800      	cmp	r0, #0
 8019d0e:	d09e      	beq.n	8019c4e <_dtoa_r+0x65e>
 8019d10:	e7d0      	b.n	8019cb4 <_dtoa_r+0x6c4>
 8019d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d14:	2a00      	cmp	r2, #0
 8019d16:	f000 80ca 	beq.w	8019eae <_dtoa_r+0x8be>
 8019d1a:	9a07      	ldr	r2, [sp, #28]
 8019d1c:	2a01      	cmp	r2, #1
 8019d1e:	f300 80ad 	bgt.w	8019e7c <_dtoa_r+0x88c>
 8019d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d24:	2a00      	cmp	r2, #0
 8019d26:	f000 80a5 	beq.w	8019e74 <_dtoa_r+0x884>
 8019d2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019d2e:	9e08      	ldr	r6, [sp, #32]
 8019d30:	9d05      	ldr	r5, [sp, #20]
 8019d32:	9a05      	ldr	r2, [sp, #20]
 8019d34:	441a      	add	r2, r3
 8019d36:	9205      	str	r2, [sp, #20]
 8019d38:	9a06      	ldr	r2, [sp, #24]
 8019d3a:	2101      	movs	r1, #1
 8019d3c:	441a      	add	r2, r3
 8019d3e:	4620      	mov	r0, r4
 8019d40:	9206      	str	r2, [sp, #24]
 8019d42:	f000 fbd3 	bl	801a4ec <__i2b>
 8019d46:	4607      	mov	r7, r0
 8019d48:	b165      	cbz	r5, 8019d64 <_dtoa_r+0x774>
 8019d4a:	9b06      	ldr	r3, [sp, #24]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	dd09      	ble.n	8019d64 <_dtoa_r+0x774>
 8019d50:	42ab      	cmp	r3, r5
 8019d52:	9a05      	ldr	r2, [sp, #20]
 8019d54:	bfa8      	it	ge
 8019d56:	462b      	movge	r3, r5
 8019d58:	1ad2      	subs	r2, r2, r3
 8019d5a:	9205      	str	r2, [sp, #20]
 8019d5c:	9a06      	ldr	r2, [sp, #24]
 8019d5e:	1aed      	subs	r5, r5, r3
 8019d60:	1ad3      	subs	r3, r2, r3
 8019d62:	9306      	str	r3, [sp, #24]
 8019d64:	9b08      	ldr	r3, [sp, #32]
 8019d66:	b1f3      	cbz	r3, 8019da6 <_dtoa_r+0x7b6>
 8019d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	f000 80a3 	beq.w	8019eb6 <_dtoa_r+0x8c6>
 8019d70:	2e00      	cmp	r6, #0
 8019d72:	dd10      	ble.n	8019d96 <_dtoa_r+0x7a6>
 8019d74:	4639      	mov	r1, r7
 8019d76:	4632      	mov	r2, r6
 8019d78:	4620      	mov	r0, r4
 8019d7a:	f000 fc77 	bl	801a66c <__pow5mult>
 8019d7e:	4652      	mov	r2, sl
 8019d80:	4601      	mov	r1, r0
 8019d82:	4607      	mov	r7, r0
 8019d84:	4620      	mov	r0, r4
 8019d86:	f000 fbc7 	bl	801a518 <__multiply>
 8019d8a:	4651      	mov	r1, sl
 8019d8c:	4680      	mov	r8, r0
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f000 faac 	bl	801a2ec <_Bfree>
 8019d94:	46c2      	mov	sl, r8
 8019d96:	9b08      	ldr	r3, [sp, #32]
 8019d98:	1b9a      	subs	r2, r3, r6
 8019d9a:	d004      	beq.n	8019da6 <_dtoa_r+0x7b6>
 8019d9c:	4651      	mov	r1, sl
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f000 fc64 	bl	801a66c <__pow5mult>
 8019da4:	4682      	mov	sl, r0
 8019da6:	2101      	movs	r1, #1
 8019da8:	4620      	mov	r0, r4
 8019daa:	f000 fb9f 	bl	801a4ec <__i2b>
 8019dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	4606      	mov	r6, r0
 8019db4:	f340 8081 	ble.w	8019eba <_dtoa_r+0x8ca>
 8019db8:	461a      	mov	r2, r3
 8019dba:	4601      	mov	r1, r0
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	f000 fc55 	bl	801a66c <__pow5mult>
 8019dc2:	9b07      	ldr	r3, [sp, #28]
 8019dc4:	2b01      	cmp	r3, #1
 8019dc6:	4606      	mov	r6, r0
 8019dc8:	dd7a      	ble.n	8019ec0 <_dtoa_r+0x8d0>
 8019dca:	f04f 0800 	mov.w	r8, #0
 8019dce:	6933      	ldr	r3, [r6, #16]
 8019dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019dd4:	6918      	ldr	r0, [r3, #16]
 8019dd6:	f000 fb3b 	bl	801a450 <__hi0bits>
 8019dda:	f1c0 0020 	rsb	r0, r0, #32
 8019dde:	9b06      	ldr	r3, [sp, #24]
 8019de0:	4418      	add	r0, r3
 8019de2:	f010 001f 	ands.w	r0, r0, #31
 8019de6:	f000 8094 	beq.w	8019f12 <_dtoa_r+0x922>
 8019dea:	f1c0 0320 	rsb	r3, r0, #32
 8019dee:	2b04      	cmp	r3, #4
 8019df0:	f340 8085 	ble.w	8019efe <_dtoa_r+0x90e>
 8019df4:	9b05      	ldr	r3, [sp, #20]
 8019df6:	f1c0 001c 	rsb	r0, r0, #28
 8019dfa:	4403      	add	r3, r0
 8019dfc:	9305      	str	r3, [sp, #20]
 8019dfe:	9b06      	ldr	r3, [sp, #24]
 8019e00:	4403      	add	r3, r0
 8019e02:	4405      	add	r5, r0
 8019e04:	9306      	str	r3, [sp, #24]
 8019e06:	9b05      	ldr	r3, [sp, #20]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	dd05      	ble.n	8019e18 <_dtoa_r+0x828>
 8019e0c:	4651      	mov	r1, sl
 8019e0e:	461a      	mov	r2, r3
 8019e10:	4620      	mov	r0, r4
 8019e12:	f000 fc85 	bl	801a720 <__lshift>
 8019e16:	4682      	mov	sl, r0
 8019e18:	9b06      	ldr	r3, [sp, #24]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	dd05      	ble.n	8019e2a <_dtoa_r+0x83a>
 8019e1e:	4631      	mov	r1, r6
 8019e20:	461a      	mov	r2, r3
 8019e22:	4620      	mov	r0, r4
 8019e24:	f000 fc7c 	bl	801a720 <__lshift>
 8019e28:	4606      	mov	r6, r0
 8019e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d072      	beq.n	8019f16 <_dtoa_r+0x926>
 8019e30:	4631      	mov	r1, r6
 8019e32:	4650      	mov	r0, sl
 8019e34:	f000 fce0 	bl	801a7f8 <__mcmp>
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	da6c      	bge.n	8019f16 <_dtoa_r+0x926>
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	4651      	mov	r1, sl
 8019e40:	220a      	movs	r2, #10
 8019e42:	4620      	mov	r0, r4
 8019e44:	f000 fa74 	bl	801a330 <__multadd>
 8019e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019e4e:	4682      	mov	sl, r0
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	f000 81b0 	beq.w	801a1b6 <_dtoa_r+0xbc6>
 8019e56:	2300      	movs	r3, #0
 8019e58:	4639      	mov	r1, r7
 8019e5a:	220a      	movs	r2, #10
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f000 fa67 	bl	801a330 <__multadd>
 8019e62:	9b01      	ldr	r3, [sp, #4]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	4607      	mov	r7, r0
 8019e68:	f300 8096 	bgt.w	8019f98 <_dtoa_r+0x9a8>
 8019e6c:	9b07      	ldr	r3, [sp, #28]
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	dc59      	bgt.n	8019f26 <_dtoa_r+0x936>
 8019e72:	e091      	b.n	8019f98 <_dtoa_r+0x9a8>
 8019e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019e7a:	e758      	b.n	8019d2e <_dtoa_r+0x73e>
 8019e7c:	9b04      	ldr	r3, [sp, #16]
 8019e7e:	1e5e      	subs	r6, r3, #1
 8019e80:	9b08      	ldr	r3, [sp, #32]
 8019e82:	42b3      	cmp	r3, r6
 8019e84:	bfbf      	itttt	lt
 8019e86:	9b08      	ldrlt	r3, [sp, #32]
 8019e88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8019e8a:	9608      	strlt	r6, [sp, #32]
 8019e8c:	1af3      	sublt	r3, r6, r3
 8019e8e:	bfb4      	ite	lt
 8019e90:	18d2      	addlt	r2, r2, r3
 8019e92:	1b9e      	subge	r6, r3, r6
 8019e94:	9b04      	ldr	r3, [sp, #16]
 8019e96:	bfbc      	itt	lt
 8019e98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8019e9a:	2600      	movlt	r6, #0
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	bfb7      	itett	lt
 8019ea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8019ea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8019ea8:	1a9d      	sublt	r5, r3, r2
 8019eaa:	2300      	movlt	r3, #0
 8019eac:	e741      	b.n	8019d32 <_dtoa_r+0x742>
 8019eae:	9e08      	ldr	r6, [sp, #32]
 8019eb0:	9d05      	ldr	r5, [sp, #20]
 8019eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019eb4:	e748      	b.n	8019d48 <_dtoa_r+0x758>
 8019eb6:	9a08      	ldr	r2, [sp, #32]
 8019eb8:	e770      	b.n	8019d9c <_dtoa_r+0x7ac>
 8019eba:	9b07      	ldr	r3, [sp, #28]
 8019ebc:	2b01      	cmp	r3, #1
 8019ebe:	dc19      	bgt.n	8019ef4 <_dtoa_r+0x904>
 8019ec0:	9b02      	ldr	r3, [sp, #8]
 8019ec2:	b9bb      	cbnz	r3, 8019ef4 <_dtoa_r+0x904>
 8019ec4:	9b03      	ldr	r3, [sp, #12]
 8019ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019eca:	b99b      	cbnz	r3, 8019ef4 <_dtoa_r+0x904>
 8019ecc:	9b03      	ldr	r3, [sp, #12]
 8019ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ed2:	0d1b      	lsrs	r3, r3, #20
 8019ed4:	051b      	lsls	r3, r3, #20
 8019ed6:	b183      	cbz	r3, 8019efa <_dtoa_r+0x90a>
 8019ed8:	9b05      	ldr	r3, [sp, #20]
 8019eda:	3301      	adds	r3, #1
 8019edc:	9305      	str	r3, [sp, #20]
 8019ede:	9b06      	ldr	r3, [sp, #24]
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	9306      	str	r3, [sp, #24]
 8019ee4:	f04f 0801 	mov.w	r8, #1
 8019ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f47f af6f 	bne.w	8019dce <_dtoa_r+0x7de>
 8019ef0:	2001      	movs	r0, #1
 8019ef2:	e774      	b.n	8019dde <_dtoa_r+0x7ee>
 8019ef4:	f04f 0800 	mov.w	r8, #0
 8019ef8:	e7f6      	b.n	8019ee8 <_dtoa_r+0x8f8>
 8019efa:	4698      	mov	r8, r3
 8019efc:	e7f4      	b.n	8019ee8 <_dtoa_r+0x8f8>
 8019efe:	d082      	beq.n	8019e06 <_dtoa_r+0x816>
 8019f00:	9a05      	ldr	r2, [sp, #20]
 8019f02:	331c      	adds	r3, #28
 8019f04:	441a      	add	r2, r3
 8019f06:	9205      	str	r2, [sp, #20]
 8019f08:	9a06      	ldr	r2, [sp, #24]
 8019f0a:	441a      	add	r2, r3
 8019f0c:	441d      	add	r5, r3
 8019f0e:	9206      	str	r2, [sp, #24]
 8019f10:	e779      	b.n	8019e06 <_dtoa_r+0x816>
 8019f12:	4603      	mov	r3, r0
 8019f14:	e7f4      	b.n	8019f00 <_dtoa_r+0x910>
 8019f16:	9b04      	ldr	r3, [sp, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	dc37      	bgt.n	8019f8c <_dtoa_r+0x99c>
 8019f1c:	9b07      	ldr	r3, [sp, #28]
 8019f1e:	2b02      	cmp	r3, #2
 8019f20:	dd34      	ble.n	8019f8c <_dtoa_r+0x99c>
 8019f22:	9b04      	ldr	r3, [sp, #16]
 8019f24:	9301      	str	r3, [sp, #4]
 8019f26:	9b01      	ldr	r3, [sp, #4]
 8019f28:	b963      	cbnz	r3, 8019f44 <_dtoa_r+0x954>
 8019f2a:	4631      	mov	r1, r6
 8019f2c:	2205      	movs	r2, #5
 8019f2e:	4620      	mov	r0, r4
 8019f30:	f000 f9fe 	bl	801a330 <__multadd>
 8019f34:	4601      	mov	r1, r0
 8019f36:	4606      	mov	r6, r0
 8019f38:	4650      	mov	r0, sl
 8019f3a:	f000 fc5d 	bl	801a7f8 <__mcmp>
 8019f3e:	2800      	cmp	r0, #0
 8019f40:	f73f adbb 	bgt.w	8019aba <_dtoa_r+0x4ca>
 8019f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f46:	9d00      	ldr	r5, [sp, #0]
 8019f48:	ea6f 0b03 	mvn.w	fp, r3
 8019f4c:	f04f 0800 	mov.w	r8, #0
 8019f50:	4631      	mov	r1, r6
 8019f52:	4620      	mov	r0, r4
 8019f54:	f000 f9ca 	bl	801a2ec <_Bfree>
 8019f58:	2f00      	cmp	r7, #0
 8019f5a:	f43f aeab 	beq.w	8019cb4 <_dtoa_r+0x6c4>
 8019f5e:	f1b8 0f00 	cmp.w	r8, #0
 8019f62:	d005      	beq.n	8019f70 <_dtoa_r+0x980>
 8019f64:	45b8      	cmp	r8, r7
 8019f66:	d003      	beq.n	8019f70 <_dtoa_r+0x980>
 8019f68:	4641      	mov	r1, r8
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	f000 f9be 	bl	801a2ec <_Bfree>
 8019f70:	4639      	mov	r1, r7
 8019f72:	4620      	mov	r0, r4
 8019f74:	f000 f9ba 	bl	801a2ec <_Bfree>
 8019f78:	e69c      	b.n	8019cb4 <_dtoa_r+0x6c4>
 8019f7a:	2600      	movs	r6, #0
 8019f7c:	4637      	mov	r7, r6
 8019f7e:	e7e1      	b.n	8019f44 <_dtoa_r+0x954>
 8019f80:	46bb      	mov	fp, r7
 8019f82:	4637      	mov	r7, r6
 8019f84:	e599      	b.n	8019aba <_dtoa_r+0x4ca>
 8019f86:	bf00      	nop
 8019f88:	40240000 	.word	0x40240000
 8019f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	f000 80c8 	beq.w	801a124 <_dtoa_r+0xb34>
 8019f94:	9b04      	ldr	r3, [sp, #16]
 8019f96:	9301      	str	r3, [sp, #4]
 8019f98:	2d00      	cmp	r5, #0
 8019f9a:	dd05      	ble.n	8019fa8 <_dtoa_r+0x9b8>
 8019f9c:	4639      	mov	r1, r7
 8019f9e:	462a      	mov	r2, r5
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f000 fbbd 	bl	801a720 <__lshift>
 8019fa6:	4607      	mov	r7, r0
 8019fa8:	f1b8 0f00 	cmp.w	r8, #0
 8019fac:	d05b      	beq.n	801a066 <_dtoa_r+0xa76>
 8019fae:	6879      	ldr	r1, [r7, #4]
 8019fb0:	4620      	mov	r0, r4
 8019fb2:	f000 f95b 	bl	801a26c <_Balloc>
 8019fb6:	4605      	mov	r5, r0
 8019fb8:	b928      	cbnz	r0, 8019fc6 <_dtoa_r+0x9d6>
 8019fba:	4b83      	ldr	r3, [pc, #524]	; (801a1c8 <_dtoa_r+0xbd8>)
 8019fbc:	4602      	mov	r2, r0
 8019fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019fc2:	f7ff bb2e 	b.w	8019622 <_dtoa_r+0x32>
 8019fc6:	693a      	ldr	r2, [r7, #16]
 8019fc8:	3202      	adds	r2, #2
 8019fca:	0092      	lsls	r2, r2, #2
 8019fcc:	f107 010c 	add.w	r1, r7, #12
 8019fd0:	300c      	adds	r0, #12
 8019fd2:	f7ff fa71 	bl	80194b8 <memcpy>
 8019fd6:	2201      	movs	r2, #1
 8019fd8:	4629      	mov	r1, r5
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f000 fba0 	bl	801a720 <__lshift>
 8019fe0:	9b00      	ldr	r3, [sp, #0]
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	9304      	str	r3, [sp, #16]
 8019fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019fea:	4413      	add	r3, r2
 8019fec:	9308      	str	r3, [sp, #32]
 8019fee:	9b02      	ldr	r3, [sp, #8]
 8019ff0:	f003 0301 	and.w	r3, r3, #1
 8019ff4:	46b8      	mov	r8, r7
 8019ff6:	9306      	str	r3, [sp, #24]
 8019ff8:	4607      	mov	r7, r0
 8019ffa:	9b04      	ldr	r3, [sp, #16]
 8019ffc:	4631      	mov	r1, r6
 8019ffe:	3b01      	subs	r3, #1
 801a000:	4650      	mov	r0, sl
 801a002:	9301      	str	r3, [sp, #4]
 801a004:	f7ff fa6c 	bl	80194e0 <quorem>
 801a008:	4641      	mov	r1, r8
 801a00a:	9002      	str	r0, [sp, #8]
 801a00c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801a010:	4650      	mov	r0, sl
 801a012:	f000 fbf1 	bl	801a7f8 <__mcmp>
 801a016:	463a      	mov	r2, r7
 801a018:	9005      	str	r0, [sp, #20]
 801a01a:	4631      	mov	r1, r6
 801a01c:	4620      	mov	r0, r4
 801a01e:	f000 fc07 	bl	801a830 <__mdiff>
 801a022:	68c2      	ldr	r2, [r0, #12]
 801a024:	4605      	mov	r5, r0
 801a026:	bb02      	cbnz	r2, 801a06a <_dtoa_r+0xa7a>
 801a028:	4601      	mov	r1, r0
 801a02a:	4650      	mov	r0, sl
 801a02c:	f000 fbe4 	bl	801a7f8 <__mcmp>
 801a030:	4602      	mov	r2, r0
 801a032:	4629      	mov	r1, r5
 801a034:	4620      	mov	r0, r4
 801a036:	9209      	str	r2, [sp, #36]	; 0x24
 801a038:	f000 f958 	bl	801a2ec <_Bfree>
 801a03c:	9b07      	ldr	r3, [sp, #28]
 801a03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a040:	9d04      	ldr	r5, [sp, #16]
 801a042:	ea43 0102 	orr.w	r1, r3, r2
 801a046:	9b06      	ldr	r3, [sp, #24]
 801a048:	4319      	orrs	r1, r3
 801a04a:	d110      	bne.n	801a06e <_dtoa_r+0xa7e>
 801a04c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801a050:	d029      	beq.n	801a0a6 <_dtoa_r+0xab6>
 801a052:	9b05      	ldr	r3, [sp, #20]
 801a054:	2b00      	cmp	r3, #0
 801a056:	dd02      	ble.n	801a05e <_dtoa_r+0xa6e>
 801a058:	9b02      	ldr	r3, [sp, #8]
 801a05a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801a05e:	9b01      	ldr	r3, [sp, #4]
 801a060:	f883 9000 	strb.w	r9, [r3]
 801a064:	e774      	b.n	8019f50 <_dtoa_r+0x960>
 801a066:	4638      	mov	r0, r7
 801a068:	e7ba      	b.n	8019fe0 <_dtoa_r+0x9f0>
 801a06a:	2201      	movs	r2, #1
 801a06c:	e7e1      	b.n	801a032 <_dtoa_r+0xa42>
 801a06e:	9b05      	ldr	r3, [sp, #20]
 801a070:	2b00      	cmp	r3, #0
 801a072:	db04      	blt.n	801a07e <_dtoa_r+0xa8e>
 801a074:	9907      	ldr	r1, [sp, #28]
 801a076:	430b      	orrs	r3, r1
 801a078:	9906      	ldr	r1, [sp, #24]
 801a07a:	430b      	orrs	r3, r1
 801a07c:	d120      	bne.n	801a0c0 <_dtoa_r+0xad0>
 801a07e:	2a00      	cmp	r2, #0
 801a080:	dded      	ble.n	801a05e <_dtoa_r+0xa6e>
 801a082:	4651      	mov	r1, sl
 801a084:	2201      	movs	r2, #1
 801a086:	4620      	mov	r0, r4
 801a088:	f000 fb4a 	bl	801a720 <__lshift>
 801a08c:	4631      	mov	r1, r6
 801a08e:	4682      	mov	sl, r0
 801a090:	f000 fbb2 	bl	801a7f8 <__mcmp>
 801a094:	2800      	cmp	r0, #0
 801a096:	dc03      	bgt.n	801a0a0 <_dtoa_r+0xab0>
 801a098:	d1e1      	bne.n	801a05e <_dtoa_r+0xa6e>
 801a09a:	f019 0f01 	tst.w	r9, #1
 801a09e:	d0de      	beq.n	801a05e <_dtoa_r+0xa6e>
 801a0a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801a0a4:	d1d8      	bne.n	801a058 <_dtoa_r+0xa68>
 801a0a6:	9a01      	ldr	r2, [sp, #4]
 801a0a8:	2339      	movs	r3, #57	; 0x39
 801a0aa:	7013      	strb	r3, [r2, #0]
 801a0ac:	462b      	mov	r3, r5
 801a0ae:	461d      	mov	r5, r3
 801a0b0:	3b01      	subs	r3, #1
 801a0b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a0b6:	2a39      	cmp	r2, #57	; 0x39
 801a0b8:	d06c      	beq.n	801a194 <_dtoa_r+0xba4>
 801a0ba:	3201      	adds	r2, #1
 801a0bc:	701a      	strb	r2, [r3, #0]
 801a0be:	e747      	b.n	8019f50 <_dtoa_r+0x960>
 801a0c0:	2a00      	cmp	r2, #0
 801a0c2:	dd07      	ble.n	801a0d4 <_dtoa_r+0xae4>
 801a0c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801a0c8:	d0ed      	beq.n	801a0a6 <_dtoa_r+0xab6>
 801a0ca:	9a01      	ldr	r2, [sp, #4]
 801a0cc:	f109 0301 	add.w	r3, r9, #1
 801a0d0:	7013      	strb	r3, [r2, #0]
 801a0d2:	e73d      	b.n	8019f50 <_dtoa_r+0x960>
 801a0d4:	9b04      	ldr	r3, [sp, #16]
 801a0d6:	9a08      	ldr	r2, [sp, #32]
 801a0d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	d043      	beq.n	801a168 <_dtoa_r+0xb78>
 801a0e0:	4651      	mov	r1, sl
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	220a      	movs	r2, #10
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f000 f922 	bl	801a330 <__multadd>
 801a0ec:	45b8      	cmp	r8, r7
 801a0ee:	4682      	mov	sl, r0
 801a0f0:	f04f 0300 	mov.w	r3, #0
 801a0f4:	f04f 020a 	mov.w	r2, #10
 801a0f8:	4641      	mov	r1, r8
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	d107      	bne.n	801a10e <_dtoa_r+0xb1e>
 801a0fe:	f000 f917 	bl	801a330 <__multadd>
 801a102:	4680      	mov	r8, r0
 801a104:	4607      	mov	r7, r0
 801a106:	9b04      	ldr	r3, [sp, #16]
 801a108:	3301      	adds	r3, #1
 801a10a:	9304      	str	r3, [sp, #16]
 801a10c:	e775      	b.n	8019ffa <_dtoa_r+0xa0a>
 801a10e:	f000 f90f 	bl	801a330 <__multadd>
 801a112:	4639      	mov	r1, r7
 801a114:	4680      	mov	r8, r0
 801a116:	2300      	movs	r3, #0
 801a118:	220a      	movs	r2, #10
 801a11a:	4620      	mov	r0, r4
 801a11c:	f000 f908 	bl	801a330 <__multadd>
 801a120:	4607      	mov	r7, r0
 801a122:	e7f0      	b.n	801a106 <_dtoa_r+0xb16>
 801a124:	9b04      	ldr	r3, [sp, #16]
 801a126:	9301      	str	r3, [sp, #4]
 801a128:	9d00      	ldr	r5, [sp, #0]
 801a12a:	4631      	mov	r1, r6
 801a12c:	4650      	mov	r0, sl
 801a12e:	f7ff f9d7 	bl	80194e0 <quorem>
 801a132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801a136:	9b00      	ldr	r3, [sp, #0]
 801a138:	f805 9b01 	strb.w	r9, [r5], #1
 801a13c:	1aea      	subs	r2, r5, r3
 801a13e:	9b01      	ldr	r3, [sp, #4]
 801a140:	4293      	cmp	r3, r2
 801a142:	dd07      	ble.n	801a154 <_dtoa_r+0xb64>
 801a144:	4651      	mov	r1, sl
 801a146:	2300      	movs	r3, #0
 801a148:	220a      	movs	r2, #10
 801a14a:	4620      	mov	r0, r4
 801a14c:	f000 f8f0 	bl	801a330 <__multadd>
 801a150:	4682      	mov	sl, r0
 801a152:	e7ea      	b.n	801a12a <_dtoa_r+0xb3a>
 801a154:	9b01      	ldr	r3, [sp, #4]
 801a156:	2b00      	cmp	r3, #0
 801a158:	bfc8      	it	gt
 801a15a:	461d      	movgt	r5, r3
 801a15c:	9b00      	ldr	r3, [sp, #0]
 801a15e:	bfd8      	it	le
 801a160:	2501      	movle	r5, #1
 801a162:	441d      	add	r5, r3
 801a164:	f04f 0800 	mov.w	r8, #0
 801a168:	4651      	mov	r1, sl
 801a16a:	2201      	movs	r2, #1
 801a16c:	4620      	mov	r0, r4
 801a16e:	f000 fad7 	bl	801a720 <__lshift>
 801a172:	4631      	mov	r1, r6
 801a174:	4682      	mov	sl, r0
 801a176:	f000 fb3f 	bl	801a7f8 <__mcmp>
 801a17a:	2800      	cmp	r0, #0
 801a17c:	dc96      	bgt.n	801a0ac <_dtoa_r+0xabc>
 801a17e:	d102      	bne.n	801a186 <_dtoa_r+0xb96>
 801a180:	f019 0f01 	tst.w	r9, #1
 801a184:	d192      	bne.n	801a0ac <_dtoa_r+0xabc>
 801a186:	462b      	mov	r3, r5
 801a188:	461d      	mov	r5, r3
 801a18a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a18e:	2a30      	cmp	r2, #48	; 0x30
 801a190:	d0fa      	beq.n	801a188 <_dtoa_r+0xb98>
 801a192:	e6dd      	b.n	8019f50 <_dtoa_r+0x960>
 801a194:	9a00      	ldr	r2, [sp, #0]
 801a196:	429a      	cmp	r2, r3
 801a198:	d189      	bne.n	801a0ae <_dtoa_r+0xabe>
 801a19a:	f10b 0b01 	add.w	fp, fp, #1
 801a19e:	2331      	movs	r3, #49	; 0x31
 801a1a0:	e796      	b.n	801a0d0 <_dtoa_r+0xae0>
 801a1a2:	4b0a      	ldr	r3, [pc, #40]	; (801a1cc <_dtoa_r+0xbdc>)
 801a1a4:	f7ff ba99 	b.w	80196da <_dtoa_r+0xea>
 801a1a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	f47f aa6d 	bne.w	801968a <_dtoa_r+0x9a>
 801a1b0:	4b07      	ldr	r3, [pc, #28]	; (801a1d0 <_dtoa_r+0xbe0>)
 801a1b2:	f7ff ba92 	b.w	80196da <_dtoa_r+0xea>
 801a1b6:	9b01      	ldr	r3, [sp, #4]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	dcb5      	bgt.n	801a128 <_dtoa_r+0xb38>
 801a1bc:	9b07      	ldr	r3, [sp, #28]
 801a1be:	2b02      	cmp	r3, #2
 801a1c0:	f73f aeb1 	bgt.w	8019f26 <_dtoa_r+0x936>
 801a1c4:	e7b0      	b.n	801a128 <_dtoa_r+0xb38>
 801a1c6:	bf00      	nop
 801a1c8:	0801e02b 	.word	0x0801e02b
 801a1cc:	0801e310 	.word	0x0801e310
 801a1d0:	0801dfaf 	.word	0x0801dfaf

0801a1d4 <_free_r>:
 801a1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1d6:	2900      	cmp	r1, #0
 801a1d8:	d044      	beq.n	801a264 <_free_r+0x90>
 801a1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1de:	9001      	str	r0, [sp, #4]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	f1a1 0404 	sub.w	r4, r1, #4
 801a1e6:	bfb8      	it	lt
 801a1e8:	18e4      	addlt	r4, r4, r3
 801a1ea:	f7fd ffab 	bl	8018144 <__malloc_lock>
 801a1ee:	4a1e      	ldr	r2, [pc, #120]	; (801a268 <_free_r+0x94>)
 801a1f0:	9801      	ldr	r0, [sp, #4]
 801a1f2:	6813      	ldr	r3, [r2, #0]
 801a1f4:	b933      	cbnz	r3, 801a204 <_free_r+0x30>
 801a1f6:	6063      	str	r3, [r4, #4]
 801a1f8:	6014      	str	r4, [r2, #0]
 801a1fa:	b003      	add	sp, #12
 801a1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a200:	f7fd bfa6 	b.w	8018150 <__malloc_unlock>
 801a204:	42a3      	cmp	r3, r4
 801a206:	d908      	bls.n	801a21a <_free_r+0x46>
 801a208:	6825      	ldr	r5, [r4, #0]
 801a20a:	1961      	adds	r1, r4, r5
 801a20c:	428b      	cmp	r3, r1
 801a20e:	bf01      	itttt	eq
 801a210:	6819      	ldreq	r1, [r3, #0]
 801a212:	685b      	ldreq	r3, [r3, #4]
 801a214:	1949      	addeq	r1, r1, r5
 801a216:	6021      	streq	r1, [r4, #0]
 801a218:	e7ed      	b.n	801a1f6 <_free_r+0x22>
 801a21a:	461a      	mov	r2, r3
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	b10b      	cbz	r3, 801a224 <_free_r+0x50>
 801a220:	42a3      	cmp	r3, r4
 801a222:	d9fa      	bls.n	801a21a <_free_r+0x46>
 801a224:	6811      	ldr	r1, [r2, #0]
 801a226:	1855      	adds	r5, r2, r1
 801a228:	42a5      	cmp	r5, r4
 801a22a:	d10b      	bne.n	801a244 <_free_r+0x70>
 801a22c:	6824      	ldr	r4, [r4, #0]
 801a22e:	4421      	add	r1, r4
 801a230:	1854      	adds	r4, r2, r1
 801a232:	42a3      	cmp	r3, r4
 801a234:	6011      	str	r1, [r2, #0]
 801a236:	d1e0      	bne.n	801a1fa <_free_r+0x26>
 801a238:	681c      	ldr	r4, [r3, #0]
 801a23a:	685b      	ldr	r3, [r3, #4]
 801a23c:	6053      	str	r3, [r2, #4]
 801a23e:	440c      	add	r4, r1
 801a240:	6014      	str	r4, [r2, #0]
 801a242:	e7da      	b.n	801a1fa <_free_r+0x26>
 801a244:	d902      	bls.n	801a24c <_free_r+0x78>
 801a246:	230c      	movs	r3, #12
 801a248:	6003      	str	r3, [r0, #0]
 801a24a:	e7d6      	b.n	801a1fa <_free_r+0x26>
 801a24c:	6825      	ldr	r5, [r4, #0]
 801a24e:	1961      	adds	r1, r4, r5
 801a250:	428b      	cmp	r3, r1
 801a252:	bf04      	itt	eq
 801a254:	6819      	ldreq	r1, [r3, #0]
 801a256:	685b      	ldreq	r3, [r3, #4]
 801a258:	6063      	str	r3, [r4, #4]
 801a25a:	bf04      	itt	eq
 801a25c:	1949      	addeq	r1, r1, r5
 801a25e:	6021      	streq	r1, [r4, #0]
 801a260:	6054      	str	r4, [r2, #4]
 801a262:	e7ca      	b.n	801a1fa <_free_r+0x26>
 801a264:	b003      	add	sp, #12
 801a266:	bd30      	pop	{r4, r5, pc}
 801a268:	20007c48 	.word	0x20007c48

0801a26c <_Balloc>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	69c6      	ldr	r6, [r0, #28]
 801a270:	4604      	mov	r4, r0
 801a272:	460d      	mov	r5, r1
 801a274:	b976      	cbnz	r6, 801a294 <_Balloc+0x28>
 801a276:	2010      	movs	r0, #16
 801a278:	f7fd feb4 	bl	8017fe4 <malloc>
 801a27c:	4602      	mov	r2, r0
 801a27e:	61e0      	str	r0, [r4, #28]
 801a280:	b920      	cbnz	r0, 801a28c <_Balloc+0x20>
 801a282:	4b18      	ldr	r3, [pc, #96]	; (801a2e4 <_Balloc+0x78>)
 801a284:	4818      	ldr	r0, [pc, #96]	; (801a2e8 <_Balloc+0x7c>)
 801a286:	216b      	movs	r1, #107	; 0x6b
 801a288:	f002 faca 	bl	801c820 <__assert_func>
 801a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a290:	6006      	str	r6, [r0, #0]
 801a292:	60c6      	str	r6, [r0, #12]
 801a294:	69e6      	ldr	r6, [r4, #28]
 801a296:	68f3      	ldr	r3, [r6, #12]
 801a298:	b183      	cbz	r3, 801a2bc <_Balloc+0x50>
 801a29a:	69e3      	ldr	r3, [r4, #28]
 801a29c:	68db      	ldr	r3, [r3, #12]
 801a29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a2a2:	b9b8      	cbnz	r0, 801a2d4 <_Balloc+0x68>
 801a2a4:	2101      	movs	r1, #1
 801a2a6:	fa01 f605 	lsl.w	r6, r1, r5
 801a2aa:	1d72      	adds	r2, r6, #5
 801a2ac:	0092      	lsls	r2, r2, #2
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	f7fd fe82 	bl	8017fb8 <_calloc_r>
 801a2b4:	b160      	cbz	r0, 801a2d0 <_Balloc+0x64>
 801a2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a2ba:	e00e      	b.n	801a2da <_Balloc+0x6e>
 801a2bc:	2221      	movs	r2, #33	; 0x21
 801a2be:	2104      	movs	r1, #4
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f7fd fe79 	bl	8017fb8 <_calloc_r>
 801a2c6:	69e3      	ldr	r3, [r4, #28]
 801a2c8:	60f0      	str	r0, [r6, #12]
 801a2ca:	68db      	ldr	r3, [r3, #12]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d1e4      	bne.n	801a29a <_Balloc+0x2e>
 801a2d0:	2000      	movs	r0, #0
 801a2d2:	bd70      	pop	{r4, r5, r6, pc}
 801a2d4:	6802      	ldr	r2, [r0, #0]
 801a2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a2da:	2300      	movs	r3, #0
 801a2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a2e0:	e7f7      	b.n	801a2d2 <_Balloc+0x66>
 801a2e2:	bf00      	nop
 801a2e4:	0801dfbc 	.word	0x0801dfbc
 801a2e8:	0801e03c 	.word	0x0801e03c

0801a2ec <_Bfree>:
 801a2ec:	b570      	push	{r4, r5, r6, lr}
 801a2ee:	69c6      	ldr	r6, [r0, #28]
 801a2f0:	4605      	mov	r5, r0
 801a2f2:	460c      	mov	r4, r1
 801a2f4:	b976      	cbnz	r6, 801a314 <_Bfree+0x28>
 801a2f6:	2010      	movs	r0, #16
 801a2f8:	f7fd fe74 	bl	8017fe4 <malloc>
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	61e8      	str	r0, [r5, #28]
 801a300:	b920      	cbnz	r0, 801a30c <_Bfree+0x20>
 801a302:	4b09      	ldr	r3, [pc, #36]	; (801a328 <_Bfree+0x3c>)
 801a304:	4809      	ldr	r0, [pc, #36]	; (801a32c <_Bfree+0x40>)
 801a306:	218f      	movs	r1, #143	; 0x8f
 801a308:	f002 fa8a 	bl	801c820 <__assert_func>
 801a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a310:	6006      	str	r6, [r0, #0]
 801a312:	60c6      	str	r6, [r0, #12]
 801a314:	b13c      	cbz	r4, 801a326 <_Bfree+0x3a>
 801a316:	69eb      	ldr	r3, [r5, #28]
 801a318:	6862      	ldr	r2, [r4, #4]
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a320:	6021      	str	r1, [r4, #0]
 801a322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a326:	bd70      	pop	{r4, r5, r6, pc}
 801a328:	0801dfbc 	.word	0x0801dfbc
 801a32c:	0801e03c 	.word	0x0801e03c

0801a330 <__multadd>:
 801a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a334:	690d      	ldr	r5, [r1, #16]
 801a336:	4607      	mov	r7, r0
 801a338:	460c      	mov	r4, r1
 801a33a:	461e      	mov	r6, r3
 801a33c:	f101 0c14 	add.w	ip, r1, #20
 801a340:	2000      	movs	r0, #0
 801a342:	f8dc 3000 	ldr.w	r3, [ip]
 801a346:	b299      	uxth	r1, r3
 801a348:	fb02 6101 	mla	r1, r2, r1, r6
 801a34c:	0c1e      	lsrs	r6, r3, #16
 801a34e:	0c0b      	lsrs	r3, r1, #16
 801a350:	fb02 3306 	mla	r3, r2, r6, r3
 801a354:	b289      	uxth	r1, r1
 801a356:	3001      	adds	r0, #1
 801a358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a35c:	4285      	cmp	r5, r0
 801a35e:	f84c 1b04 	str.w	r1, [ip], #4
 801a362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a366:	dcec      	bgt.n	801a342 <__multadd+0x12>
 801a368:	b30e      	cbz	r6, 801a3ae <__multadd+0x7e>
 801a36a:	68a3      	ldr	r3, [r4, #8]
 801a36c:	42ab      	cmp	r3, r5
 801a36e:	dc19      	bgt.n	801a3a4 <__multadd+0x74>
 801a370:	6861      	ldr	r1, [r4, #4]
 801a372:	4638      	mov	r0, r7
 801a374:	3101      	adds	r1, #1
 801a376:	f7ff ff79 	bl	801a26c <_Balloc>
 801a37a:	4680      	mov	r8, r0
 801a37c:	b928      	cbnz	r0, 801a38a <__multadd+0x5a>
 801a37e:	4602      	mov	r2, r0
 801a380:	4b0c      	ldr	r3, [pc, #48]	; (801a3b4 <__multadd+0x84>)
 801a382:	480d      	ldr	r0, [pc, #52]	; (801a3b8 <__multadd+0x88>)
 801a384:	21ba      	movs	r1, #186	; 0xba
 801a386:	f002 fa4b 	bl	801c820 <__assert_func>
 801a38a:	6922      	ldr	r2, [r4, #16]
 801a38c:	3202      	adds	r2, #2
 801a38e:	f104 010c 	add.w	r1, r4, #12
 801a392:	0092      	lsls	r2, r2, #2
 801a394:	300c      	adds	r0, #12
 801a396:	f7ff f88f 	bl	80194b8 <memcpy>
 801a39a:	4621      	mov	r1, r4
 801a39c:	4638      	mov	r0, r7
 801a39e:	f7ff ffa5 	bl	801a2ec <_Bfree>
 801a3a2:	4644      	mov	r4, r8
 801a3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a3a8:	3501      	adds	r5, #1
 801a3aa:	615e      	str	r6, [r3, #20]
 801a3ac:	6125      	str	r5, [r4, #16]
 801a3ae:	4620      	mov	r0, r4
 801a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3b4:	0801e02b 	.word	0x0801e02b
 801a3b8:	0801e03c 	.word	0x0801e03c

0801a3bc <__s2b>:
 801a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3c0:	460c      	mov	r4, r1
 801a3c2:	4615      	mov	r5, r2
 801a3c4:	461f      	mov	r7, r3
 801a3c6:	2209      	movs	r2, #9
 801a3c8:	3308      	adds	r3, #8
 801a3ca:	4606      	mov	r6, r0
 801a3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 801a3d0:	2100      	movs	r1, #0
 801a3d2:	2201      	movs	r2, #1
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	db09      	blt.n	801a3ec <__s2b+0x30>
 801a3d8:	4630      	mov	r0, r6
 801a3da:	f7ff ff47 	bl	801a26c <_Balloc>
 801a3de:	b940      	cbnz	r0, 801a3f2 <__s2b+0x36>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	4b19      	ldr	r3, [pc, #100]	; (801a448 <__s2b+0x8c>)
 801a3e4:	4819      	ldr	r0, [pc, #100]	; (801a44c <__s2b+0x90>)
 801a3e6:	21d3      	movs	r1, #211	; 0xd3
 801a3e8:	f002 fa1a 	bl	801c820 <__assert_func>
 801a3ec:	0052      	lsls	r2, r2, #1
 801a3ee:	3101      	adds	r1, #1
 801a3f0:	e7f0      	b.n	801a3d4 <__s2b+0x18>
 801a3f2:	9b08      	ldr	r3, [sp, #32]
 801a3f4:	6143      	str	r3, [r0, #20]
 801a3f6:	2d09      	cmp	r5, #9
 801a3f8:	f04f 0301 	mov.w	r3, #1
 801a3fc:	6103      	str	r3, [r0, #16]
 801a3fe:	dd16      	ble.n	801a42e <__s2b+0x72>
 801a400:	f104 0909 	add.w	r9, r4, #9
 801a404:	46c8      	mov	r8, r9
 801a406:	442c      	add	r4, r5
 801a408:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a40c:	4601      	mov	r1, r0
 801a40e:	3b30      	subs	r3, #48	; 0x30
 801a410:	220a      	movs	r2, #10
 801a412:	4630      	mov	r0, r6
 801a414:	f7ff ff8c 	bl	801a330 <__multadd>
 801a418:	45a0      	cmp	r8, r4
 801a41a:	d1f5      	bne.n	801a408 <__s2b+0x4c>
 801a41c:	f1a5 0408 	sub.w	r4, r5, #8
 801a420:	444c      	add	r4, r9
 801a422:	1b2d      	subs	r5, r5, r4
 801a424:	1963      	adds	r3, r4, r5
 801a426:	42bb      	cmp	r3, r7
 801a428:	db04      	blt.n	801a434 <__s2b+0x78>
 801a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a42e:	340a      	adds	r4, #10
 801a430:	2509      	movs	r5, #9
 801a432:	e7f6      	b.n	801a422 <__s2b+0x66>
 801a434:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a438:	4601      	mov	r1, r0
 801a43a:	3b30      	subs	r3, #48	; 0x30
 801a43c:	220a      	movs	r2, #10
 801a43e:	4630      	mov	r0, r6
 801a440:	f7ff ff76 	bl	801a330 <__multadd>
 801a444:	e7ee      	b.n	801a424 <__s2b+0x68>
 801a446:	bf00      	nop
 801a448:	0801e02b 	.word	0x0801e02b
 801a44c:	0801e03c 	.word	0x0801e03c

0801a450 <__hi0bits>:
 801a450:	0c03      	lsrs	r3, r0, #16
 801a452:	041b      	lsls	r3, r3, #16
 801a454:	b9d3      	cbnz	r3, 801a48c <__hi0bits+0x3c>
 801a456:	0400      	lsls	r0, r0, #16
 801a458:	2310      	movs	r3, #16
 801a45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a45e:	bf04      	itt	eq
 801a460:	0200      	lsleq	r0, r0, #8
 801a462:	3308      	addeq	r3, #8
 801a464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a468:	bf04      	itt	eq
 801a46a:	0100      	lsleq	r0, r0, #4
 801a46c:	3304      	addeq	r3, #4
 801a46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a472:	bf04      	itt	eq
 801a474:	0080      	lsleq	r0, r0, #2
 801a476:	3302      	addeq	r3, #2
 801a478:	2800      	cmp	r0, #0
 801a47a:	db05      	blt.n	801a488 <__hi0bits+0x38>
 801a47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a480:	f103 0301 	add.w	r3, r3, #1
 801a484:	bf08      	it	eq
 801a486:	2320      	moveq	r3, #32
 801a488:	4618      	mov	r0, r3
 801a48a:	4770      	bx	lr
 801a48c:	2300      	movs	r3, #0
 801a48e:	e7e4      	b.n	801a45a <__hi0bits+0xa>

0801a490 <__lo0bits>:
 801a490:	6803      	ldr	r3, [r0, #0]
 801a492:	f013 0207 	ands.w	r2, r3, #7
 801a496:	d00c      	beq.n	801a4b2 <__lo0bits+0x22>
 801a498:	07d9      	lsls	r1, r3, #31
 801a49a:	d422      	bmi.n	801a4e2 <__lo0bits+0x52>
 801a49c:	079a      	lsls	r2, r3, #30
 801a49e:	bf49      	itett	mi
 801a4a0:	085b      	lsrmi	r3, r3, #1
 801a4a2:	089b      	lsrpl	r3, r3, #2
 801a4a4:	6003      	strmi	r3, [r0, #0]
 801a4a6:	2201      	movmi	r2, #1
 801a4a8:	bf5c      	itt	pl
 801a4aa:	6003      	strpl	r3, [r0, #0]
 801a4ac:	2202      	movpl	r2, #2
 801a4ae:	4610      	mov	r0, r2
 801a4b0:	4770      	bx	lr
 801a4b2:	b299      	uxth	r1, r3
 801a4b4:	b909      	cbnz	r1, 801a4ba <__lo0bits+0x2a>
 801a4b6:	0c1b      	lsrs	r3, r3, #16
 801a4b8:	2210      	movs	r2, #16
 801a4ba:	b2d9      	uxtb	r1, r3
 801a4bc:	b909      	cbnz	r1, 801a4c2 <__lo0bits+0x32>
 801a4be:	3208      	adds	r2, #8
 801a4c0:	0a1b      	lsrs	r3, r3, #8
 801a4c2:	0719      	lsls	r1, r3, #28
 801a4c4:	bf04      	itt	eq
 801a4c6:	091b      	lsreq	r3, r3, #4
 801a4c8:	3204      	addeq	r2, #4
 801a4ca:	0799      	lsls	r1, r3, #30
 801a4cc:	bf04      	itt	eq
 801a4ce:	089b      	lsreq	r3, r3, #2
 801a4d0:	3202      	addeq	r2, #2
 801a4d2:	07d9      	lsls	r1, r3, #31
 801a4d4:	d403      	bmi.n	801a4de <__lo0bits+0x4e>
 801a4d6:	085b      	lsrs	r3, r3, #1
 801a4d8:	f102 0201 	add.w	r2, r2, #1
 801a4dc:	d003      	beq.n	801a4e6 <__lo0bits+0x56>
 801a4de:	6003      	str	r3, [r0, #0]
 801a4e0:	e7e5      	b.n	801a4ae <__lo0bits+0x1e>
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	e7e3      	b.n	801a4ae <__lo0bits+0x1e>
 801a4e6:	2220      	movs	r2, #32
 801a4e8:	e7e1      	b.n	801a4ae <__lo0bits+0x1e>
	...

0801a4ec <__i2b>:
 801a4ec:	b510      	push	{r4, lr}
 801a4ee:	460c      	mov	r4, r1
 801a4f0:	2101      	movs	r1, #1
 801a4f2:	f7ff febb 	bl	801a26c <_Balloc>
 801a4f6:	4602      	mov	r2, r0
 801a4f8:	b928      	cbnz	r0, 801a506 <__i2b+0x1a>
 801a4fa:	4b05      	ldr	r3, [pc, #20]	; (801a510 <__i2b+0x24>)
 801a4fc:	4805      	ldr	r0, [pc, #20]	; (801a514 <__i2b+0x28>)
 801a4fe:	f240 1145 	movw	r1, #325	; 0x145
 801a502:	f002 f98d 	bl	801c820 <__assert_func>
 801a506:	2301      	movs	r3, #1
 801a508:	6144      	str	r4, [r0, #20]
 801a50a:	6103      	str	r3, [r0, #16]
 801a50c:	bd10      	pop	{r4, pc}
 801a50e:	bf00      	nop
 801a510:	0801e02b 	.word	0x0801e02b
 801a514:	0801e03c 	.word	0x0801e03c

0801a518 <__multiply>:
 801a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a51c:	4691      	mov	r9, r2
 801a51e:	690a      	ldr	r2, [r1, #16]
 801a520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a524:	429a      	cmp	r2, r3
 801a526:	bfb8      	it	lt
 801a528:	460b      	movlt	r3, r1
 801a52a:	460c      	mov	r4, r1
 801a52c:	bfbc      	itt	lt
 801a52e:	464c      	movlt	r4, r9
 801a530:	4699      	movlt	r9, r3
 801a532:	6927      	ldr	r7, [r4, #16]
 801a534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a538:	68a3      	ldr	r3, [r4, #8]
 801a53a:	6861      	ldr	r1, [r4, #4]
 801a53c:	eb07 060a 	add.w	r6, r7, sl
 801a540:	42b3      	cmp	r3, r6
 801a542:	b085      	sub	sp, #20
 801a544:	bfb8      	it	lt
 801a546:	3101      	addlt	r1, #1
 801a548:	f7ff fe90 	bl	801a26c <_Balloc>
 801a54c:	b930      	cbnz	r0, 801a55c <__multiply+0x44>
 801a54e:	4602      	mov	r2, r0
 801a550:	4b44      	ldr	r3, [pc, #272]	; (801a664 <__multiply+0x14c>)
 801a552:	4845      	ldr	r0, [pc, #276]	; (801a668 <__multiply+0x150>)
 801a554:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801a558:	f002 f962 	bl	801c820 <__assert_func>
 801a55c:	f100 0514 	add.w	r5, r0, #20
 801a560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a564:	462b      	mov	r3, r5
 801a566:	2200      	movs	r2, #0
 801a568:	4543      	cmp	r3, r8
 801a56a:	d321      	bcc.n	801a5b0 <__multiply+0x98>
 801a56c:	f104 0314 	add.w	r3, r4, #20
 801a570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a574:	f109 0314 	add.w	r3, r9, #20
 801a578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a57c:	9202      	str	r2, [sp, #8]
 801a57e:	1b3a      	subs	r2, r7, r4
 801a580:	3a15      	subs	r2, #21
 801a582:	f022 0203 	bic.w	r2, r2, #3
 801a586:	3204      	adds	r2, #4
 801a588:	f104 0115 	add.w	r1, r4, #21
 801a58c:	428f      	cmp	r7, r1
 801a58e:	bf38      	it	cc
 801a590:	2204      	movcc	r2, #4
 801a592:	9201      	str	r2, [sp, #4]
 801a594:	9a02      	ldr	r2, [sp, #8]
 801a596:	9303      	str	r3, [sp, #12]
 801a598:	429a      	cmp	r2, r3
 801a59a:	d80c      	bhi.n	801a5b6 <__multiply+0x9e>
 801a59c:	2e00      	cmp	r6, #0
 801a59e:	dd03      	ble.n	801a5a8 <__multiply+0x90>
 801a5a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d05b      	beq.n	801a660 <__multiply+0x148>
 801a5a8:	6106      	str	r6, [r0, #16]
 801a5aa:	b005      	add	sp, #20
 801a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b0:	f843 2b04 	str.w	r2, [r3], #4
 801a5b4:	e7d8      	b.n	801a568 <__multiply+0x50>
 801a5b6:	f8b3 a000 	ldrh.w	sl, [r3]
 801a5ba:	f1ba 0f00 	cmp.w	sl, #0
 801a5be:	d024      	beq.n	801a60a <__multiply+0xf2>
 801a5c0:	f104 0e14 	add.w	lr, r4, #20
 801a5c4:	46a9      	mov	r9, r5
 801a5c6:	f04f 0c00 	mov.w	ip, #0
 801a5ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a5ce:	f8d9 1000 	ldr.w	r1, [r9]
 801a5d2:	fa1f fb82 	uxth.w	fp, r2
 801a5d6:	b289      	uxth	r1, r1
 801a5d8:	fb0a 110b 	mla	r1, sl, fp, r1
 801a5dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a5e0:	f8d9 2000 	ldr.w	r2, [r9]
 801a5e4:	4461      	add	r1, ip
 801a5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a5ea:	fb0a c20b 	mla	r2, sl, fp, ip
 801a5ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a5f2:	b289      	uxth	r1, r1
 801a5f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a5f8:	4577      	cmp	r7, lr
 801a5fa:	f849 1b04 	str.w	r1, [r9], #4
 801a5fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a602:	d8e2      	bhi.n	801a5ca <__multiply+0xb2>
 801a604:	9a01      	ldr	r2, [sp, #4]
 801a606:	f845 c002 	str.w	ip, [r5, r2]
 801a60a:	9a03      	ldr	r2, [sp, #12]
 801a60c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a610:	3304      	adds	r3, #4
 801a612:	f1b9 0f00 	cmp.w	r9, #0
 801a616:	d021      	beq.n	801a65c <__multiply+0x144>
 801a618:	6829      	ldr	r1, [r5, #0]
 801a61a:	f104 0c14 	add.w	ip, r4, #20
 801a61e:	46ae      	mov	lr, r5
 801a620:	f04f 0a00 	mov.w	sl, #0
 801a624:	f8bc b000 	ldrh.w	fp, [ip]
 801a628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a62c:	fb09 220b 	mla	r2, r9, fp, r2
 801a630:	4452      	add	r2, sl
 801a632:	b289      	uxth	r1, r1
 801a634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a638:	f84e 1b04 	str.w	r1, [lr], #4
 801a63c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a644:	f8be 1000 	ldrh.w	r1, [lr]
 801a648:	fb09 110a 	mla	r1, r9, sl, r1
 801a64c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a650:	4567      	cmp	r7, ip
 801a652:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a656:	d8e5      	bhi.n	801a624 <__multiply+0x10c>
 801a658:	9a01      	ldr	r2, [sp, #4]
 801a65a:	50a9      	str	r1, [r5, r2]
 801a65c:	3504      	adds	r5, #4
 801a65e:	e799      	b.n	801a594 <__multiply+0x7c>
 801a660:	3e01      	subs	r6, #1
 801a662:	e79b      	b.n	801a59c <__multiply+0x84>
 801a664:	0801e02b 	.word	0x0801e02b
 801a668:	0801e03c 	.word	0x0801e03c

0801a66c <__pow5mult>:
 801a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a670:	4615      	mov	r5, r2
 801a672:	f012 0203 	ands.w	r2, r2, #3
 801a676:	4606      	mov	r6, r0
 801a678:	460f      	mov	r7, r1
 801a67a:	d007      	beq.n	801a68c <__pow5mult+0x20>
 801a67c:	4c25      	ldr	r4, [pc, #148]	; (801a714 <__pow5mult+0xa8>)
 801a67e:	3a01      	subs	r2, #1
 801a680:	2300      	movs	r3, #0
 801a682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a686:	f7ff fe53 	bl	801a330 <__multadd>
 801a68a:	4607      	mov	r7, r0
 801a68c:	10ad      	asrs	r5, r5, #2
 801a68e:	d03d      	beq.n	801a70c <__pow5mult+0xa0>
 801a690:	69f4      	ldr	r4, [r6, #28]
 801a692:	b97c      	cbnz	r4, 801a6b4 <__pow5mult+0x48>
 801a694:	2010      	movs	r0, #16
 801a696:	f7fd fca5 	bl	8017fe4 <malloc>
 801a69a:	4602      	mov	r2, r0
 801a69c:	61f0      	str	r0, [r6, #28]
 801a69e:	b928      	cbnz	r0, 801a6ac <__pow5mult+0x40>
 801a6a0:	4b1d      	ldr	r3, [pc, #116]	; (801a718 <__pow5mult+0xac>)
 801a6a2:	481e      	ldr	r0, [pc, #120]	; (801a71c <__pow5mult+0xb0>)
 801a6a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a6a8:	f002 f8ba 	bl	801c820 <__assert_func>
 801a6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a6b0:	6004      	str	r4, [r0, #0]
 801a6b2:	60c4      	str	r4, [r0, #12]
 801a6b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a6bc:	b94c      	cbnz	r4, 801a6d2 <__pow5mult+0x66>
 801a6be:	f240 2171 	movw	r1, #625	; 0x271
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	f7ff ff12 	bl	801a4ec <__i2b>
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 801a6ce:	4604      	mov	r4, r0
 801a6d0:	6003      	str	r3, [r0, #0]
 801a6d2:	f04f 0900 	mov.w	r9, #0
 801a6d6:	07eb      	lsls	r3, r5, #31
 801a6d8:	d50a      	bpl.n	801a6f0 <__pow5mult+0x84>
 801a6da:	4639      	mov	r1, r7
 801a6dc:	4622      	mov	r2, r4
 801a6de:	4630      	mov	r0, r6
 801a6e0:	f7ff ff1a 	bl	801a518 <__multiply>
 801a6e4:	4639      	mov	r1, r7
 801a6e6:	4680      	mov	r8, r0
 801a6e8:	4630      	mov	r0, r6
 801a6ea:	f7ff fdff 	bl	801a2ec <_Bfree>
 801a6ee:	4647      	mov	r7, r8
 801a6f0:	106d      	asrs	r5, r5, #1
 801a6f2:	d00b      	beq.n	801a70c <__pow5mult+0xa0>
 801a6f4:	6820      	ldr	r0, [r4, #0]
 801a6f6:	b938      	cbnz	r0, 801a708 <__pow5mult+0x9c>
 801a6f8:	4622      	mov	r2, r4
 801a6fa:	4621      	mov	r1, r4
 801a6fc:	4630      	mov	r0, r6
 801a6fe:	f7ff ff0b 	bl	801a518 <__multiply>
 801a702:	6020      	str	r0, [r4, #0]
 801a704:	f8c0 9000 	str.w	r9, [r0]
 801a708:	4604      	mov	r4, r0
 801a70a:	e7e4      	b.n	801a6d6 <__pow5mult+0x6a>
 801a70c:	4638      	mov	r0, r7
 801a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a712:	bf00      	nop
 801a714:	0801e188 	.word	0x0801e188
 801a718:	0801dfbc 	.word	0x0801dfbc
 801a71c:	0801e03c 	.word	0x0801e03c

0801a720 <__lshift>:
 801a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a724:	460c      	mov	r4, r1
 801a726:	6849      	ldr	r1, [r1, #4]
 801a728:	6923      	ldr	r3, [r4, #16]
 801a72a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a72e:	68a3      	ldr	r3, [r4, #8]
 801a730:	4607      	mov	r7, r0
 801a732:	4691      	mov	r9, r2
 801a734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a738:	f108 0601 	add.w	r6, r8, #1
 801a73c:	42b3      	cmp	r3, r6
 801a73e:	db0b      	blt.n	801a758 <__lshift+0x38>
 801a740:	4638      	mov	r0, r7
 801a742:	f7ff fd93 	bl	801a26c <_Balloc>
 801a746:	4605      	mov	r5, r0
 801a748:	b948      	cbnz	r0, 801a75e <__lshift+0x3e>
 801a74a:	4602      	mov	r2, r0
 801a74c:	4b28      	ldr	r3, [pc, #160]	; (801a7f0 <__lshift+0xd0>)
 801a74e:	4829      	ldr	r0, [pc, #164]	; (801a7f4 <__lshift+0xd4>)
 801a750:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a754:	f002 f864 	bl	801c820 <__assert_func>
 801a758:	3101      	adds	r1, #1
 801a75a:	005b      	lsls	r3, r3, #1
 801a75c:	e7ee      	b.n	801a73c <__lshift+0x1c>
 801a75e:	2300      	movs	r3, #0
 801a760:	f100 0114 	add.w	r1, r0, #20
 801a764:	f100 0210 	add.w	r2, r0, #16
 801a768:	4618      	mov	r0, r3
 801a76a:	4553      	cmp	r3, sl
 801a76c:	db33      	blt.n	801a7d6 <__lshift+0xb6>
 801a76e:	6920      	ldr	r0, [r4, #16]
 801a770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a774:	f104 0314 	add.w	r3, r4, #20
 801a778:	f019 091f 	ands.w	r9, r9, #31
 801a77c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a784:	d02b      	beq.n	801a7de <__lshift+0xbe>
 801a786:	f1c9 0e20 	rsb	lr, r9, #32
 801a78a:	468a      	mov	sl, r1
 801a78c:	2200      	movs	r2, #0
 801a78e:	6818      	ldr	r0, [r3, #0]
 801a790:	fa00 f009 	lsl.w	r0, r0, r9
 801a794:	4310      	orrs	r0, r2
 801a796:	f84a 0b04 	str.w	r0, [sl], #4
 801a79a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a79e:	459c      	cmp	ip, r3
 801a7a0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a7a4:	d8f3      	bhi.n	801a78e <__lshift+0x6e>
 801a7a6:	ebac 0304 	sub.w	r3, ip, r4
 801a7aa:	3b15      	subs	r3, #21
 801a7ac:	f023 0303 	bic.w	r3, r3, #3
 801a7b0:	3304      	adds	r3, #4
 801a7b2:	f104 0015 	add.w	r0, r4, #21
 801a7b6:	4584      	cmp	ip, r0
 801a7b8:	bf38      	it	cc
 801a7ba:	2304      	movcc	r3, #4
 801a7bc:	50ca      	str	r2, [r1, r3]
 801a7be:	b10a      	cbz	r2, 801a7c4 <__lshift+0xa4>
 801a7c0:	f108 0602 	add.w	r6, r8, #2
 801a7c4:	3e01      	subs	r6, #1
 801a7c6:	4638      	mov	r0, r7
 801a7c8:	612e      	str	r6, [r5, #16]
 801a7ca:	4621      	mov	r1, r4
 801a7cc:	f7ff fd8e 	bl	801a2ec <_Bfree>
 801a7d0:	4628      	mov	r0, r5
 801a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7d6:	f842 0f04 	str.w	r0, [r2, #4]!
 801a7da:	3301      	adds	r3, #1
 801a7dc:	e7c5      	b.n	801a76a <__lshift+0x4a>
 801a7de:	3904      	subs	r1, #4
 801a7e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7e4:	f841 2f04 	str.w	r2, [r1, #4]!
 801a7e8:	459c      	cmp	ip, r3
 801a7ea:	d8f9      	bhi.n	801a7e0 <__lshift+0xc0>
 801a7ec:	e7ea      	b.n	801a7c4 <__lshift+0xa4>
 801a7ee:	bf00      	nop
 801a7f0:	0801e02b 	.word	0x0801e02b
 801a7f4:	0801e03c 	.word	0x0801e03c

0801a7f8 <__mcmp>:
 801a7f8:	b530      	push	{r4, r5, lr}
 801a7fa:	6902      	ldr	r2, [r0, #16]
 801a7fc:	690c      	ldr	r4, [r1, #16]
 801a7fe:	1b12      	subs	r2, r2, r4
 801a800:	d10e      	bne.n	801a820 <__mcmp+0x28>
 801a802:	f100 0314 	add.w	r3, r0, #20
 801a806:	3114      	adds	r1, #20
 801a808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a80c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a818:	42a5      	cmp	r5, r4
 801a81a:	d003      	beq.n	801a824 <__mcmp+0x2c>
 801a81c:	d305      	bcc.n	801a82a <__mcmp+0x32>
 801a81e:	2201      	movs	r2, #1
 801a820:	4610      	mov	r0, r2
 801a822:	bd30      	pop	{r4, r5, pc}
 801a824:	4283      	cmp	r3, r0
 801a826:	d3f3      	bcc.n	801a810 <__mcmp+0x18>
 801a828:	e7fa      	b.n	801a820 <__mcmp+0x28>
 801a82a:	f04f 32ff 	mov.w	r2, #4294967295
 801a82e:	e7f7      	b.n	801a820 <__mcmp+0x28>

0801a830 <__mdiff>:
 801a830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a834:	460c      	mov	r4, r1
 801a836:	4606      	mov	r6, r0
 801a838:	4611      	mov	r1, r2
 801a83a:	4620      	mov	r0, r4
 801a83c:	4690      	mov	r8, r2
 801a83e:	f7ff ffdb 	bl	801a7f8 <__mcmp>
 801a842:	1e05      	subs	r5, r0, #0
 801a844:	d110      	bne.n	801a868 <__mdiff+0x38>
 801a846:	4629      	mov	r1, r5
 801a848:	4630      	mov	r0, r6
 801a84a:	f7ff fd0f 	bl	801a26c <_Balloc>
 801a84e:	b930      	cbnz	r0, 801a85e <__mdiff+0x2e>
 801a850:	4b3a      	ldr	r3, [pc, #232]	; (801a93c <__mdiff+0x10c>)
 801a852:	4602      	mov	r2, r0
 801a854:	f240 2137 	movw	r1, #567	; 0x237
 801a858:	4839      	ldr	r0, [pc, #228]	; (801a940 <__mdiff+0x110>)
 801a85a:	f001 ffe1 	bl	801c820 <__assert_func>
 801a85e:	2301      	movs	r3, #1
 801a860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a868:	bfa4      	itt	ge
 801a86a:	4643      	movge	r3, r8
 801a86c:	46a0      	movge	r8, r4
 801a86e:	4630      	mov	r0, r6
 801a870:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a874:	bfa6      	itte	ge
 801a876:	461c      	movge	r4, r3
 801a878:	2500      	movge	r5, #0
 801a87a:	2501      	movlt	r5, #1
 801a87c:	f7ff fcf6 	bl	801a26c <_Balloc>
 801a880:	b920      	cbnz	r0, 801a88c <__mdiff+0x5c>
 801a882:	4b2e      	ldr	r3, [pc, #184]	; (801a93c <__mdiff+0x10c>)
 801a884:	4602      	mov	r2, r0
 801a886:	f240 2145 	movw	r1, #581	; 0x245
 801a88a:	e7e5      	b.n	801a858 <__mdiff+0x28>
 801a88c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a890:	6926      	ldr	r6, [r4, #16]
 801a892:	60c5      	str	r5, [r0, #12]
 801a894:	f104 0914 	add.w	r9, r4, #20
 801a898:	f108 0514 	add.w	r5, r8, #20
 801a89c:	f100 0e14 	add.w	lr, r0, #20
 801a8a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a8a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a8a8:	f108 0210 	add.w	r2, r8, #16
 801a8ac:	46f2      	mov	sl, lr
 801a8ae:	2100      	movs	r1, #0
 801a8b0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a8b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a8b8:	fa11 f88b 	uxtah	r8, r1, fp
 801a8bc:	b299      	uxth	r1, r3
 801a8be:	0c1b      	lsrs	r3, r3, #16
 801a8c0:	eba8 0801 	sub.w	r8, r8, r1
 801a8c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a8c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a8cc:	fa1f f888 	uxth.w	r8, r8
 801a8d0:	1419      	asrs	r1, r3, #16
 801a8d2:	454e      	cmp	r6, r9
 801a8d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a8d8:	f84a 3b04 	str.w	r3, [sl], #4
 801a8dc:	d8e8      	bhi.n	801a8b0 <__mdiff+0x80>
 801a8de:	1b33      	subs	r3, r6, r4
 801a8e0:	3b15      	subs	r3, #21
 801a8e2:	f023 0303 	bic.w	r3, r3, #3
 801a8e6:	3304      	adds	r3, #4
 801a8e8:	3415      	adds	r4, #21
 801a8ea:	42a6      	cmp	r6, r4
 801a8ec:	bf38      	it	cc
 801a8ee:	2304      	movcc	r3, #4
 801a8f0:	441d      	add	r5, r3
 801a8f2:	4473      	add	r3, lr
 801a8f4:	469e      	mov	lr, r3
 801a8f6:	462e      	mov	r6, r5
 801a8f8:	4566      	cmp	r6, ip
 801a8fa:	d30e      	bcc.n	801a91a <__mdiff+0xea>
 801a8fc:	f10c 0203 	add.w	r2, ip, #3
 801a900:	1b52      	subs	r2, r2, r5
 801a902:	f022 0203 	bic.w	r2, r2, #3
 801a906:	3d03      	subs	r5, #3
 801a908:	45ac      	cmp	ip, r5
 801a90a:	bf38      	it	cc
 801a90c:	2200      	movcc	r2, #0
 801a90e:	4413      	add	r3, r2
 801a910:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a914:	b17a      	cbz	r2, 801a936 <__mdiff+0x106>
 801a916:	6107      	str	r7, [r0, #16]
 801a918:	e7a4      	b.n	801a864 <__mdiff+0x34>
 801a91a:	f856 8b04 	ldr.w	r8, [r6], #4
 801a91e:	fa11 f288 	uxtah	r2, r1, r8
 801a922:	1414      	asrs	r4, r2, #16
 801a924:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a928:	b292      	uxth	r2, r2
 801a92a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a92e:	f84e 2b04 	str.w	r2, [lr], #4
 801a932:	1421      	asrs	r1, r4, #16
 801a934:	e7e0      	b.n	801a8f8 <__mdiff+0xc8>
 801a936:	3f01      	subs	r7, #1
 801a938:	e7ea      	b.n	801a910 <__mdiff+0xe0>
 801a93a:	bf00      	nop
 801a93c:	0801e02b 	.word	0x0801e02b
 801a940:	0801e03c 	.word	0x0801e03c

0801a944 <__ulp>:
 801a944:	b082      	sub	sp, #8
 801a946:	ed8d 0b00 	vstr	d0, [sp]
 801a94a:	9a01      	ldr	r2, [sp, #4]
 801a94c:	4b0f      	ldr	r3, [pc, #60]	; (801a98c <__ulp+0x48>)
 801a94e:	4013      	ands	r3, r2
 801a950:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a954:	2b00      	cmp	r3, #0
 801a956:	dc08      	bgt.n	801a96a <__ulp+0x26>
 801a958:	425b      	negs	r3, r3
 801a95a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a95e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a962:	da04      	bge.n	801a96e <__ulp+0x2a>
 801a964:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a968:	4113      	asrs	r3, r2
 801a96a:	2200      	movs	r2, #0
 801a96c:	e008      	b.n	801a980 <__ulp+0x3c>
 801a96e:	f1a2 0314 	sub.w	r3, r2, #20
 801a972:	2b1e      	cmp	r3, #30
 801a974:	bfda      	itte	le
 801a976:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a97a:	40da      	lsrle	r2, r3
 801a97c:	2201      	movgt	r2, #1
 801a97e:	2300      	movs	r3, #0
 801a980:	4619      	mov	r1, r3
 801a982:	4610      	mov	r0, r2
 801a984:	ec41 0b10 	vmov	d0, r0, r1
 801a988:	b002      	add	sp, #8
 801a98a:	4770      	bx	lr
 801a98c:	7ff00000 	.word	0x7ff00000

0801a990 <__b2d>:
 801a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a994:	6906      	ldr	r6, [r0, #16]
 801a996:	f100 0814 	add.w	r8, r0, #20
 801a99a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a99e:	1f37      	subs	r7, r6, #4
 801a9a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a9a4:	4610      	mov	r0, r2
 801a9a6:	f7ff fd53 	bl	801a450 <__hi0bits>
 801a9aa:	f1c0 0320 	rsb	r3, r0, #32
 801a9ae:	280a      	cmp	r0, #10
 801a9b0:	600b      	str	r3, [r1, #0]
 801a9b2:	491b      	ldr	r1, [pc, #108]	; (801aa20 <__b2d+0x90>)
 801a9b4:	dc15      	bgt.n	801a9e2 <__b2d+0x52>
 801a9b6:	f1c0 0c0b 	rsb	ip, r0, #11
 801a9ba:	fa22 f30c 	lsr.w	r3, r2, ip
 801a9be:	45b8      	cmp	r8, r7
 801a9c0:	ea43 0501 	orr.w	r5, r3, r1
 801a9c4:	bf34      	ite	cc
 801a9c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a9ca:	2300      	movcs	r3, #0
 801a9cc:	3015      	adds	r0, #21
 801a9ce:	fa02 f000 	lsl.w	r0, r2, r0
 801a9d2:	fa23 f30c 	lsr.w	r3, r3, ip
 801a9d6:	4303      	orrs	r3, r0
 801a9d8:	461c      	mov	r4, r3
 801a9da:	ec45 4b10 	vmov	d0, r4, r5
 801a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e2:	45b8      	cmp	r8, r7
 801a9e4:	bf3a      	itte	cc
 801a9e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a9ea:	f1a6 0708 	subcc.w	r7, r6, #8
 801a9ee:	2300      	movcs	r3, #0
 801a9f0:	380b      	subs	r0, #11
 801a9f2:	d012      	beq.n	801aa1a <__b2d+0x8a>
 801a9f4:	f1c0 0120 	rsb	r1, r0, #32
 801a9f8:	fa23 f401 	lsr.w	r4, r3, r1
 801a9fc:	4082      	lsls	r2, r0
 801a9fe:	4322      	orrs	r2, r4
 801aa00:	4547      	cmp	r7, r8
 801aa02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801aa06:	bf8c      	ite	hi
 801aa08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801aa0c:	2200      	movls	r2, #0
 801aa0e:	4083      	lsls	r3, r0
 801aa10:	40ca      	lsrs	r2, r1
 801aa12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801aa16:	4313      	orrs	r3, r2
 801aa18:	e7de      	b.n	801a9d8 <__b2d+0x48>
 801aa1a:	ea42 0501 	orr.w	r5, r2, r1
 801aa1e:	e7db      	b.n	801a9d8 <__b2d+0x48>
 801aa20:	3ff00000 	.word	0x3ff00000

0801aa24 <__d2b>:
 801aa24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa28:	460f      	mov	r7, r1
 801aa2a:	2101      	movs	r1, #1
 801aa2c:	ec59 8b10 	vmov	r8, r9, d0
 801aa30:	4616      	mov	r6, r2
 801aa32:	f7ff fc1b 	bl	801a26c <_Balloc>
 801aa36:	4604      	mov	r4, r0
 801aa38:	b930      	cbnz	r0, 801aa48 <__d2b+0x24>
 801aa3a:	4602      	mov	r2, r0
 801aa3c:	4b24      	ldr	r3, [pc, #144]	; (801aad0 <__d2b+0xac>)
 801aa3e:	4825      	ldr	r0, [pc, #148]	; (801aad4 <__d2b+0xb0>)
 801aa40:	f240 310f 	movw	r1, #783	; 0x30f
 801aa44:	f001 feec 	bl	801c820 <__assert_func>
 801aa48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801aa4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801aa50:	bb2d      	cbnz	r5, 801aa9e <__d2b+0x7a>
 801aa52:	9301      	str	r3, [sp, #4]
 801aa54:	f1b8 0300 	subs.w	r3, r8, #0
 801aa58:	d026      	beq.n	801aaa8 <__d2b+0x84>
 801aa5a:	4668      	mov	r0, sp
 801aa5c:	9300      	str	r3, [sp, #0]
 801aa5e:	f7ff fd17 	bl	801a490 <__lo0bits>
 801aa62:	e9dd 1200 	ldrd	r1, r2, [sp]
 801aa66:	b1e8      	cbz	r0, 801aaa4 <__d2b+0x80>
 801aa68:	f1c0 0320 	rsb	r3, r0, #32
 801aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa70:	430b      	orrs	r3, r1
 801aa72:	40c2      	lsrs	r2, r0
 801aa74:	6163      	str	r3, [r4, #20]
 801aa76:	9201      	str	r2, [sp, #4]
 801aa78:	9b01      	ldr	r3, [sp, #4]
 801aa7a:	61a3      	str	r3, [r4, #24]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	bf14      	ite	ne
 801aa80:	2202      	movne	r2, #2
 801aa82:	2201      	moveq	r2, #1
 801aa84:	6122      	str	r2, [r4, #16]
 801aa86:	b1bd      	cbz	r5, 801aab8 <__d2b+0x94>
 801aa88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801aa8c:	4405      	add	r5, r0
 801aa8e:	603d      	str	r5, [r7, #0]
 801aa90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801aa94:	6030      	str	r0, [r6, #0]
 801aa96:	4620      	mov	r0, r4
 801aa98:	b003      	add	sp, #12
 801aa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aaa2:	e7d6      	b.n	801aa52 <__d2b+0x2e>
 801aaa4:	6161      	str	r1, [r4, #20]
 801aaa6:	e7e7      	b.n	801aa78 <__d2b+0x54>
 801aaa8:	a801      	add	r0, sp, #4
 801aaaa:	f7ff fcf1 	bl	801a490 <__lo0bits>
 801aaae:	9b01      	ldr	r3, [sp, #4]
 801aab0:	6163      	str	r3, [r4, #20]
 801aab2:	3020      	adds	r0, #32
 801aab4:	2201      	movs	r2, #1
 801aab6:	e7e5      	b.n	801aa84 <__d2b+0x60>
 801aab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801aabc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801aac0:	6038      	str	r0, [r7, #0]
 801aac2:	6918      	ldr	r0, [r3, #16]
 801aac4:	f7ff fcc4 	bl	801a450 <__hi0bits>
 801aac8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801aacc:	e7e2      	b.n	801aa94 <__d2b+0x70>
 801aace:	bf00      	nop
 801aad0:	0801e02b 	.word	0x0801e02b
 801aad4:	0801e03c 	.word	0x0801e03c

0801aad8 <__ratio>:
 801aad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aadc:	4688      	mov	r8, r1
 801aade:	4669      	mov	r1, sp
 801aae0:	4681      	mov	r9, r0
 801aae2:	f7ff ff55 	bl	801a990 <__b2d>
 801aae6:	a901      	add	r1, sp, #4
 801aae8:	4640      	mov	r0, r8
 801aaea:	ec55 4b10 	vmov	r4, r5, d0
 801aaee:	f7ff ff4f 	bl	801a990 <__b2d>
 801aaf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aaf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801aafa:	eba3 0c02 	sub.w	ip, r3, r2
 801aafe:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ab02:	1a9b      	subs	r3, r3, r2
 801ab04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ab08:	ec51 0b10 	vmov	r0, r1, d0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	bfd6      	itet	le
 801ab10:	460a      	movle	r2, r1
 801ab12:	462a      	movgt	r2, r5
 801ab14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ab18:	468b      	mov	fp, r1
 801ab1a:	462f      	mov	r7, r5
 801ab1c:	bfd4      	ite	le
 801ab1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ab22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ab26:	4620      	mov	r0, r4
 801ab28:	ee10 2a10 	vmov	r2, s0
 801ab2c:	465b      	mov	r3, fp
 801ab2e:	4639      	mov	r1, r7
 801ab30:	f7e5 febc 	bl	80008ac <__aeabi_ddiv>
 801ab34:	ec41 0b10 	vmov	d0, r0, r1
 801ab38:	b003      	add	sp, #12
 801ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab3e <__copybits>:
 801ab3e:	3901      	subs	r1, #1
 801ab40:	b570      	push	{r4, r5, r6, lr}
 801ab42:	1149      	asrs	r1, r1, #5
 801ab44:	6914      	ldr	r4, [r2, #16]
 801ab46:	3101      	adds	r1, #1
 801ab48:	f102 0314 	add.w	r3, r2, #20
 801ab4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ab50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ab54:	1f05      	subs	r5, r0, #4
 801ab56:	42a3      	cmp	r3, r4
 801ab58:	d30c      	bcc.n	801ab74 <__copybits+0x36>
 801ab5a:	1aa3      	subs	r3, r4, r2
 801ab5c:	3b11      	subs	r3, #17
 801ab5e:	f023 0303 	bic.w	r3, r3, #3
 801ab62:	3211      	adds	r2, #17
 801ab64:	42a2      	cmp	r2, r4
 801ab66:	bf88      	it	hi
 801ab68:	2300      	movhi	r3, #0
 801ab6a:	4418      	add	r0, r3
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	4288      	cmp	r0, r1
 801ab70:	d305      	bcc.n	801ab7e <__copybits+0x40>
 801ab72:	bd70      	pop	{r4, r5, r6, pc}
 801ab74:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab78:	f845 6f04 	str.w	r6, [r5, #4]!
 801ab7c:	e7eb      	b.n	801ab56 <__copybits+0x18>
 801ab7e:	f840 3b04 	str.w	r3, [r0], #4
 801ab82:	e7f4      	b.n	801ab6e <__copybits+0x30>

0801ab84 <__any_on>:
 801ab84:	f100 0214 	add.w	r2, r0, #20
 801ab88:	6900      	ldr	r0, [r0, #16]
 801ab8a:	114b      	asrs	r3, r1, #5
 801ab8c:	4298      	cmp	r0, r3
 801ab8e:	b510      	push	{r4, lr}
 801ab90:	db11      	blt.n	801abb6 <__any_on+0x32>
 801ab92:	dd0a      	ble.n	801abaa <__any_on+0x26>
 801ab94:	f011 011f 	ands.w	r1, r1, #31
 801ab98:	d007      	beq.n	801abaa <__any_on+0x26>
 801ab9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ab9e:	fa24 f001 	lsr.w	r0, r4, r1
 801aba2:	fa00 f101 	lsl.w	r1, r0, r1
 801aba6:	428c      	cmp	r4, r1
 801aba8:	d10b      	bne.n	801abc2 <__any_on+0x3e>
 801abaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801abae:	4293      	cmp	r3, r2
 801abb0:	d803      	bhi.n	801abba <__any_on+0x36>
 801abb2:	2000      	movs	r0, #0
 801abb4:	bd10      	pop	{r4, pc}
 801abb6:	4603      	mov	r3, r0
 801abb8:	e7f7      	b.n	801abaa <__any_on+0x26>
 801abba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801abbe:	2900      	cmp	r1, #0
 801abc0:	d0f5      	beq.n	801abae <__any_on+0x2a>
 801abc2:	2001      	movs	r0, #1
 801abc4:	e7f6      	b.n	801abb4 <__any_on+0x30>

0801abc6 <sulp>:
 801abc6:	b570      	push	{r4, r5, r6, lr}
 801abc8:	4604      	mov	r4, r0
 801abca:	460d      	mov	r5, r1
 801abcc:	ec45 4b10 	vmov	d0, r4, r5
 801abd0:	4616      	mov	r6, r2
 801abd2:	f7ff feb7 	bl	801a944 <__ulp>
 801abd6:	ec51 0b10 	vmov	r0, r1, d0
 801abda:	b17e      	cbz	r6, 801abfc <sulp+0x36>
 801abdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801abe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	dd09      	ble.n	801abfc <sulp+0x36>
 801abe8:	051b      	lsls	r3, r3, #20
 801abea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801abee:	2400      	movs	r4, #0
 801abf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801abf4:	4622      	mov	r2, r4
 801abf6:	462b      	mov	r3, r5
 801abf8:	f7e5 fd2e 	bl	8000658 <__aeabi_dmul>
 801abfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ac00 <_strtod_l>:
 801ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac04:	ed2d 8b02 	vpush	{d8}
 801ac08:	b09b      	sub	sp, #108	; 0x6c
 801ac0a:	4604      	mov	r4, r0
 801ac0c:	9213      	str	r2, [sp, #76]	; 0x4c
 801ac0e:	2200      	movs	r2, #0
 801ac10:	9216      	str	r2, [sp, #88]	; 0x58
 801ac12:	460d      	mov	r5, r1
 801ac14:	f04f 0800 	mov.w	r8, #0
 801ac18:	f04f 0900 	mov.w	r9, #0
 801ac1c:	460a      	mov	r2, r1
 801ac1e:	9215      	str	r2, [sp, #84]	; 0x54
 801ac20:	7811      	ldrb	r1, [r2, #0]
 801ac22:	292b      	cmp	r1, #43	; 0x2b
 801ac24:	d04c      	beq.n	801acc0 <_strtod_l+0xc0>
 801ac26:	d83a      	bhi.n	801ac9e <_strtod_l+0x9e>
 801ac28:	290d      	cmp	r1, #13
 801ac2a:	d834      	bhi.n	801ac96 <_strtod_l+0x96>
 801ac2c:	2908      	cmp	r1, #8
 801ac2e:	d834      	bhi.n	801ac9a <_strtod_l+0x9a>
 801ac30:	2900      	cmp	r1, #0
 801ac32:	d03d      	beq.n	801acb0 <_strtod_l+0xb0>
 801ac34:	2200      	movs	r2, #0
 801ac36:	920a      	str	r2, [sp, #40]	; 0x28
 801ac38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ac3a:	7832      	ldrb	r2, [r6, #0]
 801ac3c:	2a30      	cmp	r2, #48	; 0x30
 801ac3e:	f040 80b4 	bne.w	801adaa <_strtod_l+0x1aa>
 801ac42:	7872      	ldrb	r2, [r6, #1]
 801ac44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801ac48:	2a58      	cmp	r2, #88	; 0x58
 801ac4a:	d170      	bne.n	801ad2e <_strtod_l+0x12e>
 801ac4c:	9302      	str	r3, [sp, #8]
 801ac4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac50:	9301      	str	r3, [sp, #4]
 801ac52:	ab16      	add	r3, sp, #88	; 0x58
 801ac54:	9300      	str	r3, [sp, #0]
 801ac56:	4a8e      	ldr	r2, [pc, #568]	; (801ae90 <_strtod_l+0x290>)
 801ac58:	ab17      	add	r3, sp, #92	; 0x5c
 801ac5a:	a915      	add	r1, sp, #84	; 0x54
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	f001 fe65 	bl	801c92c <__gethex>
 801ac62:	f010 070f 	ands.w	r7, r0, #15
 801ac66:	4605      	mov	r5, r0
 801ac68:	d005      	beq.n	801ac76 <_strtod_l+0x76>
 801ac6a:	2f06      	cmp	r7, #6
 801ac6c:	d12a      	bne.n	801acc4 <_strtod_l+0xc4>
 801ac6e:	3601      	adds	r6, #1
 801ac70:	2300      	movs	r3, #0
 801ac72:	9615      	str	r6, [sp, #84]	; 0x54
 801ac74:	930a      	str	r3, [sp, #40]	; 0x28
 801ac76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	f040 857f 	bne.w	801b77c <_strtod_l+0xb7c>
 801ac7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac80:	b1db      	cbz	r3, 801acba <_strtod_l+0xba>
 801ac82:	4642      	mov	r2, r8
 801ac84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ac88:	ec43 2b10 	vmov	d0, r2, r3
 801ac8c:	b01b      	add	sp, #108	; 0x6c
 801ac8e:	ecbd 8b02 	vpop	{d8}
 801ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac96:	2920      	cmp	r1, #32
 801ac98:	d1cc      	bne.n	801ac34 <_strtod_l+0x34>
 801ac9a:	3201      	adds	r2, #1
 801ac9c:	e7bf      	b.n	801ac1e <_strtod_l+0x1e>
 801ac9e:	292d      	cmp	r1, #45	; 0x2d
 801aca0:	d1c8      	bne.n	801ac34 <_strtod_l+0x34>
 801aca2:	2101      	movs	r1, #1
 801aca4:	910a      	str	r1, [sp, #40]	; 0x28
 801aca6:	1c51      	adds	r1, r2, #1
 801aca8:	9115      	str	r1, [sp, #84]	; 0x54
 801acaa:	7852      	ldrb	r2, [r2, #1]
 801acac:	2a00      	cmp	r2, #0
 801acae:	d1c3      	bne.n	801ac38 <_strtod_l+0x38>
 801acb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801acb2:	9515      	str	r5, [sp, #84]	; 0x54
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	f040 855f 	bne.w	801b778 <_strtod_l+0xb78>
 801acba:	4642      	mov	r2, r8
 801acbc:	464b      	mov	r3, r9
 801acbe:	e7e3      	b.n	801ac88 <_strtod_l+0x88>
 801acc0:	2100      	movs	r1, #0
 801acc2:	e7ef      	b.n	801aca4 <_strtod_l+0xa4>
 801acc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801acc6:	b13a      	cbz	r2, 801acd8 <_strtod_l+0xd8>
 801acc8:	2135      	movs	r1, #53	; 0x35
 801acca:	a818      	add	r0, sp, #96	; 0x60
 801accc:	f7ff ff37 	bl	801ab3e <__copybits>
 801acd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801acd2:	4620      	mov	r0, r4
 801acd4:	f7ff fb0a 	bl	801a2ec <_Bfree>
 801acd8:	3f01      	subs	r7, #1
 801acda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801acdc:	2f04      	cmp	r7, #4
 801acde:	d806      	bhi.n	801acee <_strtod_l+0xee>
 801ace0:	e8df f007 	tbb	[pc, r7]
 801ace4:	201d0314 	.word	0x201d0314
 801ace8:	14          	.byte	0x14
 801ace9:	00          	.byte	0x00
 801acea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801acee:	05e9      	lsls	r1, r5, #23
 801acf0:	bf48      	it	mi
 801acf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801acf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801acfa:	0d1b      	lsrs	r3, r3, #20
 801acfc:	051b      	lsls	r3, r3, #20
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1b9      	bne.n	801ac76 <_strtod_l+0x76>
 801ad02:	f7fe fbad 	bl	8019460 <__errno>
 801ad06:	2322      	movs	r3, #34	; 0x22
 801ad08:	6003      	str	r3, [r0, #0]
 801ad0a:	e7b4      	b.n	801ac76 <_strtod_l+0x76>
 801ad0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801ad10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ad14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ad18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801ad1c:	e7e7      	b.n	801acee <_strtod_l+0xee>
 801ad1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801ae98 <_strtod_l+0x298>
 801ad22:	e7e4      	b.n	801acee <_strtod_l+0xee>
 801ad24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801ad28:	f04f 38ff 	mov.w	r8, #4294967295
 801ad2c:	e7df      	b.n	801acee <_strtod_l+0xee>
 801ad2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad30:	1c5a      	adds	r2, r3, #1
 801ad32:	9215      	str	r2, [sp, #84]	; 0x54
 801ad34:	785b      	ldrb	r3, [r3, #1]
 801ad36:	2b30      	cmp	r3, #48	; 0x30
 801ad38:	d0f9      	beq.n	801ad2e <_strtod_l+0x12e>
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d09b      	beq.n	801ac76 <_strtod_l+0x76>
 801ad3e:	2301      	movs	r3, #1
 801ad40:	f04f 0a00 	mov.w	sl, #0
 801ad44:	9304      	str	r3, [sp, #16]
 801ad46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad48:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ad4e:	46d3      	mov	fp, sl
 801ad50:	220a      	movs	r2, #10
 801ad52:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ad54:	7806      	ldrb	r6, [r0, #0]
 801ad56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ad5a:	b2d9      	uxtb	r1, r3
 801ad5c:	2909      	cmp	r1, #9
 801ad5e:	d926      	bls.n	801adae <_strtod_l+0x1ae>
 801ad60:	494c      	ldr	r1, [pc, #304]	; (801ae94 <_strtod_l+0x294>)
 801ad62:	2201      	movs	r2, #1
 801ad64:	f001 fd1f 	bl	801c7a6 <strncmp>
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	d030      	beq.n	801adce <_strtod_l+0x1ce>
 801ad6c:	2000      	movs	r0, #0
 801ad6e:	4632      	mov	r2, r6
 801ad70:	9005      	str	r0, [sp, #20]
 801ad72:	465e      	mov	r6, fp
 801ad74:	4603      	mov	r3, r0
 801ad76:	2a65      	cmp	r2, #101	; 0x65
 801ad78:	d001      	beq.n	801ad7e <_strtod_l+0x17e>
 801ad7a:	2a45      	cmp	r2, #69	; 0x45
 801ad7c:	d113      	bne.n	801ada6 <_strtod_l+0x1a6>
 801ad7e:	b91e      	cbnz	r6, 801ad88 <_strtod_l+0x188>
 801ad80:	9a04      	ldr	r2, [sp, #16]
 801ad82:	4302      	orrs	r2, r0
 801ad84:	d094      	beq.n	801acb0 <_strtod_l+0xb0>
 801ad86:	2600      	movs	r6, #0
 801ad88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ad8a:	1c6a      	adds	r2, r5, #1
 801ad8c:	9215      	str	r2, [sp, #84]	; 0x54
 801ad8e:	786a      	ldrb	r2, [r5, #1]
 801ad90:	2a2b      	cmp	r2, #43	; 0x2b
 801ad92:	d074      	beq.n	801ae7e <_strtod_l+0x27e>
 801ad94:	2a2d      	cmp	r2, #45	; 0x2d
 801ad96:	d078      	beq.n	801ae8a <_strtod_l+0x28a>
 801ad98:	f04f 0c00 	mov.w	ip, #0
 801ad9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801ada0:	2909      	cmp	r1, #9
 801ada2:	d97f      	bls.n	801aea4 <_strtod_l+0x2a4>
 801ada4:	9515      	str	r5, [sp, #84]	; 0x54
 801ada6:	2700      	movs	r7, #0
 801ada8:	e09e      	b.n	801aee8 <_strtod_l+0x2e8>
 801adaa:	2300      	movs	r3, #0
 801adac:	e7c8      	b.n	801ad40 <_strtod_l+0x140>
 801adae:	f1bb 0f08 	cmp.w	fp, #8
 801adb2:	bfd8      	it	le
 801adb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801adb6:	f100 0001 	add.w	r0, r0, #1
 801adba:	bfda      	itte	le
 801adbc:	fb02 3301 	mlale	r3, r2, r1, r3
 801adc0:	9309      	strle	r3, [sp, #36]	; 0x24
 801adc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801adc6:	f10b 0b01 	add.w	fp, fp, #1
 801adca:	9015      	str	r0, [sp, #84]	; 0x54
 801adcc:	e7c1      	b.n	801ad52 <_strtod_l+0x152>
 801adce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801add0:	1c5a      	adds	r2, r3, #1
 801add2:	9215      	str	r2, [sp, #84]	; 0x54
 801add4:	785a      	ldrb	r2, [r3, #1]
 801add6:	f1bb 0f00 	cmp.w	fp, #0
 801adda:	d037      	beq.n	801ae4c <_strtod_l+0x24c>
 801addc:	9005      	str	r0, [sp, #20]
 801adde:	465e      	mov	r6, fp
 801ade0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801ade4:	2b09      	cmp	r3, #9
 801ade6:	d912      	bls.n	801ae0e <_strtod_l+0x20e>
 801ade8:	2301      	movs	r3, #1
 801adea:	e7c4      	b.n	801ad76 <_strtod_l+0x176>
 801adec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801adee:	1c5a      	adds	r2, r3, #1
 801adf0:	9215      	str	r2, [sp, #84]	; 0x54
 801adf2:	785a      	ldrb	r2, [r3, #1]
 801adf4:	3001      	adds	r0, #1
 801adf6:	2a30      	cmp	r2, #48	; 0x30
 801adf8:	d0f8      	beq.n	801adec <_strtod_l+0x1ec>
 801adfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801adfe:	2b08      	cmp	r3, #8
 801ae00:	f200 84c1 	bhi.w	801b786 <_strtod_l+0xb86>
 801ae04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ae06:	9005      	str	r0, [sp, #20]
 801ae08:	2000      	movs	r0, #0
 801ae0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae0c:	4606      	mov	r6, r0
 801ae0e:	3a30      	subs	r2, #48	; 0x30
 801ae10:	f100 0301 	add.w	r3, r0, #1
 801ae14:	d014      	beq.n	801ae40 <_strtod_l+0x240>
 801ae16:	9905      	ldr	r1, [sp, #20]
 801ae18:	4419      	add	r1, r3
 801ae1a:	9105      	str	r1, [sp, #20]
 801ae1c:	4633      	mov	r3, r6
 801ae1e:	eb00 0c06 	add.w	ip, r0, r6
 801ae22:	210a      	movs	r1, #10
 801ae24:	4563      	cmp	r3, ip
 801ae26:	d113      	bne.n	801ae50 <_strtod_l+0x250>
 801ae28:	1833      	adds	r3, r6, r0
 801ae2a:	2b08      	cmp	r3, #8
 801ae2c:	f106 0601 	add.w	r6, r6, #1
 801ae30:	4406      	add	r6, r0
 801ae32:	dc1a      	bgt.n	801ae6a <_strtod_l+0x26a>
 801ae34:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae36:	230a      	movs	r3, #10
 801ae38:	fb03 2301 	mla	r3, r3, r1, r2
 801ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 801ae3e:	2300      	movs	r3, #0
 801ae40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ae42:	1c51      	adds	r1, r2, #1
 801ae44:	9115      	str	r1, [sp, #84]	; 0x54
 801ae46:	7852      	ldrb	r2, [r2, #1]
 801ae48:	4618      	mov	r0, r3
 801ae4a:	e7c9      	b.n	801ade0 <_strtod_l+0x1e0>
 801ae4c:	4658      	mov	r0, fp
 801ae4e:	e7d2      	b.n	801adf6 <_strtod_l+0x1f6>
 801ae50:	2b08      	cmp	r3, #8
 801ae52:	f103 0301 	add.w	r3, r3, #1
 801ae56:	dc03      	bgt.n	801ae60 <_strtod_l+0x260>
 801ae58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ae5a:	434f      	muls	r7, r1
 801ae5c:	9709      	str	r7, [sp, #36]	; 0x24
 801ae5e:	e7e1      	b.n	801ae24 <_strtod_l+0x224>
 801ae60:	2b10      	cmp	r3, #16
 801ae62:	bfd8      	it	le
 801ae64:	fb01 fa0a 	mulle.w	sl, r1, sl
 801ae68:	e7dc      	b.n	801ae24 <_strtod_l+0x224>
 801ae6a:	2e10      	cmp	r6, #16
 801ae6c:	bfdc      	itt	le
 801ae6e:	230a      	movle	r3, #10
 801ae70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801ae74:	e7e3      	b.n	801ae3e <_strtod_l+0x23e>
 801ae76:	2300      	movs	r3, #0
 801ae78:	9305      	str	r3, [sp, #20]
 801ae7a:	2301      	movs	r3, #1
 801ae7c:	e780      	b.n	801ad80 <_strtod_l+0x180>
 801ae7e:	f04f 0c00 	mov.w	ip, #0
 801ae82:	1caa      	adds	r2, r5, #2
 801ae84:	9215      	str	r2, [sp, #84]	; 0x54
 801ae86:	78aa      	ldrb	r2, [r5, #2]
 801ae88:	e788      	b.n	801ad9c <_strtod_l+0x19c>
 801ae8a:	f04f 0c01 	mov.w	ip, #1
 801ae8e:	e7f8      	b.n	801ae82 <_strtod_l+0x282>
 801ae90:	0801e198 	.word	0x0801e198
 801ae94:	0801e194 	.word	0x0801e194
 801ae98:	7ff00000 	.word	0x7ff00000
 801ae9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ae9e:	1c51      	adds	r1, r2, #1
 801aea0:	9115      	str	r1, [sp, #84]	; 0x54
 801aea2:	7852      	ldrb	r2, [r2, #1]
 801aea4:	2a30      	cmp	r2, #48	; 0x30
 801aea6:	d0f9      	beq.n	801ae9c <_strtod_l+0x29c>
 801aea8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801aeac:	2908      	cmp	r1, #8
 801aeae:	f63f af7a 	bhi.w	801ada6 <_strtod_l+0x1a6>
 801aeb2:	3a30      	subs	r2, #48	; 0x30
 801aeb4:	9208      	str	r2, [sp, #32]
 801aeb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801aeb8:	920c      	str	r2, [sp, #48]	; 0x30
 801aeba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801aebc:	1c57      	adds	r7, r2, #1
 801aebe:	9715      	str	r7, [sp, #84]	; 0x54
 801aec0:	7852      	ldrb	r2, [r2, #1]
 801aec2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aec6:	f1be 0f09 	cmp.w	lr, #9
 801aeca:	d938      	bls.n	801af3e <_strtod_l+0x33e>
 801aecc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aece:	1a7f      	subs	r7, r7, r1
 801aed0:	2f08      	cmp	r7, #8
 801aed2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801aed6:	dc03      	bgt.n	801aee0 <_strtod_l+0x2e0>
 801aed8:	9908      	ldr	r1, [sp, #32]
 801aeda:	428f      	cmp	r7, r1
 801aedc:	bfa8      	it	ge
 801aede:	460f      	movge	r7, r1
 801aee0:	f1bc 0f00 	cmp.w	ip, #0
 801aee4:	d000      	beq.n	801aee8 <_strtod_l+0x2e8>
 801aee6:	427f      	negs	r7, r7
 801aee8:	2e00      	cmp	r6, #0
 801aeea:	d14f      	bne.n	801af8c <_strtod_l+0x38c>
 801aeec:	9904      	ldr	r1, [sp, #16]
 801aeee:	4301      	orrs	r1, r0
 801aef0:	f47f aec1 	bne.w	801ac76 <_strtod_l+0x76>
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	f47f aedb 	bne.w	801acb0 <_strtod_l+0xb0>
 801aefa:	2a69      	cmp	r2, #105	; 0x69
 801aefc:	d029      	beq.n	801af52 <_strtod_l+0x352>
 801aefe:	dc26      	bgt.n	801af4e <_strtod_l+0x34e>
 801af00:	2a49      	cmp	r2, #73	; 0x49
 801af02:	d026      	beq.n	801af52 <_strtod_l+0x352>
 801af04:	2a4e      	cmp	r2, #78	; 0x4e
 801af06:	f47f aed3 	bne.w	801acb0 <_strtod_l+0xb0>
 801af0a:	499b      	ldr	r1, [pc, #620]	; (801b178 <_strtod_l+0x578>)
 801af0c:	a815      	add	r0, sp, #84	; 0x54
 801af0e:	f001 ff4d 	bl	801cdac <__match>
 801af12:	2800      	cmp	r0, #0
 801af14:	f43f aecc 	beq.w	801acb0 <_strtod_l+0xb0>
 801af18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801af1a:	781b      	ldrb	r3, [r3, #0]
 801af1c:	2b28      	cmp	r3, #40	; 0x28
 801af1e:	d12f      	bne.n	801af80 <_strtod_l+0x380>
 801af20:	4996      	ldr	r1, [pc, #600]	; (801b17c <_strtod_l+0x57c>)
 801af22:	aa18      	add	r2, sp, #96	; 0x60
 801af24:	a815      	add	r0, sp, #84	; 0x54
 801af26:	f001 ff55 	bl	801cdd4 <__hexnan>
 801af2a:	2805      	cmp	r0, #5
 801af2c:	d128      	bne.n	801af80 <_strtod_l+0x380>
 801af2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801af30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801af34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801af38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801af3c:	e69b      	b.n	801ac76 <_strtod_l+0x76>
 801af3e:	9f08      	ldr	r7, [sp, #32]
 801af40:	210a      	movs	r1, #10
 801af42:	fb01 2107 	mla	r1, r1, r7, r2
 801af46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801af4a:	9208      	str	r2, [sp, #32]
 801af4c:	e7b5      	b.n	801aeba <_strtod_l+0x2ba>
 801af4e:	2a6e      	cmp	r2, #110	; 0x6e
 801af50:	e7d9      	b.n	801af06 <_strtod_l+0x306>
 801af52:	498b      	ldr	r1, [pc, #556]	; (801b180 <_strtod_l+0x580>)
 801af54:	a815      	add	r0, sp, #84	; 0x54
 801af56:	f001 ff29 	bl	801cdac <__match>
 801af5a:	2800      	cmp	r0, #0
 801af5c:	f43f aea8 	beq.w	801acb0 <_strtod_l+0xb0>
 801af60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801af62:	4988      	ldr	r1, [pc, #544]	; (801b184 <_strtod_l+0x584>)
 801af64:	3b01      	subs	r3, #1
 801af66:	a815      	add	r0, sp, #84	; 0x54
 801af68:	9315      	str	r3, [sp, #84]	; 0x54
 801af6a:	f001 ff1f 	bl	801cdac <__match>
 801af6e:	b910      	cbnz	r0, 801af76 <_strtod_l+0x376>
 801af70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801af72:	3301      	adds	r3, #1
 801af74:	9315      	str	r3, [sp, #84]	; 0x54
 801af76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801b194 <_strtod_l+0x594>
 801af7a:	f04f 0800 	mov.w	r8, #0
 801af7e:	e67a      	b.n	801ac76 <_strtod_l+0x76>
 801af80:	4881      	ldr	r0, [pc, #516]	; (801b188 <_strtod_l+0x588>)
 801af82:	f001 fc45 	bl	801c810 <nan>
 801af86:	ec59 8b10 	vmov	r8, r9, d0
 801af8a:	e674      	b.n	801ac76 <_strtod_l+0x76>
 801af8c:	9b05      	ldr	r3, [sp, #20]
 801af8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af90:	1afb      	subs	r3, r7, r3
 801af92:	f1bb 0f00 	cmp.w	fp, #0
 801af96:	bf08      	it	eq
 801af98:	46b3      	moveq	fp, r6
 801af9a:	2e10      	cmp	r6, #16
 801af9c:	9308      	str	r3, [sp, #32]
 801af9e:	4635      	mov	r5, r6
 801afa0:	bfa8      	it	ge
 801afa2:	2510      	movge	r5, #16
 801afa4:	f7e5 fade 	bl	8000564 <__aeabi_ui2d>
 801afa8:	2e09      	cmp	r6, #9
 801afaa:	4680      	mov	r8, r0
 801afac:	4689      	mov	r9, r1
 801afae:	dd13      	ble.n	801afd8 <_strtod_l+0x3d8>
 801afb0:	4b76      	ldr	r3, [pc, #472]	; (801b18c <_strtod_l+0x58c>)
 801afb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801afba:	f7e5 fb4d 	bl	8000658 <__aeabi_dmul>
 801afbe:	4680      	mov	r8, r0
 801afc0:	4650      	mov	r0, sl
 801afc2:	4689      	mov	r9, r1
 801afc4:	f7e5 face 	bl	8000564 <__aeabi_ui2d>
 801afc8:	4602      	mov	r2, r0
 801afca:	460b      	mov	r3, r1
 801afcc:	4640      	mov	r0, r8
 801afce:	4649      	mov	r1, r9
 801afd0:	f7e5 f98c 	bl	80002ec <__adddf3>
 801afd4:	4680      	mov	r8, r0
 801afd6:	4689      	mov	r9, r1
 801afd8:	2e0f      	cmp	r6, #15
 801afda:	dc38      	bgt.n	801b04e <_strtod_l+0x44e>
 801afdc:	9b08      	ldr	r3, [sp, #32]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	f43f ae49 	beq.w	801ac76 <_strtod_l+0x76>
 801afe4:	dd24      	ble.n	801b030 <_strtod_l+0x430>
 801afe6:	2b16      	cmp	r3, #22
 801afe8:	dc0b      	bgt.n	801b002 <_strtod_l+0x402>
 801afea:	4968      	ldr	r1, [pc, #416]	; (801b18c <_strtod_l+0x58c>)
 801afec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aff4:	4642      	mov	r2, r8
 801aff6:	464b      	mov	r3, r9
 801aff8:	f7e5 fb2e 	bl	8000658 <__aeabi_dmul>
 801affc:	4680      	mov	r8, r0
 801affe:	4689      	mov	r9, r1
 801b000:	e639      	b.n	801ac76 <_strtod_l+0x76>
 801b002:	9a08      	ldr	r2, [sp, #32]
 801b004:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801b008:	4293      	cmp	r3, r2
 801b00a:	db20      	blt.n	801b04e <_strtod_l+0x44e>
 801b00c:	4c5f      	ldr	r4, [pc, #380]	; (801b18c <_strtod_l+0x58c>)
 801b00e:	f1c6 060f 	rsb	r6, r6, #15
 801b012:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801b016:	4642      	mov	r2, r8
 801b018:	464b      	mov	r3, r9
 801b01a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b01e:	f7e5 fb1b 	bl	8000658 <__aeabi_dmul>
 801b022:	9b08      	ldr	r3, [sp, #32]
 801b024:	1b9e      	subs	r6, r3, r6
 801b026:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801b02a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b02e:	e7e3      	b.n	801aff8 <_strtod_l+0x3f8>
 801b030:	9b08      	ldr	r3, [sp, #32]
 801b032:	3316      	adds	r3, #22
 801b034:	db0b      	blt.n	801b04e <_strtod_l+0x44e>
 801b036:	9b05      	ldr	r3, [sp, #20]
 801b038:	1bdf      	subs	r7, r3, r7
 801b03a:	4b54      	ldr	r3, [pc, #336]	; (801b18c <_strtod_l+0x58c>)
 801b03c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801b040:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b044:	4640      	mov	r0, r8
 801b046:	4649      	mov	r1, r9
 801b048:	f7e5 fc30 	bl	80008ac <__aeabi_ddiv>
 801b04c:	e7d6      	b.n	801affc <_strtod_l+0x3fc>
 801b04e:	9b08      	ldr	r3, [sp, #32]
 801b050:	1b75      	subs	r5, r6, r5
 801b052:	441d      	add	r5, r3
 801b054:	2d00      	cmp	r5, #0
 801b056:	dd70      	ble.n	801b13a <_strtod_l+0x53a>
 801b058:	f015 030f 	ands.w	r3, r5, #15
 801b05c:	d00a      	beq.n	801b074 <_strtod_l+0x474>
 801b05e:	494b      	ldr	r1, [pc, #300]	; (801b18c <_strtod_l+0x58c>)
 801b060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b064:	4642      	mov	r2, r8
 801b066:	464b      	mov	r3, r9
 801b068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b06c:	f7e5 faf4 	bl	8000658 <__aeabi_dmul>
 801b070:	4680      	mov	r8, r0
 801b072:	4689      	mov	r9, r1
 801b074:	f035 050f 	bics.w	r5, r5, #15
 801b078:	d04d      	beq.n	801b116 <_strtod_l+0x516>
 801b07a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801b07e:	dd22      	ble.n	801b0c6 <_strtod_l+0x4c6>
 801b080:	2500      	movs	r5, #0
 801b082:	46ab      	mov	fp, r5
 801b084:	9509      	str	r5, [sp, #36]	; 0x24
 801b086:	9505      	str	r5, [sp, #20]
 801b088:	2322      	movs	r3, #34	; 0x22
 801b08a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801b194 <_strtod_l+0x594>
 801b08e:	6023      	str	r3, [r4, #0]
 801b090:	f04f 0800 	mov.w	r8, #0
 801b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b096:	2b00      	cmp	r3, #0
 801b098:	f43f aded 	beq.w	801ac76 <_strtod_l+0x76>
 801b09c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b09e:	4620      	mov	r0, r4
 801b0a0:	f7ff f924 	bl	801a2ec <_Bfree>
 801b0a4:	9905      	ldr	r1, [sp, #20]
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	f7ff f920 	bl	801a2ec <_Bfree>
 801b0ac:	4659      	mov	r1, fp
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	f7ff f91c 	bl	801a2ec <_Bfree>
 801b0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	f7ff f918 	bl	801a2ec <_Bfree>
 801b0bc:	4629      	mov	r1, r5
 801b0be:	4620      	mov	r0, r4
 801b0c0:	f7ff f914 	bl	801a2ec <_Bfree>
 801b0c4:	e5d7      	b.n	801ac76 <_strtod_l+0x76>
 801b0c6:	4b32      	ldr	r3, [pc, #200]	; (801b190 <_strtod_l+0x590>)
 801b0c8:	9304      	str	r3, [sp, #16]
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	112d      	asrs	r5, r5, #4
 801b0ce:	4640      	mov	r0, r8
 801b0d0:	4649      	mov	r1, r9
 801b0d2:	469a      	mov	sl, r3
 801b0d4:	2d01      	cmp	r5, #1
 801b0d6:	dc21      	bgt.n	801b11c <_strtod_l+0x51c>
 801b0d8:	b10b      	cbz	r3, 801b0de <_strtod_l+0x4de>
 801b0da:	4680      	mov	r8, r0
 801b0dc:	4689      	mov	r9, r1
 801b0de:	492c      	ldr	r1, [pc, #176]	; (801b190 <_strtod_l+0x590>)
 801b0e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801b0e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801b0e8:	4642      	mov	r2, r8
 801b0ea:	464b      	mov	r3, r9
 801b0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0f0:	f7e5 fab2 	bl	8000658 <__aeabi_dmul>
 801b0f4:	4b27      	ldr	r3, [pc, #156]	; (801b194 <_strtod_l+0x594>)
 801b0f6:	460a      	mov	r2, r1
 801b0f8:	400b      	ands	r3, r1
 801b0fa:	4927      	ldr	r1, [pc, #156]	; (801b198 <_strtod_l+0x598>)
 801b0fc:	428b      	cmp	r3, r1
 801b0fe:	4680      	mov	r8, r0
 801b100:	d8be      	bhi.n	801b080 <_strtod_l+0x480>
 801b102:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b106:	428b      	cmp	r3, r1
 801b108:	bf86      	itte	hi
 801b10a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801b19c <_strtod_l+0x59c>
 801b10e:	f04f 38ff 	movhi.w	r8, #4294967295
 801b112:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801b116:	2300      	movs	r3, #0
 801b118:	9304      	str	r3, [sp, #16]
 801b11a:	e07b      	b.n	801b214 <_strtod_l+0x614>
 801b11c:	07ea      	lsls	r2, r5, #31
 801b11e:	d505      	bpl.n	801b12c <_strtod_l+0x52c>
 801b120:	9b04      	ldr	r3, [sp, #16]
 801b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b126:	f7e5 fa97 	bl	8000658 <__aeabi_dmul>
 801b12a:	2301      	movs	r3, #1
 801b12c:	9a04      	ldr	r2, [sp, #16]
 801b12e:	3208      	adds	r2, #8
 801b130:	f10a 0a01 	add.w	sl, sl, #1
 801b134:	106d      	asrs	r5, r5, #1
 801b136:	9204      	str	r2, [sp, #16]
 801b138:	e7cc      	b.n	801b0d4 <_strtod_l+0x4d4>
 801b13a:	d0ec      	beq.n	801b116 <_strtod_l+0x516>
 801b13c:	426d      	negs	r5, r5
 801b13e:	f015 020f 	ands.w	r2, r5, #15
 801b142:	d00a      	beq.n	801b15a <_strtod_l+0x55a>
 801b144:	4b11      	ldr	r3, [pc, #68]	; (801b18c <_strtod_l+0x58c>)
 801b146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b14a:	4640      	mov	r0, r8
 801b14c:	4649      	mov	r1, r9
 801b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b152:	f7e5 fbab 	bl	80008ac <__aeabi_ddiv>
 801b156:	4680      	mov	r8, r0
 801b158:	4689      	mov	r9, r1
 801b15a:	112d      	asrs	r5, r5, #4
 801b15c:	d0db      	beq.n	801b116 <_strtod_l+0x516>
 801b15e:	2d1f      	cmp	r5, #31
 801b160:	dd1e      	ble.n	801b1a0 <_strtod_l+0x5a0>
 801b162:	2500      	movs	r5, #0
 801b164:	46ab      	mov	fp, r5
 801b166:	9509      	str	r5, [sp, #36]	; 0x24
 801b168:	9505      	str	r5, [sp, #20]
 801b16a:	2322      	movs	r3, #34	; 0x22
 801b16c:	f04f 0800 	mov.w	r8, #0
 801b170:	f04f 0900 	mov.w	r9, #0
 801b174:	6023      	str	r3, [r4, #0]
 801b176:	e78d      	b.n	801b094 <_strtod_l+0x494>
 801b178:	0801df85 	.word	0x0801df85
 801b17c:	0801e1ac 	.word	0x0801e1ac
 801b180:	0801df7d 	.word	0x0801df7d
 801b184:	0801dfb2 	.word	0x0801dfb2
 801b188:	0801e358 	.word	0x0801e358
 801b18c:	0801e0c0 	.word	0x0801e0c0
 801b190:	0801e098 	.word	0x0801e098
 801b194:	7ff00000 	.word	0x7ff00000
 801b198:	7ca00000 	.word	0x7ca00000
 801b19c:	7fefffff 	.word	0x7fefffff
 801b1a0:	f015 0310 	ands.w	r3, r5, #16
 801b1a4:	bf18      	it	ne
 801b1a6:	236a      	movne	r3, #106	; 0x6a
 801b1a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801b54c <_strtod_l+0x94c>
 801b1ac:	9304      	str	r3, [sp, #16]
 801b1ae:	4640      	mov	r0, r8
 801b1b0:	4649      	mov	r1, r9
 801b1b2:	2300      	movs	r3, #0
 801b1b4:	07ea      	lsls	r2, r5, #31
 801b1b6:	d504      	bpl.n	801b1c2 <_strtod_l+0x5c2>
 801b1b8:	e9da 2300 	ldrd	r2, r3, [sl]
 801b1bc:	f7e5 fa4c 	bl	8000658 <__aeabi_dmul>
 801b1c0:	2301      	movs	r3, #1
 801b1c2:	106d      	asrs	r5, r5, #1
 801b1c4:	f10a 0a08 	add.w	sl, sl, #8
 801b1c8:	d1f4      	bne.n	801b1b4 <_strtod_l+0x5b4>
 801b1ca:	b10b      	cbz	r3, 801b1d0 <_strtod_l+0x5d0>
 801b1cc:	4680      	mov	r8, r0
 801b1ce:	4689      	mov	r9, r1
 801b1d0:	9b04      	ldr	r3, [sp, #16]
 801b1d2:	b1bb      	cbz	r3, 801b204 <_strtod_l+0x604>
 801b1d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801b1d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	4649      	mov	r1, r9
 801b1e0:	dd10      	ble.n	801b204 <_strtod_l+0x604>
 801b1e2:	2b1f      	cmp	r3, #31
 801b1e4:	f340 811e 	ble.w	801b424 <_strtod_l+0x824>
 801b1e8:	2b34      	cmp	r3, #52	; 0x34
 801b1ea:	bfde      	ittt	le
 801b1ec:	f04f 33ff 	movle.w	r3, #4294967295
 801b1f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b1f4:	4093      	lslle	r3, r2
 801b1f6:	f04f 0800 	mov.w	r8, #0
 801b1fa:	bfcc      	ite	gt
 801b1fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801b200:	ea03 0901 	andle.w	r9, r3, r1
 801b204:	2200      	movs	r2, #0
 801b206:	2300      	movs	r3, #0
 801b208:	4640      	mov	r0, r8
 801b20a:	4649      	mov	r1, r9
 801b20c:	f7e5 fc8c 	bl	8000b28 <__aeabi_dcmpeq>
 801b210:	2800      	cmp	r0, #0
 801b212:	d1a6      	bne.n	801b162 <_strtod_l+0x562>
 801b214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b216:	9300      	str	r3, [sp, #0]
 801b218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b21a:	4633      	mov	r3, r6
 801b21c:	465a      	mov	r2, fp
 801b21e:	4620      	mov	r0, r4
 801b220:	f7ff f8cc 	bl	801a3bc <__s2b>
 801b224:	9009      	str	r0, [sp, #36]	; 0x24
 801b226:	2800      	cmp	r0, #0
 801b228:	f43f af2a 	beq.w	801b080 <_strtod_l+0x480>
 801b22c:	9a08      	ldr	r2, [sp, #32]
 801b22e:	9b05      	ldr	r3, [sp, #20]
 801b230:	2a00      	cmp	r2, #0
 801b232:	eba3 0307 	sub.w	r3, r3, r7
 801b236:	bfa8      	it	ge
 801b238:	2300      	movge	r3, #0
 801b23a:	930c      	str	r3, [sp, #48]	; 0x30
 801b23c:	2500      	movs	r5, #0
 801b23e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801b242:	9312      	str	r3, [sp, #72]	; 0x48
 801b244:	46ab      	mov	fp, r5
 801b246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b248:	4620      	mov	r0, r4
 801b24a:	6859      	ldr	r1, [r3, #4]
 801b24c:	f7ff f80e 	bl	801a26c <_Balloc>
 801b250:	9005      	str	r0, [sp, #20]
 801b252:	2800      	cmp	r0, #0
 801b254:	f43f af18 	beq.w	801b088 <_strtod_l+0x488>
 801b258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b25a:	691a      	ldr	r2, [r3, #16]
 801b25c:	3202      	adds	r2, #2
 801b25e:	f103 010c 	add.w	r1, r3, #12
 801b262:	0092      	lsls	r2, r2, #2
 801b264:	300c      	adds	r0, #12
 801b266:	f7fe f927 	bl	80194b8 <memcpy>
 801b26a:	ec49 8b10 	vmov	d0, r8, r9
 801b26e:	aa18      	add	r2, sp, #96	; 0x60
 801b270:	a917      	add	r1, sp, #92	; 0x5c
 801b272:	4620      	mov	r0, r4
 801b274:	f7ff fbd6 	bl	801aa24 <__d2b>
 801b278:	ec49 8b18 	vmov	d8, r8, r9
 801b27c:	9016      	str	r0, [sp, #88]	; 0x58
 801b27e:	2800      	cmp	r0, #0
 801b280:	f43f af02 	beq.w	801b088 <_strtod_l+0x488>
 801b284:	2101      	movs	r1, #1
 801b286:	4620      	mov	r0, r4
 801b288:	f7ff f930 	bl	801a4ec <__i2b>
 801b28c:	4683      	mov	fp, r0
 801b28e:	2800      	cmp	r0, #0
 801b290:	f43f aefa 	beq.w	801b088 <_strtod_l+0x488>
 801b294:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b296:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b298:	2e00      	cmp	r6, #0
 801b29a:	bfab      	itete	ge
 801b29c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801b29e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801b2a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b2a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801b2a6:	bfac      	ite	ge
 801b2a8:	eb06 0a03 	addge.w	sl, r6, r3
 801b2ac:	1b9f      	sublt	r7, r3, r6
 801b2ae:	9b04      	ldr	r3, [sp, #16]
 801b2b0:	1af6      	subs	r6, r6, r3
 801b2b2:	4416      	add	r6, r2
 801b2b4:	4ba0      	ldr	r3, [pc, #640]	; (801b538 <_strtod_l+0x938>)
 801b2b6:	3e01      	subs	r6, #1
 801b2b8:	429e      	cmp	r6, r3
 801b2ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b2be:	f280 80c4 	bge.w	801b44a <_strtod_l+0x84a>
 801b2c2:	1b9b      	subs	r3, r3, r6
 801b2c4:	2b1f      	cmp	r3, #31
 801b2c6:	eba2 0203 	sub.w	r2, r2, r3
 801b2ca:	f04f 0101 	mov.w	r1, #1
 801b2ce:	f300 80b0 	bgt.w	801b432 <_strtod_l+0x832>
 801b2d2:	fa01 f303 	lsl.w	r3, r1, r3
 801b2d6:	930e      	str	r3, [sp, #56]	; 0x38
 801b2d8:	2300      	movs	r3, #0
 801b2da:	930d      	str	r3, [sp, #52]	; 0x34
 801b2dc:	eb0a 0602 	add.w	r6, sl, r2
 801b2e0:	9b04      	ldr	r3, [sp, #16]
 801b2e2:	45b2      	cmp	sl, r6
 801b2e4:	4417      	add	r7, r2
 801b2e6:	441f      	add	r7, r3
 801b2e8:	4653      	mov	r3, sl
 801b2ea:	bfa8      	it	ge
 801b2ec:	4633      	movge	r3, r6
 801b2ee:	42bb      	cmp	r3, r7
 801b2f0:	bfa8      	it	ge
 801b2f2:	463b      	movge	r3, r7
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	bfc2      	ittt	gt
 801b2f8:	1af6      	subgt	r6, r6, r3
 801b2fa:	1aff      	subgt	r7, r7, r3
 801b2fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801b300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b302:	2b00      	cmp	r3, #0
 801b304:	dd17      	ble.n	801b336 <_strtod_l+0x736>
 801b306:	4659      	mov	r1, fp
 801b308:	461a      	mov	r2, r3
 801b30a:	4620      	mov	r0, r4
 801b30c:	f7ff f9ae 	bl	801a66c <__pow5mult>
 801b310:	4683      	mov	fp, r0
 801b312:	2800      	cmp	r0, #0
 801b314:	f43f aeb8 	beq.w	801b088 <_strtod_l+0x488>
 801b318:	4601      	mov	r1, r0
 801b31a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b31c:	4620      	mov	r0, r4
 801b31e:	f7ff f8fb 	bl	801a518 <__multiply>
 801b322:	900b      	str	r0, [sp, #44]	; 0x2c
 801b324:	2800      	cmp	r0, #0
 801b326:	f43f aeaf 	beq.w	801b088 <_strtod_l+0x488>
 801b32a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b32c:	4620      	mov	r0, r4
 801b32e:	f7fe ffdd 	bl	801a2ec <_Bfree>
 801b332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b334:	9316      	str	r3, [sp, #88]	; 0x58
 801b336:	2e00      	cmp	r6, #0
 801b338:	f300 808c 	bgt.w	801b454 <_strtod_l+0x854>
 801b33c:	9b08      	ldr	r3, [sp, #32]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	dd08      	ble.n	801b354 <_strtod_l+0x754>
 801b342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b344:	9905      	ldr	r1, [sp, #20]
 801b346:	4620      	mov	r0, r4
 801b348:	f7ff f990 	bl	801a66c <__pow5mult>
 801b34c:	9005      	str	r0, [sp, #20]
 801b34e:	2800      	cmp	r0, #0
 801b350:	f43f ae9a 	beq.w	801b088 <_strtod_l+0x488>
 801b354:	2f00      	cmp	r7, #0
 801b356:	dd08      	ble.n	801b36a <_strtod_l+0x76a>
 801b358:	9905      	ldr	r1, [sp, #20]
 801b35a:	463a      	mov	r2, r7
 801b35c:	4620      	mov	r0, r4
 801b35e:	f7ff f9df 	bl	801a720 <__lshift>
 801b362:	9005      	str	r0, [sp, #20]
 801b364:	2800      	cmp	r0, #0
 801b366:	f43f ae8f 	beq.w	801b088 <_strtod_l+0x488>
 801b36a:	f1ba 0f00 	cmp.w	sl, #0
 801b36e:	dd08      	ble.n	801b382 <_strtod_l+0x782>
 801b370:	4659      	mov	r1, fp
 801b372:	4652      	mov	r2, sl
 801b374:	4620      	mov	r0, r4
 801b376:	f7ff f9d3 	bl	801a720 <__lshift>
 801b37a:	4683      	mov	fp, r0
 801b37c:	2800      	cmp	r0, #0
 801b37e:	f43f ae83 	beq.w	801b088 <_strtod_l+0x488>
 801b382:	9a05      	ldr	r2, [sp, #20]
 801b384:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b386:	4620      	mov	r0, r4
 801b388:	f7ff fa52 	bl	801a830 <__mdiff>
 801b38c:	4605      	mov	r5, r0
 801b38e:	2800      	cmp	r0, #0
 801b390:	f43f ae7a 	beq.w	801b088 <_strtod_l+0x488>
 801b394:	68c3      	ldr	r3, [r0, #12]
 801b396:	930b      	str	r3, [sp, #44]	; 0x2c
 801b398:	2300      	movs	r3, #0
 801b39a:	60c3      	str	r3, [r0, #12]
 801b39c:	4659      	mov	r1, fp
 801b39e:	f7ff fa2b 	bl	801a7f8 <__mcmp>
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	da60      	bge.n	801b468 <_strtod_l+0x868>
 801b3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b3a8:	ea53 0308 	orrs.w	r3, r3, r8
 801b3ac:	f040 8084 	bne.w	801b4b8 <_strtod_l+0x8b8>
 801b3b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d17f      	bne.n	801b4b8 <_strtod_l+0x8b8>
 801b3b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b3bc:	0d1b      	lsrs	r3, r3, #20
 801b3be:	051b      	lsls	r3, r3, #20
 801b3c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b3c4:	d978      	bls.n	801b4b8 <_strtod_l+0x8b8>
 801b3c6:	696b      	ldr	r3, [r5, #20]
 801b3c8:	b913      	cbnz	r3, 801b3d0 <_strtod_l+0x7d0>
 801b3ca:	692b      	ldr	r3, [r5, #16]
 801b3cc:	2b01      	cmp	r3, #1
 801b3ce:	dd73      	ble.n	801b4b8 <_strtod_l+0x8b8>
 801b3d0:	4629      	mov	r1, r5
 801b3d2:	2201      	movs	r2, #1
 801b3d4:	4620      	mov	r0, r4
 801b3d6:	f7ff f9a3 	bl	801a720 <__lshift>
 801b3da:	4659      	mov	r1, fp
 801b3dc:	4605      	mov	r5, r0
 801b3de:	f7ff fa0b 	bl	801a7f8 <__mcmp>
 801b3e2:	2800      	cmp	r0, #0
 801b3e4:	dd68      	ble.n	801b4b8 <_strtod_l+0x8b8>
 801b3e6:	9904      	ldr	r1, [sp, #16]
 801b3e8:	4a54      	ldr	r2, [pc, #336]	; (801b53c <_strtod_l+0x93c>)
 801b3ea:	464b      	mov	r3, r9
 801b3ec:	2900      	cmp	r1, #0
 801b3ee:	f000 8084 	beq.w	801b4fa <_strtod_l+0x8fa>
 801b3f2:	ea02 0109 	and.w	r1, r2, r9
 801b3f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b3fa:	dc7e      	bgt.n	801b4fa <_strtod_l+0x8fa>
 801b3fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b400:	f77f aeb3 	ble.w	801b16a <_strtod_l+0x56a>
 801b404:	4b4e      	ldr	r3, [pc, #312]	; (801b540 <_strtod_l+0x940>)
 801b406:	4640      	mov	r0, r8
 801b408:	4649      	mov	r1, r9
 801b40a:	2200      	movs	r2, #0
 801b40c:	f7e5 f924 	bl	8000658 <__aeabi_dmul>
 801b410:	4b4a      	ldr	r3, [pc, #296]	; (801b53c <_strtod_l+0x93c>)
 801b412:	400b      	ands	r3, r1
 801b414:	4680      	mov	r8, r0
 801b416:	4689      	mov	r9, r1
 801b418:	2b00      	cmp	r3, #0
 801b41a:	f47f ae3f 	bne.w	801b09c <_strtod_l+0x49c>
 801b41e:	2322      	movs	r3, #34	; 0x22
 801b420:	6023      	str	r3, [r4, #0]
 801b422:	e63b      	b.n	801b09c <_strtod_l+0x49c>
 801b424:	f04f 32ff 	mov.w	r2, #4294967295
 801b428:	fa02 f303 	lsl.w	r3, r2, r3
 801b42c:	ea03 0808 	and.w	r8, r3, r8
 801b430:	e6e8      	b.n	801b204 <_strtod_l+0x604>
 801b432:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801b436:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801b43a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801b43e:	36e2      	adds	r6, #226	; 0xe2
 801b440:	fa01 f306 	lsl.w	r3, r1, r6
 801b444:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801b448:	e748      	b.n	801b2dc <_strtod_l+0x6dc>
 801b44a:	2100      	movs	r1, #0
 801b44c:	2301      	movs	r3, #1
 801b44e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801b452:	e743      	b.n	801b2dc <_strtod_l+0x6dc>
 801b454:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b456:	4632      	mov	r2, r6
 801b458:	4620      	mov	r0, r4
 801b45a:	f7ff f961 	bl	801a720 <__lshift>
 801b45e:	9016      	str	r0, [sp, #88]	; 0x58
 801b460:	2800      	cmp	r0, #0
 801b462:	f47f af6b 	bne.w	801b33c <_strtod_l+0x73c>
 801b466:	e60f      	b.n	801b088 <_strtod_l+0x488>
 801b468:	46ca      	mov	sl, r9
 801b46a:	d171      	bne.n	801b550 <_strtod_l+0x950>
 801b46c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b46e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b472:	b352      	cbz	r2, 801b4ca <_strtod_l+0x8ca>
 801b474:	4a33      	ldr	r2, [pc, #204]	; (801b544 <_strtod_l+0x944>)
 801b476:	4293      	cmp	r3, r2
 801b478:	d12a      	bne.n	801b4d0 <_strtod_l+0x8d0>
 801b47a:	9b04      	ldr	r3, [sp, #16]
 801b47c:	4641      	mov	r1, r8
 801b47e:	b1fb      	cbz	r3, 801b4c0 <_strtod_l+0x8c0>
 801b480:	4b2e      	ldr	r3, [pc, #184]	; (801b53c <_strtod_l+0x93c>)
 801b482:	ea09 0303 	and.w	r3, r9, r3
 801b486:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b48a:	f04f 32ff 	mov.w	r2, #4294967295
 801b48e:	d81a      	bhi.n	801b4c6 <_strtod_l+0x8c6>
 801b490:	0d1b      	lsrs	r3, r3, #20
 801b492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b496:	fa02 f303 	lsl.w	r3, r2, r3
 801b49a:	4299      	cmp	r1, r3
 801b49c:	d118      	bne.n	801b4d0 <_strtod_l+0x8d0>
 801b49e:	4b2a      	ldr	r3, [pc, #168]	; (801b548 <_strtod_l+0x948>)
 801b4a0:	459a      	cmp	sl, r3
 801b4a2:	d102      	bne.n	801b4aa <_strtod_l+0x8aa>
 801b4a4:	3101      	adds	r1, #1
 801b4a6:	f43f adef 	beq.w	801b088 <_strtod_l+0x488>
 801b4aa:	4b24      	ldr	r3, [pc, #144]	; (801b53c <_strtod_l+0x93c>)
 801b4ac:	ea0a 0303 	and.w	r3, sl, r3
 801b4b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801b4b4:	f04f 0800 	mov.w	r8, #0
 801b4b8:	9b04      	ldr	r3, [sp, #16]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d1a2      	bne.n	801b404 <_strtod_l+0x804>
 801b4be:	e5ed      	b.n	801b09c <_strtod_l+0x49c>
 801b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b4c4:	e7e9      	b.n	801b49a <_strtod_l+0x89a>
 801b4c6:	4613      	mov	r3, r2
 801b4c8:	e7e7      	b.n	801b49a <_strtod_l+0x89a>
 801b4ca:	ea53 0308 	orrs.w	r3, r3, r8
 801b4ce:	d08a      	beq.n	801b3e6 <_strtod_l+0x7e6>
 801b4d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4d2:	b1e3      	cbz	r3, 801b50e <_strtod_l+0x90e>
 801b4d4:	ea13 0f0a 	tst.w	r3, sl
 801b4d8:	d0ee      	beq.n	801b4b8 <_strtod_l+0x8b8>
 801b4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4dc:	9a04      	ldr	r2, [sp, #16]
 801b4de:	4640      	mov	r0, r8
 801b4e0:	4649      	mov	r1, r9
 801b4e2:	b1c3      	cbz	r3, 801b516 <_strtod_l+0x916>
 801b4e4:	f7ff fb6f 	bl	801abc6 <sulp>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	ec51 0b18 	vmov	r0, r1, d8
 801b4f0:	f7e4 fefc 	bl	80002ec <__adddf3>
 801b4f4:	4680      	mov	r8, r0
 801b4f6:	4689      	mov	r9, r1
 801b4f8:	e7de      	b.n	801b4b8 <_strtod_l+0x8b8>
 801b4fa:	4013      	ands	r3, r2
 801b4fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b500:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801b504:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801b508:	f04f 38ff 	mov.w	r8, #4294967295
 801b50c:	e7d4      	b.n	801b4b8 <_strtod_l+0x8b8>
 801b50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b510:	ea13 0f08 	tst.w	r3, r8
 801b514:	e7e0      	b.n	801b4d8 <_strtod_l+0x8d8>
 801b516:	f7ff fb56 	bl	801abc6 <sulp>
 801b51a:	4602      	mov	r2, r0
 801b51c:	460b      	mov	r3, r1
 801b51e:	ec51 0b18 	vmov	r0, r1, d8
 801b522:	f7e4 fee1 	bl	80002e8 <__aeabi_dsub>
 801b526:	2200      	movs	r2, #0
 801b528:	2300      	movs	r3, #0
 801b52a:	4680      	mov	r8, r0
 801b52c:	4689      	mov	r9, r1
 801b52e:	f7e5 fafb 	bl	8000b28 <__aeabi_dcmpeq>
 801b532:	2800      	cmp	r0, #0
 801b534:	d0c0      	beq.n	801b4b8 <_strtod_l+0x8b8>
 801b536:	e618      	b.n	801b16a <_strtod_l+0x56a>
 801b538:	fffffc02 	.word	0xfffffc02
 801b53c:	7ff00000 	.word	0x7ff00000
 801b540:	39500000 	.word	0x39500000
 801b544:	000fffff 	.word	0x000fffff
 801b548:	7fefffff 	.word	0x7fefffff
 801b54c:	0801e1c0 	.word	0x0801e1c0
 801b550:	4659      	mov	r1, fp
 801b552:	4628      	mov	r0, r5
 801b554:	f7ff fac0 	bl	801aad8 <__ratio>
 801b558:	ec57 6b10 	vmov	r6, r7, d0
 801b55c:	ee10 0a10 	vmov	r0, s0
 801b560:	2200      	movs	r2, #0
 801b562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b566:	4639      	mov	r1, r7
 801b568:	f7e5 faf2 	bl	8000b50 <__aeabi_dcmple>
 801b56c:	2800      	cmp	r0, #0
 801b56e:	d071      	beq.n	801b654 <_strtod_l+0xa54>
 801b570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b572:	2b00      	cmp	r3, #0
 801b574:	d17c      	bne.n	801b670 <_strtod_l+0xa70>
 801b576:	f1b8 0f00 	cmp.w	r8, #0
 801b57a:	d15a      	bne.n	801b632 <_strtod_l+0xa32>
 801b57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b580:	2b00      	cmp	r3, #0
 801b582:	d15d      	bne.n	801b640 <_strtod_l+0xa40>
 801b584:	4b90      	ldr	r3, [pc, #576]	; (801b7c8 <_strtod_l+0xbc8>)
 801b586:	2200      	movs	r2, #0
 801b588:	4630      	mov	r0, r6
 801b58a:	4639      	mov	r1, r7
 801b58c:	f7e5 fad6 	bl	8000b3c <__aeabi_dcmplt>
 801b590:	2800      	cmp	r0, #0
 801b592:	d15c      	bne.n	801b64e <_strtod_l+0xa4e>
 801b594:	4630      	mov	r0, r6
 801b596:	4639      	mov	r1, r7
 801b598:	4b8c      	ldr	r3, [pc, #560]	; (801b7cc <_strtod_l+0xbcc>)
 801b59a:	2200      	movs	r2, #0
 801b59c:	f7e5 f85c 	bl	8000658 <__aeabi_dmul>
 801b5a0:	4606      	mov	r6, r0
 801b5a2:	460f      	mov	r7, r1
 801b5a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801b5a8:	9606      	str	r6, [sp, #24]
 801b5aa:	9307      	str	r3, [sp, #28]
 801b5ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b5b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b5b4:	4b86      	ldr	r3, [pc, #536]	; (801b7d0 <_strtod_l+0xbd0>)
 801b5b6:	ea0a 0303 	and.w	r3, sl, r3
 801b5ba:	930d      	str	r3, [sp, #52]	; 0x34
 801b5bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b5be:	4b85      	ldr	r3, [pc, #532]	; (801b7d4 <_strtod_l+0xbd4>)
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	f040 8090 	bne.w	801b6e6 <_strtod_l+0xae6>
 801b5c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801b5ca:	ec49 8b10 	vmov	d0, r8, r9
 801b5ce:	f7ff f9b9 	bl	801a944 <__ulp>
 801b5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b5d6:	ec51 0b10 	vmov	r0, r1, d0
 801b5da:	f7e5 f83d 	bl	8000658 <__aeabi_dmul>
 801b5de:	4642      	mov	r2, r8
 801b5e0:	464b      	mov	r3, r9
 801b5e2:	f7e4 fe83 	bl	80002ec <__adddf3>
 801b5e6:	460b      	mov	r3, r1
 801b5e8:	4979      	ldr	r1, [pc, #484]	; (801b7d0 <_strtod_l+0xbd0>)
 801b5ea:	4a7b      	ldr	r2, [pc, #492]	; (801b7d8 <_strtod_l+0xbd8>)
 801b5ec:	4019      	ands	r1, r3
 801b5ee:	4291      	cmp	r1, r2
 801b5f0:	4680      	mov	r8, r0
 801b5f2:	d944      	bls.n	801b67e <_strtod_l+0xa7e>
 801b5f4:	ee18 2a90 	vmov	r2, s17
 801b5f8:	4b78      	ldr	r3, [pc, #480]	; (801b7dc <_strtod_l+0xbdc>)
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d104      	bne.n	801b608 <_strtod_l+0xa08>
 801b5fe:	ee18 3a10 	vmov	r3, s16
 801b602:	3301      	adds	r3, #1
 801b604:	f43f ad40 	beq.w	801b088 <_strtod_l+0x488>
 801b608:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801b7dc <_strtod_l+0xbdc>
 801b60c:	f04f 38ff 	mov.w	r8, #4294967295
 801b610:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b612:	4620      	mov	r0, r4
 801b614:	f7fe fe6a 	bl	801a2ec <_Bfree>
 801b618:	9905      	ldr	r1, [sp, #20]
 801b61a:	4620      	mov	r0, r4
 801b61c:	f7fe fe66 	bl	801a2ec <_Bfree>
 801b620:	4659      	mov	r1, fp
 801b622:	4620      	mov	r0, r4
 801b624:	f7fe fe62 	bl	801a2ec <_Bfree>
 801b628:	4629      	mov	r1, r5
 801b62a:	4620      	mov	r0, r4
 801b62c:	f7fe fe5e 	bl	801a2ec <_Bfree>
 801b630:	e609      	b.n	801b246 <_strtod_l+0x646>
 801b632:	f1b8 0f01 	cmp.w	r8, #1
 801b636:	d103      	bne.n	801b640 <_strtod_l+0xa40>
 801b638:	f1b9 0f00 	cmp.w	r9, #0
 801b63c:	f43f ad95 	beq.w	801b16a <_strtod_l+0x56a>
 801b640:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801b798 <_strtod_l+0xb98>
 801b644:	4f60      	ldr	r7, [pc, #384]	; (801b7c8 <_strtod_l+0xbc8>)
 801b646:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b64a:	2600      	movs	r6, #0
 801b64c:	e7ae      	b.n	801b5ac <_strtod_l+0x9ac>
 801b64e:	4f5f      	ldr	r7, [pc, #380]	; (801b7cc <_strtod_l+0xbcc>)
 801b650:	2600      	movs	r6, #0
 801b652:	e7a7      	b.n	801b5a4 <_strtod_l+0x9a4>
 801b654:	4b5d      	ldr	r3, [pc, #372]	; (801b7cc <_strtod_l+0xbcc>)
 801b656:	4630      	mov	r0, r6
 801b658:	4639      	mov	r1, r7
 801b65a:	2200      	movs	r2, #0
 801b65c:	f7e4 fffc 	bl	8000658 <__aeabi_dmul>
 801b660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b662:	4606      	mov	r6, r0
 801b664:	460f      	mov	r7, r1
 801b666:	2b00      	cmp	r3, #0
 801b668:	d09c      	beq.n	801b5a4 <_strtod_l+0x9a4>
 801b66a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801b66e:	e79d      	b.n	801b5ac <_strtod_l+0x9ac>
 801b670:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801b7a0 <_strtod_l+0xba0>
 801b674:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b678:	ec57 6b17 	vmov	r6, r7, d7
 801b67c:	e796      	b.n	801b5ac <_strtod_l+0x9ac>
 801b67e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801b682:	9b04      	ldr	r3, [sp, #16]
 801b684:	46ca      	mov	sl, r9
 801b686:	2b00      	cmp	r3, #0
 801b688:	d1c2      	bne.n	801b610 <_strtod_l+0xa10>
 801b68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b68e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b690:	0d1b      	lsrs	r3, r3, #20
 801b692:	051b      	lsls	r3, r3, #20
 801b694:	429a      	cmp	r2, r3
 801b696:	d1bb      	bne.n	801b610 <_strtod_l+0xa10>
 801b698:	4630      	mov	r0, r6
 801b69a:	4639      	mov	r1, r7
 801b69c:	f7e5 fb3c 	bl	8000d18 <__aeabi_d2lz>
 801b6a0:	f7e4 ffac 	bl	80005fc <__aeabi_l2d>
 801b6a4:	4602      	mov	r2, r0
 801b6a6:	460b      	mov	r3, r1
 801b6a8:	4630      	mov	r0, r6
 801b6aa:	4639      	mov	r1, r7
 801b6ac:	f7e4 fe1c 	bl	80002e8 <__aeabi_dsub>
 801b6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b6b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b6b6:	ea43 0308 	orr.w	r3, r3, r8
 801b6ba:	4313      	orrs	r3, r2
 801b6bc:	4606      	mov	r6, r0
 801b6be:	460f      	mov	r7, r1
 801b6c0:	d054      	beq.n	801b76c <_strtod_l+0xb6c>
 801b6c2:	a339      	add	r3, pc, #228	; (adr r3, 801b7a8 <_strtod_l+0xba8>)
 801b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6c8:	f7e5 fa38 	bl	8000b3c <__aeabi_dcmplt>
 801b6cc:	2800      	cmp	r0, #0
 801b6ce:	f47f ace5 	bne.w	801b09c <_strtod_l+0x49c>
 801b6d2:	a337      	add	r3, pc, #220	; (adr r3, 801b7b0 <_strtod_l+0xbb0>)
 801b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d8:	4630      	mov	r0, r6
 801b6da:	4639      	mov	r1, r7
 801b6dc:	f7e5 fa4c 	bl	8000b78 <__aeabi_dcmpgt>
 801b6e0:	2800      	cmp	r0, #0
 801b6e2:	d095      	beq.n	801b610 <_strtod_l+0xa10>
 801b6e4:	e4da      	b.n	801b09c <_strtod_l+0x49c>
 801b6e6:	9b04      	ldr	r3, [sp, #16]
 801b6e8:	b333      	cbz	r3, 801b738 <_strtod_l+0xb38>
 801b6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b6f0:	d822      	bhi.n	801b738 <_strtod_l+0xb38>
 801b6f2:	a331      	add	r3, pc, #196	; (adr r3, 801b7b8 <_strtod_l+0xbb8>)
 801b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f8:	4630      	mov	r0, r6
 801b6fa:	4639      	mov	r1, r7
 801b6fc:	f7e5 fa28 	bl	8000b50 <__aeabi_dcmple>
 801b700:	b1a0      	cbz	r0, 801b72c <_strtod_l+0xb2c>
 801b702:	4639      	mov	r1, r7
 801b704:	4630      	mov	r0, r6
 801b706:	f7e5 fa7f 	bl	8000c08 <__aeabi_d2uiz>
 801b70a:	2801      	cmp	r0, #1
 801b70c:	bf38      	it	cc
 801b70e:	2001      	movcc	r0, #1
 801b710:	f7e4 ff28 	bl	8000564 <__aeabi_ui2d>
 801b714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b716:	4606      	mov	r6, r0
 801b718:	460f      	mov	r7, r1
 801b71a:	bb23      	cbnz	r3, 801b766 <_strtod_l+0xb66>
 801b71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b720:	9010      	str	r0, [sp, #64]	; 0x40
 801b722:	9311      	str	r3, [sp, #68]	; 0x44
 801b724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b728:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801b72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b730:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b734:	1a9b      	subs	r3, r3, r2
 801b736:	930f      	str	r3, [sp, #60]	; 0x3c
 801b738:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b73c:	eeb0 0a48 	vmov.f32	s0, s16
 801b740:	eef0 0a68 	vmov.f32	s1, s17
 801b744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801b748:	f7ff f8fc 	bl	801a944 <__ulp>
 801b74c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801b750:	ec53 2b10 	vmov	r2, r3, d0
 801b754:	f7e4 ff80 	bl	8000658 <__aeabi_dmul>
 801b758:	ec53 2b18 	vmov	r2, r3, d8
 801b75c:	f7e4 fdc6 	bl	80002ec <__adddf3>
 801b760:	4680      	mov	r8, r0
 801b762:	4689      	mov	r9, r1
 801b764:	e78d      	b.n	801b682 <_strtod_l+0xa82>
 801b766:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801b76a:	e7db      	b.n	801b724 <_strtod_l+0xb24>
 801b76c:	a314      	add	r3, pc, #80	; (adr r3, 801b7c0 <_strtod_l+0xbc0>)
 801b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b772:	f7e5 f9e3 	bl	8000b3c <__aeabi_dcmplt>
 801b776:	e7b3      	b.n	801b6e0 <_strtod_l+0xae0>
 801b778:	2300      	movs	r3, #0
 801b77a:	930a      	str	r3, [sp, #40]	; 0x28
 801b77c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b780:	6013      	str	r3, [r2, #0]
 801b782:	f7ff ba7c 	b.w	801ac7e <_strtod_l+0x7e>
 801b786:	2a65      	cmp	r2, #101	; 0x65
 801b788:	f43f ab75 	beq.w	801ae76 <_strtod_l+0x276>
 801b78c:	2a45      	cmp	r2, #69	; 0x45
 801b78e:	f43f ab72 	beq.w	801ae76 <_strtod_l+0x276>
 801b792:	2301      	movs	r3, #1
 801b794:	f7ff bbaa 	b.w	801aeec <_strtod_l+0x2ec>
 801b798:	00000000 	.word	0x00000000
 801b79c:	bff00000 	.word	0xbff00000
 801b7a0:	00000000 	.word	0x00000000
 801b7a4:	3ff00000 	.word	0x3ff00000
 801b7a8:	94a03595 	.word	0x94a03595
 801b7ac:	3fdfffff 	.word	0x3fdfffff
 801b7b0:	35afe535 	.word	0x35afe535
 801b7b4:	3fe00000 	.word	0x3fe00000
 801b7b8:	ffc00000 	.word	0xffc00000
 801b7bc:	41dfffff 	.word	0x41dfffff
 801b7c0:	94a03595 	.word	0x94a03595
 801b7c4:	3fcfffff 	.word	0x3fcfffff
 801b7c8:	3ff00000 	.word	0x3ff00000
 801b7cc:	3fe00000 	.word	0x3fe00000
 801b7d0:	7ff00000 	.word	0x7ff00000
 801b7d4:	7fe00000 	.word	0x7fe00000
 801b7d8:	7c9fffff 	.word	0x7c9fffff
 801b7dc:	7fefffff 	.word	0x7fefffff

0801b7e0 <_strtod_r>:
 801b7e0:	4b01      	ldr	r3, [pc, #4]	; (801b7e8 <_strtod_r+0x8>)
 801b7e2:	f7ff ba0d 	b.w	801ac00 <_strtod_l>
 801b7e6:	bf00      	nop
 801b7e8:	2000019c 	.word	0x2000019c

0801b7ec <_strtol_l.constprop.0>:
 801b7ec:	2b01      	cmp	r3, #1
 801b7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f2:	d001      	beq.n	801b7f8 <_strtol_l.constprop.0+0xc>
 801b7f4:	2b24      	cmp	r3, #36	; 0x24
 801b7f6:	d906      	bls.n	801b806 <_strtol_l.constprop.0+0x1a>
 801b7f8:	f7fd fe32 	bl	8019460 <__errno>
 801b7fc:	2316      	movs	r3, #22
 801b7fe:	6003      	str	r3, [r0, #0]
 801b800:	2000      	movs	r0, #0
 801b802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b806:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b8ec <_strtol_l.constprop.0+0x100>
 801b80a:	460d      	mov	r5, r1
 801b80c:	462e      	mov	r6, r5
 801b80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b812:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801b816:	f017 0708 	ands.w	r7, r7, #8
 801b81a:	d1f7      	bne.n	801b80c <_strtol_l.constprop.0+0x20>
 801b81c:	2c2d      	cmp	r4, #45	; 0x2d
 801b81e:	d132      	bne.n	801b886 <_strtol_l.constprop.0+0x9a>
 801b820:	782c      	ldrb	r4, [r5, #0]
 801b822:	2701      	movs	r7, #1
 801b824:	1cb5      	adds	r5, r6, #2
 801b826:	2b00      	cmp	r3, #0
 801b828:	d05b      	beq.n	801b8e2 <_strtol_l.constprop.0+0xf6>
 801b82a:	2b10      	cmp	r3, #16
 801b82c:	d109      	bne.n	801b842 <_strtol_l.constprop.0+0x56>
 801b82e:	2c30      	cmp	r4, #48	; 0x30
 801b830:	d107      	bne.n	801b842 <_strtol_l.constprop.0+0x56>
 801b832:	782c      	ldrb	r4, [r5, #0]
 801b834:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b838:	2c58      	cmp	r4, #88	; 0x58
 801b83a:	d14d      	bne.n	801b8d8 <_strtol_l.constprop.0+0xec>
 801b83c:	786c      	ldrb	r4, [r5, #1]
 801b83e:	2310      	movs	r3, #16
 801b840:	3502      	adds	r5, #2
 801b842:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b846:	f108 38ff 	add.w	r8, r8, #4294967295
 801b84a:	f04f 0e00 	mov.w	lr, #0
 801b84e:	fbb8 f9f3 	udiv	r9, r8, r3
 801b852:	4676      	mov	r6, lr
 801b854:	fb03 8a19 	mls	sl, r3, r9, r8
 801b858:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b85c:	f1bc 0f09 	cmp.w	ip, #9
 801b860:	d816      	bhi.n	801b890 <_strtol_l.constprop.0+0xa4>
 801b862:	4664      	mov	r4, ip
 801b864:	42a3      	cmp	r3, r4
 801b866:	dd24      	ble.n	801b8b2 <_strtol_l.constprop.0+0xc6>
 801b868:	f1be 3fff 	cmp.w	lr, #4294967295
 801b86c:	d008      	beq.n	801b880 <_strtol_l.constprop.0+0x94>
 801b86e:	45b1      	cmp	r9, r6
 801b870:	d31c      	bcc.n	801b8ac <_strtol_l.constprop.0+0xc0>
 801b872:	d101      	bne.n	801b878 <_strtol_l.constprop.0+0x8c>
 801b874:	45a2      	cmp	sl, r4
 801b876:	db19      	blt.n	801b8ac <_strtol_l.constprop.0+0xc0>
 801b878:	fb06 4603 	mla	r6, r6, r3, r4
 801b87c:	f04f 0e01 	mov.w	lr, #1
 801b880:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b884:	e7e8      	b.n	801b858 <_strtol_l.constprop.0+0x6c>
 801b886:	2c2b      	cmp	r4, #43	; 0x2b
 801b888:	bf04      	itt	eq
 801b88a:	782c      	ldrbeq	r4, [r5, #0]
 801b88c:	1cb5      	addeq	r5, r6, #2
 801b88e:	e7ca      	b.n	801b826 <_strtol_l.constprop.0+0x3a>
 801b890:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b894:	f1bc 0f19 	cmp.w	ip, #25
 801b898:	d801      	bhi.n	801b89e <_strtol_l.constprop.0+0xb2>
 801b89a:	3c37      	subs	r4, #55	; 0x37
 801b89c:	e7e2      	b.n	801b864 <_strtol_l.constprop.0+0x78>
 801b89e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b8a2:	f1bc 0f19 	cmp.w	ip, #25
 801b8a6:	d804      	bhi.n	801b8b2 <_strtol_l.constprop.0+0xc6>
 801b8a8:	3c57      	subs	r4, #87	; 0x57
 801b8aa:	e7db      	b.n	801b864 <_strtol_l.constprop.0+0x78>
 801b8ac:	f04f 3eff 	mov.w	lr, #4294967295
 801b8b0:	e7e6      	b.n	801b880 <_strtol_l.constprop.0+0x94>
 801b8b2:	f1be 3fff 	cmp.w	lr, #4294967295
 801b8b6:	d105      	bne.n	801b8c4 <_strtol_l.constprop.0+0xd8>
 801b8b8:	2322      	movs	r3, #34	; 0x22
 801b8ba:	6003      	str	r3, [r0, #0]
 801b8bc:	4646      	mov	r6, r8
 801b8be:	b942      	cbnz	r2, 801b8d2 <_strtol_l.constprop.0+0xe6>
 801b8c0:	4630      	mov	r0, r6
 801b8c2:	e79e      	b.n	801b802 <_strtol_l.constprop.0+0x16>
 801b8c4:	b107      	cbz	r7, 801b8c8 <_strtol_l.constprop.0+0xdc>
 801b8c6:	4276      	negs	r6, r6
 801b8c8:	2a00      	cmp	r2, #0
 801b8ca:	d0f9      	beq.n	801b8c0 <_strtol_l.constprop.0+0xd4>
 801b8cc:	f1be 0f00 	cmp.w	lr, #0
 801b8d0:	d000      	beq.n	801b8d4 <_strtol_l.constprop.0+0xe8>
 801b8d2:	1e69      	subs	r1, r5, #1
 801b8d4:	6011      	str	r1, [r2, #0]
 801b8d6:	e7f3      	b.n	801b8c0 <_strtol_l.constprop.0+0xd4>
 801b8d8:	2430      	movs	r4, #48	; 0x30
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d1b1      	bne.n	801b842 <_strtol_l.constprop.0+0x56>
 801b8de:	2308      	movs	r3, #8
 801b8e0:	e7af      	b.n	801b842 <_strtol_l.constprop.0+0x56>
 801b8e2:	2c30      	cmp	r4, #48	; 0x30
 801b8e4:	d0a5      	beq.n	801b832 <_strtol_l.constprop.0+0x46>
 801b8e6:	230a      	movs	r3, #10
 801b8e8:	e7ab      	b.n	801b842 <_strtol_l.constprop.0+0x56>
 801b8ea:	bf00      	nop
 801b8ec:	0801e1e9 	.word	0x0801e1e9

0801b8f0 <_strtol_r>:
 801b8f0:	f7ff bf7c 	b.w	801b7ec <_strtol_l.constprop.0>

0801b8f4 <__ssputs_r>:
 801b8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8f8:	688e      	ldr	r6, [r1, #8]
 801b8fa:	461f      	mov	r7, r3
 801b8fc:	42be      	cmp	r6, r7
 801b8fe:	680b      	ldr	r3, [r1, #0]
 801b900:	4682      	mov	sl, r0
 801b902:	460c      	mov	r4, r1
 801b904:	4690      	mov	r8, r2
 801b906:	d82c      	bhi.n	801b962 <__ssputs_r+0x6e>
 801b908:	898a      	ldrh	r2, [r1, #12]
 801b90a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b90e:	d026      	beq.n	801b95e <__ssputs_r+0x6a>
 801b910:	6965      	ldr	r5, [r4, #20]
 801b912:	6909      	ldr	r1, [r1, #16]
 801b914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b918:	eba3 0901 	sub.w	r9, r3, r1
 801b91c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b920:	1c7b      	adds	r3, r7, #1
 801b922:	444b      	add	r3, r9
 801b924:	106d      	asrs	r5, r5, #1
 801b926:	429d      	cmp	r5, r3
 801b928:	bf38      	it	cc
 801b92a:	461d      	movcc	r5, r3
 801b92c:	0553      	lsls	r3, r2, #21
 801b92e:	d527      	bpl.n	801b980 <__ssputs_r+0x8c>
 801b930:	4629      	mov	r1, r5
 801b932:	f7fc fb87 	bl	8018044 <_malloc_r>
 801b936:	4606      	mov	r6, r0
 801b938:	b360      	cbz	r0, 801b994 <__ssputs_r+0xa0>
 801b93a:	6921      	ldr	r1, [r4, #16]
 801b93c:	464a      	mov	r2, r9
 801b93e:	f7fd fdbb 	bl	80194b8 <memcpy>
 801b942:	89a3      	ldrh	r3, [r4, #12]
 801b944:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b94c:	81a3      	strh	r3, [r4, #12]
 801b94e:	6126      	str	r6, [r4, #16]
 801b950:	6165      	str	r5, [r4, #20]
 801b952:	444e      	add	r6, r9
 801b954:	eba5 0509 	sub.w	r5, r5, r9
 801b958:	6026      	str	r6, [r4, #0]
 801b95a:	60a5      	str	r5, [r4, #8]
 801b95c:	463e      	mov	r6, r7
 801b95e:	42be      	cmp	r6, r7
 801b960:	d900      	bls.n	801b964 <__ssputs_r+0x70>
 801b962:	463e      	mov	r6, r7
 801b964:	6820      	ldr	r0, [r4, #0]
 801b966:	4632      	mov	r2, r6
 801b968:	4641      	mov	r1, r8
 801b96a:	f000 ff02 	bl	801c772 <memmove>
 801b96e:	68a3      	ldr	r3, [r4, #8]
 801b970:	1b9b      	subs	r3, r3, r6
 801b972:	60a3      	str	r3, [r4, #8]
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	4433      	add	r3, r6
 801b978:	6023      	str	r3, [r4, #0]
 801b97a:	2000      	movs	r0, #0
 801b97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b980:	462a      	mov	r2, r5
 801b982:	f001 fad4 	bl	801cf2e <_realloc_r>
 801b986:	4606      	mov	r6, r0
 801b988:	2800      	cmp	r0, #0
 801b98a:	d1e0      	bne.n	801b94e <__ssputs_r+0x5a>
 801b98c:	6921      	ldr	r1, [r4, #16]
 801b98e:	4650      	mov	r0, sl
 801b990:	f7fe fc20 	bl	801a1d4 <_free_r>
 801b994:	230c      	movs	r3, #12
 801b996:	f8ca 3000 	str.w	r3, [sl]
 801b99a:	89a3      	ldrh	r3, [r4, #12]
 801b99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9a0:	81a3      	strh	r3, [r4, #12]
 801b9a2:	f04f 30ff 	mov.w	r0, #4294967295
 801b9a6:	e7e9      	b.n	801b97c <__ssputs_r+0x88>

0801b9a8 <_svfiprintf_r>:
 801b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ac:	4698      	mov	r8, r3
 801b9ae:	898b      	ldrh	r3, [r1, #12]
 801b9b0:	061b      	lsls	r3, r3, #24
 801b9b2:	b09d      	sub	sp, #116	; 0x74
 801b9b4:	4607      	mov	r7, r0
 801b9b6:	460d      	mov	r5, r1
 801b9b8:	4614      	mov	r4, r2
 801b9ba:	d50e      	bpl.n	801b9da <_svfiprintf_r+0x32>
 801b9bc:	690b      	ldr	r3, [r1, #16]
 801b9be:	b963      	cbnz	r3, 801b9da <_svfiprintf_r+0x32>
 801b9c0:	2140      	movs	r1, #64	; 0x40
 801b9c2:	f7fc fb3f 	bl	8018044 <_malloc_r>
 801b9c6:	6028      	str	r0, [r5, #0]
 801b9c8:	6128      	str	r0, [r5, #16]
 801b9ca:	b920      	cbnz	r0, 801b9d6 <_svfiprintf_r+0x2e>
 801b9cc:	230c      	movs	r3, #12
 801b9ce:	603b      	str	r3, [r7, #0]
 801b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 801b9d4:	e0d0      	b.n	801bb78 <_svfiprintf_r+0x1d0>
 801b9d6:	2340      	movs	r3, #64	; 0x40
 801b9d8:	616b      	str	r3, [r5, #20]
 801b9da:	2300      	movs	r3, #0
 801b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 801b9de:	2320      	movs	r3, #32
 801b9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 801b9e8:	2330      	movs	r3, #48	; 0x30
 801b9ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801bb90 <_svfiprintf_r+0x1e8>
 801b9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b9f2:	f04f 0901 	mov.w	r9, #1
 801b9f6:	4623      	mov	r3, r4
 801b9f8:	469a      	mov	sl, r3
 801b9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9fe:	b10a      	cbz	r2, 801ba04 <_svfiprintf_r+0x5c>
 801ba00:	2a25      	cmp	r2, #37	; 0x25
 801ba02:	d1f9      	bne.n	801b9f8 <_svfiprintf_r+0x50>
 801ba04:	ebba 0b04 	subs.w	fp, sl, r4
 801ba08:	d00b      	beq.n	801ba22 <_svfiprintf_r+0x7a>
 801ba0a:	465b      	mov	r3, fp
 801ba0c:	4622      	mov	r2, r4
 801ba0e:	4629      	mov	r1, r5
 801ba10:	4638      	mov	r0, r7
 801ba12:	f7ff ff6f 	bl	801b8f4 <__ssputs_r>
 801ba16:	3001      	adds	r0, #1
 801ba18:	f000 80a9 	beq.w	801bb6e <_svfiprintf_r+0x1c6>
 801ba1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba1e:	445a      	add	r2, fp
 801ba20:	9209      	str	r2, [sp, #36]	; 0x24
 801ba22:	f89a 3000 	ldrb.w	r3, [sl]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	f000 80a1 	beq.w	801bb6e <_svfiprintf_r+0x1c6>
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 801ba32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ba36:	f10a 0a01 	add.w	sl, sl, #1
 801ba3a:	9304      	str	r3, [sp, #16]
 801ba3c:	9307      	str	r3, [sp, #28]
 801ba3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ba42:	931a      	str	r3, [sp, #104]	; 0x68
 801ba44:	4654      	mov	r4, sl
 801ba46:	2205      	movs	r2, #5
 801ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba4c:	4850      	ldr	r0, [pc, #320]	; (801bb90 <_svfiprintf_r+0x1e8>)
 801ba4e:	f7e4 fbef 	bl	8000230 <memchr>
 801ba52:	9a04      	ldr	r2, [sp, #16]
 801ba54:	b9d8      	cbnz	r0, 801ba8e <_svfiprintf_r+0xe6>
 801ba56:	06d0      	lsls	r0, r2, #27
 801ba58:	bf44      	itt	mi
 801ba5a:	2320      	movmi	r3, #32
 801ba5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba60:	0711      	lsls	r1, r2, #28
 801ba62:	bf44      	itt	mi
 801ba64:	232b      	movmi	r3, #43	; 0x2b
 801ba66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba6a:	f89a 3000 	ldrb.w	r3, [sl]
 801ba6e:	2b2a      	cmp	r3, #42	; 0x2a
 801ba70:	d015      	beq.n	801ba9e <_svfiprintf_r+0xf6>
 801ba72:	9a07      	ldr	r2, [sp, #28]
 801ba74:	4654      	mov	r4, sl
 801ba76:	2000      	movs	r0, #0
 801ba78:	f04f 0c0a 	mov.w	ip, #10
 801ba7c:	4621      	mov	r1, r4
 801ba7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba82:	3b30      	subs	r3, #48	; 0x30
 801ba84:	2b09      	cmp	r3, #9
 801ba86:	d94d      	bls.n	801bb24 <_svfiprintf_r+0x17c>
 801ba88:	b1b0      	cbz	r0, 801bab8 <_svfiprintf_r+0x110>
 801ba8a:	9207      	str	r2, [sp, #28]
 801ba8c:	e014      	b.n	801bab8 <_svfiprintf_r+0x110>
 801ba8e:	eba0 0308 	sub.w	r3, r0, r8
 801ba92:	fa09 f303 	lsl.w	r3, r9, r3
 801ba96:	4313      	orrs	r3, r2
 801ba98:	9304      	str	r3, [sp, #16]
 801ba9a:	46a2      	mov	sl, r4
 801ba9c:	e7d2      	b.n	801ba44 <_svfiprintf_r+0x9c>
 801ba9e:	9b03      	ldr	r3, [sp, #12]
 801baa0:	1d19      	adds	r1, r3, #4
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	9103      	str	r1, [sp, #12]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	bfbb      	ittet	lt
 801baaa:	425b      	neglt	r3, r3
 801baac:	f042 0202 	orrlt.w	r2, r2, #2
 801bab0:	9307      	strge	r3, [sp, #28]
 801bab2:	9307      	strlt	r3, [sp, #28]
 801bab4:	bfb8      	it	lt
 801bab6:	9204      	strlt	r2, [sp, #16]
 801bab8:	7823      	ldrb	r3, [r4, #0]
 801baba:	2b2e      	cmp	r3, #46	; 0x2e
 801babc:	d10c      	bne.n	801bad8 <_svfiprintf_r+0x130>
 801babe:	7863      	ldrb	r3, [r4, #1]
 801bac0:	2b2a      	cmp	r3, #42	; 0x2a
 801bac2:	d134      	bne.n	801bb2e <_svfiprintf_r+0x186>
 801bac4:	9b03      	ldr	r3, [sp, #12]
 801bac6:	1d1a      	adds	r2, r3, #4
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	9203      	str	r2, [sp, #12]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	bfb8      	it	lt
 801bad0:	f04f 33ff 	movlt.w	r3, #4294967295
 801bad4:	3402      	adds	r4, #2
 801bad6:	9305      	str	r3, [sp, #20]
 801bad8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801bba0 <_svfiprintf_r+0x1f8>
 801badc:	7821      	ldrb	r1, [r4, #0]
 801bade:	2203      	movs	r2, #3
 801bae0:	4650      	mov	r0, sl
 801bae2:	f7e4 fba5 	bl	8000230 <memchr>
 801bae6:	b138      	cbz	r0, 801baf8 <_svfiprintf_r+0x150>
 801bae8:	9b04      	ldr	r3, [sp, #16]
 801baea:	eba0 000a 	sub.w	r0, r0, sl
 801baee:	2240      	movs	r2, #64	; 0x40
 801baf0:	4082      	lsls	r2, r0
 801baf2:	4313      	orrs	r3, r2
 801baf4:	3401      	adds	r4, #1
 801baf6:	9304      	str	r3, [sp, #16]
 801baf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bafc:	4825      	ldr	r0, [pc, #148]	; (801bb94 <_svfiprintf_r+0x1ec>)
 801bafe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bb02:	2206      	movs	r2, #6
 801bb04:	f7e4 fb94 	bl	8000230 <memchr>
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	d038      	beq.n	801bb7e <_svfiprintf_r+0x1d6>
 801bb0c:	4b22      	ldr	r3, [pc, #136]	; (801bb98 <_svfiprintf_r+0x1f0>)
 801bb0e:	bb1b      	cbnz	r3, 801bb58 <_svfiprintf_r+0x1b0>
 801bb10:	9b03      	ldr	r3, [sp, #12]
 801bb12:	3307      	adds	r3, #7
 801bb14:	f023 0307 	bic.w	r3, r3, #7
 801bb18:	3308      	adds	r3, #8
 801bb1a:	9303      	str	r3, [sp, #12]
 801bb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb1e:	4433      	add	r3, r6
 801bb20:	9309      	str	r3, [sp, #36]	; 0x24
 801bb22:	e768      	b.n	801b9f6 <_svfiprintf_r+0x4e>
 801bb24:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb28:	460c      	mov	r4, r1
 801bb2a:	2001      	movs	r0, #1
 801bb2c:	e7a6      	b.n	801ba7c <_svfiprintf_r+0xd4>
 801bb2e:	2300      	movs	r3, #0
 801bb30:	3401      	adds	r4, #1
 801bb32:	9305      	str	r3, [sp, #20]
 801bb34:	4619      	mov	r1, r3
 801bb36:	f04f 0c0a 	mov.w	ip, #10
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb40:	3a30      	subs	r2, #48	; 0x30
 801bb42:	2a09      	cmp	r2, #9
 801bb44:	d903      	bls.n	801bb4e <_svfiprintf_r+0x1a6>
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d0c6      	beq.n	801bad8 <_svfiprintf_r+0x130>
 801bb4a:	9105      	str	r1, [sp, #20]
 801bb4c:	e7c4      	b.n	801bad8 <_svfiprintf_r+0x130>
 801bb4e:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb52:	4604      	mov	r4, r0
 801bb54:	2301      	movs	r3, #1
 801bb56:	e7f0      	b.n	801bb3a <_svfiprintf_r+0x192>
 801bb58:	ab03      	add	r3, sp, #12
 801bb5a:	9300      	str	r3, [sp, #0]
 801bb5c:	462a      	mov	r2, r5
 801bb5e:	4b0f      	ldr	r3, [pc, #60]	; (801bb9c <_svfiprintf_r+0x1f4>)
 801bb60:	a904      	add	r1, sp, #16
 801bb62:	4638      	mov	r0, r7
 801bb64:	f7fc fb9a 	bl	801829c <_printf_float>
 801bb68:	1c42      	adds	r2, r0, #1
 801bb6a:	4606      	mov	r6, r0
 801bb6c:	d1d6      	bne.n	801bb1c <_svfiprintf_r+0x174>
 801bb6e:	89ab      	ldrh	r3, [r5, #12]
 801bb70:	065b      	lsls	r3, r3, #25
 801bb72:	f53f af2d 	bmi.w	801b9d0 <_svfiprintf_r+0x28>
 801bb76:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb78:	b01d      	add	sp, #116	; 0x74
 801bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb7e:	ab03      	add	r3, sp, #12
 801bb80:	9300      	str	r3, [sp, #0]
 801bb82:	462a      	mov	r2, r5
 801bb84:	4b05      	ldr	r3, [pc, #20]	; (801bb9c <_svfiprintf_r+0x1f4>)
 801bb86:	a904      	add	r1, sp, #16
 801bb88:	4638      	mov	r0, r7
 801bb8a:	f7fc fe2b 	bl	80187e4 <_printf_i>
 801bb8e:	e7eb      	b.n	801bb68 <_svfiprintf_r+0x1c0>
 801bb90:	0801e2e9 	.word	0x0801e2e9
 801bb94:	0801e2f3 	.word	0x0801e2f3
 801bb98:	0801829d 	.word	0x0801829d
 801bb9c:	0801b8f5 	.word	0x0801b8f5
 801bba0:	0801e2ef 	.word	0x0801e2ef

0801bba4 <_sungetc_r>:
 801bba4:	b538      	push	{r3, r4, r5, lr}
 801bba6:	1c4b      	adds	r3, r1, #1
 801bba8:	4614      	mov	r4, r2
 801bbaa:	d103      	bne.n	801bbb4 <_sungetc_r+0x10>
 801bbac:	f04f 35ff 	mov.w	r5, #4294967295
 801bbb0:	4628      	mov	r0, r5
 801bbb2:	bd38      	pop	{r3, r4, r5, pc}
 801bbb4:	8993      	ldrh	r3, [r2, #12]
 801bbb6:	f023 0320 	bic.w	r3, r3, #32
 801bbba:	8193      	strh	r3, [r2, #12]
 801bbbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bbbe:	6852      	ldr	r2, [r2, #4]
 801bbc0:	b2cd      	uxtb	r5, r1
 801bbc2:	b18b      	cbz	r3, 801bbe8 <_sungetc_r+0x44>
 801bbc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	dd08      	ble.n	801bbdc <_sungetc_r+0x38>
 801bbca:	6823      	ldr	r3, [r4, #0]
 801bbcc:	1e5a      	subs	r2, r3, #1
 801bbce:	6022      	str	r2, [r4, #0]
 801bbd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801bbd4:	6863      	ldr	r3, [r4, #4]
 801bbd6:	3301      	adds	r3, #1
 801bbd8:	6063      	str	r3, [r4, #4]
 801bbda:	e7e9      	b.n	801bbb0 <_sungetc_r+0xc>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	f000 fd8e 	bl	801c6fe <__submore>
 801bbe2:	2800      	cmp	r0, #0
 801bbe4:	d0f1      	beq.n	801bbca <_sungetc_r+0x26>
 801bbe6:	e7e1      	b.n	801bbac <_sungetc_r+0x8>
 801bbe8:	6921      	ldr	r1, [r4, #16]
 801bbea:	6823      	ldr	r3, [r4, #0]
 801bbec:	b151      	cbz	r1, 801bc04 <_sungetc_r+0x60>
 801bbee:	4299      	cmp	r1, r3
 801bbf0:	d208      	bcs.n	801bc04 <_sungetc_r+0x60>
 801bbf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801bbf6:	42a9      	cmp	r1, r5
 801bbf8:	d104      	bne.n	801bc04 <_sungetc_r+0x60>
 801bbfa:	3b01      	subs	r3, #1
 801bbfc:	3201      	adds	r2, #1
 801bbfe:	6023      	str	r3, [r4, #0]
 801bc00:	6062      	str	r2, [r4, #4]
 801bc02:	e7d5      	b.n	801bbb0 <_sungetc_r+0xc>
 801bc04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801bc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc0c:	6363      	str	r3, [r4, #52]	; 0x34
 801bc0e:	2303      	movs	r3, #3
 801bc10:	63a3      	str	r3, [r4, #56]	; 0x38
 801bc12:	4623      	mov	r3, r4
 801bc14:	f803 5f46 	strb.w	r5, [r3, #70]!
 801bc18:	6023      	str	r3, [r4, #0]
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	e7dc      	b.n	801bbd8 <_sungetc_r+0x34>

0801bc1e <__ssrefill_r>:
 801bc1e:	b510      	push	{r4, lr}
 801bc20:	460c      	mov	r4, r1
 801bc22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801bc24:	b169      	cbz	r1, 801bc42 <__ssrefill_r+0x24>
 801bc26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc2a:	4299      	cmp	r1, r3
 801bc2c:	d001      	beq.n	801bc32 <__ssrefill_r+0x14>
 801bc2e:	f7fe fad1 	bl	801a1d4 <_free_r>
 801bc32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc34:	6063      	str	r3, [r4, #4]
 801bc36:	2000      	movs	r0, #0
 801bc38:	6360      	str	r0, [r4, #52]	; 0x34
 801bc3a:	b113      	cbz	r3, 801bc42 <__ssrefill_r+0x24>
 801bc3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bc3e:	6023      	str	r3, [r4, #0]
 801bc40:	bd10      	pop	{r4, pc}
 801bc42:	6923      	ldr	r3, [r4, #16]
 801bc44:	6023      	str	r3, [r4, #0]
 801bc46:	2300      	movs	r3, #0
 801bc48:	6063      	str	r3, [r4, #4]
 801bc4a:	89a3      	ldrh	r3, [r4, #12]
 801bc4c:	f043 0320 	orr.w	r3, r3, #32
 801bc50:	81a3      	strh	r3, [r4, #12]
 801bc52:	f04f 30ff 	mov.w	r0, #4294967295
 801bc56:	e7f3      	b.n	801bc40 <__ssrefill_r+0x22>

0801bc58 <__ssvfiscanf_r>:
 801bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc5c:	460c      	mov	r4, r1
 801bc5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801bc62:	2100      	movs	r1, #0
 801bc64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801bc68:	49a6      	ldr	r1, [pc, #664]	; (801bf04 <__ssvfiscanf_r+0x2ac>)
 801bc6a:	91a0      	str	r1, [sp, #640]	; 0x280
 801bc6c:	f10d 0804 	add.w	r8, sp, #4
 801bc70:	49a5      	ldr	r1, [pc, #660]	; (801bf08 <__ssvfiscanf_r+0x2b0>)
 801bc72:	4fa6      	ldr	r7, [pc, #664]	; (801bf0c <__ssvfiscanf_r+0x2b4>)
 801bc74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801bf10 <__ssvfiscanf_r+0x2b8>
 801bc78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801bc7c:	4606      	mov	r6, r0
 801bc7e:	91a1      	str	r1, [sp, #644]	; 0x284
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	7813      	ldrb	r3, [r2, #0]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	f000 815a 	beq.w	801bf3e <__ssvfiscanf_r+0x2e6>
 801bc8a:	5cf9      	ldrb	r1, [r7, r3]
 801bc8c:	f011 0108 	ands.w	r1, r1, #8
 801bc90:	f102 0501 	add.w	r5, r2, #1
 801bc94:	d019      	beq.n	801bcca <__ssvfiscanf_r+0x72>
 801bc96:	6863      	ldr	r3, [r4, #4]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	dd0f      	ble.n	801bcbc <__ssvfiscanf_r+0x64>
 801bc9c:	6823      	ldr	r3, [r4, #0]
 801bc9e:	781a      	ldrb	r2, [r3, #0]
 801bca0:	5cba      	ldrb	r2, [r7, r2]
 801bca2:	0712      	lsls	r2, r2, #28
 801bca4:	d401      	bmi.n	801bcaa <__ssvfiscanf_r+0x52>
 801bca6:	462a      	mov	r2, r5
 801bca8:	e7eb      	b.n	801bc82 <__ssvfiscanf_r+0x2a>
 801bcaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801bcac:	3201      	adds	r2, #1
 801bcae:	9245      	str	r2, [sp, #276]	; 0x114
 801bcb0:	6862      	ldr	r2, [r4, #4]
 801bcb2:	3301      	adds	r3, #1
 801bcb4:	3a01      	subs	r2, #1
 801bcb6:	6062      	str	r2, [r4, #4]
 801bcb8:	6023      	str	r3, [r4, #0]
 801bcba:	e7ec      	b.n	801bc96 <__ssvfiscanf_r+0x3e>
 801bcbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bcbe:	4621      	mov	r1, r4
 801bcc0:	4630      	mov	r0, r6
 801bcc2:	4798      	blx	r3
 801bcc4:	2800      	cmp	r0, #0
 801bcc6:	d0e9      	beq.n	801bc9c <__ssvfiscanf_r+0x44>
 801bcc8:	e7ed      	b.n	801bca6 <__ssvfiscanf_r+0x4e>
 801bcca:	2b25      	cmp	r3, #37	; 0x25
 801bccc:	d012      	beq.n	801bcf4 <__ssvfiscanf_r+0x9c>
 801bcce:	469a      	mov	sl, r3
 801bcd0:	6863      	ldr	r3, [r4, #4]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	f340 8091 	ble.w	801bdfa <__ssvfiscanf_r+0x1a2>
 801bcd8:	6822      	ldr	r2, [r4, #0]
 801bcda:	7813      	ldrb	r3, [r2, #0]
 801bcdc:	4553      	cmp	r3, sl
 801bcde:	f040 812e 	bne.w	801bf3e <__ssvfiscanf_r+0x2e6>
 801bce2:	6863      	ldr	r3, [r4, #4]
 801bce4:	3b01      	subs	r3, #1
 801bce6:	6063      	str	r3, [r4, #4]
 801bce8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801bcea:	3201      	adds	r2, #1
 801bcec:	3301      	adds	r3, #1
 801bcee:	6022      	str	r2, [r4, #0]
 801bcf0:	9345      	str	r3, [sp, #276]	; 0x114
 801bcf2:	e7d8      	b.n	801bca6 <__ssvfiscanf_r+0x4e>
 801bcf4:	9141      	str	r1, [sp, #260]	; 0x104
 801bcf6:	9143      	str	r1, [sp, #268]	; 0x10c
 801bcf8:	7853      	ldrb	r3, [r2, #1]
 801bcfa:	2b2a      	cmp	r3, #42	; 0x2a
 801bcfc:	bf02      	ittt	eq
 801bcfe:	2310      	moveq	r3, #16
 801bd00:	1c95      	addeq	r5, r2, #2
 801bd02:	9341      	streq	r3, [sp, #260]	; 0x104
 801bd04:	220a      	movs	r2, #10
 801bd06:	46aa      	mov	sl, r5
 801bd08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801bd0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801bd10:	2b09      	cmp	r3, #9
 801bd12:	d91c      	bls.n	801bd4e <__ssvfiscanf_r+0xf6>
 801bd14:	487e      	ldr	r0, [pc, #504]	; (801bf10 <__ssvfiscanf_r+0x2b8>)
 801bd16:	2203      	movs	r2, #3
 801bd18:	f7e4 fa8a 	bl	8000230 <memchr>
 801bd1c:	b138      	cbz	r0, 801bd2e <__ssvfiscanf_r+0xd6>
 801bd1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801bd20:	eba0 0009 	sub.w	r0, r0, r9
 801bd24:	2301      	movs	r3, #1
 801bd26:	4083      	lsls	r3, r0
 801bd28:	4313      	orrs	r3, r2
 801bd2a:	9341      	str	r3, [sp, #260]	; 0x104
 801bd2c:	4655      	mov	r5, sl
 801bd2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801bd32:	2b78      	cmp	r3, #120	; 0x78
 801bd34:	d806      	bhi.n	801bd44 <__ssvfiscanf_r+0xec>
 801bd36:	2b57      	cmp	r3, #87	; 0x57
 801bd38:	d810      	bhi.n	801bd5c <__ssvfiscanf_r+0x104>
 801bd3a:	2b25      	cmp	r3, #37	; 0x25
 801bd3c:	d0c7      	beq.n	801bcce <__ssvfiscanf_r+0x76>
 801bd3e:	d857      	bhi.n	801bdf0 <__ssvfiscanf_r+0x198>
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d065      	beq.n	801be10 <__ssvfiscanf_r+0x1b8>
 801bd44:	2303      	movs	r3, #3
 801bd46:	9347      	str	r3, [sp, #284]	; 0x11c
 801bd48:	230a      	movs	r3, #10
 801bd4a:	9342      	str	r3, [sp, #264]	; 0x108
 801bd4c:	e076      	b.n	801be3c <__ssvfiscanf_r+0x1e4>
 801bd4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801bd50:	fb02 1103 	mla	r1, r2, r3, r1
 801bd54:	3930      	subs	r1, #48	; 0x30
 801bd56:	9143      	str	r1, [sp, #268]	; 0x10c
 801bd58:	4655      	mov	r5, sl
 801bd5a:	e7d4      	b.n	801bd06 <__ssvfiscanf_r+0xae>
 801bd5c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801bd60:	2a20      	cmp	r2, #32
 801bd62:	d8ef      	bhi.n	801bd44 <__ssvfiscanf_r+0xec>
 801bd64:	a101      	add	r1, pc, #4	; (adr r1, 801bd6c <__ssvfiscanf_r+0x114>)
 801bd66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bd6a:	bf00      	nop
 801bd6c:	0801be1f 	.word	0x0801be1f
 801bd70:	0801bd45 	.word	0x0801bd45
 801bd74:	0801bd45 	.word	0x0801bd45
 801bd78:	0801be7d 	.word	0x0801be7d
 801bd7c:	0801bd45 	.word	0x0801bd45
 801bd80:	0801bd45 	.word	0x0801bd45
 801bd84:	0801bd45 	.word	0x0801bd45
 801bd88:	0801bd45 	.word	0x0801bd45
 801bd8c:	0801bd45 	.word	0x0801bd45
 801bd90:	0801bd45 	.word	0x0801bd45
 801bd94:	0801bd45 	.word	0x0801bd45
 801bd98:	0801be93 	.word	0x0801be93
 801bd9c:	0801be79 	.word	0x0801be79
 801bda0:	0801bdf7 	.word	0x0801bdf7
 801bda4:	0801bdf7 	.word	0x0801bdf7
 801bda8:	0801bdf7 	.word	0x0801bdf7
 801bdac:	0801bd45 	.word	0x0801bd45
 801bdb0:	0801be35 	.word	0x0801be35
 801bdb4:	0801bd45 	.word	0x0801bd45
 801bdb8:	0801bd45 	.word	0x0801bd45
 801bdbc:	0801bd45 	.word	0x0801bd45
 801bdc0:	0801bd45 	.word	0x0801bd45
 801bdc4:	0801bea3 	.word	0x0801bea3
 801bdc8:	0801be71 	.word	0x0801be71
 801bdcc:	0801be17 	.word	0x0801be17
 801bdd0:	0801bd45 	.word	0x0801bd45
 801bdd4:	0801bd45 	.word	0x0801bd45
 801bdd8:	0801be9f 	.word	0x0801be9f
 801bddc:	0801bd45 	.word	0x0801bd45
 801bde0:	0801be79 	.word	0x0801be79
 801bde4:	0801bd45 	.word	0x0801bd45
 801bde8:	0801bd45 	.word	0x0801bd45
 801bdec:	0801be1f 	.word	0x0801be1f
 801bdf0:	3b45      	subs	r3, #69	; 0x45
 801bdf2:	2b02      	cmp	r3, #2
 801bdf4:	d8a6      	bhi.n	801bd44 <__ssvfiscanf_r+0xec>
 801bdf6:	2305      	movs	r3, #5
 801bdf8:	e01f      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801bdfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bdfc:	4621      	mov	r1, r4
 801bdfe:	4630      	mov	r0, r6
 801be00:	4798      	blx	r3
 801be02:	2800      	cmp	r0, #0
 801be04:	f43f af68 	beq.w	801bcd8 <__ssvfiscanf_r+0x80>
 801be08:	9844      	ldr	r0, [sp, #272]	; 0x110
 801be0a:	2800      	cmp	r0, #0
 801be0c:	f040 808d 	bne.w	801bf2a <__ssvfiscanf_r+0x2d2>
 801be10:	f04f 30ff 	mov.w	r0, #4294967295
 801be14:	e08f      	b.n	801bf36 <__ssvfiscanf_r+0x2de>
 801be16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801be18:	f042 0220 	orr.w	r2, r2, #32
 801be1c:	9241      	str	r2, [sp, #260]	; 0x104
 801be1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801be20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801be24:	9241      	str	r2, [sp, #260]	; 0x104
 801be26:	2210      	movs	r2, #16
 801be28:	2b6f      	cmp	r3, #111	; 0x6f
 801be2a:	9242      	str	r2, [sp, #264]	; 0x108
 801be2c:	bf34      	ite	cc
 801be2e:	2303      	movcc	r3, #3
 801be30:	2304      	movcs	r3, #4
 801be32:	e002      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801be34:	2300      	movs	r3, #0
 801be36:	9342      	str	r3, [sp, #264]	; 0x108
 801be38:	2303      	movs	r3, #3
 801be3a:	9347      	str	r3, [sp, #284]	; 0x11c
 801be3c:	6863      	ldr	r3, [r4, #4]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	dd3d      	ble.n	801bebe <__ssvfiscanf_r+0x266>
 801be42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801be44:	0659      	lsls	r1, r3, #25
 801be46:	d404      	bmi.n	801be52 <__ssvfiscanf_r+0x1fa>
 801be48:	6823      	ldr	r3, [r4, #0]
 801be4a:	781a      	ldrb	r2, [r3, #0]
 801be4c:	5cba      	ldrb	r2, [r7, r2]
 801be4e:	0712      	lsls	r2, r2, #28
 801be50:	d43c      	bmi.n	801becc <__ssvfiscanf_r+0x274>
 801be52:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801be54:	2b02      	cmp	r3, #2
 801be56:	dc4b      	bgt.n	801bef0 <__ssvfiscanf_r+0x298>
 801be58:	466b      	mov	r3, sp
 801be5a:	4622      	mov	r2, r4
 801be5c:	a941      	add	r1, sp, #260	; 0x104
 801be5e:	4630      	mov	r0, r6
 801be60:	f000 f9b6 	bl	801c1d0 <_scanf_chars>
 801be64:	2801      	cmp	r0, #1
 801be66:	d06a      	beq.n	801bf3e <__ssvfiscanf_r+0x2e6>
 801be68:	2802      	cmp	r0, #2
 801be6a:	f47f af1c 	bne.w	801bca6 <__ssvfiscanf_r+0x4e>
 801be6e:	e7cb      	b.n	801be08 <__ssvfiscanf_r+0x1b0>
 801be70:	2308      	movs	r3, #8
 801be72:	9342      	str	r3, [sp, #264]	; 0x108
 801be74:	2304      	movs	r3, #4
 801be76:	e7e0      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801be78:	220a      	movs	r2, #10
 801be7a:	e7d5      	b.n	801be28 <__ssvfiscanf_r+0x1d0>
 801be7c:	4629      	mov	r1, r5
 801be7e:	4640      	mov	r0, r8
 801be80:	f000 fc04 	bl	801c68c <__sccl>
 801be84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801be86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be8a:	9341      	str	r3, [sp, #260]	; 0x104
 801be8c:	4605      	mov	r5, r0
 801be8e:	2301      	movs	r3, #1
 801be90:	e7d3      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801be92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801be94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be98:	9341      	str	r3, [sp, #260]	; 0x104
 801be9a:	2300      	movs	r3, #0
 801be9c:	e7cd      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801be9e:	2302      	movs	r3, #2
 801bea0:	e7cb      	b.n	801be3a <__ssvfiscanf_r+0x1e2>
 801bea2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801bea4:	06c3      	lsls	r3, r0, #27
 801bea6:	f53f aefe 	bmi.w	801bca6 <__ssvfiscanf_r+0x4e>
 801beaa:	9b00      	ldr	r3, [sp, #0]
 801beac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801beae:	1d19      	adds	r1, r3, #4
 801beb0:	9100      	str	r1, [sp, #0]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	07c0      	lsls	r0, r0, #31
 801beb6:	bf4c      	ite	mi
 801beb8:	801a      	strhmi	r2, [r3, #0]
 801beba:	601a      	strpl	r2, [r3, #0]
 801bebc:	e6f3      	b.n	801bca6 <__ssvfiscanf_r+0x4e>
 801bebe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bec0:	4621      	mov	r1, r4
 801bec2:	4630      	mov	r0, r6
 801bec4:	4798      	blx	r3
 801bec6:	2800      	cmp	r0, #0
 801bec8:	d0bb      	beq.n	801be42 <__ssvfiscanf_r+0x1ea>
 801beca:	e79d      	b.n	801be08 <__ssvfiscanf_r+0x1b0>
 801becc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801bece:	3201      	adds	r2, #1
 801bed0:	9245      	str	r2, [sp, #276]	; 0x114
 801bed2:	6862      	ldr	r2, [r4, #4]
 801bed4:	3a01      	subs	r2, #1
 801bed6:	2a00      	cmp	r2, #0
 801bed8:	6062      	str	r2, [r4, #4]
 801beda:	dd02      	ble.n	801bee2 <__ssvfiscanf_r+0x28a>
 801bedc:	3301      	adds	r3, #1
 801bede:	6023      	str	r3, [r4, #0]
 801bee0:	e7b2      	b.n	801be48 <__ssvfiscanf_r+0x1f0>
 801bee2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801bee4:	4621      	mov	r1, r4
 801bee6:	4630      	mov	r0, r6
 801bee8:	4798      	blx	r3
 801beea:	2800      	cmp	r0, #0
 801beec:	d0ac      	beq.n	801be48 <__ssvfiscanf_r+0x1f0>
 801beee:	e78b      	b.n	801be08 <__ssvfiscanf_r+0x1b0>
 801bef0:	2b04      	cmp	r3, #4
 801bef2:	dc0f      	bgt.n	801bf14 <__ssvfiscanf_r+0x2bc>
 801bef4:	466b      	mov	r3, sp
 801bef6:	4622      	mov	r2, r4
 801bef8:	a941      	add	r1, sp, #260	; 0x104
 801befa:	4630      	mov	r0, r6
 801befc:	f000 f9c2 	bl	801c284 <_scanf_i>
 801bf00:	e7b0      	b.n	801be64 <__ssvfiscanf_r+0x20c>
 801bf02:	bf00      	nop
 801bf04:	0801bba5 	.word	0x0801bba5
 801bf08:	0801bc1f 	.word	0x0801bc1f
 801bf0c:	0801e1e9 	.word	0x0801e1e9
 801bf10:	0801e2ef 	.word	0x0801e2ef
 801bf14:	4b0b      	ldr	r3, [pc, #44]	; (801bf44 <__ssvfiscanf_r+0x2ec>)
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	f43f aec5 	beq.w	801bca6 <__ssvfiscanf_r+0x4e>
 801bf1c:	466b      	mov	r3, sp
 801bf1e:	4622      	mov	r2, r4
 801bf20:	a941      	add	r1, sp, #260	; 0x104
 801bf22:	4630      	mov	r0, r6
 801bf24:	f7fc fd80 	bl	8018a28 <_scanf_float>
 801bf28:	e79c      	b.n	801be64 <__ssvfiscanf_r+0x20c>
 801bf2a:	89a3      	ldrh	r3, [r4, #12]
 801bf2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801bf30:	bf18      	it	ne
 801bf32:	f04f 30ff 	movne.w	r0, #4294967295
 801bf36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801bf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801bf40:	e7f9      	b.n	801bf36 <__ssvfiscanf_r+0x2de>
 801bf42:	bf00      	nop
 801bf44:	08018a29 	.word	0x08018a29

0801bf48 <__sfputc_r>:
 801bf48:	6893      	ldr	r3, [r2, #8]
 801bf4a:	3b01      	subs	r3, #1
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	b410      	push	{r4}
 801bf50:	6093      	str	r3, [r2, #8]
 801bf52:	da08      	bge.n	801bf66 <__sfputc_r+0x1e>
 801bf54:	6994      	ldr	r4, [r2, #24]
 801bf56:	42a3      	cmp	r3, r4
 801bf58:	db01      	blt.n	801bf5e <__sfputc_r+0x16>
 801bf5a:	290a      	cmp	r1, #10
 801bf5c:	d103      	bne.n	801bf66 <__sfputc_r+0x1e>
 801bf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf62:	f7fd b920 	b.w	80191a6 <__swbuf_r>
 801bf66:	6813      	ldr	r3, [r2, #0]
 801bf68:	1c58      	adds	r0, r3, #1
 801bf6a:	6010      	str	r0, [r2, #0]
 801bf6c:	7019      	strb	r1, [r3, #0]
 801bf6e:	4608      	mov	r0, r1
 801bf70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf74:	4770      	bx	lr

0801bf76 <__sfputs_r>:
 801bf76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf78:	4606      	mov	r6, r0
 801bf7a:	460f      	mov	r7, r1
 801bf7c:	4614      	mov	r4, r2
 801bf7e:	18d5      	adds	r5, r2, r3
 801bf80:	42ac      	cmp	r4, r5
 801bf82:	d101      	bne.n	801bf88 <__sfputs_r+0x12>
 801bf84:	2000      	movs	r0, #0
 801bf86:	e007      	b.n	801bf98 <__sfputs_r+0x22>
 801bf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf8c:	463a      	mov	r2, r7
 801bf8e:	4630      	mov	r0, r6
 801bf90:	f7ff ffda 	bl	801bf48 <__sfputc_r>
 801bf94:	1c43      	adds	r3, r0, #1
 801bf96:	d1f3      	bne.n	801bf80 <__sfputs_r+0xa>
 801bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bf9c <_vfiprintf_r>:
 801bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa0:	460d      	mov	r5, r1
 801bfa2:	b09d      	sub	sp, #116	; 0x74
 801bfa4:	4614      	mov	r4, r2
 801bfa6:	4698      	mov	r8, r3
 801bfa8:	4606      	mov	r6, r0
 801bfaa:	b118      	cbz	r0, 801bfb4 <_vfiprintf_r+0x18>
 801bfac:	6a03      	ldr	r3, [r0, #32]
 801bfae:	b90b      	cbnz	r3, 801bfb4 <_vfiprintf_r+0x18>
 801bfb0:	f7fc ffc4 	bl	8018f3c <__sinit>
 801bfb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfb6:	07d9      	lsls	r1, r3, #31
 801bfb8:	d405      	bmi.n	801bfc6 <_vfiprintf_r+0x2a>
 801bfba:	89ab      	ldrh	r3, [r5, #12]
 801bfbc:	059a      	lsls	r2, r3, #22
 801bfbe:	d402      	bmi.n	801bfc6 <_vfiprintf_r+0x2a>
 801bfc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfc2:	f7fd fa77 	bl	80194b4 <__retarget_lock_acquire_recursive>
 801bfc6:	89ab      	ldrh	r3, [r5, #12]
 801bfc8:	071b      	lsls	r3, r3, #28
 801bfca:	d501      	bpl.n	801bfd0 <_vfiprintf_r+0x34>
 801bfcc:	692b      	ldr	r3, [r5, #16]
 801bfce:	b99b      	cbnz	r3, 801bff8 <_vfiprintf_r+0x5c>
 801bfd0:	4629      	mov	r1, r5
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f7fd f924 	bl	8019220 <__swsetup_r>
 801bfd8:	b170      	cbz	r0, 801bff8 <_vfiprintf_r+0x5c>
 801bfda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfdc:	07dc      	lsls	r4, r3, #31
 801bfde:	d504      	bpl.n	801bfea <_vfiprintf_r+0x4e>
 801bfe0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfe4:	b01d      	add	sp, #116	; 0x74
 801bfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfea:	89ab      	ldrh	r3, [r5, #12]
 801bfec:	0598      	lsls	r0, r3, #22
 801bfee:	d4f7      	bmi.n	801bfe0 <_vfiprintf_r+0x44>
 801bff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bff2:	f7fd fa60 	bl	80194b6 <__retarget_lock_release_recursive>
 801bff6:	e7f3      	b.n	801bfe0 <_vfiprintf_r+0x44>
 801bff8:	2300      	movs	r3, #0
 801bffa:	9309      	str	r3, [sp, #36]	; 0x24
 801bffc:	2320      	movs	r3, #32
 801bffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c002:	f8cd 800c 	str.w	r8, [sp, #12]
 801c006:	2330      	movs	r3, #48	; 0x30
 801c008:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c1bc <_vfiprintf_r+0x220>
 801c00c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c010:	f04f 0901 	mov.w	r9, #1
 801c014:	4623      	mov	r3, r4
 801c016:	469a      	mov	sl, r3
 801c018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c01c:	b10a      	cbz	r2, 801c022 <_vfiprintf_r+0x86>
 801c01e:	2a25      	cmp	r2, #37	; 0x25
 801c020:	d1f9      	bne.n	801c016 <_vfiprintf_r+0x7a>
 801c022:	ebba 0b04 	subs.w	fp, sl, r4
 801c026:	d00b      	beq.n	801c040 <_vfiprintf_r+0xa4>
 801c028:	465b      	mov	r3, fp
 801c02a:	4622      	mov	r2, r4
 801c02c:	4629      	mov	r1, r5
 801c02e:	4630      	mov	r0, r6
 801c030:	f7ff ffa1 	bl	801bf76 <__sfputs_r>
 801c034:	3001      	adds	r0, #1
 801c036:	f000 80a9 	beq.w	801c18c <_vfiprintf_r+0x1f0>
 801c03a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c03c:	445a      	add	r2, fp
 801c03e:	9209      	str	r2, [sp, #36]	; 0x24
 801c040:	f89a 3000 	ldrb.w	r3, [sl]
 801c044:	2b00      	cmp	r3, #0
 801c046:	f000 80a1 	beq.w	801c18c <_vfiprintf_r+0x1f0>
 801c04a:	2300      	movs	r3, #0
 801c04c:	f04f 32ff 	mov.w	r2, #4294967295
 801c050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c054:	f10a 0a01 	add.w	sl, sl, #1
 801c058:	9304      	str	r3, [sp, #16]
 801c05a:	9307      	str	r3, [sp, #28]
 801c05c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c060:	931a      	str	r3, [sp, #104]	; 0x68
 801c062:	4654      	mov	r4, sl
 801c064:	2205      	movs	r2, #5
 801c066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c06a:	4854      	ldr	r0, [pc, #336]	; (801c1bc <_vfiprintf_r+0x220>)
 801c06c:	f7e4 f8e0 	bl	8000230 <memchr>
 801c070:	9a04      	ldr	r2, [sp, #16]
 801c072:	b9d8      	cbnz	r0, 801c0ac <_vfiprintf_r+0x110>
 801c074:	06d1      	lsls	r1, r2, #27
 801c076:	bf44      	itt	mi
 801c078:	2320      	movmi	r3, #32
 801c07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c07e:	0713      	lsls	r3, r2, #28
 801c080:	bf44      	itt	mi
 801c082:	232b      	movmi	r3, #43	; 0x2b
 801c084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c088:	f89a 3000 	ldrb.w	r3, [sl]
 801c08c:	2b2a      	cmp	r3, #42	; 0x2a
 801c08e:	d015      	beq.n	801c0bc <_vfiprintf_r+0x120>
 801c090:	9a07      	ldr	r2, [sp, #28]
 801c092:	4654      	mov	r4, sl
 801c094:	2000      	movs	r0, #0
 801c096:	f04f 0c0a 	mov.w	ip, #10
 801c09a:	4621      	mov	r1, r4
 801c09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0a0:	3b30      	subs	r3, #48	; 0x30
 801c0a2:	2b09      	cmp	r3, #9
 801c0a4:	d94d      	bls.n	801c142 <_vfiprintf_r+0x1a6>
 801c0a6:	b1b0      	cbz	r0, 801c0d6 <_vfiprintf_r+0x13a>
 801c0a8:	9207      	str	r2, [sp, #28]
 801c0aa:	e014      	b.n	801c0d6 <_vfiprintf_r+0x13a>
 801c0ac:	eba0 0308 	sub.w	r3, r0, r8
 801c0b0:	fa09 f303 	lsl.w	r3, r9, r3
 801c0b4:	4313      	orrs	r3, r2
 801c0b6:	9304      	str	r3, [sp, #16]
 801c0b8:	46a2      	mov	sl, r4
 801c0ba:	e7d2      	b.n	801c062 <_vfiprintf_r+0xc6>
 801c0bc:	9b03      	ldr	r3, [sp, #12]
 801c0be:	1d19      	adds	r1, r3, #4
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	9103      	str	r1, [sp, #12]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	bfbb      	ittet	lt
 801c0c8:	425b      	neglt	r3, r3
 801c0ca:	f042 0202 	orrlt.w	r2, r2, #2
 801c0ce:	9307      	strge	r3, [sp, #28]
 801c0d0:	9307      	strlt	r3, [sp, #28]
 801c0d2:	bfb8      	it	lt
 801c0d4:	9204      	strlt	r2, [sp, #16]
 801c0d6:	7823      	ldrb	r3, [r4, #0]
 801c0d8:	2b2e      	cmp	r3, #46	; 0x2e
 801c0da:	d10c      	bne.n	801c0f6 <_vfiprintf_r+0x15a>
 801c0dc:	7863      	ldrb	r3, [r4, #1]
 801c0de:	2b2a      	cmp	r3, #42	; 0x2a
 801c0e0:	d134      	bne.n	801c14c <_vfiprintf_r+0x1b0>
 801c0e2:	9b03      	ldr	r3, [sp, #12]
 801c0e4:	1d1a      	adds	r2, r3, #4
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	9203      	str	r2, [sp, #12]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	bfb8      	it	lt
 801c0ee:	f04f 33ff 	movlt.w	r3, #4294967295
 801c0f2:	3402      	adds	r4, #2
 801c0f4:	9305      	str	r3, [sp, #20]
 801c0f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c1cc <_vfiprintf_r+0x230>
 801c0fa:	7821      	ldrb	r1, [r4, #0]
 801c0fc:	2203      	movs	r2, #3
 801c0fe:	4650      	mov	r0, sl
 801c100:	f7e4 f896 	bl	8000230 <memchr>
 801c104:	b138      	cbz	r0, 801c116 <_vfiprintf_r+0x17a>
 801c106:	9b04      	ldr	r3, [sp, #16]
 801c108:	eba0 000a 	sub.w	r0, r0, sl
 801c10c:	2240      	movs	r2, #64	; 0x40
 801c10e:	4082      	lsls	r2, r0
 801c110:	4313      	orrs	r3, r2
 801c112:	3401      	adds	r4, #1
 801c114:	9304      	str	r3, [sp, #16]
 801c116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c11a:	4829      	ldr	r0, [pc, #164]	; (801c1c0 <_vfiprintf_r+0x224>)
 801c11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c120:	2206      	movs	r2, #6
 801c122:	f7e4 f885 	bl	8000230 <memchr>
 801c126:	2800      	cmp	r0, #0
 801c128:	d03f      	beq.n	801c1aa <_vfiprintf_r+0x20e>
 801c12a:	4b26      	ldr	r3, [pc, #152]	; (801c1c4 <_vfiprintf_r+0x228>)
 801c12c:	bb1b      	cbnz	r3, 801c176 <_vfiprintf_r+0x1da>
 801c12e:	9b03      	ldr	r3, [sp, #12]
 801c130:	3307      	adds	r3, #7
 801c132:	f023 0307 	bic.w	r3, r3, #7
 801c136:	3308      	adds	r3, #8
 801c138:	9303      	str	r3, [sp, #12]
 801c13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c13c:	443b      	add	r3, r7
 801c13e:	9309      	str	r3, [sp, #36]	; 0x24
 801c140:	e768      	b.n	801c014 <_vfiprintf_r+0x78>
 801c142:	fb0c 3202 	mla	r2, ip, r2, r3
 801c146:	460c      	mov	r4, r1
 801c148:	2001      	movs	r0, #1
 801c14a:	e7a6      	b.n	801c09a <_vfiprintf_r+0xfe>
 801c14c:	2300      	movs	r3, #0
 801c14e:	3401      	adds	r4, #1
 801c150:	9305      	str	r3, [sp, #20]
 801c152:	4619      	mov	r1, r3
 801c154:	f04f 0c0a 	mov.w	ip, #10
 801c158:	4620      	mov	r0, r4
 801c15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c15e:	3a30      	subs	r2, #48	; 0x30
 801c160:	2a09      	cmp	r2, #9
 801c162:	d903      	bls.n	801c16c <_vfiprintf_r+0x1d0>
 801c164:	2b00      	cmp	r3, #0
 801c166:	d0c6      	beq.n	801c0f6 <_vfiprintf_r+0x15a>
 801c168:	9105      	str	r1, [sp, #20]
 801c16a:	e7c4      	b.n	801c0f6 <_vfiprintf_r+0x15a>
 801c16c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c170:	4604      	mov	r4, r0
 801c172:	2301      	movs	r3, #1
 801c174:	e7f0      	b.n	801c158 <_vfiprintf_r+0x1bc>
 801c176:	ab03      	add	r3, sp, #12
 801c178:	9300      	str	r3, [sp, #0]
 801c17a:	462a      	mov	r2, r5
 801c17c:	4b12      	ldr	r3, [pc, #72]	; (801c1c8 <_vfiprintf_r+0x22c>)
 801c17e:	a904      	add	r1, sp, #16
 801c180:	4630      	mov	r0, r6
 801c182:	f7fc f88b 	bl	801829c <_printf_float>
 801c186:	4607      	mov	r7, r0
 801c188:	1c78      	adds	r0, r7, #1
 801c18a:	d1d6      	bne.n	801c13a <_vfiprintf_r+0x19e>
 801c18c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c18e:	07d9      	lsls	r1, r3, #31
 801c190:	d405      	bmi.n	801c19e <_vfiprintf_r+0x202>
 801c192:	89ab      	ldrh	r3, [r5, #12]
 801c194:	059a      	lsls	r2, r3, #22
 801c196:	d402      	bmi.n	801c19e <_vfiprintf_r+0x202>
 801c198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c19a:	f7fd f98c 	bl	80194b6 <__retarget_lock_release_recursive>
 801c19e:	89ab      	ldrh	r3, [r5, #12]
 801c1a0:	065b      	lsls	r3, r3, #25
 801c1a2:	f53f af1d 	bmi.w	801bfe0 <_vfiprintf_r+0x44>
 801c1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c1a8:	e71c      	b.n	801bfe4 <_vfiprintf_r+0x48>
 801c1aa:	ab03      	add	r3, sp, #12
 801c1ac:	9300      	str	r3, [sp, #0]
 801c1ae:	462a      	mov	r2, r5
 801c1b0:	4b05      	ldr	r3, [pc, #20]	; (801c1c8 <_vfiprintf_r+0x22c>)
 801c1b2:	a904      	add	r1, sp, #16
 801c1b4:	4630      	mov	r0, r6
 801c1b6:	f7fc fb15 	bl	80187e4 <_printf_i>
 801c1ba:	e7e4      	b.n	801c186 <_vfiprintf_r+0x1ea>
 801c1bc:	0801e2e9 	.word	0x0801e2e9
 801c1c0:	0801e2f3 	.word	0x0801e2f3
 801c1c4:	0801829d 	.word	0x0801829d
 801c1c8:	0801bf77 	.word	0x0801bf77
 801c1cc:	0801e2ef 	.word	0x0801e2ef

0801c1d0 <_scanf_chars>:
 801c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1d4:	4615      	mov	r5, r2
 801c1d6:	688a      	ldr	r2, [r1, #8]
 801c1d8:	4680      	mov	r8, r0
 801c1da:	460c      	mov	r4, r1
 801c1dc:	b932      	cbnz	r2, 801c1ec <_scanf_chars+0x1c>
 801c1de:	698a      	ldr	r2, [r1, #24]
 801c1e0:	2a00      	cmp	r2, #0
 801c1e2:	bf0c      	ite	eq
 801c1e4:	2201      	moveq	r2, #1
 801c1e6:	f04f 32ff 	movne.w	r2, #4294967295
 801c1ea:	608a      	str	r2, [r1, #8]
 801c1ec:	6822      	ldr	r2, [r4, #0]
 801c1ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801c280 <_scanf_chars+0xb0>
 801c1f2:	06d1      	lsls	r1, r2, #27
 801c1f4:	bf5f      	itttt	pl
 801c1f6:	681a      	ldrpl	r2, [r3, #0]
 801c1f8:	1d11      	addpl	r1, r2, #4
 801c1fa:	6019      	strpl	r1, [r3, #0]
 801c1fc:	6816      	ldrpl	r6, [r2, #0]
 801c1fe:	2700      	movs	r7, #0
 801c200:	69a0      	ldr	r0, [r4, #24]
 801c202:	b188      	cbz	r0, 801c228 <_scanf_chars+0x58>
 801c204:	2801      	cmp	r0, #1
 801c206:	d107      	bne.n	801c218 <_scanf_chars+0x48>
 801c208:	682a      	ldr	r2, [r5, #0]
 801c20a:	7811      	ldrb	r1, [r2, #0]
 801c20c:	6962      	ldr	r2, [r4, #20]
 801c20e:	5c52      	ldrb	r2, [r2, r1]
 801c210:	b952      	cbnz	r2, 801c228 <_scanf_chars+0x58>
 801c212:	2f00      	cmp	r7, #0
 801c214:	d031      	beq.n	801c27a <_scanf_chars+0xaa>
 801c216:	e022      	b.n	801c25e <_scanf_chars+0x8e>
 801c218:	2802      	cmp	r0, #2
 801c21a:	d120      	bne.n	801c25e <_scanf_chars+0x8e>
 801c21c:	682b      	ldr	r3, [r5, #0]
 801c21e:	781b      	ldrb	r3, [r3, #0]
 801c220:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c224:	071b      	lsls	r3, r3, #28
 801c226:	d41a      	bmi.n	801c25e <_scanf_chars+0x8e>
 801c228:	6823      	ldr	r3, [r4, #0]
 801c22a:	06da      	lsls	r2, r3, #27
 801c22c:	bf5e      	ittt	pl
 801c22e:	682b      	ldrpl	r3, [r5, #0]
 801c230:	781b      	ldrbpl	r3, [r3, #0]
 801c232:	f806 3b01 	strbpl.w	r3, [r6], #1
 801c236:	682a      	ldr	r2, [r5, #0]
 801c238:	686b      	ldr	r3, [r5, #4]
 801c23a:	3201      	adds	r2, #1
 801c23c:	602a      	str	r2, [r5, #0]
 801c23e:	68a2      	ldr	r2, [r4, #8]
 801c240:	3b01      	subs	r3, #1
 801c242:	3a01      	subs	r2, #1
 801c244:	606b      	str	r3, [r5, #4]
 801c246:	3701      	adds	r7, #1
 801c248:	60a2      	str	r2, [r4, #8]
 801c24a:	b142      	cbz	r2, 801c25e <_scanf_chars+0x8e>
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	dcd7      	bgt.n	801c200 <_scanf_chars+0x30>
 801c250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c254:	4629      	mov	r1, r5
 801c256:	4640      	mov	r0, r8
 801c258:	4798      	blx	r3
 801c25a:	2800      	cmp	r0, #0
 801c25c:	d0d0      	beq.n	801c200 <_scanf_chars+0x30>
 801c25e:	6823      	ldr	r3, [r4, #0]
 801c260:	f013 0310 	ands.w	r3, r3, #16
 801c264:	d105      	bne.n	801c272 <_scanf_chars+0xa2>
 801c266:	68e2      	ldr	r2, [r4, #12]
 801c268:	3201      	adds	r2, #1
 801c26a:	60e2      	str	r2, [r4, #12]
 801c26c:	69a2      	ldr	r2, [r4, #24]
 801c26e:	b102      	cbz	r2, 801c272 <_scanf_chars+0xa2>
 801c270:	7033      	strb	r3, [r6, #0]
 801c272:	6923      	ldr	r3, [r4, #16]
 801c274:	443b      	add	r3, r7
 801c276:	6123      	str	r3, [r4, #16]
 801c278:	2000      	movs	r0, #0
 801c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c27e:	bf00      	nop
 801c280:	0801e1e9 	.word	0x0801e1e9

0801c284 <_scanf_i>:
 801c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c288:	4698      	mov	r8, r3
 801c28a:	4b74      	ldr	r3, [pc, #464]	; (801c45c <_scanf_i+0x1d8>)
 801c28c:	460c      	mov	r4, r1
 801c28e:	4682      	mov	sl, r0
 801c290:	4616      	mov	r6, r2
 801c292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c296:	b087      	sub	sp, #28
 801c298:	ab03      	add	r3, sp, #12
 801c29a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c29e:	4b70      	ldr	r3, [pc, #448]	; (801c460 <_scanf_i+0x1dc>)
 801c2a0:	69a1      	ldr	r1, [r4, #24]
 801c2a2:	4a70      	ldr	r2, [pc, #448]	; (801c464 <_scanf_i+0x1e0>)
 801c2a4:	2903      	cmp	r1, #3
 801c2a6:	bf18      	it	ne
 801c2a8:	461a      	movne	r2, r3
 801c2aa:	68a3      	ldr	r3, [r4, #8]
 801c2ac:	9201      	str	r2, [sp, #4]
 801c2ae:	1e5a      	subs	r2, r3, #1
 801c2b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c2b4:	bf88      	it	hi
 801c2b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c2ba:	4627      	mov	r7, r4
 801c2bc:	bf82      	ittt	hi
 801c2be:	eb03 0905 	addhi.w	r9, r3, r5
 801c2c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c2c6:	60a3      	strhi	r3, [r4, #8]
 801c2c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801c2cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801c2d0:	bf98      	it	ls
 801c2d2:	f04f 0900 	movls.w	r9, #0
 801c2d6:	6023      	str	r3, [r4, #0]
 801c2d8:	463d      	mov	r5, r7
 801c2da:	f04f 0b00 	mov.w	fp, #0
 801c2de:	6831      	ldr	r1, [r6, #0]
 801c2e0:	ab03      	add	r3, sp, #12
 801c2e2:	7809      	ldrb	r1, [r1, #0]
 801c2e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801c2e8:	2202      	movs	r2, #2
 801c2ea:	f7e3 ffa1 	bl	8000230 <memchr>
 801c2ee:	b328      	cbz	r0, 801c33c <_scanf_i+0xb8>
 801c2f0:	f1bb 0f01 	cmp.w	fp, #1
 801c2f4:	d159      	bne.n	801c3aa <_scanf_i+0x126>
 801c2f6:	6862      	ldr	r2, [r4, #4]
 801c2f8:	b92a      	cbnz	r2, 801c306 <_scanf_i+0x82>
 801c2fa:	6822      	ldr	r2, [r4, #0]
 801c2fc:	2308      	movs	r3, #8
 801c2fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c302:	6063      	str	r3, [r4, #4]
 801c304:	6022      	str	r2, [r4, #0]
 801c306:	6822      	ldr	r2, [r4, #0]
 801c308:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801c30c:	6022      	str	r2, [r4, #0]
 801c30e:	68a2      	ldr	r2, [r4, #8]
 801c310:	1e51      	subs	r1, r2, #1
 801c312:	60a1      	str	r1, [r4, #8]
 801c314:	b192      	cbz	r2, 801c33c <_scanf_i+0xb8>
 801c316:	6832      	ldr	r2, [r6, #0]
 801c318:	1c51      	adds	r1, r2, #1
 801c31a:	6031      	str	r1, [r6, #0]
 801c31c:	7812      	ldrb	r2, [r2, #0]
 801c31e:	f805 2b01 	strb.w	r2, [r5], #1
 801c322:	6872      	ldr	r2, [r6, #4]
 801c324:	3a01      	subs	r2, #1
 801c326:	2a00      	cmp	r2, #0
 801c328:	6072      	str	r2, [r6, #4]
 801c32a:	dc07      	bgt.n	801c33c <_scanf_i+0xb8>
 801c32c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801c330:	4631      	mov	r1, r6
 801c332:	4650      	mov	r0, sl
 801c334:	4790      	blx	r2
 801c336:	2800      	cmp	r0, #0
 801c338:	f040 8085 	bne.w	801c446 <_scanf_i+0x1c2>
 801c33c:	f10b 0b01 	add.w	fp, fp, #1
 801c340:	f1bb 0f03 	cmp.w	fp, #3
 801c344:	d1cb      	bne.n	801c2de <_scanf_i+0x5a>
 801c346:	6863      	ldr	r3, [r4, #4]
 801c348:	b90b      	cbnz	r3, 801c34e <_scanf_i+0xca>
 801c34a:	230a      	movs	r3, #10
 801c34c:	6063      	str	r3, [r4, #4]
 801c34e:	6863      	ldr	r3, [r4, #4]
 801c350:	4945      	ldr	r1, [pc, #276]	; (801c468 <_scanf_i+0x1e4>)
 801c352:	6960      	ldr	r0, [r4, #20]
 801c354:	1ac9      	subs	r1, r1, r3
 801c356:	f000 f999 	bl	801c68c <__sccl>
 801c35a:	f04f 0b00 	mov.w	fp, #0
 801c35e:	68a3      	ldr	r3, [r4, #8]
 801c360:	6822      	ldr	r2, [r4, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d03d      	beq.n	801c3e2 <_scanf_i+0x15e>
 801c366:	6831      	ldr	r1, [r6, #0]
 801c368:	6960      	ldr	r0, [r4, #20]
 801c36a:	f891 c000 	ldrb.w	ip, [r1]
 801c36e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801c372:	2800      	cmp	r0, #0
 801c374:	d035      	beq.n	801c3e2 <_scanf_i+0x15e>
 801c376:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801c37a:	d124      	bne.n	801c3c6 <_scanf_i+0x142>
 801c37c:	0510      	lsls	r0, r2, #20
 801c37e:	d522      	bpl.n	801c3c6 <_scanf_i+0x142>
 801c380:	f10b 0b01 	add.w	fp, fp, #1
 801c384:	f1b9 0f00 	cmp.w	r9, #0
 801c388:	d003      	beq.n	801c392 <_scanf_i+0x10e>
 801c38a:	3301      	adds	r3, #1
 801c38c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c390:	60a3      	str	r3, [r4, #8]
 801c392:	6873      	ldr	r3, [r6, #4]
 801c394:	3b01      	subs	r3, #1
 801c396:	2b00      	cmp	r3, #0
 801c398:	6073      	str	r3, [r6, #4]
 801c39a:	dd1b      	ble.n	801c3d4 <_scanf_i+0x150>
 801c39c:	6833      	ldr	r3, [r6, #0]
 801c39e:	3301      	adds	r3, #1
 801c3a0:	6033      	str	r3, [r6, #0]
 801c3a2:	68a3      	ldr	r3, [r4, #8]
 801c3a4:	3b01      	subs	r3, #1
 801c3a6:	60a3      	str	r3, [r4, #8]
 801c3a8:	e7d9      	b.n	801c35e <_scanf_i+0xda>
 801c3aa:	f1bb 0f02 	cmp.w	fp, #2
 801c3ae:	d1ae      	bne.n	801c30e <_scanf_i+0x8a>
 801c3b0:	6822      	ldr	r2, [r4, #0]
 801c3b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801c3b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801c3ba:	d1bf      	bne.n	801c33c <_scanf_i+0xb8>
 801c3bc:	2310      	movs	r3, #16
 801c3be:	6063      	str	r3, [r4, #4]
 801c3c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c3c4:	e7a2      	b.n	801c30c <_scanf_i+0x88>
 801c3c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801c3ca:	6022      	str	r2, [r4, #0]
 801c3cc:	780b      	ldrb	r3, [r1, #0]
 801c3ce:	f805 3b01 	strb.w	r3, [r5], #1
 801c3d2:	e7de      	b.n	801c392 <_scanf_i+0x10e>
 801c3d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c3d8:	4631      	mov	r1, r6
 801c3da:	4650      	mov	r0, sl
 801c3dc:	4798      	blx	r3
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	d0df      	beq.n	801c3a2 <_scanf_i+0x11e>
 801c3e2:	6823      	ldr	r3, [r4, #0]
 801c3e4:	05d9      	lsls	r1, r3, #23
 801c3e6:	d50d      	bpl.n	801c404 <_scanf_i+0x180>
 801c3e8:	42bd      	cmp	r5, r7
 801c3ea:	d909      	bls.n	801c400 <_scanf_i+0x17c>
 801c3ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c3f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c3f4:	4632      	mov	r2, r6
 801c3f6:	4650      	mov	r0, sl
 801c3f8:	4798      	blx	r3
 801c3fa:	f105 39ff 	add.w	r9, r5, #4294967295
 801c3fe:	464d      	mov	r5, r9
 801c400:	42bd      	cmp	r5, r7
 801c402:	d028      	beq.n	801c456 <_scanf_i+0x1d2>
 801c404:	6822      	ldr	r2, [r4, #0]
 801c406:	f012 0210 	ands.w	r2, r2, #16
 801c40a:	d113      	bne.n	801c434 <_scanf_i+0x1b0>
 801c40c:	702a      	strb	r2, [r5, #0]
 801c40e:	6863      	ldr	r3, [r4, #4]
 801c410:	9e01      	ldr	r6, [sp, #4]
 801c412:	4639      	mov	r1, r7
 801c414:	4650      	mov	r0, sl
 801c416:	47b0      	blx	r6
 801c418:	f8d8 3000 	ldr.w	r3, [r8]
 801c41c:	6821      	ldr	r1, [r4, #0]
 801c41e:	1d1a      	adds	r2, r3, #4
 801c420:	f8c8 2000 	str.w	r2, [r8]
 801c424:	f011 0f20 	tst.w	r1, #32
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	d00f      	beq.n	801c44c <_scanf_i+0x1c8>
 801c42c:	6018      	str	r0, [r3, #0]
 801c42e:	68e3      	ldr	r3, [r4, #12]
 801c430:	3301      	adds	r3, #1
 801c432:	60e3      	str	r3, [r4, #12]
 801c434:	6923      	ldr	r3, [r4, #16]
 801c436:	1bed      	subs	r5, r5, r7
 801c438:	445d      	add	r5, fp
 801c43a:	442b      	add	r3, r5
 801c43c:	6123      	str	r3, [r4, #16]
 801c43e:	2000      	movs	r0, #0
 801c440:	b007      	add	sp, #28
 801c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c446:	f04f 0b00 	mov.w	fp, #0
 801c44a:	e7ca      	b.n	801c3e2 <_scanf_i+0x15e>
 801c44c:	07ca      	lsls	r2, r1, #31
 801c44e:	bf4c      	ite	mi
 801c450:	8018      	strhmi	r0, [r3, #0]
 801c452:	6018      	strpl	r0, [r3, #0]
 801c454:	e7eb      	b.n	801c42e <_scanf_i+0x1aa>
 801c456:	2001      	movs	r0, #1
 801c458:	e7f2      	b.n	801c440 <_scanf_i+0x1bc>
 801c45a:	bf00      	nop
 801c45c:	0801d728 	.word	0x0801d728
 801c460:	0801d071 	.word	0x0801d071
 801c464:	0801b8f1 	.word	0x0801b8f1
 801c468:	0801e30a 	.word	0x0801e30a

0801c46c <__sflush_r>:
 801c46c:	898a      	ldrh	r2, [r1, #12]
 801c46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c472:	4605      	mov	r5, r0
 801c474:	0710      	lsls	r0, r2, #28
 801c476:	460c      	mov	r4, r1
 801c478:	d458      	bmi.n	801c52c <__sflush_r+0xc0>
 801c47a:	684b      	ldr	r3, [r1, #4]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	dc05      	bgt.n	801c48c <__sflush_r+0x20>
 801c480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c482:	2b00      	cmp	r3, #0
 801c484:	dc02      	bgt.n	801c48c <__sflush_r+0x20>
 801c486:	2000      	movs	r0, #0
 801c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c48e:	2e00      	cmp	r6, #0
 801c490:	d0f9      	beq.n	801c486 <__sflush_r+0x1a>
 801c492:	2300      	movs	r3, #0
 801c494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c498:	682f      	ldr	r7, [r5, #0]
 801c49a:	6a21      	ldr	r1, [r4, #32]
 801c49c:	602b      	str	r3, [r5, #0]
 801c49e:	d032      	beq.n	801c506 <__sflush_r+0x9a>
 801c4a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c4a2:	89a3      	ldrh	r3, [r4, #12]
 801c4a4:	075a      	lsls	r2, r3, #29
 801c4a6:	d505      	bpl.n	801c4b4 <__sflush_r+0x48>
 801c4a8:	6863      	ldr	r3, [r4, #4]
 801c4aa:	1ac0      	subs	r0, r0, r3
 801c4ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c4ae:	b10b      	cbz	r3, 801c4b4 <__sflush_r+0x48>
 801c4b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c4b2:	1ac0      	subs	r0, r0, r3
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	4602      	mov	r2, r0
 801c4b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c4ba:	6a21      	ldr	r1, [r4, #32]
 801c4bc:	4628      	mov	r0, r5
 801c4be:	47b0      	blx	r6
 801c4c0:	1c43      	adds	r3, r0, #1
 801c4c2:	89a3      	ldrh	r3, [r4, #12]
 801c4c4:	d106      	bne.n	801c4d4 <__sflush_r+0x68>
 801c4c6:	6829      	ldr	r1, [r5, #0]
 801c4c8:	291d      	cmp	r1, #29
 801c4ca:	d82b      	bhi.n	801c524 <__sflush_r+0xb8>
 801c4cc:	4a29      	ldr	r2, [pc, #164]	; (801c574 <__sflush_r+0x108>)
 801c4ce:	410a      	asrs	r2, r1
 801c4d0:	07d6      	lsls	r6, r2, #31
 801c4d2:	d427      	bmi.n	801c524 <__sflush_r+0xb8>
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	6062      	str	r2, [r4, #4]
 801c4d8:	04d9      	lsls	r1, r3, #19
 801c4da:	6922      	ldr	r2, [r4, #16]
 801c4dc:	6022      	str	r2, [r4, #0]
 801c4de:	d504      	bpl.n	801c4ea <__sflush_r+0x7e>
 801c4e0:	1c42      	adds	r2, r0, #1
 801c4e2:	d101      	bne.n	801c4e8 <__sflush_r+0x7c>
 801c4e4:	682b      	ldr	r3, [r5, #0]
 801c4e6:	b903      	cbnz	r3, 801c4ea <__sflush_r+0x7e>
 801c4e8:	6560      	str	r0, [r4, #84]	; 0x54
 801c4ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c4ec:	602f      	str	r7, [r5, #0]
 801c4ee:	2900      	cmp	r1, #0
 801c4f0:	d0c9      	beq.n	801c486 <__sflush_r+0x1a>
 801c4f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c4f6:	4299      	cmp	r1, r3
 801c4f8:	d002      	beq.n	801c500 <__sflush_r+0x94>
 801c4fa:	4628      	mov	r0, r5
 801c4fc:	f7fd fe6a 	bl	801a1d4 <_free_r>
 801c500:	2000      	movs	r0, #0
 801c502:	6360      	str	r0, [r4, #52]	; 0x34
 801c504:	e7c0      	b.n	801c488 <__sflush_r+0x1c>
 801c506:	2301      	movs	r3, #1
 801c508:	4628      	mov	r0, r5
 801c50a:	47b0      	blx	r6
 801c50c:	1c41      	adds	r1, r0, #1
 801c50e:	d1c8      	bne.n	801c4a2 <__sflush_r+0x36>
 801c510:	682b      	ldr	r3, [r5, #0]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d0c5      	beq.n	801c4a2 <__sflush_r+0x36>
 801c516:	2b1d      	cmp	r3, #29
 801c518:	d001      	beq.n	801c51e <__sflush_r+0xb2>
 801c51a:	2b16      	cmp	r3, #22
 801c51c:	d101      	bne.n	801c522 <__sflush_r+0xb6>
 801c51e:	602f      	str	r7, [r5, #0]
 801c520:	e7b1      	b.n	801c486 <__sflush_r+0x1a>
 801c522:	89a3      	ldrh	r3, [r4, #12]
 801c524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c528:	81a3      	strh	r3, [r4, #12]
 801c52a:	e7ad      	b.n	801c488 <__sflush_r+0x1c>
 801c52c:	690f      	ldr	r7, [r1, #16]
 801c52e:	2f00      	cmp	r7, #0
 801c530:	d0a9      	beq.n	801c486 <__sflush_r+0x1a>
 801c532:	0793      	lsls	r3, r2, #30
 801c534:	680e      	ldr	r6, [r1, #0]
 801c536:	bf08      	it	eq
 801c538:	694b      	ldreq	r3, [r1, #20]
 801c53a:	600f      	str	r7, [r1, #0]
 801c53c:	bf18      	it	ne
 801c53e:	2300      	movne	r3, #0
 801c540:	eba6 0807 	sub.w	r8, r6, r7
 801c544:	608b      	str	r3, [r1, #8]
 801c546:	f1b8 0f00 	cmp.w	r8, #0
 801c54a:	dd9c      	ble.n	801c486 <__sflush_r+0x1a>
 801c54c:	6a21      	ldr	r1, [r4, #32]
 801c54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c550:	4643      	mov	r3, r8
 801c552:	463a      	mov	r2, r7
 801c554:	4628      	mov	r0, r5
 801c556:	47b0      	blx	r6
 801c558:	2800      	cmp	r0, #0
 801c55a:	dc06      	bgt.n	801c56a <__sflush_r+0xfe>
 801c55c:	89a3      	ldrh	r3, [r4, #12]
 801c55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c562:	81a3      	strh	r3, [r4, #12]
 801c564:	f04f 30ff 	mov.w	r0, #4294967295
 801c568:	e78e      	b.n	801c488 <__sflush_r+0x1c>
 801c56a:	4407      	add	r7, r0
 801c56c:	eba8 0800 	sub.w	r8, r8, r0
 801c570:	e7e9      	b.n	801c546 <__sflush_r+0xda>
 801c572:	bf00      	nop
 801c574:	dfbffffe 	.word	0xdfbffffe

0801c578 <_fflush_r>:
 801c578:	b538      	push	{r3, r4, r5, lr}
 801c57a:	690b      	ldr	r3, [r1, #16]
 801c57c:	4605      	mov	r5, r0
 801c57e:	460c      	mov	r4, r1
 801c580:	b913      	cbnz	r3, 801c588 <_fflush_r+0x10>
 801c582:	2500      	movs	r5, #0
 801c584:	4628      	mov	r0, r5
 801c586:	bd38      	pop	{r3, r4, r5, pc}
 801c588:	b118      	cbz	r0, 801c592 <_fflush_r+0x1a>
 801c58a:	6a03      	ldr	r3, [r0, #32]
 801c58c:	b90b      	cbnz	r3, 801c592 <_fflush_r+0x1a>
 801c58e:	f7fc fcd5 	bl	8018f3c <__sinit>
 801c592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d0f3      	beq.n	801c582 <_fflush_r+0xa>
 801c59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c59c:	07d0      	lsls	r0, r2, #31
 801c59e:	d404      	bmi.n	801c5aa <_fflush_r+0x32>
 801c5a0:	0599      	lsls	r1, r3, #22
 801c5a2:	d402      	bmi.n	801c5aa <_fflush_r+0x32>
 801c5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c5a6:	f7fc ff85 	bl	80194b4 <__retarget_lock_acquire_recursive>
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	4621      	mov	r1, r4
 801c5ae:	f7ff ff5d 	bl	801c46c <__sflush_r>
 801c5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c5b4:	07da      	lsls	r2, r3, #31
 801c5b6:	4605      	mov	r5, r0
 801c5b8:	d4e4      	bmi.n	801c584 <_fflush_r+0xc>
 801c5ba:	89a3      	ldrh	r3, [r4, #12]
 801c5bc:	059b      	lsls	r3, r3, #22
 801c5be:	d4e1      	bmi.n	801c584 <_fflush_r+0xc>
 801c5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c5c2:	f7fc ff78 	bl	80194b6 <__retarget_lock_release_recursive>
 801c5c6:	e7dd      	b.n	801c584 <_fflush_r+0xc>

0801c5c8 <__swhatbuf_r>:
 801c5c8:	b570      	push	{r4, r5, r6, lr}
 801c5ca:	460c      	mov	r4, r1
 801c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5d0:	2900      	cmp	r1, #0
 801c5d2:	b096      	sub	sp, #88	; 0x58
 801c5d4:	4615      	mov	r5, r2
 801c5d6:	461e      	mov	r6, r3
 801c5d8:	da0d      	bge.n	801c5f6 <__swhatbuf_r+0x2e>
 801c5da:	89a3      	ldrh	r3, [r4, #12]
 801c5dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c5e0:	f04f 0100 	mov.w	r1, #0
 801c5e4:	bf0c      	ite	eq
 801c5e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c5ea:	2340      	movne	r3, #64	; 0x40
 801c5ec:	2000      	movs	r0, #0
 801c5ee:	6031      	str	r1, [r6, #0]
 801c5f0:	602b      	str	r3, [r5, #0]
 801c5f2:	b016      	add	sp, #88	; 0x58
 801c5f4:	bd70      	pop	{r4, r5, r6, pc}
 801c5f6:	466a      	mov	r2, sp
 801c5f8:	f000 f8e8 	bl	801c7cc <_fstat_r>
 801c5fc:	2800      	cmp	r0, #0
 801c5fe:	dbec      	blt.n	801c5da <__swhatbuf_r+0x12>
 801c600:	9901      	ldr	r1, [sp, #4]
 801c602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c60a:	4259      	negs	r1, r3
 801c60c:	4159      	adcs	r1, r3
 801c60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c612:	e7eb      	b.n	801c5ec <__swhatbuf_r+0x24>

0801c614 <__smakebuf_r>:
 801c614:	898b      	ldrh	r3, [r1, #12]
 801c616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c618:	079d      	lsls	r5, r3, #30
 801c61a:	4606      	mov	r6, r0
 801c61c:	460c      	mov	r4, r1
 801c61e:	d507      	bpl.n	801c630 <__smakebuf_r+0x1c>
 801c620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c624:	6023      	str	r3, [r4, #0]
 801c626:	6123      	str	r3, [r4, #16]
 801c628:	2301      	movs	r3, #1
 801c62a:	6163      	str	r3, [r4, #20]
 801c62c:	b002      	add	sp, #8
 801c62e:	bd70      	pop	{r4, r5, r6, pc}
 801c630:	ab01      	add	r3, sp, #4
 801c632:	466a      	mov	r2, sp
 801c634:	f7ff ffc8 	bl	801c5c8 <__swhatbuf_r>
 801c638:	9900      	ldr	r1, [sp, #0]
 801c63a:	4605      	mov	r5, r0
 801c63c:	4630      	mov	r0, r6
 801c63e:	f7fb fd01 	bl	8018044 <_malloc_r>
 801c642:	b948      	cbnz	r0, 801c658 <__smakebuf_r+0x44>
 801c644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c648:	059a      	lsls	r2, r3, #22
 801c64a:	d4ef      	bmi.n	801c62c <__smakebuf_r+0x18>
 801c64c:	f023 0303 	bic.w	r3, r3, #3
 801c650:	f043 0302 	orr.w	r3, r3, #2
 801c654:	81a3      	strh	r3, [r4, #12]
 801c656:	e7e3      	b.n	801c620 <__smakebuf_r+0xc>
 801c658:	89a3      	ldrh	r3, [r4, #12]
 801c65a:	6020      	str	r0, [r4, #0]
 801c65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c660:	81a3      	strh	r3, [r4, #12]
 801c662:	9b00      	ldr	r3, [sp, #0]
 801c664:	6163      	str	r3, [r4, #20]
 801c666:	9b01      	ldr	r3, [sp, #4]
 801c668:	6120      	str	r0, [r4, #16]
 801c66a:	b15b      	cbz	r3, 801c684 <__smakebuf_r+0x70>
 801c66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c670:	4630      	mov	r0, r6
 801c672:	f000 f8bd 	bl	801c7f0 <_isatty_r>
 801c676:	b128      	cbz	r0, 801c684 <__smakebuf_r+0x70>
 801c678:	89a3      	ldrh	r3, [r4, #12]
 801c67a:	f023 0303 	bic.w	r3, r3, #3
 801c67e:	f043 0301 	orr.w	r3, r3, #1
 801c682:	81a3      	strh	r3, [r4, #12]
 801c684:	89a3      	ldrh	r3, [r4, #12]
 801c686:	431d      	orrs	r5, r3
 801c688:	81a5      	strh	r5, [r4, #12]
 801c68a:	e7cf      	b.n	801c62c <__smakebuf_r+0x18>

0801c68c <__sccl>:
 801c68c:	b570      	push	{r4, r5, r6, lr}
 801c68e:	780b      	ldrb	r3, [r1, #0]
 801c690:	4604      	mov	r4, r0
 801c692:	2b5e      	cmp	r3, #94	; 0x5e
 801c694:	bf0b      	itete	eq
 801c696:	784b      	ldrbeq	r3, [r1, #1]
 801c698:	1c4a      	addne	r2, r1, #1
 801c69a:	1c8a      	addeq	r2, r1, #2
 801c69c:	2100      	movne	r1, #0
 801c69e:	bf08      	it	eq
 801c6a0:	2101      	moveq	r1, #1
 801c6a2:	3801      	subs	r0, #1
 801c6a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801c6a8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801c6ac:	42a8      	cmp	r0, r5
 801c6ae:	d1fb      	bne.n	801c6a8 <__sccl+0x1c>
 801c6b0:	b90b      	cbnz	r3, 801c6b6 <__sccl+0x2a>
 801c6b2:	1e50      	subs	r0, r2, #1
 801c6b4:	bd70      	pop	{r4, r5, r6, pc}
 801c6b6:	f081 0101 	eor.w	r1, r1, #1
 801c6ba:	54e1      	strb	r1, [r4, r3]
 801c6bc:	4610      	mov	r0, r2
 801c6be:	4602      	mov	r2, r0
 801c6c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c6c4:	2d2d      	cmp	r5, #45	; 0x2d
 801c6c6:	d005      	beq.n	801c6d4 <__sccl+0x48>
 801c6c8:	2d5d      	cmp	r5, #93	; 0x5d
 801c6ca:	d016      	beq.n	801c6fa <__sccl+0x6e>
 801c6cc:	2d00      	cmp	r5, #0
 801c6ce:	d0f1      	beq.n	801c6b4 <__sccl+0x28>
 801c6d0:	462b      	mov	r3, r5
 801c6d2:	e7f2      	b.n	801c6ba <__sccl+0x2e>
 801c6d4:	7846      	ldrb	r6, [r0, #1]
 801c6d6:	2e5d      	cmp	r6, #93	; 0x5d
 801c6d8:	d0fa      	beq.n	801c6d0 <__sccl+0x44>
 801c6da:	42b3      	cmp	r3, r6
 801c6dc:	dcf8      	bgt.n	801c6d0 <__sccl+0x44>
 801c6de:	3002      	adds	r0, #2
 801c6e0:	461a      	mov	r2, r3
 801c6e2:	3201      	adds	r2, #1
 801c6e4:	4296      	cmp	r6, r2
 801c6e6:	54a1      	strb	r1, [r4, r2]
 801c6e8:	dcfb      	bgt.n	801c6e2 <__sccl+0x56>
 801c6ea:	1af2      	subs	r2, r6, r3
 801c6ec:	3a01      	subs	r2, #1
 801c6ee:	1c5d      	adds	r5, r3, #1
 801c6f0:	42b3      	cmp	r3, r6
 801c6f2:	bfa8      	it	ge
 801c6f4:	2200      	movge	r2, #0
 801c6f6:	18ab      	adds	r3, r5, r2
 801c6f8:	e7e1      	b.n	801c6be <__sccl+0x32>
 801c6fa:	4610      	mov	r0, r2
 801c6fc:	e7da      	b.n	801c6b4 <__sccl+0x28>

0801c6fe <__submore>:
 801c6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c702:	460c      	mov	r4, r1
 801c704:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c70a:	4299      	cmp	r1, r3
 801c70c:	d11d      	bne.n	801c74a <__submore+0x4c>
 801c70e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c712:	f7fb fc97 	bl	8018044 <_malloc_r>
 801c716:	b918      	cbnz	r0, 801c720 <__submore+0x22>
 801c718:	f04f 30ff 	mov.w	r0, #4294967295
 801c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c724:	63a3      	str	r3, [r4, #56]	; 0x38
 801c726:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801c72a:	6360      	str	r0, [r4, #52]	; 0x34
 801c72c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801c730:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801c734:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801c738:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c73c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801c740:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801c744:	6020      	str	r0, [r4, #0]
 801c746:	2000      	movs	r0, #0
 801c748:	e7e8      	b.n	801c71c <__submore+0x1e>
 801c74a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801c74c:	0077      	lsls	r7, r6, #1
 801c74e:	463a      	mov	r2, r7
 801c750:	f000 fbed 	bl	801cf2e <_realloc_r>
 801c754:	4605      	mov	r5, r0
 801c756:	2800      	cmp	r0, #0
 801c758:	d0de      	beq.n	801c718 <__submore+0x1a>
 801c75a:	eb00 0806 	add.w	r8, r0, r6
 801c75e:	4601      	mov	r1, r0
 801c760:	4632      	mov	r2, r6
 801c762:	4640      	mov	r0, r8
 801c764:	f7fc fea8 	bl	80194b8 <memcpy>
 801c768:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801c76c:	f8c4 8000 	str.w	r8, [r4]
 801c770:	e7e9      	b.n	801c746 <__submore+0x48>

0801c772 <memmove>:
 801c772:	4288      	cmp	r0, r1
 801c774:	b510      	push	{r4, lr}
 801c776:	eb01 0402 	add.w	r4, r1, r2
 801c77a:	d902      	bls.n	801c782 <memmove+0x10>
 801c77c:	4284      	cmp	r4, r0
 801c77e:	4623      	mov	r3, r4
 801c780:	d807      	bhi.n	801c792 <memmove+0x20>
 801c782:	1e43      	subs	r3, r0, #1
 801c784:	42a1      	cmp	r1, r4
 801c786:	d008      	beq.n	801c79a <memmove+0x28>
 801c788:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c78c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c790:	e7f8      	b.n	801c784 <memmove+0x12>
 801c792:	4402      	add	r2, r0
 801c794:	4601      	mov	r1, r0
 801c796:	428a      	cmp	r2, r1
 801c798:	d100      	bne.n	801c79c <memmove+0x2a>
 801c79a:	bd10      	pop	{r4, pc}
 801c79c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c7a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c7a4:	e7f7      	b.n	801c796 <memmove+0x24>

0801c7a6 <strncmp>:
 801c7a6:	b510      	push	{r4, lr}
 801c7a8:	b16a      	cbz	r2, 801c7c6 <strncmp+0x20>
 801c7aa:	3901      	subs	r1, #1
 801c7ac:	1884      	adds	r4, r0, r2
 801c7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c7b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d103      	bne.n	801c7c2 <strncmp+0x1c>
 801c7ba:	42a0      	cmp	r0, r4
 801c7bc:	d001      	beq.n	801c7c2 <strncmp+0x1c>
 801c7be:	2a00      	cmp	r2, #0
 801c7c0:	d1f5      	bne.n	801c7ae <strncmp+0x8>
 801c7c2:	1ad0      	subs	r0, r2, r3
 801c7c4:	bd10      	pop	{r4, pc}
 801c7c6:	4610      	mov	r0, r2
 801c7c8:	e7fc      	b.n	801c7c4 <strncmp+0x1e>
	...

0801c7cc <_fstat_r>:
 801c7cc:	b538      	push	{r3, r4, r5, lr}
 801c7ce:	4d07      	ldr	r5, [pc, #28]	; (801c7ec <_fstat_r+0x20>)
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	4604      	mov	r4, r0
 801c7d4:	4608      	mov	r0, r1
 801c7d6:	4611      	mov	r1, r2
 801c7d8:	602b      	str	r3, [r5, #0]
 801c7da:	f7e6 fcb2 	bl	8003142 <_fstat>
 801c7de:	1c43      	adds	r3, r0, #1
 801c7e0:	d102      	bne.n	801c7e8 <_fstat_r+0x1c>
 801c7e2:	682b      	ldr	r3, [r5, #0]
 801c7e4:	b103      	cbz	r3, 801c7e8 <_fstat_r+0x1c>
 801c7e6:	6023      	str	r3, [r4, #0]
 801c7e8:	bd38      	pop	{r3, r4, r5, pc}
 801c7ea:	bf00      	nop
 801c7ec:	20007d8c 	.word	0x20007d8c

0801c7f0 <_isatty_r>:
 801c7f0:	b538      	push	{r3, r4, r5, lr}
 801c7f2:	4d06      	ldr	r5, [pc, #24]	; (801c80c <_isatty_r+0x1c>)
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	4604      	mov	r4, r0
 801c7f8:	4608      	mov	r0, r1
 801c7fa:	602b      	str	r3, [r5, #0]
 801c7fc:	f7e6 fcb1 	bl	8003162 <_isatty>
 801c800:	1c43      	adds	r3, r0, #1
 801c802:	d102      	bne.n	801c80a <_isatty_r+0x1a>
 801c804:	682b      	ldr	r3, [r5, #0]
 801c806:	b103      	cbz	r3, 801c80a <_isatty_r+0x1a>
 801c808:	6023      	str	r3, [r4, #0]
 801c80a:	bd38      	pop	{r3, r4, r5, pc}
 801c80c:	20007d8c 	.word	0x20007d8c

0801c810 <nan>:
 801c810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c818 <nan+0x8>
 801c814:	4770      	bx	lr
 801c816:	bf00      	nop
 801c818:	00000000 	.word	0x00000000
 801c81c:	7ff80000 	.word	0x7ff80000

0801c820 <__assert_func>:
 801c820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c822:	4614      	mov	r4, r2
 801c824:	461a      	mov	r2, r3
 801c826:	4b09      	ldr	r3, [pc, #36]	; (801c84c <__assert_func+0x2c>)
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	4605      	mov	r5, r0
 801c82c:	68d8      	ldr	r0, [r3, #12]
 801c82e:	b14c      	cbz	r4, 801c844 <__assert_func+0x24>
 801c830:	4b07      	ldr	r3, [pc, #28]	; (801c850 <__assert_func+0x30>)
 801c832:	9100      	str	r1, [sp, #0]
 801c834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c838:	4906      	ldr	r1, [pc, #24]	; (801c854 <__assert_func+0x34>)
 801c83a:	462b      	mov	r3, r5
 801c83c:	f000 fc28 	bl	801d090 <fiprintf>
 801c840:	f000 fc38 	bl	801d0b4 <abort>
 801c844:	4b04      	ldr	r3, [pc, #16]	; (801c858 <__assert_func+0x38>)
 801c846:	461c      	mov	r4, r3
 801c848:	e7f3      	b.n	801c832 <__assert_func+0x12>
 801c84a:	bf00      	nop
 801c84c:	20000198 	.word	0x20000198
 801c850:	0801e31d 	.word	0x0801e31d
 801c854:	0801e32a 	.word	0x0801e32a
 801c858:	0801e358 	.word	0x0801e358

0801c85c <rshift>:
 801c85c:	6903      	ldr	r3, [r0, #16]
 801c85e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c866:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c86a:	f100 0414 	add.w	r4, r0, #20
 801c86e:	dd45      	ble.n	801c8fc <rshift+0xa0>
 801c870:	f011 011f 	ands.w	r1, r1, #31
 801c874:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c878:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c87c:	d10c      	bne.n	801c898 <rshift+0x3c>
 801c87e:	f100 0710 	add.w	r7, r0, #16
 801c882:	4629      	mov	r1, r5
 801c884:	42b1      	cmp	r1, r6
 801c886:	d334      	bcc.n	801c8f2 <rshift+0x96>
 801c888:	1a9b      	subs	r3, r3, r2
 801c88a:	009b      	lsls	r3, r3, #2
 801c88c:	1eea      	subs	r2, r5, #3
 801c88e:	4296      	cmp	r6, r2
 801c890:	bf38      	it	cc
 801c892:	2300      	movcc	r3, #0
 801c894:	4423      	add	r3, r4
 801c896:	e015      	b.n	801c8c4 <rshift+0x68>
 801c898:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c89c:	f1c1 0820 	rsb	r8, r1, #32
 801c8a0:	40cf      	lsrs	r7, r1
 801c8a2:	f105 0e04 	add.w	lr, r5, #4
 801c8a6:	46a1      	mov	r9, r4
 801c8a8:	4576      	cmp	r6, lr
 801c8aa:	46f4      	mov	ip, lr
 801c8ac:	d815      	bhi.n	801c8da <rshift+0x7e>
 801c8ae:	1a9a      	subs	r2, r3, r2
 801c8b0:	0092      	lsls	r2, r2, #2
 801c8b2:	3a04      	subs	r2, #4
 801c8b4:	3501      	adds	r5, #1
 801c8b6:	42ae      	cmp	r6, r5
 801c8b8:	bf38      	it	cc
 801c8ba:	2200      	movcc	r2, #0
 801c8bc:	18a3      	adds	r3, r4, r2
 801c8be:	50a7      	str	r7, [r4, r2]
 801c8c0:	b107      	cbz	r7, 801c8c4 <rshift+0x68>
 801c8c2:	3304      	adds	r3, #4
 801c8c4:	1b1a      	subs	r2, r3, r4
 801c8c6:	42a3      	cmp	r3, r4
 801c8c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c8cc:	bf08      	it	eq
 801c8ce:	2300      	moveq	r3, #0
 801c8d0:	6102      	str	r2, [r0, #16]
 801c8d2:	bf08      	it	eq
 801c8d4:	6143      	streq	r3, [r0, #20]
 801c8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8da:	f8dc c000 	ldr.w	ip, [ip]
 801c8de:	fa0c fc08 	lsl.w	ip, ip, r8
 801c8e2:	ea4c 0707 	orr.w	r7, ip, r7
 801c8e6:	f849 7b04 	str.w	r7, [r9], #4
 801c8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c8ee:	40cf      	lsrs	r7, r1
 801c8f0:	e7da      	b.n	801c8a8 <rshift+0x4c>
 801c8f2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c8f6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c8fa:	e7c3      	b.n	801c884 <rshift+0x28>
 801c8fc:	4623      	mov	r3, r4
 801c8fe:	e7e1      	b.n	801c8c4 <rshift+0x68>

0801c900 <__hexdig_fun>:
 801c900:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c904:	2b09      	cmp	r3, #9
 801c906:	d802      	bhi.n	801c90e <__hexdig_fun+0xe>
 801c908:	3820      	subs	r0, #32
 801c90a:	b2c0      	uxtb	r0, r0
 801c90c:	4770      	bx	lr
 801c90e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c912:	2b05      	cmp	r3, #5
 801c914:	d801      	bhi.n	801c91a <__hexdig_fun+0x1a>
 801c916:	3847      	subs	r0, #71	; 0x47
 801c918:	e7f7      	b.n	801c90a <__hexdig_fun+0xa>
 801c91a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c91e:	2b05      	cmp	r3, #5
 801c920:	d801      	bhi.n	801c926 <__hexdig_fun+0x26>
 801c922:	3827      	subs	r0, #39	; 0x27
 801c924:	e7f1      	b.n	801c90a <__hexdig_fun+0xa>
 801c926:	2000      	movs	r0, #0
 801c928:	4770      	bx	lr
	...

0801c92c <__gethex>:
 801c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c930:	4617      	mov	r7, r2
 801c932:	680a      	ldr	r2, [r1, #0]
 801c934:	b085      	sub	sp, #20
 801c936:	f102 0b02 	add.w	fp, r2, #2
 801c93a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c93e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c942:	4681      	mov	r9, r0
 801c944:	468a      	mov	sl, r1
 801c946:	9302      	str	r3, [sp, #8]
 801c948:	32fe      	adds	r2, #254	; 0xfe
 801c94a:	eb02 030b 	add.w	r3, r2, fp
 801c94e:	46d8      	mov	r8, fp
 801c950:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801c954:	9301      	str	r3, [sp, #4]
 801c956:	2830      	cmp	r0, #48	; 0x30
 801c958:	d0f7      	beq.n	801c94a <__gethex+0x1e>
 801c95a:	f7ff ffd1 	bl	801c900 <__hexdig_fun>
 801c95e:	4604      	mov	r4, r0
 801c960:	2800      	cmp	r0, #0
 801c962:	d138      	bne.n	801c9d6 <__gethex+0xaa>
 801c964:	49a7      	ldr	r1, [pc, #668]	; (801cc04 <__gethex+0x2d8>)
 801c966:	2201      	movs	r2, #1
 801c968:	4640      	mov	r0, r8
 801c96a:	f7ff ff1c 	bl	801c7a6 <strncmp>
 801c96e:	4606      	mov	r6, r0
 801c970:	2800      	cmp	r0, #0
 801c972:	d169      	bne.n	801ca48 <__gethex+0x11c>
 801c974:	f898 0001 	ldrb.w	r0, [r8, #1]
 801c978:	465d      	mov	r5, fp
 801c97a:	f7ff ffc1 	bl	801c900 <__hexdig_fun>
 801c97e:	2800      	cmp	r0, #0
 801c980:	d064      	beq.n	801ca4c <__gethex+0x120>
 801c982:	465a      	mov	r2, fp
 801c984:	7810      	ldrb	r0, [r2, #0]
 801c986:	2830      	cmp	r0, #48	; 0x30
 801c988:	4690      	mov	r8, r2
 801c98a:	f102 0201 	add.w	r2, r2, #1
 801c98e:	d0f9      	beq.n	801c984 <__gethex+0x58>
 801c990:	f7ff ffb6 	bl	801c900 <__hexdig_fun>
 801c994:	2301      	movs	r3, #1
 801c996:	fab0 f480 	clz	r4, r0
 801c99a:	0964      	lsrs	r4, r4, #5
 801c99c:	465e      	mov	r6, fp
 801c99e:	9301      	str	r3, [sp, #4]
 801c9a0:	4642      	mov	r2, r8
 801c9a2:	4615      	mov	r5, r2
 801c9a4:	3201      	adds	r2, #1
 801c9a6:	7828      	ldrb	r0, [r5, #0]
 801c9a8:	f7ff ffaa 	bl	801c900 <__hexdig_fun>
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	d1f8      	bne.n	801c9a2 <__gethex+0x76>
 801c9b0:	4994      	ldr	r1, [pc, #592]	; (801cc04 <__gethex+0x2d8>)
 801c9b2:	2201      	movs	r2, #1
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	f7ff fef6 	bl	801c7a6 <strncmp>
 801c9ba:	b978      	cbnz	r0, 801c9dc <__gethex+0xb0>
 801c9bc:	b946      	cbnz	r6, 801c9d0 <__gethex+0xa4>
 801c9be:	1c6e      	adds	r6, r5, #1
 801c9c0:	4632      	mov	r2, r6
 801c9c2:	4615      	mov	r5, r2
 801c9c4:	3201      	adds	r2, #1
 801c9c6:	7828      	ldrb	r0, [r5, #0]
 801c9c8:	f7ff ff9a 	bl	801c900 <__hexdig_fun>
 801c9cc:	2800      	cmp	r0, #0
 801c9ce:	d1f8      	bne.n	801c9c2 <__gethex+0x96>
 801c9d0:	1b73      	subs	r3, r6, r5
 801c9d2:	009e      	lsls	r6, r3, #2
 801c9d4:	e004      	b.n	801c9e0 <__gethex+0xb4>
 801c9d6:	2400      	movs	r4, #0
 801c9d8:	4626      	mov	r6, r4
 801c9da:	e7e1      	b.n	801c9a0 <__gethex+0x74>
 801c9dc:	2e00      	cmp	r6, #0
 801c9de:	d1f7      	bne.n	801c9d0 <__gethex+0xa4>
 801c9e0:	782b      	ldrb	r3, [r5, #0]
 801c9e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c9e6:	2b50      	cmp	r3, #80	; 0x50
 801c9e8:	d13d      	bne.n	801ca66 <__gethex+0x13a>
 801c9ea:	786b      	ldrb	r3, [r5, #1]
 801c9ec:	2b2b      	cmp	r3, #43	; 0x2b
 801c9ee:	d02f      	beq.n	801ca50 <__gethex+0x124>
 801c9f0:	2b2d      	cmp	r3, #45	; 0x2d
 801c9f2:	d031      	beq.n	801ca58 <__gethex+0x12c>
 801c9f4:	1c69      	adds	r1, r5, #1
 801c9f6:	f04f 0b00 	mov.w	fp, #0
 801c9fa:	7808      	ldrb	r0, [r1, #0]
 801c9fc:	f7ff ff80 	bl	801c900 <__hexdig_fun>
 801ca00:	1e42      	subs	r2, r0, #1
 801ca02:	b2d2      	uxtb	r2, r2
 801ca04:	2a18      	cmp	r2, #24
 801ca06:	d82e      	bhi.n	801ca66 <__gethex+0x13a>
 801ca08:	f1a0 0210 	sub.w	r2, r0, #16
 801ca0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ca10:	f7ff ff76 	bl	801c900 <__hexdig_fun>
 801ca14:	f100 3cff 	add.w	ip, r0, #4294967295
 801ca18:	fa5f fc8c 	uxtb.w	ip, ip
 801ca1c:	f1bc 0f18 	cmp.w	ip, #24
 801ca20:	d91d      	bls.n	801ca5e <__gethex+0x132>
 801ca22:	f1bb 0f00 	cmp.w	fp, #0
 801ca26:	d000      	beq.n	801ca2a <__gethex+0xfe>
 801ca28:	4252      	negs	r2, r2
 801ca2a:	4416      	add	r6, r2
 801ca2c:	f8ca 1000 	str.w	r1, [sl]
 801ca30:	b1dc      	cbz	r4, 801ca6a <__gethex+0x13e>
 801ca32:	9b01      	ldr	r3, [sp, #4]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	bf14      	ite	ne
 801ca38:	f04f 0800 	movne.w	r8, #0
 801ca3c:	f04f 0806 	moveq.w	r8, #6
 801ca40:	4640      	mov	r0, r8
 801ca42:	b005      	add	sp, #20
 801ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca48:	4645      	mov	r5, r8
 801ca4a:	4626      	mov	r6, r4
 801ca4c:	2401      	movs	r4, #1
 801ca4e:	e7c7      	b.n	801c9e0 <__gethex+0xb4>
 801ca50:	f04f 0b00 	mov.w	fp, #0
 801ca54:	1ca9      	adds	r1, r5, #2
 801ca56:	e7d0      	b.n	801c9fa <__gethex+0xce>
 801ca58:	f04f 0b01 	mov.w	fp, #1
 801ca5c:	e7fa      	b.n	801ca54 <__gethex+0x128>
 801ca5e:	230a      	movs	r3, #10
 801ca60:	fb03 0002 	mla	r0, r3, r2, r0
 801ca64:	e7d0      	b.n	801ca08 <__gethex+0xdc>
 801ca66:	4629      	mov	r1, r5
 801ca68:	e7e0      	b.n	801ca2c <__gethex+0x100>
 801ca6a:	eba5 0308 	sub.w	r3, r5, r8
 801ca6e:	3b01      	subs	r3, #1
 801ca70:	4621      	mov	r1, r4
 801ca72:	2b07      	cmp	r3, #7
 801ca74:	dc0a      	bgt.n	801ca8c <__gethex+0x160>
 801ca76:	4648      	mov	r0, r9
 801ca78:	f7fd fbf8 	bl	801a26c <_Balloc>
 801ca7c:	4604      	mov	r4, r0
 801ca7e:	b940      	cbnz	r0, 801ca92 <__gethex+0x166>
 801ca80:	4b61      	ldr	r3, [pc, #388]	; (801cc08 <__gethex+0x2dc>)
 801ca82:	4602      	mov	r2, r0
 801ca84:	21e4      	movs	r1, #228	; 0xe4
 801ca86:	4861      	ldr	r0, [pc, #388]	; (801cc0c <__gethex+0x2e0>)
 801ca88:	f7ff feca 	bl	801c820 <__assert_func>
 801ca8c:	3101      	adds	r1, #1
 801ca8e:	105b      	asrs	r3, r3, #1
 801ca90:	e7ef      	b.n	801ca72 <__gethex+0x146>
 801ca92:	f100 0a14 	add.w	sl, r0, #20
 801ca96:	2300      	movs	r3, #0
 801ca98:	495a      	ldr	r1, [pc, #360]	; (801cc04 <__gethex+0x2d8>)
 801ca9a:	f8cd a004 	str.w	sl, [sp, #4]
 801ca9e:	469b      	mov	fp, r3
 801caa0:	45a8      	cmp	r8, r5
 801caa2:	d342      	bcc.n	801cb2a <__gethex+0x1fe>
 801caa4:	9801      	ldr	r0, [sp, #4]
 801caa6:	f840 bb04 	str.w	fp, [r0], #4
 801caaa:	eba0 000a 	sub.w	r0, r0, sl
 801caae:	1080      	asrs	r0, r0, #2
 801cab0:	6120      	str	r0, [r4, #16]
 801cab2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801cab6:	4658      	mov	r0, fp
 801cab8:	f7fd fcca 	bl	801a450 <__hi0bits>
 801cabc:	683d      	ldr	r5, [r7, #0]
 801cabe:	eba8 0000 	sub.w	r0, r8, r0
 801cac2:	42a8      	cmp	r0, r5
 801cac4:	dd59      	ble.n	801cb7a <__gethex+0x24e>
 801cac6:	eba0 0805 	sub.w	r8, r0, r5
 801caca:	4641      	mov	r1, r8
 801cacc:	4620      	mov	r0, r4
 801cace:	f7fe f859 	bl	801ab84 <__any_on>
 801cad2:	4683      	mov	fp, r0
 801cad4:	b1b8      	cbz	r0, 801cb06 <__gethex+0x1da>
 801cad6:	f108 33ff 	add.w	r3, r8, #4294967295
 801cada:	1159      	asrs	r1, r3, #5
 801cadc:	f003 021f 	and.w	r2, r3, #31
 801cae0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801cae4:	f04f 0b01 	mov.w	fp, #1
 801cae8:	fa0b f202 	lsl.w	r2, fp, r2
 801caec:	420a      	tst	r2, r1
 801caee:	d00a      	beq.n	801cb06 <__gethex+0x1da>
 801caf0:	455b      	cmp	r3, fp
 801caf2:	dd06      	ble.n	801cb02 <__gethex+0x1d6>
 801caf4:	f1a8 0102 	sub.w	r1, r8, #2
 801caf8:	4620      	mov	r0, r4
 801cafa:	f7fe f843 	bl	801ab84 <__any_on>
 801cafe:	2800      	cmp	r0, #0
 801cb00:	d138      	bne.n	801cb74 <__gethex+0x248>
 801cb02:	f04f 0b02 	mov.w	fp, #2
 801cb06:	4641      	mov	r1, r8
 801cb08:	4620      	mov	r0, r4
 801cb0a:	f7ff fea7 	bl	801c85c <rshift>
 801cb0e:	4446      	add	r6, r8
 801cb10:	68bb      	ldr	r3, [r7, #8]
 801cb12:	42b3      	cmp	r3, r6
 801cb14:	da41      	bge.n	801cb9a <__gethex+0x26e>
 801cb16:	4621      	mov	r1, r4
 801cb18:	4648      	mov	r0, r9
 801cb1a:	f7fd fbe7 	bl	801a2ec <_Bfree>
 801cb1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb20:	2300      	movs	r3, #0
 801cb22:	6013      	str	r3, [r2, #0]
 801cb24:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801cb28:	e78a      	b.n	801ca40 <__gethex+0x114>
 801cb2a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801cb2e:	2a2e      	cmp	r2, #46	; 0x2e
 801cb30:	d014      	beq.n	801cb5c <__gethex+0x230>
 801cb32:	2b20      	cmp	r3, #32
 801cb34:	d106      	bne.n	801cb44 <__gethex+0x218>
 801cb36:	9b01      	ldr	r3, [sp, #4]
 801cb38:	f843 bb04 	str.w	fp, [r3], #4
 801cb3c:	f04f 0b00 	mov.w	fp, #0
 801cb40:	9301      	str	r3, [sp, #4]
 801cb42:	465b      	mov	r3, fp
 801cb44:	7828      	ldrb	r0, [r5, #0]
 801cb46:	9303      	str	r3, [sp, #12]
 801cb48:	f7ff feda 	bl	801c900 <__hexdig_fun>
 801cb4c:	9b03      	ldr	r3, [sp, #12]
 801cb4e:	f000 000f 	and.w	r0, r0, #15
 801cb52:	4098      	lsls	r0, r3
 801cb54:	ea4b 0b00 	orr.w	fp, fp, r0
 801cb58:	3304      	adds	r3, #4
 801cb5a:	e7a1      	b.n	801caa0 <__gethex+0x174>
 801cb5c:	45a8      	cmp	r8, r5
 801cb5e:	d8e8      	bhi.n	801cb32 <__gethex+0x206>
 801cb60:	2201      	movs	r2, #1
 801cb62:	4628      	mov	r0, r5
 801cb64:	9303      	str	r3, [sp, #12]
 801cb66:	f7ff fe1e 	bl	801c7a6 <strncmp>
 801cb6a:	4926      	ldr	r1, [pc, #152]	; (801cc04 <__gethex+0x2d8>)
 801cb6c:	9b03      	ldr	r3, [sp, #12]
 801cb6e:	2800      	cmp	r0, #0
 801cb70:	d1df      	bne.n	801cb32 <__gethex+0x206>
 801cb72:	e795      	b.n	801caa0 <__gethex+0x174>
 801cb74:	f04f 0b03 	mov.w	fp, #3
 801cb78:	e7c5      	b.n	801cb06 <__gethex+0x1da>
 801cb7a:	da0b      	bge.n	801cb94 <__gethex+0x268>
 801cb7c:	eba5 0800 	sub.w	r8, r5, r0
 801cb80:	4621      	mov	r1, r4
 801cb82:	4642      	mov	r2, r8
 801cb84:	4648      	mov	r0, r9
 801cb86:	f7fd fdcb 	bl	801a720 <__lshift>
 801cb8a:	eba6 0608 	sub.w	r6, r6, r8
 801cb8e:	4604      	mov	r4, r0
 801cb90:	f100 0a14 	add.w	sl, r0, #20
 801cb94:	f04f 0b00 	mov.w	fp, #0
 801cb98:	e7ba      	b.n	801cb10 <__gethex+0x1e4>
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	42b3      	cmp	r3, r6
 801cb9e:	dd73      	ble.n	801cc88 <__gethex+0x35c>
 801cba0:	1b9e      	subs	r6, r3, r6
 801cba2:	42b5      	cmp	r5, r6
 801cba4:	dc34      	bgt.n	801cc10 <__gethex+0x2e4>
 801cba6:	68fb      	ldr	r3, [r7, #12]
 801cba8:	2b02      	cmp	r3, #2
 801cbaa:	d023      	beq.n	801cbf4 <__gethex+0x2c8>
 801cbac:	2b03      	cmp	r3, #3
 801cbae:	d025      	beq.n	801cbfc <__gethex+0x2d0>
 801cbb0:	2b01      	cmp	r3, #1
 801cbb2:	d115      	bne.n	801cbe0 <__gethex+0x2b4>
 801cbb4:	42b5      	cmp	r5, r6
 801cbb6:	d113      	bne.n	801cbe0 <__gethex+0x2b4>
 801cbb8:	2d01      	cmp	r5, #1
 801cbba:	d10b      	bne.n	801cbd4 <__gethex+0x2a8>
 801cbbc:	9a02      	ldr	r2, [sp, #8]
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	6013      	str	r3, [r2, #0]
 801cbc2:	2301      	movs	r3, #1
 801cbc4:	6123      	str	r3, [r4, #16]
 801cbc6:	f8ca 3000 	str.w	r3, [sl]
 801cbca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbcc:	f04f 0862 	mov.w	r8, #98	; 0x62
 801cbd0:	601c      	str	r4, [r3, #0]
 801cbd2:	e735      	b.n	801ca40 <__gethex+0x114>
 801cbd4:	1e69      	subs	r1, r5, #1
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	f7fd ffd4 	bl	801ab84 <__any_on>
 801cbdc:	2800      	cmp	r0, #0
 801cbde:	d1ed      	bne.n	801cbbc <__gethex+0x290>
 801cbe0:	4621      	mov	r1, r4
 801cbe2:	4648      	mov	r0, r9
 801cbe4:	f7fd fb82 	bl	801a2ec <_Bfree>
 801cbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cbea:	2300      	movs	r3, #0
 801cbec:	6013      	str	r3, [r2, #0]
 801cbee:	f04f 0850 	mov.w	r8, #80	; 0x50
 801cbf2:	e725      	b.n	801ca40 <__gethex+0x114>
 801cbf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d1f2      	bne.n	801cbe0 <__gethex+0x2b4>
 801cbfa:	e7df      	b.n	801cbbc <__gethex+0x290>
 801cbfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d1dc      	bne.n	801cbbc <__gethex+0x290>
 801cc02:	e7ed      	b.n	801cbe0 <__gethex+0x2b4>
 801cc04:	0801e194 	.word	0x0801e194
 801cc08:	0801e02b 	.word	0x0801e02b
 801cc0c:	0801e359 	.word	0x0801e359
 801cc10:	f106 38ff 	add.w	r8, r6, #4294967295
 801cc14:	f1bb 0f00 	cmp.w	fp, #0
 801cc18:	d133      	bne.n	801cc82 <__gethex+0x356>
 801cc1a:	f1b8 0f00 	cmp.w	r8, #0
 801cc1e:	d004      	beq.n	801cc2a <__gethex+0x2fe>
 801cc20:	4641      	mov	r1, r8
 801cc22:	4620      	mov	r0, r4
 801cc24:	f7fd ffae 	bl	801ab84 <__any_on>
 801cc28:	4683      	mov	fp, r0
 801cc2a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801cc2e:	2301      	movs	r3, #1
 801cc30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801cc34:	f008 081f 	and.w	r8, r8, #31
 801cc38:	fa03 f308 	lsl.w	r3, r3, r8
 801cc3c:	4213      	tst	r3, r2
 801cc3e:	4631      	mov	r1, r6
 801cc40:	4620      	mov	r0, r4
 801cc42:	bf18      	it	ne
 801cc44:	f04b 0b02 	orrne.w	fp, fp, #2
 801cc48:	1bad      	subs	r5, r5, r6
 801cc4a:	f7ff fe07 	bl	801c85c <rshift>
 801cc4e:	687e      	ldr	r6, [r7, #4]
 801cc50:	f04f 0802 	mov.w	r8, #2
 801cc54:	f1bb 0f00 	cmp.w	fp, #0
 801cc58:	d04a      	beq.n	801ccf0 <__gethex+0x3c4>
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2b02      	cmp	r3, #2
 801cc5e:	d016      	beq.n	801cc8e <__gethex+0x362>
 801cc60:	2b03      	cmp	r3, #3
 801cc62:	d018      	beq.n	801cc96 <__gethex+0x36a>
 801cc64:	2b01      	cmp	r3, #1
 801cc66:	d109      	bne.n	801cc7c <__gethex+0x350>
 801cc68:	f01b 0f02 	tst.w	fp, #2
 801cc6c:	d006      	beq.n	801cc7c <__gethex+0x350>
 801cc6e:	f8da 3000 	ldr.w	r3, [sl]
 801cc72:	ea4b 0b03 	orr.w	fp, fp, r3
 801cc76:	f01b 0f01 	tst.w	fp, #1
 801cc7a:	d10f      	bne.n	801cc9c <__gethex+0x370>
 801cc7c:	f048 0810 	orr.w	r8, r8, #16
 801cc80:	e036      	b.n	801ccf0 <__gethex+0x3c4>
 801cc82:	f04f 0b01 	mov.w	fp, #1
 801cc86:	e7d0      	b.n	801cc2a <__gethex+0x2fe>
 801cc88:	f04f 0801 	mov.w	r8, #1
 801cc8c:	e7e2      	b.n	801cc54 <__gethex+0x328>
 801cc8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc90:	f1c3 0301 	rsb	r3, r3, #1
 801cc94:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d0ef      	beq.n	801cc7c <__gethex+0x350>
 801cc9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cca0:	f104 0214 	add.w	r2, r4, #20
 801cca4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801cca8:	9301      	str	r3, [sp, #4]
 801ccaa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ccae:	2300      	movs	r3, #0
 801ccb0:	4694      	mov	ip, r2
 801ccb2:	f852 1b04 	ldr.w	r1, [r2], #4
 801ccb6:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ccba:	d01e      	beq.n	801ccfa <__gethex+0x3ce>
 801ccbc:	3101      	adds	r1, #1
 801ccbe:	f8cc 1000 	str.w	r1, [ip]
 801ccc2:	f1b8 0f02 	cmp.w	r8, #2
 801ccc6:	f104 0214 	add.w	r2, r4, #20
 801ccca:	d13d      	bne.n	801cd48 <__gethex+0x41c>
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	3b01      	subs	r3, #1
 801ccd0:	42ab      	cmp	r3, r5
 801ccd2:	d10b      	bne.n	801ccec <__gethex+0x3c0>
 801ccd4:	1169      	asrs	r1, r5, #5
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	f005 051f 	and.w	r5, r5, #31
 801ccdc:	fa03 f505 	lsl.w	r5, r3, r5
 801cce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cce4:	421d      	tst	r5, r3
 801cce6:	bf18      	it	ne
 801cce8:	f04f 0801 	movne.w	r8, #1
 801ccec:	f048 0820 	orr.w	r8, r8, #32
 801ccf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccf2:	601c      	str	r4, [r3, #0]
 801ccf4:	9b02      	ldr	r3, [sp, #8]
 801ccf6:	601e      	str	r6, [r3, #0]
 801ccf8:	e6a2      	b.n	801ca40 <__gethex+0x114>
 801ccfa:	4290      	cmp	r0, r2
 801ccfc:	f842 3c04 	str.w	r3, [r2, #-4]
 801cd00:	d8d6      	bhi.n	801ccb0 <__gethex+0x384>
 801cd02:	68a2      	ldr	r2, [r4, #8]
 801cd04:	4593      	cmp	fp, r2
 801cd06:	db17      	blt.n	801cd38 <__gethex+0x40c>
 801cd08:	6861      	ldr	r1, [r4, #4]
 801cd0a:	4648      	mov	r0, r9
 801cd0c:	3101      	adds	r1, #1
 801cd0e:	f7fd faad 	bl	801a26c <_Balloc>
 801cd12:	4682      	mov	sl, r0
 801cd14:	b918      	cbnz	r0, 801cd1e <__gethex+0x3f2>
 801cd16:	4b1b      	ldr	r3, [pc, #108]	; (801cd84 <__gethex+0x458>)
 801cd18:	4602      	mov	r2, r0
 801cd1a:	2184      	movs	r1, #132	; 0x84
 801cd1c:	e6b3      	b.n	801ca86 <__gethex+0x15a>
 801cd1e:	6922      	ldr	r2, [r4, #16]
 801cd20:	3202      	adds	r2, #2
 801cd22:	f104 010c 	add.w	r1, r4, #12
 801cd26:	0092      	lsls	r2, r2, #2
 801cd28:	300c      	adds	r0, #12
 801cd2a:	f7fc fbc5 	bl	80194b8 <memcpy>
 801cd2e:	4621      	mov	r1, r4
 801cd30:	4648      	mov	r0, r9
 801cd32:	f7fd fadb 	bl	801a2ec <_Bfree>
 801cd36:	4654      	mov	r4, sl
 801cd38:	6922      	ldr	r2, [r4, #16]
 801cd3a:	1c51      	adds	r1, r2, #1
 801cd3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cd40:	6121      	str	r1, [r4, #16]
 801cd42:	2101      	movs	r1, #1
 801cd44:	6151      	str	r1, [r2, #20]
 801cd46:	e7bc      	b.n	801ccc2 <__gethex+0x396>
 801cd48:	6921      	ldr	r1, [r4, #16]
 801cd4a:	4559      	cmp	r1, fp
 801cd4c:	dd0b      	ble.n	801cd66 <__gethex+0x43a>
 801cd4e:	2101      	movs	r1, #1
 801cd50:	4620      	mov	r0, r4
 801cd52:	f7ff fd83 	bl	801c85c <rshift>
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	3601      	adds	r6, #1
 801cd5a:	42b3      	cmp	r3, r6
 801cd5c:	f6ff aedb 	blt.w	801cb16 <__gethex+0x1ea>
 801cd60:	f04f 0801 	mov.w	r8, #1
 801cd64:	e7c2      	b.n	801ccec <__gethex+0x3c0>
 801cd66:	f015 051f 	ands.w	r5, r5, #31
 801cd6a:	d0f9      	beq.n	801cd60 <__gethex+0x434>
 801cd6c:	9b01      	ldr	r3, [sp, #4]
 801cd6e:	441a      	add	r2, r3
 801cd70:	f1c5 0520 	rsb	r5, r5, #32
 801cd74:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801cd78:	f7fd fb6a 	bl	801a450 <__hi0bits>
 801cd7c:	42a8      	cmp	r0, r5
 801cd7e:	dbe6      	blt.n	801cd4e <__gethex+0x422>
 801cd80:	e7ee      	b.n	801cd60 <__gethex+0x434>
 801cd82:	bf00      	nop
 801cd84:	0801e02b 	.word	0x0801e02b

0801cd88 <L_shift>:
 801cd88:	f1c2 0208 	rsb	r2, r2, #8
 801cd8c:	0092      	lsls	r2, r2, #2
 801cd8e:	b570      	push	{r4, r5, r6, lr}
 801cd90:	f1c2 0620 	rsb	r6, r2, #32
 801cd94:	6843      	ldr	r3, [r0, #4]
 801cd96:	6804      	ldr	r4, [r0, #0]
 801cd98:	fa03 f506 	lsl.w	r5, r3, r6
 801cd9c:	432c      	orrs	r4, r5
 801cd9e:	40d3      	lsrs	r3, r2
 801cda0:	6004      	str	r4, [r0, #0]
 801cda2:	f840 3f04 	str.w	r3, [r0, #4]!
 801cda6:	4288      	cmp	r0, r1
 801cda8:	d3f4      	bcc.n	801cd94 <L_shift+0xc>
 801cdaa:	bd70      	pop	{r4, r5, r6, pc}

0801cdac <__match>:
 801cdac:	b530      	push	{r4, r5, lr}
 801cdae:	6803      	ldr	r3, [r0, #0]
 801cdb0:	3301      	adds	r3, #1
 801cdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdb6:	b914      	cbnz	r4, 801cdbe <__match+0x12>
 801cdb8:	6003      	str	r3, [r0, #0]
 801cdba:	2001      	movs	r0, #1
 801cdbc:	bd30      	pop	{r4, r5, pc}
 801cdbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cdc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cdc6:	2d19      	cmp	r5, #25
 801cdc8:	bf98      	it	ls
 801cdca:	3220      	addls	r2, #32
 801cdcc:	42a2      	cmp	r2, r4
 801cdce:	d0f0      	beq.n	801cdb2 <__match+0x6>
 801cdd0:	2000      	movs	r0, #0
 801cdd2:	e7f3      	b.n	801cdbc <__match+0x10>

0801cdd4 <__hexnan>:
 801cdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd8:	680b      	ldr	r3, [r1, #0]
 801cdda:	6801      	ldr	r1, [r0, #0]
 801cddc:	115e      	asrs	r6, r3, #5
 801cdde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cde2:	f013 031f 	ands.w	r3, r3, #31
 801cde6:	b087      	sub	sp, #28
 801cde8:	bf18      	it	ne
 801cdea:	3604      	addne	r6, #4
 801cdec:	2500      	movs	r5, #0
 801cdee:	1f37      	subs	r7, r6, #4
 801cdf0:	4682      	mov	sl, r0
 801cdf2:	4690      	mov	r8, r2
 801cdf4:	9301      	str	r3, [sp, #4]
 801cdf6:	f846 5c04 	str.w	r5, [r6, #-4]
 801cdfa:	46b9      	mov	r9, r7
 801cdfc:	463c      	mov	r4, r7
 801cdfe:	9502      	str	r5, [sp, #8]
 801ce00:	46ab      	mov	fp, r5
 801ce02:	784a      	ldrb	r2, [r1, #1]
 801ce04:	1c4b      	adds	r3, r1, #1
 801ce06:	9303      	str	r3, [sp, #12]
 801ce08:	b342      	cbz	r2, 801ce5c <__hexnan+0x88>
 801ce0a:	4610      	mov	r0, r2
 801ce0c:	9105      	str	r1, [sp, #20]
 801ce0e:	9204      	str	r2, [sp, #16]
 801ce10:	f7ff fd76 	bl	801c900 <__hexdig_fun>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	d14f      	bne.n	801ceb8 <__hexnan+0xe4>
 801ce18:	9a04      	ldr	r2, [sp, #16]
 801ce1a:	9905      	ldr	r1, [sp, #20]
 801ce1c:	2a20      	cmp	r2, #32
 801ce1e:	d818      	bhi.n	801ce52 <__hexnan+0x7e>
 801ce20:	9b02      	ldr	r3, [sp, #8]
 801ce22:	459b      	cmp	fp, r3
 801ce24:	dd13      	ble.n	801ce4e <__hexnan+0x7a>
 801ce26:	454c      	cmp	r4, r9
 801ce28:	d206      	bcs.n	801ce38 <__hexnan+0x64>
 801ce2a:	2d07      	cmp	r5, #7
 801ce2c:	dc04      	bgt.n	801ce38 <__hexnan+0x64>
 801ce2e:	462a      	mov	r2, r5
 801ce30:	4649      	mov	r1, r9
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ff ffa8 	bl	801cd88 <L_shift>
 801ce38:	4544      	cmp	r4, r8
 801ce3a:	d950      	bls.n	801cede <__hexnan+0x10a>
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	f1a4 0904 	sub.w	r9, r4, #4
 801ce42:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce46:	f8cd b008 	str.w	fp, [sp, #8]
 801ce4a:	464c      	mov	r4, r9
 801ce4c:	461d      	mov	r5, r3
 801ce4e:	9903      	ldr	r1, [sp, #12]
 801ce50:	e7d7      	b.n	801ce02 <__hexnan+0x2e>
 801ce52:	2a29      	cmp	r2, #41	; 0x29
 801ce54:	d155      	bne.n	801cf02 <__hexnan+0x12e>
 801ce56:	3102      	adds	r1, #2
 801ce58:	f8ca 1000 	str.w	r1, [sl]
 801ce5c:	f1bb 0f00 	cmp.w	fp, #0
 801ce60:	d04f      	beq.n	801cf02 <__hexnan+0x12e>
 801ce62:	454c      	cmp	r4, r9
 801ce64:	d206      	bcs.n	801ce74 <__hexnan+0xa0>
 801ce66:	2d07      	cmp	r5, #7
 801ce68:	dc04      	bgt.n	801ce74 <__hexnan+0xa0>
 801ce6a:	462a      	mov	r2, r5
 801ce6c:	4649      	mov	r1, r9
 801ce6e:	4620      	mov	r0, r4
 801ce70:	f7ff ff8a 	bl	801cd88 <L_shift>
 801ce74:	4544      	cmp	r4, r8
 801ce76:	d934      	bls.n	801cee2 <__hexnan+0x10e>
 801ce78:	f1a8 0204 	sub.w	r2, r8, #4
 801ce7c:	4623      	mov	r3, r4
 801ce7e:	f853 1b04 	ldr.w	r1, [r3], #4
 801ce82:	f842 1f04 	str.w	r1, [r2, #4]!
 801ce86:	429f      	cmp	r7, r3
 801ce88:	d2f9      	bcs.n	801ce7e <__hexnan+0xaa>
 801ce8a:	1b3b      	subs	r3, r7, r4
 801ce8c:	f023 0303 	bic.w	r3, r3, #3
 801ce90:	3304      	adds	r3, #4
 801ce92:	3e03      	subs	r6, #3
 801ce94:	3401      	adds	r4, #1
 801ce96:	42a6      	cmp	r6, r4
 801ce98:	bf38      	it	cc
 801ce9a:	2304      	movcc	r3, #4
 801ce9c:	4443      	add	r3, r8
 801ce9e:	2200      	movs	r2, #0
 801cea0:	f843 2b04 	str.w	r2, [r3], #4
 801cea4:	429f      	cmp	r7, r3
 801cea6:	d2fb      	bcs.n	801cea0 <__hexnan+0xcc>
 801cea8:	683b      	ldr	r3, [r7, #0]
 801ceaa:	b91b      	cbnz	r3, 801ceb4 <__hexnan+0xe0>
 801ceac:	4547      	cmp	r7, r8
 801ceae:	d126      	bne.n	801cefe <__hexnan+0x12a>
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	603b      	str	r3, [r7, #0]
 801ceb4:	2005      	movs	r0, #5
 801ceb6:	e025      	b.n	801cf04 <__hexnan+0x130>
 801ceb8:	3501      	adds	r5, #1
 801ceba:	2d08      	cmp	r5, #8
 801cebc:	f10b 0b01 	add.w	fp, fp, #1
 801cec0:	dd06      	ble.n	801ced0 <__hexnan+0xfc>
 801cec2:	4544      	cmp	r4, r8
 801cec4:	d9c3      	bls.n	801ce4e <__hexnan+0x7a>
 801cec6:	2300      	movs	r3, #0
 801cec8:	f844 3c04 	str.w	r3, [r4, #-4]
 801cecc:	2501      	movs	r5, #1
 801cece:	3c04      	subs	r4, #4
 801ced0:	6822      	ldr	r2, [r4, #0]
 801ced2:	f000 000f 	and.w	r0, r0, #15
 801ced6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ceda:	6020      	str	r0, [r4, #0]
 801cedc:	e7b7      	b.n	801ce4e <__hexnan+0x7a>
 801cede:	2508      	movs	r5, #8
 801cee0:	e7b5      	b.n	801ce4e <__hexnan+0x7a>
 801cee2:	9b01      	ldr	r3, [sp, #4]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d0df      	beq.n	801cea8 <__hexnan+0xd4>
 801cee8:	f1c3 0320 	rsb	r3, r3, #32
 801ceec:	f04f 32ff 	mov.w	r2, #4294967295
 801cef0:	40da      	lsrs	r2, r3
 801cef2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801cef6:	4013      	ands	r3, r2
 801cef8:	f846 3c04 	str.w	r3, [r6, #-4]
 801cefc:	e7d4      	b.n	801cea8 <__hexnan+0xd4>
 801cefe:	3f04      	subs	r7, #4
 801cf00:	e7d2      	b.n	801cea8 <__hexnan+0xd4>
 801cf02:	2004      	movs	r0, #4
 801cf04:	b007      	add	sp, #28
 801cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf0a <__ascii_mbtowc>:
 801cf0a:	b082      	sub	sp, #8
 801cf0c:	b901      	cbnz	r1, 801cf10 <__ascii_mbtowc+0x6>
 801cf0e:	a901      	add	r1, sp, #4
 801cf10:	b142      	cbz	r2, 801cf24 <__ascii_mbtowc+0x1a>
 801cf12:	b14b      	cbz	r3, 801cf28 <__ascii_mbtowc+0x1e>
 801cf14:	7813      	ldrb	r3, [r2, #0]
 801cf16:	600b      	str	r3, [r1, #0]
 801cf18:	7812      	ldrb	r2, [r2, #0]
 801cf1a:	1e10      	subs	r0, r2, #0
 801cf1c:	bf18      	it	ne
 801cf1e:	2001      	movne	r0, #1
 801cf20:	b002      	add	sp, #8
 801cf22:	4770      	bx	lr
 801cf24:	4610      	mov	r0, r2
 801cf26:	e7fb      	b.n	801cf20 <__ascii_mbtowc+0x16>
 801cf28:	f06f 0001 	mvn.w	r0, #1
 801cf2c:	e7f8      	b.n	801cf20 <__ascii_mbtowc+0x16>

0801cf2e <_realloc_r>:
 801cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf32:	4680      	mov	r8, r0
 801cf34:	4614      	mov	r4, r2
 801cf36:	460e      	mov	r6, r1
 801cf38:	b921      	cbnz	r1, 801cf44 <_realloc_r+0x16>
 801cf3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf3e:	4611      	mov	r1, r2
 801cf40:	f7fb b880 	b.w	8018044 <_malloc_r>
 801cf44:	b92a      	cbnz	r2, 801cf52 <_realloc_r+0x24>
 801cf46:	f7fd f945 	bl	801a1d4 <_free_r>
 801cf4a:	4625      	mov	r5, r4
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf52:	f000 f8b6 	bl	801d0c2 <_malloc_usable_size_r>
 801cf56:	4284      	cmp	r4, r0
 801cf58:	4607      	mov	r7, r0
 801cf5a:	d802      	bhi.n	801cf62 <_realloc_r+0x34>
 801cf5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cf60:	d812      	bhi.n	801cf88 <_realloc_r+0x5a>
 801cf62:	4621      	mov	r1, r4
 801cf64:	4640      	mov	r0, r8
 801cf66:	f7fb f86d 	bl	8018044 <_malloc_r>
 801cf6a:	4605      	mov	r5, r0
 801cf6c:	2800      	cmp	r0, #0
 801cf6e:	d0ed      	beq.n	801cf4c <_realloc_r+0x1e>
 801cf70:	42bc      	cmp	r4, r7
 801cf72:	4622      	mov	r2, r4
 801cf74:	4631      	mov	r1, r6
 801cf76:	bf28      	it	cs
 801cf78:	463a      	movcs	r2, r7
 801cf7a:	f7fc fa9d 	bl	80194b8 <memcpy>
 801cf7e:	4631      	mov	r1, r6
 801cf80:	4640      	mov	r0, r8
 801cf82:	f7fd f927 	bl	801a1d4 <_free_r>
 801cf86:	e7e1      	b.n	801cf4c <_realloc_r+0x1e>
 801cf88:	4635      	mov	r5, r6
 801cf8a:	e7df      	b.n	801cf4c <_realloc_r+0x1e>

0801cf8c <_strtoul_l.constprop.0>:
 801cf8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf90:	4f36      	ldr	r7, [pc, #216]	; (801d06c <_strtoul_l.constprop.0+0xe0>)
 801cf92:	4686      	mov	lr, r0
 801cf94:	460d      	mov	r5, r1
 801cf96:	4628      	mov	r0, r5
 801cf98:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cf9c:	5d3e      	ldrb	r6, [r7, r4]
 801cf9e:	f016 0608 	ands.w	r6, r6, #8
 801cfa2:	d1f8      	bne.n	801cf96 <_strtoul_l.constprop.0+0xa>
 801cfa4:	2c2d      	cmp	r4, #45	; 0x2d
 801cfa6:	d130      	bne.n	801d00a <_strtoul_l.constprop.0+0x7e>
 801cfa8:	782c      	ldrb	r4, [r5, #0]
 801cfaa:	2601      	movs	r6, #1
 801cfac:	1c85      	adds	r5, r0, #2
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d057      	beq.n	801d062 <_strtoul_l.constprop.0+0xd6>
 801cfb2:	2b10      	cmp	r3, #16
 801cfb4:	d109      	bne.n	801cfca <_strtoul_l.constprop.0+0x3e>
 801cfb6:	2c30      	cmp	r4, #48	; 0x30
 801cfb8:	d107      	bne.n	801cfca <_strtoul_l.constprop.0+0x3e>
 801cfba:	7828      	ldrb	r0, [r5, #0]
 801cfbc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801cfc0:	2858      	cmp	r0, #88	; 0x58
 801cfc2:	d149      	bne.n	801d058 <_strtoul_l.constprop.0+0xcc>
 801cfc4:	786c      	ldrb	r4, [r5, #1]
 801cfc6:	2310      	movs	r3, #16
 801cfc8:	3502      	adds	r5, #2
 801cfca:	f04f 38ff 	mov.w	r8, #4294967295
 801cfce:	2700      	movs	r7, #0
 801cfd0:	fbb8 f8f3 	udiv	r8, r8, r3
 801cfd4:	fb03 f908 	mul.w	r9, r3, r8
 801cfd8:	ea6f 0909 	mvn.w	r9, r9
 801cfdc:	4638      	mov	r0, r7
 801cfde:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801cfe2:	f1bc 0f09 	cmp.w	ip, #9
 801cfe6:	d815      	bhi.n	801d014 <_strtoul_l.constprop.0+0x88>
 801cfe8:	4664      	mov	r4, ip
 801cfea:	42a3      	cmp	r3, r4
 801cfec:	dd23      	ble.n	801d036 <_strtoul_l.constprop.0+0xaa>
 801cfee:	f1b7 3fff 	cmp.w	r7, #4294967295
 801cff2:	d007      	beq.n	801d004 <_strtoul_l.constprop.0+0x78>
 801cff4:	4580      	cmp	r8, r0
 801cff6:	d31b      	bcc.n	801d030 <_strtoul_l.constprop.0+0xa4>
 801cff8:	d101      	bne.n	801cffe <_strtoul_l.constprop.0+0x72>
 801cffa:	45a1      	cmp	r9, r4
 801cffc:	db18      	blt.n	801d030 <_strtoul_l.constprop.0+0xa4>
 801cffe:	fb00 4003 	mla	r0, r0, r3, r4
 801d002:	2701      	movs	r7, #1
 801d004:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d008:	e7e9      	b.n	801cfde <_strtoul_l.constprop.0+0x52>
 801d00a:	2c2b      	cmp	r4, #43	; 0x2b
 801d00c:	bf04      	itt	eq
 801d00e:	782c      	ldrbeq	r4, [r5, #0]
 801d010:	1c85      	addeq	r5, r0, #2
 801d012:	e7cc      	b.n	801cfae <_strtoul_l.constprop.0+0x22>
 801d014:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d018:	f1bc 0f19 	cmp.w	ip, #25
 801d01c:	d801      	bhi.n	801d022 <_strtoul_l.constprop.0+0x96>
 801d01e:	3c37      	subs	r4, #55	; 0x37
 801d020:	e7e3      	b.n	801cfea <_strtoul_l.constprop.0+0x5e>
 801d022:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d026:	f1bc 0f19 	cmp.w	ip, #25
 801d02a:	d804      	bhi.n	801d036 <_strtoul_l.constprop.0+0xaa>
 801d02c:	3c57      	subs	r4, #87	; 0x57
 801d02e:	e7dc      	b.n	801cfea <_strtoul_l.constprop.0+0x5e>
 801d030:	f04f 37ff 	mov.w	r7, #4294967295
 801d034:	e7e6      	b.n	801d004 <_strtoul_l.constprop.0+0x78>
 801d036:	1c7b      	adds	r3, r7, #1
 801d038:	d106      	bne.n	801d048 <_strtoul_l.constprop.0+0xbc>
 801d03a:	2322      	movs	r3, #34	; 0x22
 801d03c:	f8ce 3000 	str.w	r3, [lr]
 801d040:	4638      	mov	r0, r7
 801d042:	b932      	cbnz	r2, 801d052 <_strtoul_l.constprop.0+0xc6>
 801d044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d048:	b106      	cbz	r6, 801d04c <_strtoul_l.constprop.0+0xc0>
 801d04a:	4240      	negs	r0, r0
 801d04c:	2a00      	cmp	r2, #0
 801d04e:	d0f9      	beq.n	801d044 <_strtoul_l.constprop.0+0xb8>
 801d050:	b107      	cbz	r7, 801d054 <_strtoul_l.constprop.0+0xc8>
 801d052:	1e69      	subs	r1, r5, #1
 801d054:	6011      	str	r1, [r2, #0]
 801d056:	e7f5      	b.n	801d044 <_strtoul_l.constprop.0+0xb8>
 801d058:	2430      	movs	r4, #48	; 0x30
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d1b5      	bne.n	801cfca <_strtoul_l.constprop.0+0x3e>
 801d05e:	2308      	movs	r3, #8
 801d060:	e7b3      	b.n	801cfca <_strtoul_l.constprop.0+0x3e>
 801d062:	2c30      	cmp	r4, #48	; 0x30
 801d064:	d0a9      	beq.n	801cfba <_strtoul_l.constprop.0+0x2e>
 801d066:	230a      	movs	r3, #10
 801d068:	e7af      	b.n	801cfca <_strtoul_l.constprop.0+0x3e>
 801d06a:	bf00      	nop
 801d06c:	0801e1e9 	.word	0x0801e1e9

0801d070 <_strtoul_r>:
 801d070:	f7ff bf8c 	b.w	801cf8c <_strtoul_l.constprop.0>

0801d074 <__ascii_wctomb>:
 801d074:	b149      	cbz	r1, 801d08a <__ascii_wctomb+0x16>
 801d076:	2aff      	cmp	r2, #255	; 0xff
 801d078:	bf85      	ittet	hi
 801d07a:	238a      	movhi	r3, #138	; 0x8a
 801d07c:	6003      	strhi	r3, [r0, #0]
 801d07e:	700a      	strbls	r2, [r1, #0]
 801d080:	f04f 30ff 	movhi.w	r0, #4294967295
 801d084:	bf98      	it	ls
 801d086:	2001      	movls	r0, #1
 801d088:	4770      	bx	lr
 801d08a:	4608      	mov	r0, r1
 801d08c:	4770      	bx	lr
	...

0801d090 <fiprintf>:
 801d090:	b40e      	push	{r1, r2, r3}
 801d092:	b503      	push	{r0, r1, lr}
 801d094:	4601      	mov	r1, r0
 801d096:	ab03      	add	r3, sp, #12
 801d098:	4805      	ldr	r0, [pc, #20]	; (801d0b0 <fiprintf+0x20>)
 801d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d09e:	6800      	ldr	r0, [r0, #0]
 801d0a0:	9301      	str	r3, [sp, #4]
 801d0a2:	f7fe ff7b 	bl	801bf9c <_vfiprintf_r>
 801d0a6:	b002      	add	sp, #8
 801d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0ac:	b003      	add	sp, #12
 801d0ae:	4770      	bx	lr
 801d0b0:	20000198 	.word	0x20000198

0801d0b4 <abort>:
 801d0b4:	b508      	push	{r3, lr}
 801d0b6:	2006      	movs	r0, #6
 801d0b8:	f000 f834 	bl	801d124 <raise>
 801d0bc:	2001      	movs	r0, #1
 801d0be:	f7e5 fff1 	bl	80030a4 <_exit>

0801d0c2 <_malloc_usable_size_r>:
 801d0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d0c6:	1f18      	subs	r0, r3, #4
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	bfbc      	itt	lt
 801d0cc:	580b      	ldrlt	r3, [r1, r0]
 801d0ce:	18c0      	addlt	r0, r0, r3
 801d0d0:	4770      	bx	lr

0801d0d2 <_raise_r>:
 801d0d2:	291f      	cmp	r1, #31
 801d0d4:	b538      	push	{r3, r4, r5, lr}
 801d0d6:	4604      	mov	r4, r0
 801d0d8:	460d      	mov	r5, r1
 801d0da:	d904      	bls.n	801d0e6 <_raise_r+0x14>
 801d0dc:	2316      	movs	r3, #22
 801d0de:	6003      	str	r3, [r0, #0]
 801d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d0e4:	bd38      	pop	{r3, r4, r5, pc}
 801d0e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d0e8:	b112      	cbz	r2, 801d0f0 <_raise_r+0x1e>
 801d0ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d0ee:	b94b      	cbnz	r3, 801d104 <_raise_r+0x32>
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	f000 f831 	bl	801d158 <_getpid_r>
 801d0f6:	462a      	mov	r2, r5
 801d0f8:	4601      	mov	r1, r0
 801d0fa:	4620      	mov	r0, r4
 801d0fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d100:	f000 b818 	b.w	801d134 <_kill_r>
 801d104:	2b01      	cmp	r3, #1
 801d106:	d00a      	beq.n	801d11e <_raise_r+0x4c>
 801d108:	1c59      	adds	r1, r3, #1
 801d10a:	d103      	bne.n	801d114 <_raise_r+0x42>
 801d10c:	2316      	movs	r3, #22
 801d10e:	6003      	str	r3, [r0, #0]
 801d110:	2001      	movs	r0, #1
 801d112:	e7e7      	b.n	801d0e4 <_raise_r+0x12>
 801d114:	2400      	movs	r4, #0
 801d116:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d11a:	4628      	mov	r0, r5
 801d11c:	4798      	blx	r3
 801d11e:	2000      	movs	r0, #0
 801d120:	e7e0      	b.n	801d0e4 <_raise_r+0x12>
	...

0801d124 <raise>:
 801d124:	4b02      	ldr	r3, [pc, #8]	; (801d130 <raise+0xc>)
 801d126:	4601      	mov	r1, r0
 801d128:	6818      	ldr	r0, [r3, #0]
 801d12a:	f7ff bfd2 	b.w	801d0d2 <_raise_r>
 801d12e:	bf00      	nop
 801d130:	20000198 	.word	0x20000198

0801d134 <_kill_r>:
 801d134:	b538      	push	{r3, r4, r5, lr}
 801d136:	4d07      	ldr	r5, [pc, #28]	; (801d154 <_kill_r+0x20>)
 801d138:	2300      	movs	r3, #0
 801d13a:	4604      	mov	r4, r0
 801d13c:	4608      	mov	r0, r1
 801d13e:	4611      	mov	r1, r2
 801d140:	602b      	str	r3, [r5, #0]
 801d142:	f7e5 ff9f 	bl	8003084 <_kill>
 801d146:	1c43      	adds	r3, r0, #1
 801d148:	d102      	bne.n	801d150 <_kill_r+0x1c>
 801d14a:	682b      	ldr	r3, [r5, #0]
 801d14c:	b103      	cbz	r3, 801d150 <_kill_r+0x1c>
 801d14e:	6023      	str	r3, [r4, #0]
 801d150:	bd38      	pop	{r3, r4, r5, pc}
 801d152:	bf00      	nop
 801d154:	20007d8c 	.word	0x20007d8c

0801d158 <_getpid_r>:
 801d158:	f7e5 bf8c 	b.w	8003074 <_getpid>

0801d15c <_init>:
 801d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d15e:	bf00      	nop
 801d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d162:	bc08      	pop	{r3}
 801d164:	469e      	mov	lr, r3
 801d166:	4770      	bx	lr

0801d168 <_fini>:
 801d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d16a:	bf00      	nop
 801d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d16e:	bc08      	pop	{r3}
 801d170:	469e      	mov	lr, r3
 801d172:	4770      	bx	lr
