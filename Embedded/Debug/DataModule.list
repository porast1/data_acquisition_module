
DataModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  08011398  08011398  00021398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011eec  08011eec  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08011eec  08011eec  00021eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ef4  08011ef4  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ef4  08011ef4  00021ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ef8  08011ef8  00021ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08011efc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e08  20000210  0801210c  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a018  0801210c  0003a018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025007  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fef  00000000  00000000  0005528a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe0  00000000  00000000  0005b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018ba  00000000  00000000  0005d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4f3  00000000  00000000  0005eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dca9  00000000  00000000  0008a00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef3cc  00000000  00000000  000b7cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009504  00000000  00000000  001a7084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001b0588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801137c 	.word	0x0801137c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801137c 	.word	0x0801137c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <setPath>:
DWORD fre_clust;
uint32_t total, free_space;

void setPath(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t path)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
	sprintf(dir, "Data%d", path);
 8000f12:	7f3b      	ldrb	r3, [r7, #28]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4910      	ldr	r1, [pc, #64]	; (8000f58 <setPath+0x54>)
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00e f86b 	bl	800eff4 <siprintf>
	sprintf(frontSensor, "Data%d/FRONT%d.txt", path, path);
 8000f1e:	7f3a      	ldrb	r2, [r7, #28]
 8000f20:	7f3b      	ldrb	r3, [r7, #28]
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <setPath+0x58>)
 8000f24:	68b8      	ldr	r0, [r7, #8]
 8000f26:	f00e f865 	bl	800eff4 <siprintf>
	sprintf(rearSensor, "Data%d/Rear%d.txt", path, path);
 8000f2a:	7f3a      	ldrb	r2, [r7, #28]
 8000f2c:	7f3b      	ldrb	r3, [r7, #28]
 8000f2e:	490c      	ldr	r1, [pc, #48]	; (8000f60 <setPath+0x5c>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f00e f85f 	bl	800eff4 <siprintf>
	sprintf(frontPressureSensor, "Data%d/F_PSI%d.txt", path, path);
 8000f36:	7f3a      	ldrb	r2, [r7, #28]
 8000f38:	7f3b      	ldrb	r3, [r7, #28]
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <setPath+0x60>)
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f00e f859 	bl	800eff4 <siprintf>
	sprintf(rearPressureSensor, "Data%d/R_PSI%d.txt", path, path);
 8000f42:	7f3a      	ldrb	r2, [r7, #28]
 8000f44:	7f3b      	ldrb	r3, [r7, #28]
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <setPath+0x64>)
 8000f48:	69b8      	ldr	r0, [r7, #24]
 8000f4a:	f00e f853 	bl	800eff4 <siprintf>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08011398 	.word	0x08011398
 8000f5c:	080113a0 	.word	0x080113a0
 8000f60:	080113b4 	.word	0x080113b4
 8000f64:	080113c8 	.word	0x080113c8
 8000f68:	080113dc 	.word	0x080113dc

08000f6c <createNewFile>:
void createNewFile(char *dir, char *frontSensor, char *rearSensor,
		char *frontPressureSensor, char *rearPressureSensor, uint8_t *pathPtr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
	uint8_t path = *pathPtr;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	75fb      	strb	r3, [r7, #23]
	Mount_SD("/");
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <createNewFile+0x5c>)
 8000f82:	f000 f839 	bl	8000ff8 <Mount_SD>
	Format_SD(path);
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f87b 	bl	8001084 <Format_SD>
	Create_Dir(dir);
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 fa6a 	bl	8001468 <Create_Dir>
	Create_File(frontSensor);
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f000 f911 	bl	80011bc <Create_File>
	Create_File(rearSensor);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f90e 	bl	80011bc <Create_File>
	Create_File(frontPressureSensor);
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f000 f90b 	bl	80011bc <Create_File>
	Create_File(rearPressureSensor);
 8000fa6:	6a38      	ldr	r0, [r7, #32]
 8000fa8:	f000 f908 	bl	80011bc <Create_File>
	Unmount_SD("/");
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <createNewFile+0x5c>)
 8000fae:	f000 f847 	bl	8001040 <Unmount_SD>
	(*pathPtr)++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080113f0 	.word	0x080113f0

08000fcc <Send_Uart>:

void Send_Uart(char *string)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t*) string, strlen(string), HAL_MAX_DELAY);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff f97b 	bl	80002d0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Send_Uart+0x28>)
 8000fe6:	f007 fbc6 	bl	8008776 <HAL_UART_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200060b4 	.word	0x200060b4

08000ff8 <Mount_SD>:

void Mount_SD(const TCHAR *path)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <Mount_SD+0x38>)
 8001006:	f009 fdfd 	bl	800ac04 <f_mount>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <Mount_SD+0x3c>)
 8001010:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <Mount_SD+0x3c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <Mount_SD+0x2a>
		Send_Uart("ERROR!!! in mounting SD CARD...\n\n");
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <Mount_SD+0x40>)
 800101c:	f7ff ffd6 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("SD CARD mounted successfully...\n");
}
 8001020:	e002      	b.n	8001028 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <Mount_SD+0x44>)
 8001024:	f7ff ffd2 	bl	8000fcc <Send_Uart>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000022c 	.word	0x2000022c
 8001034:	200006a8 	.word	0x200006a8
 8001038:	080113f4 	.word	0x080113f4
 800103c:	08011418 	.word	0x08011418

08001040 <Unmount_SD>:

void Unmount_SD(const TCHAR *path)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2000      	movs	r0, #0
 800104e:	f009 fdd9 	bl	800ac04 <f_mount>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Unmount_SD+0x38>)
 8001058:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <Unmount_SD+0x38>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Unmount_SD+0x2a>
		Send_Uart("SD CARD UNMOUNTED successfully...\n\n\n");
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <Unmount_SD+0x3c>)
 8001064:	f7ff ffb2 	bl	8000fcc <Send_Uart>
	else
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001068:	e002      	b.n	8001070 <Unmount_SD+0x30>
		Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <Unmount_SD+0x40>)
 800106c:	f7ff ffae 	bl	8000fcc <Send_Uart>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200006a8 	.word	0x200006a8
 800107c:	0801143c 	.word	0x0801143c
 8001080:	08011464 	.word	0x08011464

08001084 <Format_SD>:
	return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD(uint8_t dirNumber)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	DIR dir;
	FILINFO fno;
	char *path = pvPortMalloc(20 * sizeof(char));
 800108e:	2014      	movs	r0, #20
 8001090:	f00d f842 	bl	800e118 <pvPortMalloc>
 8001094:	6578      	str	r0, [r7, #84]	; 0x54
	sprintf(path, "/Data%d", dirNumber);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	4943      	ldr	r1, [pc, #268]	; (80011a8 <Format_SD+0x124>)
 800109c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800109e:	f00d ffa9 	bl	800eff4 <siprintf>
	fresult = f_opendir(&dir, path);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a fa30 	bl	800b50e <f_opendir>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <Format_SD+0x128>)
 80010b4:	701a      	strb	r2, [r3, #0]

	if (fresult == FR_OK)
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <Format_SD+0x128>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d154      	bne.n	8001168 <Format_SD+0xe4>
	{
		while (1)
		{
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a fac4 	bl	800b656 <f_readdir>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <Format_SD+0x128>)
 80010d4:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0)
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <Format_SD+0x128>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d13f      	bne.n	800115e <Format_SD+0xda>
 80010de:	7d7b      	ldrb	r3, [r7, #21]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <Format_SD+0xda>
				break; /* Break on error or end of dir */
			if (!(strcmp(".", fno.fname)) || !(strcmp("..", fno.fname)))
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	3309      	adds	r3, #9
 80010ea:	4619      	mov	r1, r3
 80010ec:	4830      	ldr	r0, [pc, #192]	; (80011b0 <Format_SD+0x12c>)
 80010ee:	f7ff f88f 	bl	8000210 <strcmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02f      	beq.n	8001158 <Format_SD+0xd4>
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	3309      	adds	r3, #9
 80010fe:	4619      	mov	r1, r3
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <Format_SD+0x130>)
 8001102:	f7ff f885 	bl	8000210 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d025      	beq.n	8001158 <Format_SD+0xd4>
			{
				continue;
			}

			sprintf(path, "/Data%d/%s", dirNumber, fno.fname);
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	3309      	adds	r3, #9
 8001114:	4928      	ldr	r1, [pc, #160]	; (80011b8 <Format_SD+0x134>)
 8001116:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001118:	f00d ff6c 	bl	800eff4 <siprintf>
			if (fno.fattrib & AM_DIR) /* It is a directory */
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <Format_SD+0xbc>
			{

				fresult = Format_SD(dirNumber);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffab 	bl	8001084 <Format_SD>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <Format_SD+0x128>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <Format_SD+0x128>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0bf      	beq.n	80010be <Format_SD+0x3a>
					break;
 800113e:	e00e      	b.n	800115e <Format_SD+0xda>
			}
			else
			{
				fresult = f_unlink(path);
 8001140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001142:	f00a fb0b 	bl	800b75c <f_unlink>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <Format_SD+0x128>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (fresult != FR_OK)
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <Format_SD+0x128>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <Format_SD+0xd8>
 8001156:	e7b2      	b.n	80010be <Format_SD+0x3a>
				continue;
 8001158:	bf00      	nop
			fresult = f_readdir(&dir, &fno); /* Read a directory item */
 800115a:	e7b0      	b.n	80010be <Format_SD+0x3a>
					break;
 800115c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4618      	mov	r0, r3
 8001164:	f00a fa4c 	bl	800b600 <f_closedir>
	}

	if (fresult == FR_OK)
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <Format_SD+0x128>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <Format_SD+0x110>
	{
		memset(path, 0, 20);
 8001170:	2214      	movs	r2, #20
 8001172:	2100      	movs	r1, #0
 8001174:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001176:	f00e f835 	bl	800f1e4 <memset>
		sprintf(path, "/Data%d", dirNumber);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	490a      	ldr	r1, [pc, #40]	; (80011a8 <Format_SD+0x124>)
 8001180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001182:	f00d ff37 	bl	800eff4 <siprintf>
		fresult = f_unlink(path);
 8001186:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001188:	f00a fae8 	bl	800b75c <f_unlink>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Format_SD+0x128>)
 8001192:	701a      	strb	r2, [r3, #0]
	}

	vPortFree(path);
 8001194:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001196:	f00d f88b 	bl	800e2b0 <vPortFree>
	return (fresult);
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Format_SD+0x128>)
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3758      	adds	r7, #88	; 0x58
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	080114b8 	.word	0x080114b8
 80011ac:	200006a8 	.word	0x200006a8
 80011b0:	080114c0 	.word	0x080114c0
 80011b4:	080114c4 	.word	0x080114c4
 80011b8:	080114c8 	.word	0x080114c8

080011bc <Create_File>:
		return fresult;
	}
}

FRESULT Create_File(char *name)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 80011c4:	4940      	ldr	r1, [pc, #256]	; (80012c8 <Create_File+0x10c>)
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f00a fa88 	bl	800b6dc <f_stat>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <Create_File+0x110>)
 80011d2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <Create_File+0x110>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80011dc:	2064      	movs	r0, #100	; 0x64
 80011de:	f00c ff9b 	bl	800e118 <pvPortMalloc>
 80011e2:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	493a      	ldr	r1, [pc, #232]	; (80012d0 <Create_File+0x114>)
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f00d ff03 	bl	800eff4 <siprintf>
				name);
		Send_Uart(buf);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff feec 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f00d f85b 	bl	800e2b0 <vPortFree>
		return fresult;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <Create_File+0x110>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e05f      	b.n	80012c0 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001200:	220b      	movs	r2, #11
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4833      	ldr	r0, [pc, #204]	; (80012d4 <Create_File+0x118>)
 8001206:	f009 fd61 	bl	800accc <f_open>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <Create_File+0x110>)
 8001210:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <Create_File+0x110>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f00c ff7c 	bl	800e118 <pvPortMalloc>
 8001220:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult,
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <Create_File+0x110>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	492b      	ldr	r1, [pc, #172]	; (80012d8 <Create_File+0x11c>)
 800122c:	6938      	ldr	r0, [r7, #16]
 800122e:	f00d fee1 	bl	800eff4 <siprintf>
					name);
			Send_Uart(buf);
 8001232:	6938      	ldr	r0, [r7, #16]
 8001234:	f7ff feca 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001238:	6938      	ldr	r0, [r7, #16]
 800123a:	f00d f839 	bl	800e2b0 <vPortFree>
			return fresult;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <Create_File+0x110>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	e03d      	b.n	80012c0 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f00c ff67 	bl	800e118 <pvPortMalloc>
 800124a:	61f8      	str	r0, [r7, #28]
			sprintf(buf,
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4923      	ldr	r1, [pc, #140]	; (80012dc <Create_File+0x120>)
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f00d fecf 	bl	800eff4 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			Send_Uart(buf);
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	f7ff feb8 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800125c:	69f8      	ldr	r0, [r7, #28]
 800125e:	f00d f827 	bl	800e2b0 <vPortFree>
		}

		fresult = f_close(&fil);
 8001262:	481c      	ldr	r0, [pc, #112]	; (80012d4 <Create_File+0x118>)
 8001264:	f00a f924 	bl	800b4b0 <f_close>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <Create_File+0x110>)
 800126e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <Create_File+0x110>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f00c ff4d 	bl	800e118 <pvPortMalloc>
 800127e:	6178      	str	r0, [r7, #20]
			sprintf(buf, "ERROR No. %d in closing file *%s*\n\n", fresult,
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <Create_File+0x110>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <Create_File+0x124>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f00d feb2 	bl	800eff4 <siprintf>
					name);
			Send_Uart(buf);
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f7ff fe9b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f00d f80a 	bl	800e2b0 <vPortFree>
 800129c:	e00e      	b.n	80012bc <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f00c ff3a 	bl	800e118 <pvPortMalloc>
 80012a4:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <Create_File+0x128>)
 80012aa:	69b8      	ldr	r0, [r7, #24]
 80012ac:	f00d fea2 	bl	800eff4 <siprintf>
			Send_Uart(buf);
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fe8b 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80012b6:	69b8      	ldr	r0, [r7, #24]
 80012b8:	f00c fffa 	bl	800e2b0 <vPortFree>
		}
	}
	return fresult;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <Create_File+0x110>)
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000690 	.word	0x20000690
 80012cc:	200006a8 	.word	0x200006a8
 80012d0:	0801164c 	.word	0x0801164c
 80012d4:	20000460 	.word	0x20000460
 80012d8:	08011684 	.word	0x08011684
 80012dc:	080116ac 	.word	0x080116ac
 80012e0:	080116ec 	.word	0x080116ec
 80012e4:	0801162c 	.word	0x0801162c

080012e8 <Update_File>:

FRESULT Update_File(char *name, char *data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 80012f2:	4953      	ldr	r1, [pc, #332]	; (8001440 <Update_File+0x158>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f00a f9f1 	bl	800b6dc <f_stat>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <Update_File+0x15c>)
 8001300:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <Update_File+0x15c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d011      	beq.n	800132e <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 800130a:	2064      	movs	r0, #100	; 0x64
 800130c:	f00c ff04 	bl	800e118 <pvPortMalloc>
 8001310:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	494c      	ldr	r1, [pc, #304]	; (8001448 <Update_File+0x160>)
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f00d fe6c 	bl	800eff4 <siprintf>
		Send_Uart(buf);
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fe55 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f00c ffc4 	bl	800e2b0 <vPortFree>
		return fresult;
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <Update_File+0x15c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	e083      	b.n	8001436 <Update_File+0x14e>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800132e:	2232      	movs	r2, #50	; 0x32
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4846      	ldr	r0, [pc, #280]	; (800144c <Update_File+0x164>)
 8001334:	f009 fcca 	bl	800accc <f_open>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <Update_File+0x15c>)
 800133e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <Update_File+0x15c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d014      	beq.n	8001372 <Update_File+0x8a>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f00c fee5 	bl	800e118 <pvPortMalloc>
 800134e:	60f8      	str	r0, [r7, #12]
			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult,
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <Update_File+0x15c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	493d      	ldr	r1, [pc, #244]	; (8001450 <Update_File+0x168>)
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f00d fe4a 	bl	800eff4 <siprintf>
					name);
			Send_Uart(buf);
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fe33 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f00c ffa2 	bl	800e2b0 <vPortFree>
			return fresult;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <Update_File+0x15c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	e061      	b.n	8001436 <Update_File+0x14e>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7fe ffac 	bl	80002d0 <strlen>
 8001378:	4602      	mov	r2, r0
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <Update_File+0x16c>)
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4833      	ldr	r0, [pc, #204]	; (800144c <Update_File+0x164>)
 8001380:	f009 fe69 	bl	800b056 <f_write>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <Update_File+0x15c>)
 800138a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <Update_File+0x15c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <Update_File+0xd2>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001394:	2064      	movs	r0, #100	; 0x64
 8001396:	f00c febf 	bl	800e118 <pvPortMalloc>
 800139a:	61b8      	str	r0, [r7, #24]
			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult,
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <Update_File+0x15c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	492c      	ldr	r1, [pc, #176]	; (8001458 <Update_File+0x170>)
 80013a6:	69b8      	ldr	r0, [r7, #24]
 80013a8:	f00d fe24 	bl	800eff4 <siprintf>
					name);
			Send_Uart(buf);
 80013ac:	69b8      	ldr	r0, [r7, #24]
 80013ae:	f7ff fe0d 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013b2:	69b8      	ldr	r0, [r7, #24]
 80013b4:	f00c ff7c 	bl	800e2b0 <vPortFree>
 80013b8:	e00e      	b.n	80013d8 <Update_File+0xf0>
		}

		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ba:	2064      	movs	r0, #100	; 0x64
 80013bc:	f00c feac 	bl	800e118 <pvPortMalloc>
 80013c0:	61f8      	str	r0, [r7, #28]
			sprintf(buf, "*%s* UPDATED successfully\n", name);
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <Update_File+0x174>)
 80013c6:	69f8      	ldr	r0, [r7, #28]
 80013c8:	f00d fe14 	bl	800eff4 <siprintf>
			Send_Uart(buf);
 80013cc:	69f8      	ldr	r0, [r7, #28]
 80013ce:	f7ff fdfd 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 80013d2:	69f8      	ldr	r0, [r7, #28]
 80013d4:	f00c ff6c 	bl	800e2b0 <vPortFree>
		}

		/* Close file */
		fresult = f_close(&fil);
 80013d8:	481c      	ldr	r0, [pc, #112]	; (800144c <Update_File+0x164>)
 80013da:	f00a f869 	bl	800b4b0 <f_close>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <Update_File+0x15c>)
 80013e4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <Update_File+0x15c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <Update_File+0x12c>
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f00c fe92 	bl	800e118 <pvPortMalloc>
 80013f4:	6138      	str	r0, [r7, #16]
			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult,
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <Update_File+0x15c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4918      	ldr	r1, [pc, #96]	; (8001460 <Update_File+0x178>)
 8001400:	6938      	ldr	r0, [r7, #16]
 8001402:	f00d fdf7 	bl	800eff4 <siprintf>
					name);
			Send_Uart(buf);
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f7ff fde0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f00c ff4f 	bl	800e2b0 <vPortFree>
 8001412:	e00e      	b.n	8001432 <Update_File+0x14a>
		}
		else
		{
			char *buf = pvPortMalloc(100 * sizeof(char));
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f00c fe7f 	bl	800e118 <pvPortMalloc>
 800141a:	6178      	str	r0, [r7, #20]
			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4911      	ldr	r1, [pc, #68]	; (8001464 <Update_File+0x17c>)
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f00d fde7 	bl	800eff4 <siprintf>
			Send_Uart(buf);
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff fdd0 	bl	8000fcc <Send_Uart>
			vPortFree(buf);
 800142c:	6978      	ldr	r0, [r7, #20]
 800142e:	f00c ff3f 	bl	800e2b0 <vPortFree>
		}
	}
	return fresult;
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <Update_File+0x15c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000690 	.word	0x20000690
 8001444:	200006a8 	.word	0x200006a8
 8001448:	080114d4 	.word	0x080114d4
 800144c:	20000460 	.word	0x20000460
 8001450:	080114f4 	.word	0x080114f4
 8001454:	200006ac 	.word	0x200006ac
 8001458:	08011710 	.word	0x08011710
 800145c:	08011738 	.word	0x08011738
 8001460:	08011604 	.word	0x08011604
 8001464:	0801162c 	.word	0x0801162c

08001468 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir(char *name)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	fresult = f_mkdir(name);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f00a fa25 	bl	800b8c0 <f_mkdir>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <Create_Dir+0x70>)
 800147c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Create_Dir+0x70>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <Create_Dir+0x3e>
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 8001486:	2064      	movs	r0, #100	; 0x64
 8001488:	f00c fe46 	bl	800e118 <pvPortMalloc>
 800148c:	60b8      	str	r0, [r7, #8]
		sprintf(buf, "*%s* has been created successfully\n", name);
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4912      	ldr	r1, [pc, #72]	; (80014dc <Create_Dir+0x74>)
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f00d fdae 	bl	800eff4 <siprintf>
		Send_Uart(buf);
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7ff fd97 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f00c ff06 	bl	800e2b0 <vPortFree>
 80014a4:	e011      	b.n	80014ca <Create_Dir+0x62>
	}
	else
	{
		char *buf = pvPortMalloc(100 * sizeof(char));
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f00c fe36 	bl	800e118 <pvPortMalloc>
 80014ac:	60f8      	str	r0, [r7, #12]
		sprintf(buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <Create_Dir+0x70>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <Create_Dir+0x78>)
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f00d fd9b 	bl	800eff4 <siprintf>
				name);
		Send_Uart(buf);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fd84 	bl	8000fcc <Send_Uart>
		vPortFree(buf);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f00c fef3 	bl	800e2b0 <vPortFree>
	}
	return fresult;
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <Create_Dir+0x70>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200006a8 	.word	0x200006a8
 80014dc:	08011798 	.word	0x08011798
 80014e0:	080117bc 	.word	0x080117bc

080014e4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <MX_ADC2_Init+0xf0>)
 80014f8:	4a37      	ldr	r2, [pc, #220]	; (80015d8 <MX_ADC2_Init+0xf4>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_ADC2_Init+0xf0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_ADC2_Init+0xf0>)
 800150a:	2201      	movs	r2, #1
 800150c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001510:	2200      	movs	r2, #0
 8001512:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_ADC2_Init+0xf0>)
 800151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001526:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <MX_ADC2_Init+0xf0>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001534:	2204      	movs	r2, #4
 8001536:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_ADC2_Init+0xf0>)
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001548:	f002 ff1a 	bl	8004380 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001552:	f001 fb81 	bl	8002c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	2304      	movs	r3, #4
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155a:	2301      	movs	r3, #1
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	4619      	mov	r1, r3
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001568:	f003 f8c2 	bl	80046f0 <HAL_ADC_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001572:	f001 fb71 	bl	8002c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	2301      	movs	r3, #1
 8001578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_ADC2_Init+0xf0>)
 8001584:	f003 f8b4 	bl	80046f0 <HAL_ADC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800158e:	f001 fb63 	bl	8002c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001592:	230d      	movs	r3, #13
 8001594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001596:	2303      	movs	r3, #3
 8001598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_ADC2_Init+0xf0>)
 80015a0:	f003 f8a6 	bl	80046f0 <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 80015aa:	f001 fb55 	bl	8002c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015ae:	230e      	movs	r3, #14
 80015b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015b2:	2304      	movs	r3, #4
 80015b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_ADC2_Init+0xf0>)
 80015bc:	f003 f898 	bl	80046f0 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 80015c6:	f001 fb47 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200006b0 	.word	0x200006b0
 80015d8:	40012100 	.word	0x40012100

080015dc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <MX_ADC3_Init+0x98>)
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <MX_ADC3_Init+0x9c>)
 80015f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <MX_ADC3_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_ADC3_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_ADC3_Init+0x98>)
 8001602:	2201      	movs	r2, #1
 8001604:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_ADC3_Init+0x98>)
 8001608:	2201      	movs	r2, #1
 800160a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_ADC3_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_ADC3_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_ADC3_Init+0x98>)
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <MX_ADC3_Init+0xa0>)
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_ADC3_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_ADC3_Init+0x98>)
 8001628:	2201      	movs	r2, #1
 800162a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_ADC3_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_ADC3_Init+0x98>)
 8001636:	2201      	movs	r2, #1
 8001638:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_ADC3_Init+0x98>)
 800163c:	f002 fea0 	bl	8004380 <HAL_ADC_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001646:	f001 fb07 	bl	8002c58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_ADC3_Init+0x98>)
 800165c:	f003 f848 	bl	80046f0 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001666:	f001 faf7 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200006f8 	.word	0x200006f8
 8001678:	40012200 	.word	0x40012200
 800167c:	0f000001 	.word	0x0f000001

08001680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a53      	ldr	r2, [pc, #332]	; (80017ec <HAL_ADC_MspInit+0x16c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d173      	bne.n	800178a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    PC3     ------> ADC2_IN13
    PA1     ------> ADC2_IN1
    PA4     ------> ADC2_IN4
    PC4     ------> ADC2_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016f6:	2318      	movs	r3, #24
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	483a      	ldr	r0, [pc, #232]	; (80017f4 <HAL_ADC_MspInit+0x174>)
 800170a:	f003 ff63 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800170e:	2312      	movs	r3, #18
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4835      	ldr	r0, [pc, #212]	; (80017f8 <HAL_ADC_MspInit+0x178>)
 8001722:	f003 ff57 	bl	80055d4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001728:	4a35      	ldr	r2, [pc, #212]	; (8001800 <HAL_ADC_MspInit+0x180>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 800172e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001732:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001734:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001740:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001746:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001748:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 800174a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800174e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001756:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 800175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 800176e:	f003 fb51 	bl	8004e14 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001778:	f001 fa6e 	bl	8002c58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_ADC_MspInit+0x17c>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001788:	e02c      	b.n	80017e4 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x184>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d127      	bne.n	80017e4 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	6453      	str	r3, [r2, #68]	; 0x44
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6313      	str	r3, [r2, #48]	; 0x30
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_ADC_MspInit+0x170>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <HAL_ADC_MspInit+0x178>)
 80017e0:	f003 fef8 	bl	80055d4 <HAL_GPIO_Init>
}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40012100 	.word	0x40012100
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	20000740 	.word	0x20000740
 8001800:	40026440 	.word	0x40026440
 8001804:	40012200 	.word	0x40012200

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <MX_DMA_Init+0x3c>)
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	203a      	movs	r0, #58	; 0x3a
 8001830:	f003 fac6 	bl	8004dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001834:	203a      	movs	r0, #58	; 0x3a
 8001836:	f003 fadf 	bl	8004df8 <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <SELECT>:
static uint8_t CardType; /* SD type 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0; /* Power condition Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2101      	movs	r1, #1
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <SELECT+0x14>)
 8001852:	f004 f853 	bl	80058fc <HAL_GPIO_WritePin>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020400 	.word	0x40020400

08001860 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DESELECT+0x14>)
 800186a:	f004 f847 	bl	80058fc <HAL_GPIO_WritePin>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400

08001878 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY)
 8001882:	bf00      	nop
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <SPI_TxByte+0x30>)
 8001886:	f005 fe20 	bl	80074ca <HAL_SPI_GetState>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d1f9      	bne.n	8001884 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001890:	1df9      	adds	r1, r7, #7
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	2201      	movs	r2, #1
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <SPI_TxByte+0x30>)
 800189a:	f005 fb38 	bl	8006f0e <HAL_SPI_Transmit>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000571c 	.word	0x2000571c

080018ac <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80018b2:	23ff      	movs	r3, #255	; 0xff
 80018b4:	71fb      	strb	r3, [r7, #7]
	data = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71bb      	strb	r3, [r7, #6]

	while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY))
 80018ba:	bf00      	nop
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <SPI_RxByte+0x38>)
 80018be:	f005 fe04 	bl	80074ca <HAL_SPI_GetState>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d1f9      	bne.n	80018bc <SPI_RxByte+0x10>
		;
	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80018c8:	1dba      	adds	r2, r7, #6
 80018ca:	1df9      	adds	r1, r7, #7
 80018cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <SPI_RxByte+0x38>)
 80018d6:	f005 fc56 	bl	8007186 <HAL_SPI_TransmitReceive>

	return data;
 80018da:	79bb      	ldrb	r3, [r7, #6]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000571c 	.word	0x2000571c

080018e8 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80018f0:	f7ff ffdc 	bl	80018ac <SPI_RxByte>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	uint8_t res;

	/* 500ms Counter preparation*/
	Timer2 = 50;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <SD_ReadyWait+0x34>)
 800190c:	2232      	movs	r2, #50	; 0x32
 800190e:	701a      	strb	r2, [r3, #0]

	SPI_RxByte();
 8001910:	f7ff ffcc 	bl	80018ac <SPI_RxByte>

	do
	{
		/* 0xFF SPI communication until a value is received */
		res = SPI_RxByte();
 8001914:	f7ff ffca 	bl	80018ac <SPI_RxByte>
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d004      	beq.n	800192c <SD_ReadyWait+0x28>
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SD_ReadyWait+0x34>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f3      	bne.n	8001914 <SD_ReadyWait+0x10>

	return res;
 800192c:	79fb      	ldrb	r3, [r7, #7]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200057be 	.word	0x200057be

0800193c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
	uint8_t cmd_arg[6];
	uint32_t Count = 0x1FFF;
 8001942:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001946:	617b      	str	r3, [r7, #20]

	DESELECT();
 8001948:	f7ff ff8a 	bl	8001860 <DESELECT>

	for (int i = 0; i < 10; i++)
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e005      	b.n	800195e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001952:	20ff      	movs	r0, #255	; 0xff
 8001954:	f7ff ff90 	bl	8001878 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3301      	adds	r3, #1
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b09      	cmp	r3, #9
 8001962:	ddf6      	ble.n	8001952 <SD_PowerOn+0x16>
	}

	/* SPI Chips Select */
	SELECT();
 8001964:	f7ff ff70 	bl	8001848 <SELECT>

	/*  GO_IDLE_STATE State transitions*/
	cmd_arg[0] = (CMD0 | 0x40);
 8001968:	2340      	movs	r3, #64	; 0x40
 800196a:	713b      	strb	r3, [r7, #4]
	cmd_arg[1] = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	717b      	strb	r3, [r7, #5]
	cmd_arg[2] = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	71bb      	strb	r3, [r7, #6]
	cmd_arg[3] = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	71fb      	strb	r3, [r7, #7]
	cmd_arg[4] = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	723b      	strb	r3, [r7, #8]
	cmd_arg[5] = 0x95;
 800197c:	2395      	movs	r3, #149	; 0x95
 800197e:	727b      	strb	r3, [r7, #9]

	/* Command transmission*/
	for (int i = 0; i < 6; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e009      	b.n	800199a <SD_PowerOn+0x5e>
	{
		SPI_TxByte(cmd_arg[i]);
 8001986:	1d3a      	adds	r2, r7, #4
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff72 	bl	8001878 <SPI_TxByte>
	for (int i = 0; i < 6; i++)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b05      	cmp	r3, #5
 800199e:	ddf2      	ble.n	8001986 <SD_PowerOn+0x4a>
	}

	/* Answer waiting*/
	while ((SPI_RxByte() != 0x01) && Count)
 80019a0:	e002      	b.n	80019a8 <SD_PowerOn+0x6c>
	{
		Count--;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && Count)
 80019a8:	f7ff ff80 	bl	80018ac <SPI_RxByte>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d002      	beq.n	80019b8 <SD_PowerOn+0x7c>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f4      	bne.n	80019a2 <SD_PowerOn+0x66>
	}

	DESELECT();
 80019b8:	f7ff ff52 	bl	8001860 <DESELECT>
	SPI_TxByte(0XFF);
 80019bc:	20ff      	movs	r0, #255	; 0xff
 80019be:	f7ff ff5b 	bl	8001878 <SPI_TxByte>

	PowerFlag = 1;
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <SD_PowerOn+0x94>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200007a1 	.word	0x200007a1

080019d4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <SD_PowerOff+0x14>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	200007a1 	.word	0x200007a1

080019ec <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	/*  0=off, 1=on */
	return PowerFlag;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <SD_CheckPower+0x14>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200007a1 	.word	0x200007a1

08001a04 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* 100ms 타이머 */
	Timer1 = 10;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <SD_RxDataBlock+0x68>)
 8001a10:	220a      	movs	r2, #10
 8001a12:	701a      	strb	r2, [r3, #0]

	/* 응답 대기 */
	do
	{
		token = SPI_RxByte();
 8001a14:	f7ff ff4a 	bl	80018ac <SPI_RxByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d104      	bne.n	8001a2c <SD_RxDataBlock+0x28>
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <SD_RxDataBlock+0x68>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f3      	bne.n	8001a14 <SD_RxDataBlock+0x10>

	/* 0xFE 이외 Token 수신 시 에러 처리 */
	if (token != 0xFE)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2bfe      	cmp	r3, #254	; 0xfe
 8001a30:	d001      	beq.n	8001a36 <SD_RxDataBlock+0x32>
		return FALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e016      	b.n	8001a64 <SD_RxDataBlock+0x60>

	/* 버퍼에 데이터 수신 */
	do
	{
		SPI_RxBytePtr(buff++);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff53 	bl	80018e8 <SPI_RxBytePtr>
		SPI_RxBytePtr(buff++);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff4d 	bl	80018e8 <SPI_RxBytePtr>
	} while (btr -= 2);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3b02      	subs	r3, #2
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ed      	bne.n	8001a36 <SD_RxDataBlock+0x32>

	SPI_RxByte(); /* CRC 무시 */
 8001a5a:	f7ff ff27 	bl	80018ac <SPI_RxByte>
	SPI_RxByte();
 8001a5e:	f7ff ff25 	bl	80018ac <SPI_RxByte>

	return TRUE;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200057bd 	.word	0x200057bd

08001a70 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp, wc;
	uint8_t i = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	737b      	strb	r3, [r7, #13]

	/* SD카드 준비 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001a80:	f7ff ff40 	bl	8001904 <SD_ReadyWait>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d001      	beq.n	8001a8e <SD_TxDataBlock+0x1e>
		return FALSE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e040      	b.n	8001b10 <SD_TxDataBlock+0xa0>

	/* 토큰 전송 */
	SPI_TxByte(token);
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fef1 	bl	8001878 <SPI_TxByte>

	/* 데이터 토큰인 경우 */
	if (token != 0xFD)
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	2bfd      	cmp	r3, #253	; 0xfd
 8001a9a:	d031      	beq.n	8001b00 <SD_TxDataBlock+0x90>
	{
		wc = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73bb      	strb	r3, [r7, #14]

		/* 512 바이트 데이터 전송 */
		do
		{
			SPI_TxByte(*buff++);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fee5 	bl	8001878 <SPI_TxByte>
			SPI_TxByte(*buff++);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fede 	bl	8001878 <SPI_TxByte>
		} while (--wc);
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	73bb      	strb	r3, [r7, #14]
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1eb      	bne.n	8001aa0 <SD_TxDataBlock+0x30>

		SPI_RxByte(); /* CRC 무시 */
 8001ac8:	f7ff fef0 	bl	80018ac <SPI_RxByte>
		SPI_RxByte();
 8001acc:	f7ff feee 	bl	80018ac <SPI_RxByte>

		/* 데이트 응답 수신 */
		while (i <= 64)
 8001ad0:	e00b      	b.n	8001aea <SD_TxDataBlock+0x7a>
		{
			resp = SPI_RxByte();
 8001ad2:	f7ff feeb 	bl	80018ac <SPI_RxByte>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]

			/* 에러 응답 처리 */
			if ((resp & 0x1F) == 0x05)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d006      	beq.n	8001af2 <SD_TxDataBlock+0x82>
				break;

			i++;
 8001ae4:	7b7b      	ldrb	r3, [r7, #13]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	737b      	strb	r3, [r7, #13]
		while (i <= 64)
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d9f0      	bls.n	8001ad2 <SD_TxDataBlock+0x62>
 8001af0:	e000      	b.n	8001af4 <SD_TxDataBlock+0x84>
				break;
 8001af2:	bf00      	nop
		}

		/* SPI 수신 버퍼 Clear */
		while (SPI_RxByte() == 0)
 8001af4:	bf00      	nop
 8001af6:	f7ff fed9 	bl	80018ac <SPI_RxByte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0fa      	beq.n	8001af6 <SD_TxDataBlock+0x86>
			;
	}

	if ((resp & 0x1F) == 0x05)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d101      	bne.n	8001b0e <SD_TxDataBlock+0x9e>
		return TRUE;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <SD_TxDataBlock+0xa0>
	else
		return FALSE;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* SD카드 대기 */
	if (SD_ReadyWait() != 0xFF)
 8001b24:	f7ff feee 	bl	8001904 <SD_ReadyWait>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2bff      	cmp	r3, #255	; 0xff
 8001b2c:	d001      	beq.n	8001b32 <SD_SendCmd+0x1a>
		return 0xFF;
 8001b2e:	23ff      	movs	r3, #255	; 0xff
 8001b30:	e040      	b.n	8001bb4 <SD_SendCmd+0x9c>

	/* 명령 패킷 전송 */
	SPI_TxByte(cmd); /* Command */
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fe9f 	bl	8001878 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	0e1b      	lsrs	r3, r3, #24
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe99 	bl	8001878 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe93 	bl	8001878 <SPI_TxByte>
	SPI_TxByte((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe8d 	bl	8001878 <SPI_TxByte>
	SPI_TxByte((BYTE) arg); /* Argument[7..0] */
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe88 	bl	8001878 <SPI_TxByte>

	/* 명령별 CRC 준비 */
	crc = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b40      	cmp	r3, #64	; 0x40
 8001b70:	d101      	bne.n	8001b76 <SD_SendCmd+0x5e>
		crc = 0x95; /* CRC for CMD0(0) */
 8001b72:	2395      	movs	r3, #149	; 0x95
 8001b74:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD8)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b48      	cmp	r3, #72	; 0x48
 8001b7a:	d101      	bne.n	8001b80 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001b7c:	2387      	movs	r3, #135	; 0x87
 8001b7e:	73fb      	strb	r3, [r7, #15]

	/* CRC 전송 */
	SPI_TxByte(crc);
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe78 	bl	8001878 <SPI_TxByte>

	/* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
	if (cmd == CMD12)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b4c      	cmp	r3, #76	; 0x4c
 8001b8c:	d101      	bne.n	8001b92 <SD_SendCmd+0x7a>
		SPI_RxByte();
 8001b8e:	f7ff fe8d 	bl	80018ac <SPI_RxByte>

	/* 10회 내에 정상 데이터를 수신한다. */
	uint8_t n = 10;
 8001b92:	230a      	movs	r3, #10
 8001b94:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 8001b96:	f7ff fe89 	bl	80018ac <SPI_RxByte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001b9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da05      	bge.n	8001bb2 <SD_SendCmd+0x9a>
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	73bb      	strb	r3, [r7, #14]
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f1      	bne.n	8001b96 <SD_SendCmd+0x7e>

	return res;
 8001bb2:	7b7b      	ldrb	r3, [r7, #13]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <SD_disk_initialize>:
 user_diskio.c 파일에서 사용된다.
 -----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* 한종류의 드라이브만 지원 */
	if (drv)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d5      	b.n	8001d7c <SD_disk_initialize+0x1c0>

	/* SD카드 미삽입 */
	if (Stat & STA_NODISK)
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <SD_disk_initialize+0x1c8>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <SD_disk_initialize+0x2a>
		return Stat;
 8001bde:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <SD_disk_initialize+0x1c8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	e0ca      	b.n	8001d7c <SD_disk_initialize+0x1c0>

	/* SD카드 Power On */
	SD_PowerOn();
 8001be6:	f7ff fea9 	bl	800193c <SD_PowerOn>

	/* SPI 통신을 위해 Chip Select */
	SELECT();
 8001bea:	f7ff fe2d 	bl	8001848 <SELECT>

	/* SD카드 타입변수 초기화 */
	type = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73bb      	strb	r3, [r7, #14]

	/* Idle 상태 진입 */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2040      	movs	r0, #64	; 0x40
 8001bf6:	f7ff ff8f 	bl	8001b18 <SD_SendCmd>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	f040 80a5 	bne.w	8001d4c <SD_disk_initialize+0x190>
	{
		/* 타이머 1초 설정 */
		Timer1 = 100;
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <SD_disk_initialize+0x1cc>)
 8001c04:	2264      	movs	r2, #100	; 0x64
 8001c06:	701a      	strb	r2, [r3, #0]

		/* SD 인터페이스 동작 조건 확인 */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001c08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001c0c:	2048      	movs	r0, #72	; 0x48
 8001c0e:	f7ff ff83 	bl	8001b18 <SD_SendCmd>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d158      	bne.n	8001cca <SD_disk_initialize+0x10e>
		{
			/* SDC Ver2+ */
			for (n = 0; n < 4; n++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e00c      	b.n	8001c38 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 8001c1e:	7bfc      	ldrb	r4, [r7, #15]
 8001c20:	f7ff fe44 	bl	80018ac <SPI_RxByte>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	f104 0310 	add.w	r3, r4, #16
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d9ef      	bls.n	8001c1e <SD_disk_initialize+0x62>
			}

			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001c3e:	7abb      	ldrb	r3, [r7, #10]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	f040 8083 	bne.w	8001d4c <SD_disk_initialize+0x190>
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2baa      	cmp	r3, #170	; 0xaa
 8001c4a:	d17f      	bne.n	8001d4c <SD_disk_initialize+0x190>
			{
				/* 2.7-3.6V 전압범위 동작 */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2077      	movs	r0, #119	; 0x77
 8001c50:	f7ff ff62 	bl	8001b18 <SD_SendCmd>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d807      	bhi.n	8001c6a <SD_disk_initialize+0xae>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001c5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c5e:	2069      	movs	r0, #105	; 0x69
 8001c60:	f7ff ff5a 	bl	8001b18 <SD_SendCmd>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <SD_disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <SD_disk_initialize+0x1cc>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1eb      	bne.n	8001c4c <SD_disk_initialize+0x90>
 8001c74:	e000      	b.n	8001c78 <SD_disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001c76:	bf00      	nop

				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <SD_disk_initialize+0x1cc>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d064      	beq.n	8001d4c <SD_disk_initialize+0x190>
 8001c82:	2100      	movs	r1, #0
 8001c84:	207a      	movs	r0, #122	; 0x7a
 8001c86:	f7ff ff47 	bl	8001b18 <SD_SendCmd>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d15d      	bne.n	8001d4c <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e00c      	b.n	8001cb0 <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001c96:	7bfc      	ldrb	r4, [r7, #15]
 8001c98:	f7ff fe08 	bl	80018ac <SPI_RxByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f104 0310 	add.w	r3, r4, #16
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	3301      	adds	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d9ef      	bls.n	8001c96 <SD_disk_initialize+0xda>
					}

					type = (ocr[0] & 0x40) ? 6 : 2;
 8001cb6:	7a3b      	ldrb	r3, [r7, #8]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SD_disk_initialize+0x108>
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	e000      	b.n	8001cc6 <SD_disk_initialize+0x10a>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	73bb      	strb	r3, [r7, #14]
 8001cc8:	e040      	b.n	8001d4c <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC Ver1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2077      	movs	r0, #119	; 0x77
 8001cce:	f7ff ff23 	bl	8001b18 <SD_SendCmd>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d808      	bhi.n	8001cea <SD_disk_initialize+0x12e>
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2069      	movs	r0, #105	; 0x69
 8001cdc:	f7ff ff1c 	bl	8001b18 <SD_SendCmd>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d801      	bhi.n	8001cea <SD_disk_initialize+0x12e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e000      	b.n	8001cec <SD_disk_initialize+0x130>
 8001cea:	2301      	movs	r3, #1
 8001cec:	73bb      	strb	r3, [r7, #14]
					2 : 1; /* SDC : MMC */

			do
			{
				if (type == 2)
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d10e      	bne.n	8001d12 <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2077      	movs	r0, #119	; 0x77
 8001cf8:	f7ff ff0e 	bl	8001b18 <SD_SendCmd>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d80e      	bhi.n	8001d20 <SD_disk_initialize+0x164>
 8001d02:	2100      	movs	r1, #0
 8001d04:	2069      	movs	r0, #105	; 0x69
 8001d06:	f7ff ff07 	bl	8001b18 <SD_SendCmd>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <SD_disk_initialize+0x164>
						break; /* ACMD41 */
 8001d10:	e00d      	b.n	8001d2e <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 8001d12:	2100      	movs	r1, #0
 8001d14:	2041      	movs	r0, #65	; 0x41
 8001d16:	f7ff feff 	bl	8001b18 <SD_SendCmd>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <SD_disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <SD_disk_initialize+0x1cc>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e1      	bne.n	8001cee <SD_disk_initialize+0x132>
 8001d2a:	e000      	b.n	8001d2e <SD_disk_initialize+0x172>
						break; /* CMD1 */
 8001d2c:	bf00      	nop

			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <SD_disk_initialize+0x1cc>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <SD_disk_initialize+0x18c>
 8001d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d3c:	2050      	movs	r0, #80	; 0x50
 8001d3e:	f7ff feeb 	bl	8001b18 <SD_SendCmd>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SD_disk_initialize+0x190>
			{
				/* 블럭 길이 선택 */
				type = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73bb      	strb	r3, [r7, #14]
			}
		}
	}

	CardType = type;
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <SD_disk_initialize+0x1d0>)
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	7013      	strb	r3, [r2, #0]

	DESELECT();
 8001d52:	f7ff fd85 	bl	8001860 <DESELECT>

	SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001d56:	f7ff fda9 	bl	80018ac <SPI_RxByte>

	if (type)
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <SD_disk_initialize+0x1b6>
	{
		/* Clear STA_NOINIT */
		Stat &= ~STA_NOINIT;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <SD_disk_initialize+0x1c8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SD_disk_initialize+0x1c8>)
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e001      	b.n	8001d76 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001d72:	f7ff fe2f 	bl	80019d4 <SD_PowerOff>
	}

	return Stat;
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <SD_disk_initialize+0x1c8>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	200057bd 	.word	0x200057bd
 8001d8c:	200007a0 	.word	0x200007a0

08001d90 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SD_disk_status+0x14>
		return STA_NOINIT;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e002      	b.n	8001daa <SD_disk_status+0x1a>

	return Stat;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SD_disk_status+0x28>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <SD_disk_read+0x1c>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <SD_disk_read+0x20>
		return RES_PARERR;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e051      	b.n	8001e80 <SD_disk_read+0xc4>

	if (Stat & STA_NOINIT)
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <SD_disk_read+0xcc>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SD_disk_read+0x32>
		return RES_NOTRDY;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e048      	b.n	8001e80 <SD_disk_read+0xc4>

	if (!(CardType & 4))
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <SD_disk_read+0xd0>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <SD_disk_read+0x44>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	025b      	lsls	r3, r3, #9
 8001dfe:	607b      	str	r3, [r7, #4]

	SELECT();
 8001e00:	f7ff fd22 	bl	8001848 <SELECT>

	if (count == 1)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d111      	bne.n	8001e2e <SD_disk_read+0x72>
	{
		/* 싱글 블록 읽기 */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	2051      	movs	r0, #81	; 0x51
 8001e0e:	f7ff fe83 	bl	8001b18 <SD_SendCmd>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d129      	bne.n	8001e6c <SD_disk_read+0xb0>
 8001e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1c:	68b8      	ldr	r0, [r7, #8]
 8001e1e:	f7ff fdf1 	bl	8001a04 <SD_RxDataBlock>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d021      	beq.n	8001e6c <SD_disk_read+0xb0>
			count = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	e01e      	b.n	8001e6c <SD_disk_read+0xb0>
	}
	else
	{
		/* 다중 블록 읽기 */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	2052      	movs	r0, #82	; 0x52
 8001e32:	f7ff fe71 	bl	8001b18 <SD_SendCmd>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d117      	bne.n	8001e6c <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 8001e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e40:	68b8      	ldr	r0, [r7, #8]
 8001e42:	f7ff fddf 	bl	8001a04 <SD_RxDataBlock>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <SD_disk_read+0xa6>
					break;

				buff += 512;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ed      	bne.n	8001e3c <SD_disk_read+0x80>
 8001e60:	e000      	b.n	8001e64 <SD_disk_read+0xa8>
					break;
 8001e62:	bf00      	nop

			/* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
			SD_SendCmd(CMD12, 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	204c      	movs	r0, #76	; 0x4c
 8001e68:	f7ff fe56 	bl	8001b18 <SD_SendCmd>
		}
	}

	DESELECT();
 8001e6c:	f7ff fcf8 	bl	8001860 <DESELECT>
	SPI_RxByte(); /* Idle 상태(Release DO) */
 8001e70:	f7ff fd1c 	bl	80018ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf14      	ite	ne
 8001e7a:	2301      	movne	r3, #1
 8001e7c:	2300      	moveq	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	200007a0 	.word	0x200007a0

08001e90 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <SD_disk_write+0x1c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <SD_disk_write+0x20>
		return RES_PARERR;
 8001eac:	2304      	movs	r3, #4
 8001eae:	e06b      	b.n	8001f88 <SD_disk_write+0xf8>

	if (Stat & STA_NOINIT)
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <SD_disk_write+0x100>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SD_disk_write+0x32>
		return RES_NOTRDY;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e062      	b.n	8001f88 <SD_disk_write+0xf8>

	if (Stat & STA_PROTECT)
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <SD_disk_write+0x100>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SD_disk_write+0x44>
		return RES_WRPRT;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e059      	b.n	8001f88 <SD_disk_write+0xf8>

	if (!(CardType & 4))
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <SD_disk_write+0x104>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <SD_disk_write+0x56>
		sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	025b      	lsls	r3, r3, #9
 8001ee4:	607b      	str	r3, [r7, #4]

	SELECT();
 8001ee6:	f7ff fcaf 	bl	8001848 <SELECT>

	if (count == 1)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d110      	bne.n	8001f12 <SD_disk_write+0x82>
	{
		/* 싱글 블록 쓰기 */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	2058      	movs	r0, #88	; 0x58
 8001ef4:	f7ff fe10 	bl	8001b18 <SD_SendCmd>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d13a      	bne.n	8001f74 <SD_disk_write+0xe4>
 8001efe:	21fe      	movs	r1, #254	; 0xfe
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f7ff fdb5 	bl	8001a70 <SD_TxDataBlock>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d033      	beq.n	8001f74 <SD_disk_write+0xe4>
			count = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	e030      	b.n	8001f74 <SD_disk_write+0xe4>
	}
	else
	{
		/* 다중 블록 쓰기 */
		if (CardType & 2)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <SD_disk_write+0x104>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2077      	movs	r0, #119	; 0x77
 8001f22:	f7ff fdf9 	bl	8001b18 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	2057      	movs	r0, #87	; 0x57
 8001f2a:	f7ff fdf5 	bl	8001b18 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	2059      	movs	r0, #89	; 0x59
 8001f32:	f7ff fdf1 	bl	8001b18 <SD_SendCmd>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11b      	bne.n	8001f74 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 8001f3c:	21fc      	movs	r1, #252	; 0xfc
 8001f3e:	68b8      	ldr	r0, [r7, #8]
 8001f40:	f7ff fd96 	bl	8001a70 <SD_TxDataBlock>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <SD_disk_write+0xd0>
					break;

				buff += 512;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ee      	bne.n	8001f3c <SD_disk_write+0xac>
 8001f5e:	e000      	b.n	8001f62 <SD_disk_write+0xd2>
					break;
 8001f60:	bf00      	nop

			if (!SD_TxDataBlock(0, 0xFD))
 8001f62:	21fd      	movs	r1, #253	; 0xfd
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fd83 	bl	8001a70 <SD_TxDataBlock>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <SD_disk_write+0xe4>
			{
				count = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	603b      	str	r3, [r7, #0]
			}
		}
	}

	DESELECT();
 8001f74:	f7ff fc74 	bl	8001860 <DESELECT>
	SPI_RxByte();
 8001f78:	f7ff fc98 	bl	80018ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	200007a0 	.word	0x200007a0

08001f98 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b08b      	sub	sp, #44	; 0x2c
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	603a      	str	r2, [r7, #0]
 8001fa2:	71fb      	strb	r3, [r7, #7]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e11b      	b.n	80021ee <SD_disk_ioctl+0x256>

	res = RES_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d129      	bne.n	8002016 <SD_disk_ioctl+0x7e>
	{
		switch (*ptr)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d017      	beq.n	8001ffa <SD_disk_ioctl+0x62>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	dc1f      	bgt.n	800200e <SD_disk_ioctl+0x76>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <SD_disk_ioctl+0x40>
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00b      	beq.n	8001fee <SD_disk_ioctl+0x56>
 8001fd6:	e01a      	b.n	800200e <SD_disk_ioctl+0x76>
		{
		case 0:
			if (SD_CheckPower())
 8001fd8:	f7ff fd08 	bl	80019ec <SD_CheckPower>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SD_disk_ioctl+0x4e>
				SD_PowerOff(); /* Power Off */
 8001fe2:	f7ff fcf7 	bl	80019d4 <SD_PowerOff>
			res = RES_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001fec:	e0fd      	b.n	80021ea <SD_disk_ioctl+0x252>
		case 1:
			SD_PowerOn(); /* Power On */
 8001fee:	f7ff fca5 	bl	800193c <SD_PowerOn>
			res = RES_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ff8:	e0f7      	b.n	80021ea <SD_disk_ioctl+0x252>
		case 2:
			*(ptr + 1) = (BYTE) SD_CheckPower();
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	1c5c      	adds	r4, r3, #1
 8001ffe:	f7ff fcf5 	bl	80019ec <SD_CheckPower>
 8002002:	4603      	mov	r3, r0
 8002004:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800200c:	e0ed      	b.n	80021ea <SD_disk_ioctl+0x252>
		default:
			res = RES_PARERR;
 800200e:	2304      	movs	r3, #4
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002014:	e0e9      	b.n	80021ea <SD_disk_ioctl+0x252>
		}
	}
	else
	{
		if (Stat & STA_NOINIT)
 8002016:	4b78      	ldr	r3, [pc, #480]	; (80021f8 <SD_disk_ioctl+0x260>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SD_disk_ioctl+0x90>
			return RES_NOTRDY;
 8002024:	2303      	movs	r3, #3
 8002026:	e0e2      	b.n	80021ee <SD_disk_ioctl+0x256>

		SELECT();
 8002028:	f7ff fc0e 	bl	8001848 <SELECT>

		switch (ctrl)
 800202c:	79bb      	ldrb	r3, [r7, #6]
 800202e:	2b0d      	cmp	r3, #13
 8002030:	f200 80cc 	bhi.w	80021cc <SD_disk_ioctl+0x234>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <SD_disk_ioctl+0xa4>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	08002137 	.word	0x08002137
 8002040:	08002075 	.word	0x08002075
 8002044:	08002127 	.word	0x08002127
 8002048:	080021cd 	.word	0x080021cd
 800204c:	080021cd 	.word	0x080021cd
 8002050:	080021cd 	.word	0x080021cd
 8002054:	080021cd 	.word	0x080021cd
 8002058:	080021cd 	.word	0x080021cd
 800205c:	080021cd 	.word	0x080021cd
 8002060:	080021cd 	.word	0x080021cd
 8002064:	080021cd 	.word	0x080021cd
 8002068:	08002149 	.word	0x08002149
 800206c:	0800216d 	.word	0x0800216d
 8002070:	08002191 	.word	0x08002191
		{
		case GET_SECTOR_COUNT:
			/* SD카드 내 Sector의 개수 (DWORD) */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002074:	2100      	movs	r1, #0
 8002076:	2049      	movs	r0, #73	; 0x49
 8002078:	f7ff fd4e 	bl	8001b18 <SD_SendCmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 80a8 	bne.w	80021d4 <SD_disk_ioctl+0x23c>
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2110      	movs	r1, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fcba 	bl	8001a04 <SD_RxDataBlock>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 809e 	beq.w	80021d4 <SD_disk_ioctl+0x23c>
			{
				if ((csd[0] >> 6) == 1)
 8002098:	7b3b      	ldrb	r3, [r7, #12]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10e      	bne.n	80020c0 <SD_disk_ioctl+0x128>
				{
					/* SDC ver 2.00 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80020a2:	7d7b      	ldrb	r3, [r7, #21]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80020b6:	8bfb      	ldrh	r3, [r7, #30]
 80020b8:	029a      	lsls	r2, r3, #10
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e02e      	b.n	800211e <SD_disk_ioctl+0x186>
				}
				else
				{
					/* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80020c0:	7c7b      	ldrb	r3, [r7, #17]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	7dbb      	ldrb	r3, [r7, #22]
 80020ca:	09db      	lsrs	r3, r3, #7
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80020d2:	7d7b      	ldrb	r3, [r7, #21]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f003 0306 	and.w	r3, r3, #6
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4413      	add	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80020e2:	3302      	adds	r3, #2
 80020e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80020e8:	7d3b      	ldrb	r3, [r7, #20]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80020fc:	7cbb      	ldrb	r3, [r7, #18]
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	b29b      	uxth	r3, r3
 8002102:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800210c:	3301      	adds	r3, #1
 800210e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002110:	8bfa      	ldrh	r2, [r7, #30]
 8002112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002116:	3b09      	subs	r3, #9
 8002118:	409a      	lsls	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	601a      	str	r2, [r3, #0]
				}

				res = RES_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002124:	e056      	b.n	80021d4 <SD_disk_ioctl+0x23c>

		case GET_SECTOR_SIZE:
			/* 섹터의 단위 크기 (WORD) */
			*(WORD*) buff = 512;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800212c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002134:	e055      	b.n	80021e2 <SD_disk_ioctl+0x24a>

		case CTRL_SYNC:
			/* 쓰기 동기화 */
			if (SD_ReadyWait() == 0xFF)
 8002136:	f7ff fbe5 	bl	8001904 <SD_ReadyWait>
 800213a:	4603      	mov	r3, r0
 800213c:	2bff      	cmp	r3, #255	; 0xff
 800213e:	d14b      	bne.n	80021d8 <SD_disk_ioctl+0x240>
				res = RES_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002146:	e047      	b.n	80021d8 <SD_disk_ioctl+0x240>

		case MMC_GET_CSD:
			/* CSD 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002148:	2100      	movs	r1, #0
 800214a:	2049      	movs	r0, #73	; 0x49
 800214c:	f7ff fce4 	bl	8001b18 <SD_SendCmd>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d142      	bne.n	80021dc <SD_disk_ioctl+0x244>
 8002156:	2110      	movs	r1, #16
 8002158:	6a38      	ldr	r0, [r7, #32]
 800215a:	f7ff fc53 	bl	8001a04 <SD_RxDataBlock>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d03b      	beq.n	80021dc <SD_disk_ioctl+0x244>
				res = RES_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800216a:	e037      	b.n	80021dc <SD_disk_ioctl+0x244>

		case MMC_GET_CID:
			/* CID 정보 수신 (16 bytes) */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800216c:	2100      	movs	r1, #0
 800216e:	204a      	movs	r0, #74	; 0x4a
 8002170:	f7ff fcd2 	bl	8001b18 <SD_SendCmd>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d132      	bne.n	80021e0 <SD_disk_ioctl+0x248>
 800217a:	2110      	movs	r1, #16
 800217c:	6a38      	ldr	r0, [r7, #32]
 800217e:	f7ff fc41 	bl	8001a04 <SD_RxDataBlock>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02b      	beq.n	80021e0 <SD_disk_ioctl+0x248>
				res = RES_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800218e:	e027      	b.n	80021e0 <SD_disk_ioctl+0x248>

		case MMC_GET_OCR:
			/* OCR 정보 수신 (4 bytes) */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002190:	2100      	movs	r1, #0
 8002192:	207a      	movs	r0, #122	; 0x7a
 8002194:	f7ff fcc0 	bl	8001b18 <SD_SendCmd>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <SD_disk_ioctl+0x234>
			{
				for (n = 0; n < 4; n++)
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021a4:	e00b      	b.n	80021be <SD_disk_ioctl+0x226>
				{
					*ptr++ = SPI_RxByte();
 80021a6:	6a3c      	ldr	r4, [r7, #32]
 80021a8:	1c63      	adds	r3, r4, #1
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	f7ff fb7e 	bl	80018ac <SPI_RxByte>
 80021b0:	4603      	mov	r3, r0
 80021b2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80021b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b8:	3301      	adds	r3, #1
 80021ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80021be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d9ef      	bls.n	80021a6 <SD_disk_ioctl+0x20e>
				}

				res = RES_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

		default:
			res = RES_PARERR;
 80021cc:	2304      	movs	r3, #4
 80021ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021d2:	e006      	b.n	80021e2 <SD_disk_ioctl+0x24a>
			break;
 80021d4:	bf00      	nop
 80021d6:	e004      	b.n	80021e2 <SD_disk_ioctl+0x24a>
			break;
 80021d8:	bf00      	nop
 80021da:	e002      	b.n	80021e2 <SD_disk_ioctl+0x24a>
			break;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <SD_disk_ioctl+0x24a>
			break;
 80021e0:	bf00      	nop
		}

		DESELECT();
 80021e2:	f7ff fb3d 	bl	8001860 <DESELECT>
		SPI_RxByte();
 80021e6:	f7ff fb61 	bl	80018ac <SPI_RxByte>
	}

	return res;
 80021ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	372c      	adds	r7, #44	; 0x2c
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <vApplicationGetIdleTaskMemory+0x2c>)
 800220c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <vApplicationGetIdleTaskMemory+0x30>)
 8002212:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200053bc 	.word	0x200053bc
 800222c:	2000545c 	.word	0x2000545c

08002230 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b0aa      	sub	sp, #168	; 0xa8
 8002234:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of travelSensorSem */
  osSemaphoreStaticDef(travelSensorSem, &travelSensorSemControlBlock);
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800223c:	4b45      	ldr	r3, [pc, #276]	; (8002354 <MX_FREERTOS_Init+0x124>)
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  travelSensorSemHandle = osSemaphoreCreate(osSemaphore(travelSensorSem), 1);
 8002242:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f009 fd8f 	bl	800bd6c <osSemaphoreCreate>
 800224e:	4603      	mov	r3, r0
 8002250:	4a41      	ldr	r2, [pc, #260]	; (8002358 <MX_FREERTOS_Init+0x128>)
 8002252:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendData */
  osSemaphoreStaticDef(SendData, &SendDataControlBlock);
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <MX_FREERTOS_Init+0x12c>)
 800225c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  SendDataHandle = osSemaphoreCreate(osSemaphore(SendData), 1);
 8002260:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f009 fd80 	bl	800bd6c <osSemaphoreCreate>
 800226c:	4603      	mov	r3, r0
 800226e:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <MX_FREERTOS_Init+0x130>)
 8002270:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonSem */
  osSemaphoreStaticDef(buttonSem, &buttonSemControlBlock);
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <MX_FREERTOS_Init+0x134>)
 800227a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  buttonSemHandle = osSemaphoreCreate(osSemaphore(buttonSem), 1);
 800227e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f009 fd71 	bl	800bd6c <osSemaphoreCreate>
 800228a:	4603      	mov	r3, r0
 800228c:	4a36      	ldr	r2, [pc, #216]	; (8002368 <MX_FREERTOS_Init+0x138>)
 800228e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadStaticDef(buttonTask, buttonTaskInit, osPriorityNormal, 0, 128, buttonTaskBuffer, &buttonTaskControlBlock);
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <MX_FREERTOS_Init+0x13c>)
 8002292:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002296:	461d      	mov	r5, r3
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800229c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 80022a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f009 fcfe 	bl	800bcac <osThreadCreate>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <MX_FREERTOS_Init+0x140>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorRead */
  osThreadStaticDef(sensorRead, initSensorRead, osPriorityNormal, 0, 2048, sensorReadBuffer, &sensorReadControlBlock);
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <MX_FREERTOS_Init+0x144>)
 80022b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80022bc:	461d      	mov	r5, r3
 80022be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorReadHandle = osThreadCreate(osThread(sensorRead), NULL);
 80022ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f009 fceb 	bl	800bcac <osThreadCreate>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <MX_FREERTOS_Init+0x148>)
 80022da:	6013      	str	r3, [r2, #0]

  /* definition and creation of SdCard */
  osThreadStaticDef(SdCard, SdCardInit, osPriorityHigh, 0, 256, SdCardBuffer, &SdCardControlBlock);
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_FREERTOS_Init+0x14c>)
 80022de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80022e2:	461d      	mov	r5, r3
 80022e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SdCardHandle = osThreadCreate(osThread(SdCard), NULL);
 80022f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f009 fcd8 	bl	800bcac <osThreadCreate>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <MX_FREERTOS_Init+0x150>)
 8002300:	6013      	str	r3, [r2, #0]

  /* definition and creation of menuProcessData */
  osThreadStaticDef(menuProcessData, menuProcessDataInit, osPriorityNormal, 0, 2048, menuProcessDataBuffer, &menuProcessDataControlBlock);
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <MX_FREERTOS_Init+0x154>)
 8002304:	f107 0420 	add.w	r4, r7, #32
 8002308:	461d      	mov	r5, r3
 800230a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800230c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  menuProcessDataHandle = osThreadCreate(osThread(menuProcessData), NULL);
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f009 fcc5 	bl	800bcac <osThreadCreate>
 8002322:	4603      	mov	r3, r0
 8002324:	4a18      	ldr	r2, [pc, #96]	; (8002388 <MX_FREERTOS_Init+0x158>)
 8002326:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadStaticDef(lcdTask, lcdTaskInit, osPriorityNormal, 0, 128, lcdTaskBuffer, &lcdTaskControlBlock);
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_FREERTOS_Init+0x15c>)
 800232a:	1d3c      	adds	r4, r7, #4
 800232c:	461d      	mov	r5, r3
 800232e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f009 fcb4 	bl	800bcac <osThreadCreate>
 8002344:	4603      	mov	r3, r0
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <MX_FREERTOS_Init+0x160>)
 8002348:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800234a:	bf00      	nop
 800234c:	37a8      	adds	r7, #168	; 0xa8
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	200052dc 	.word	0x200052dc
 8002358:	200052d8 	.word	0x200052d8
 800235c:	20005328 	.word	0x20005328
 8002360:	20005324 	.word	0x20005324
 8002364:	20005374 	.word	0x20005374
 8002368:	20005370 	.word	0x20005370
 800236c:	08011830 	.word	0x08011830
 8002370:	200007a4 	.word	0x200007a4
 8002374:	08011858 	.word	0x08011858
 8002378:	20000a48 	.word	0x20000a48
 800237c:	0801187c 	.word	0x0801187c
 8002380:	20002aec 	.word	0x20002aec
 8002384:	080118a8 	.word	0x080118a8
 8002388:	20002f90 	.word	0x20002f90
 800238c:	080118cc 	.word	0x080118cc
 8002390:	20005034 	.word	0x20005034

08002394 <buttonTaskInit>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_buttonTaskInit */
void buttonTaskInit(void const * argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTaskInit */
	/* Infinite loop */
	for (;;)
	{
		/*buttonMenu = readButton(); for live expression*/
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <buttonTaskInit+0x24>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d804      	bhi.n	80023ae <buttonTaskInit+0x1a>
		{
			osSemaphoreRelease(buttonSemHandle);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <buttonTaskInit+0x28>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f009 fd5f 	bl	800be6c <osSemaphoreRelease>
		}
		osDelay(30);
 80023ae:	201e      	movs	r0, #30
 80023b0:	f009 fcc8 	bl	800bd44 <osDelay>
		if ( MAX_ACTIVE_BUTTON >= buttonMenu)
 80023b4:	e7f2      	b.n	800239c <buttonTaskInit+0x8>
 80023b6:	bf00      	nop
 80023b8:	20000001 	.word	0x20000001
 80023bc:	20005370 	.word	0x20005370

080023c0 <initSensorRead>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_initSensorRead */
void initSensorRead(void const * argument)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{

		osDelay(30);
 80023c8:	201e      	movs	r0, #30
 80023ca:	f009 fcbb 	bl	800bd44 <osDelay>
 80023ce:	e7fb      	b.n	80023c8 <initSensorRead+0x8>

080023d0 <SdCardInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SdCardInit */
void SdCardInit(void const * argument)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SdCardInit */
	 HD44780_Init(2);
 80023d8:	2002      	movs	r0, #2
 80023da:	f000 f959 	bl	8002690 <HD44780_Init>
	 HD44780_Clear();
 80023de:	f000 f9db 	bl	8002798 <HD44780_Clear>
	 HD44780_SetCursor(0,0);
 80023e2:	2100      	movs	r1, #0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f000 f9ed 	bl	80027c4 <HD44780_SetCursor>
	 HD44780_PrintStr("SAG");
 80023ea:	4817      	ldr	r0, [pc, #92]	; (8002448 <SdCardInit+0x78>)
 80023ec:	f000 fa71 	bl	80028d2 <HD44780_PrintStr>
	 HD44780_SetCursor(0,1);
 80023f0:	2101      	movs	r1, #1
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 f9e6 	bl	80027c4 <HD44780_SetCursor>
	 HD44780_PrintStr("LEFT");
 80023f8:	4814      	ldr	r0, [pc, #80]	; (800244c <SdCardInit+0x7c>)
 80023fa:	f000 fa6a 	bl	80028d2 <HD44780_PrintStr>
	 HD44780_SetCursor(9,0);
 80023fe:	2100      	movs	r1, #0
 8002400:	2009      	movs	r0, #9
 8002402:	f000 f9df 	bl	80027c4 <HD44780_SetCursor>
	 HD44780_PrintStr("MESSURE");
 8002406:	4812      	ldr	r0, [pc, #72]	; (8002450 <SdCardInit+0x80>)
 8002408:	f000 fa63 	bl	80028d2 <HD44780_PrintStr>
	 HD44780_SetCursor(11,1);
 800240c:	2101      	movs	r1, #1
 800240e:	200b      	movs	r0, #11
 8002410:	f000 f9d8 	bl	80027c4 <HD44780_SetCursor>
	 HD44780_PrintStr("RIGHT");
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <SdCardInit+0x84>)
 8002416:	f000 fa5c 	bl	80028d2 <HD44780_PrintStr>
	/* Infinite loop */
	for (;;)
	{

		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <SdCardInit+0x88>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d807      	bhi.n	8002432 <SdCardInit+0x62>
		{
			menuSelector(buttonMenu);
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <SdCardInit+0x88>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fc1c 	bl	8002c64 <menuSelector>
			buttonMenu = BUTTON_SNA; /*for live expression*/
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <SdCardInit+0x88>)
 800242e:	2205      	movs	r2, #5
 8002430:	701a      	strb	r2, [r3, #0]
		}
		osSemaphoreWait(buttonSemHandle, osWaitForever);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <SdCardInit+0x8c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f04f 31ff 	mov.w	r1, #4294967295
 800243a:	4618      	mov	r0, r3
 800243c:	f009 fcc8 	bl	800bdd0 <osSemaphoreWait>
		osDelay(20);
 8002440:	2014      	movs	r0, #20
 8002442:	f009 fc7f 	bl	800bd44 <osDelay>
		if (MAX_ACTIVE_BUTTON >= buttonMenu)
 8002446:	e7e8      	b.n	800241a <SdCardInit+0x4a>
 8002448:	080118e8 	.word	0x080118e8
 800244c:	080118ec 	.word	0x080118ec
 8002450:	080118f4 	.word	0x080118f4
 8002454:	080118fc 	.word	0x080118fc
 8002458:	20000001 	.word	0x20000001
 800245c:	20005370 	.word	0x20005370

08002460 <menuProcessDataInit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menuProcessDataInit */
void menuProcessDataInit(void const * argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menuProcessDataInit */
	/* Infinite loop */
	for (;;)
	{
		menuCalculateBlock();
 8002468:	f000 fde8 	bl	800303c <menuCalculateBlock>
		osDelay(10);
 800246c:	200a      	movs	r0, #10
 800246e:	f009 fc69 	bl	800bd44 <osDelay>
		menuCalculateBlock();
 8002472:	e7f9      	b.n	8002468 <menuProcessDataInit+0x8>

08002474 <lcdTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdTaskInit */
void lcdTaskInit(void const * argument)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

    osDelay(1);
 800247c:	2001      	movs	r0, #1
 800247e:	f009 fc61 	bl	800bd44 <osDelay>
 8002482:	e7fb      	b.n	800247c <lcdTaskInit+0x8>

08002484 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC5   ------> ADCx_IN15
*/
void MX_GPIO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <MX_GPIO_Init+0x110>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <MX_GPIO_Init+0x110>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <MX_GPIO_Init+0x110>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <MX_GPIO_Init+0x110>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a35      	ldr	r2, [pc, #212]	; (8002594 <MX_GPIO_Init+0x110>)
 80024c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b33      	ldr	r3, [pc, #204]	; (8002594 <MX_GPIO_Init+0x110>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <MX_GPIO_Init+0x110>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <MX_GPIO_Init+0x110>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <MX_GPIO_Init+0x110>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <MX_GPIO_Init+0x110>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <MX_GPIO_Init+0x110>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b25      	ldr	r3, [pc, #148]	; (8002594 <MX_GPIO_Init+0x110>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2120      	movs	r1, #32
 800250e:	4822      	ldr	r0, [pc, #136]	; (8002598 <MX_GPIO_Init+0x114>)
 8002510:	f003 f9f4 	bl	80058fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2101      	movs	r1, #1
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <MX_GPIO_Init+0x118>)
 800251a:	f003 f9ef 	bl	80058fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800251e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002524:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	481a      	ldr	r0, [pc, #104]	; (80025a0 <MX_GPIO_Init+0x11c>)
 8002536:	f003 f84d 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800253a:	2320      	movs	r3, #32
 800253c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	4811      	ldr	r0, [pc, #68]	; (8002598 <MX_GPIO_Init+0x114>)
 8002552:	f003 f83f 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002556:	2320      	movs	r3, #32
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_GPIO_Init+0x11c>)
 800256a:	f003 f833 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <MX_GPIO_Init+0x118>)
 8002586:	f003 f825 	bl	80055d4 <HAL_GPIO_Init>

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020800 	.word	0x40020800

080025a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <MX_I2C1_Init+0x54>)
 80025ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <MX_I2C1_Init+0x58>)
 80025b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_I2C1_Init+0x50>)
 80025e2:	f003 f9a5 	bl	8005930 <HAL_I2C_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025ec:	f000 fb34 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000565c 	.word	0x2000565c
 80025f8:	40005400 	.word	0x40005400
 80025fc:	000186a0 	.word	0x000186a0

08002600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_I2C_MspInit+0x84>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d12c      	bne.n	800267c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_I2C_MspInit+0x88>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_I2C_MspInit+0x88>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_I2C_MspInit+0x88>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800263e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002644:	2312      	movs	r3, #18
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002650:	2304      	movs	r3, #4
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	480c      	ldr	r0, [pc, #48]	; (800268c <HAL_I2C_MspInit+0x8c>)
 800265c:	f002 ffba 	bl	80055d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_I2C_MspInit+0x88>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_I2C_MspInit+0x88>)
 800266a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_I2C_MspInit+0x88>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40005400 	.word	0x40005400
 8002688:	40023800 	.word	0x40023800
 800268c:	40020400 	.word	0x40020400

08002690 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800269a:	4a38      	ldr	r2, [pc, #224]	; (800277c <HD44780_Init+0xec>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HD44780_Init+0xf0>)
 80026a2:	2208      	movs	r2, #8
 80026a4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HD44780_Init+0xf4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <HD44780_Init+0xec>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d907      	bls.n	80026c4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HD44780_Init+0xf4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HD44780_Init+0xf4>)
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e006      	b.n	80026d2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HD44780_Init+0xf4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HD44780_Init+0xf4>)
 80026d0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80026d2:	f000 f99b 	bl	8002a0c <DelayInit>
  osDelay(50);
 80026d6:	2032      	movs	r0, #50	; 0x32
 80026d8:	f009 fb34 	bl	800bd44 <osDelay>

  ExpanderWrite(dpBacklight);
 80026dc:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HD44780_Init+0xf0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f959 	bl	8002998 <ExpanderWrite>
  osDelay(1000);
 80026e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ea:	f009 fb2b 	bl	800bd44 <osDelay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80026ee:	2030      	movs	r0, #48	; 0x30
 80026f0:	f000 f941 	bl	8002976 <Write4Bits>
  DelayUS(4500);
 80026f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80026f8:	f000 f9b2 	bl	8002a60 <DelayUS>

  Write4Bits(0x03 << 4);
 80026fc:	2030      	movs	r0, #48	; 0x30
 80026fe:	f000 f93a 	bl	8002976 <Write4Bits>
  DelayUS(4500);
 8002702:	f241 1094 	movw	r0, #4500	; 0x1194
 8002706:	f000 f9ab 	bl	8002a60 <DelayUS>

  Write4Bits(0x03 << 4);
 800270a:	2030      	movs	r0, #48	; 0x30
 800270c:	f000 f933 	bl	8002976 <Write4Bits>
  DelayUS(4500);
 8002710:	f241 1094 	movw	r0, #4500	; 0x1194
 8002714:	f000 f9a4 	bl	8002a60 <DelayUS>

  Write4Bits(0x02 << 4);
 8002718:	2020      	movs	r0, #32
 800271a:	f000 f92c 	bl	8002976 <Write4Bits>
  DelayUS(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f000 f99e 	bl	8002a60 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HD44780_Init+0xf4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	f043 0320 	orr.w	r3, r3, #32
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f8e4 	bl	80028fc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HD44780_Init+0xf8>)
 8002736:	2204      	movs	r2, #4
 8002738:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800273a:	f000 f875 	bl	8002828 <HD44780_Display>
  HD44780_Clear();
 800273e:	f000 f82b 	bl	8002798 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HD44780_Init+0xfc>)
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HD44780_Init+0xfc>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8d2 	bl	80028fc <SendCommand>
  DelayUS(4500);
 8002758:	f241 1094 	movw	r0, #4500	; 0x1194
 800275c:	f000 f980 	bl	8002a60 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8002760:	490b      	ldr	r1, [pc, #44]	; (8002790 <HD44780_Init+0x100>)
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f88c 	bl	8002880 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8002768:	490a      	ldr	r1, [pc, #40]	; (8002794 <HD44780_Init+0x104>)
 800276a:	2001      	movs	r0, #1
 800276c:	f000 f888 	bl	8002880 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8002770:	f000 f81d 	bl	80027ae <HD44780_Home>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200056b3 	.word	0x200056b3
 8002780:	200056b4 	.word	0x200056b4
 8002784:	200056b0 	.word	0x200056b0
 8002788:	200056b1 	.word	0x200056b1
 800278c:	200056b2 	.word	0x200056b2
 8002790:	20000004 	.word	0x20000004
 8002794:	2000000c 	.word	0x2000000c

08002798 <HD44780_Clear>:

void HD44780_Clear()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800279c:	2001      	movs	r0, #1
 800279e:	f000 f8ad 	bl	80028fc <SendCommand>
  DelayUS(2000);
 80027a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027a6:	f000 f95b 	bl	8002a60 <DelayUS>
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HD44780_Home>:

void HD44780_Home()
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f000 f8a2 	bl	80028fc <SendCommand>
  DelayUS(2000);
 80027b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027bc:	f000 f950 	bl	8002a60 <DelayUS>
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HD44780_SetCursor+0x5c>)
 80027d6:	f107 0408 	add.w	r4, r7, #8
 80027da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HD44780_SetCursor+0x60>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	79ba      	ldrb	r2, [r7, #6]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d303      	bcc.n	80027f2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HD44780_SetCursor+0x60>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	3318      	adds	r3, #24
 80027f8:	443b      	add	r3, r7
 80027fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4413      	add	r3, r2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	b25b      	sxtb	r3, r3
 8002808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800280c:	b25b      	sxtb	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f873 	bl	80028fc <SendCommand>
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	08011904 	.word	0x08011904
 8002824:	200056b3 	.word	0x200056b3

08002828 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HD44780_Display+0x28>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HD44780_Display+0x28>)
 8002838:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HD44780_Display+0x28>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f043 0308 	orr.w	r3, r3, #8
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f859 	bl	80028fc <SendCommand>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200056b1 	.word	0x200056b1

08002854 <HD44780_NoBlink>:
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_NoBlink()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HD44780_NoBlink+0x28>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HD44780_NoBlink+0x28>)
 8002864:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HD44780_NoBlink+0x28>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	f043 0308 	orr.w	r3, r3, #8
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f843 	bl	80028fc <SendCommand>
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200056b1 	.word	0x200056b1

08002880 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	b25b      	sxtb	r3, r3
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	b25b      	sxtb	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f82a 	bl	80028fc <SendCommand>
  for (int i=0; i<8; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e009      	b.n	80028c2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f82e 	bl	8002918 <SendChar>
  for (int i=0; i<8; i++)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b07      	cmp	r3, #7
 80028c6:	ddf2      	ble.n	80028ae <HD44780_CreateSpecialChar+0x2e>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80028da:	e006      	b.n	80028ea <HD44780_PrintStr+0x18>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f817 	bl	8002918 <SendChar>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f4      	bne.n	80028dc <HD44780_PrintStr+0xa>
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f812 	bl	8002934 <Send>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <SendChar>:

static void SendChar(uint8_t ch)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f804 	bl	8002934 <Send>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	460a      	mov	r2, r1
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	4613      	mov	r3, r2
 8002942:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f023 030f 	bic.w	r3, r3, #15
 800294a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	4313      	orrs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f80b 	bl	8002976 <Write4Bits>
  Write4Bits((lownib)|mode);
 8002960:	7bba      	ldrb	r2, [r7, #14]
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	4313      	orrs	r3, r2
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f804 	bl	8002976 <Write4Bits>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f808 	bl	8002998 <ExpanderWrite>
  PulseEnable(value);
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f820 	bl	80029d0 <PulseEnable>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af02      	add	r7, sp, #8
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <ExpanderWrite+0x30>)
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80029ae:	f107 020f 	add.w	r2, r7, #15
 80029b2:	230a      	movs	r3, #10
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	214e      	movs	r1, #78	; 0x4e
 80029ba:	4804      	ldr	r0, [pc, #16]	; (80029cc <ExpanderWrite+0x34>)
 80029bc:	f003 f8fc 	bl	8005bb8 <HAL_I2C_Master_Transmit>
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200056b4 	.word	0x200056b4
 80029cc:	2000565c 	.word	0x2000565c

080029d0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffd8 	bl	8002998 <ExpanderWrite>
  DelayUS(20);
 80029e8:	2014      	movs	r0, #20
 80029ea:	f000 f839 	bl	8002a60 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ffce 	bl	8002998 <ExpanderWrite>
  DelayUS(20);
 80029fc:	2014      	movs	r0, #20
 80029fe:	f000 f82f 	bl	8002a60 <DelayUS>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <DelayInit>:

static void DelayInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <DelayInit+0x4c>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <DelayInit+0x4c>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <DelayInit+0x4c>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <DelayInit+0x4c>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a26:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <DelayInit+0x50>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <DelayInit+0x50>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <DelayInit+0x50>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <DelayInit+0x50>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <DelayInit+0x50>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8002a46:	bf00      	nop
  __ASM volatile ("NOP");
 8002a48:	bf00      	nop
  __ASM volatile ("NOP");
 8002a4a:	bf00      	nop
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000edf0 	.word	0xe000edf0
 8002a5c:	e0001000 	.word	0xe0001000

08002a60 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <DelayUS+0x44>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <DelayUS+0x48>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9a      	lsrs	r2, r3, #18
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <DelayUS+0x4c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <DelayUS+0x4c>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d8f6      	bhi.n	8002a82 <DelayUS+0x22>
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000014 	.word	0x20000014
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	e0001000 	.word	0xe0001000

08002ab0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ab8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002abc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002acc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ad0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002ad8:	e000      	b.n	8002adc <ITM_SendChar+0x2c>
    {
      __NOP();
 8002ada:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002adc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f9      	beq.n	8002ada <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002ae6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ffd1 	bl	8002ab0 <ITM_SendChar>
	return (ch);
 8002b0e:	687b      	ldr	r3, [r7, #4]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1c:	f001 fbee 	bl	80042fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b20:	f000 f81c 	bl	8002b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b24:	f7ff fcae 	bl	8002484 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b28:	f7fe fe6e 	bl	8001808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b2c:	f001 fb4a 	bl	80041c4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002b30:	f000 fb16 	bl	8003160 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002b34:	f006 f994 	bl	8008e60 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002b38:	f000 fe12 	bl	8003760 <MX_TIM6_Init>
  MX_TIM8_Init();
 8002b3c:	f000 fe46 	bl	80037cc <MX_TIM8_Init>
  MX_TIM2_Init();
 8002b40:	f000 fd9c 	bl	800367c <MX_TIM2_Init>
  MX_ADC2_Init();
 8002b44:	f7fe fcce 	bl	80014e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002b48:	f7fe fd48 	bl	80015dc <MX_ADC3_Init>
  MX_I2C1_Init();
 8002b4c:	f7ff fd2a 	bl	80025a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002b50:	f7ff fb6e 	bl	8002230 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b54:	f009 f893 	bl	800bc7e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002b58:	e7fe      	b.n	8002b58 <main+0x40>
	...

08002b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b094      	sub	sp, #80	; 0x50
 8002b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	2234      	movs	r2, #52	; 0x34
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f00c fb3a 	bl	800f1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	2300      	movs	r3, #0
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <SystemClock_Config+0xd0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <SystemClock_Config+0xd0>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <SystemClock_Config+0xd0>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <SystemClock_Config+0xd4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <SystemClock_Config+0xd4>)
 8002ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <SystemClock_Config+0xd4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002bd0:	2390      	movs	r3, #144	; 0x90
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fe6b 	bl	80068c0 <HAL_RCC_OscConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002bf0:	f000 f832 	bl	8002c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	2104      	movs	r1, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fad8 	bl	80061c8 <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c1e:	f000 f81b 	bl	8002c58 <Error_Handler>
  }
}
 8002c22:	bf00      	nop
 8002c24:	3750      	adds	r7, #80	; 0x50
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000

08002c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c46:	f001 fb7b 	bl	8004340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40000400 	.word	0x40000400

08002c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c60:	e7fe      	b.n	8002c60 <Error_Handler+0x8>
	...

08002c64 <menuSelector>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void menuSelector(button_t button)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]

	switch (selector)
 8002c6e:	4bb8      	ldr	r3, [pc, #736]	; (8002f50 <menuSelector+0x2ec>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	f200 81d0 	bhi.w	8003018 <menuSelector+0x3b4>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <menuSelector+0x1c>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c99 	.word	0x08002c99
 8002c84:	08002d53 	.word	0x08002d53
 8002c88:	08002dc7 	.word	0x08002dc7
 8002c8c:	08002e85 	.word	0x08002e85
 8002c90:	08002ed7 	.word	0x08002ed7
 8002c94:	08002fad 	.word	0x08002fad
	{

	case (MENU_START):
		if (BUTTON_LEFT == button)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d121      	bne.n	8002ce2 <menuSelector+0x7e>
		{
			HD44780_Clear();
 8002c9e:	f7ff fd7b 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff fd8d 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("CALIB");
 8002caa:	48aa      	ldr	r0, [pc, #680]	; (8002f54 <menuSelector+0x2f0>)
 8002cac:	f7ff fe11 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff fd86 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002cb8:	48a7      	ldr	r0, [pc, #668]	; (8002f58 <menuSelector+0x2f4>)
 8002cba:	f7ff fe0a 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f7ff fd7f 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002cc6:	48a5      	ldr	r0, [pc, #660]	; (8002f5c <menuSelector+0x2f8>)
 8002cc8:	f7ff fe03 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002ccc:	2101      	movs	r1, #1
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f7ff fd78 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002cd4:	48a2      	ldr	r0, [pc, #648]	; (8002f60 <menuSelector+0x2fc>)
 8002cd6:	f7ff fdfc 	bl	80028d2 <HD44780_PrintStr>
			selector = MENU_SAG;
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <menuSelector+0x2ec>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e034      	b.n	8002d4c <menuSelector+0xe8>

		}
		else if (BUTTON_RIGHT == button)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d113      	bne.n	8002d10 <menuSelector+0xac>
		{
			HD44780_Clear();
 8002ce8:	f7ff fd56 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002cec:	2100      	movs	r1, #0
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff fd68 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("START MESSURE");
 8002cf4:	489b      	ldr	r0, [pc, #620]	; (8002f64 <menuSelector+0x300>)
 8002cf6:	f7ff fdec 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff fd61 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002d02:	4897      	ldr	r0, [pc, #604]	; (8002f60 <menuSelector+0x2fc>)
 8002d04:	f7ff fde5 	bl	80028d2 <HD44780_PrintStr>
			selector = MENU_MEASURMENT;
 8002d08:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <menuSelector+0x2ec>)
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e01d      	b.n	8002d4c <menuSelector+0xe8>

		}
		else
		{
				 HD44780_Clear();
 8002d10:	f7ff fd42 	bl	8002798 <HD44780_Clear>
				 HD44780_SetCursor(0,0);
 8002d14:	2100      	movs	r1, #0
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff fd54 	bl	80027c4 <HD44780_SetCursor>
				 HD44780_PrintStr("SAG");
 8002d1c:	4892      	ldr	r0, [pc, #584]	; (8002f68 <menuSelector+0x304>)
 8002d1e:	f7ff fdd8 	bl	80028d2 <HD44780_PrintStr>
				 HD44780_SetCursor(0,1);
 8002d22:	2101      	movs	r1, #1
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7ff fd4d 	bl	80027c4 <HD44780_SetCursor>
				 HD44780_PrintStr("LEFT");
 8002d2a:	488b      	ldr	r0, [pc, #556]	; (8002f58 <menuSelector+0x2f4>)
 8002d2c:	f7ff fdd1 	bl	80028d2 <HD44780_PrintStr>
				 HD44780_SetCursor(9,0);
 8002d30:	2100      	movs	r1, #0
 8002d32:	2009      	movs	r0, #9
 8002d34:	f7ff fd46 	bl	80027c4 <HD44780_SetCursor>
				 HD44780_PrintStr("MESSURE");
 8002d38:	488c      	ldr	r0, [pc, #560]	; (8002f6c <menuSelector+0x308>)
 8002d3a:	f7ff fdca 	bl	80028d2 <HD44780_PrintStr>
				 HD44780_SetCursor(11,1);
 8002d3e:	2101      	movs	r1, #1
 8002d40:	200b      	movs	r0, #11
 8002d42:	f7ff fd3f 	bl	80027c4 <HD44780_SetCursor>
				 HD44780_PrintStr("RIGHT");
 8002d46:	488a      	ldr	r0, [pc, #552]	; (8002f70 <menuSelector+0x30c>)
 8002d48:	f7ff fdc3 	bl	80028d2 <HD44780_PrintStr>
		}
		stopAdcDma();
 8002d4c:	f000 fe48 	bl	80039e0 <stopAdcDma>
		break;
 8002d50:	e162      	b.n	8003018 <menuSelector+0x3b4>

	case (MENU_SAG):
		if (BUTTON_SELECT == button)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <menuSelector+0x10a>
		{
			startAdcDma();
 8002d58:	f000 fe22 	bl	80039a0 <startAdcDma>
			HD44780_Clear();
 8002d5c:	f7ff fd1c 	bl	8002798 <HD44780_Clear>
			selector = MENU_SAG_START;
 8002d60:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <menuSelector+0x2ec>)
 8002d62:	2203      	movs	r2, #3
 8002d64:	701a      	strb	r2, [r3, #0]
			puts("pomiar rozpoczety, kliknij select aby zakonczyc\n");
 8002d66:	4883      	ldr	r0, [pc, #524]	; (8002f74 <menuSelector+0x310>)
 8002d68:	f00c f93c 	bl	800efe4 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002d6c:	e154      	b.n	8003018 <menuSelector+0x3b4>
		else if (BUTTON_LEFT == button)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d11d      	bne.n	8002db0 <menuSelector+0x14c>
			selector = MENU_CALIBRATION;
 8002d74:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <menuSelector+0x2ec>)
 8002d76:	2202      	movs	r2, #2
 8002d78:	701a      	strb	r2, [r3, #0]
			HD44780_Init(2);
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7ff fc88 	bl	8002690 <HD44780_Init>
			HD44780_Clear();
 8002d80:	f7ff fd0a 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002d84:	2100      	movs	r1, #0
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff fd1c 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("CALIBRATION");
 8002d8c:	487a      	ldr	r0, [pc, #488]	; (8002f78 <menuSelector+0x314>)
 8002d8e:	f7ff fda0 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002d92:	2101      	movs	r1, #1
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fd15 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("START");
 8002d9a:	4870      	ldr	r0, [pc, #448]	; (8002f5c <menuSelector+0x2f8>)
 8002d9c:	f7ff fd99 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002da0:	2101      	movs	r1, #1
 8002da2:	200a      	movs	r0, #10
 8002da4:	f7ff fd0e 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002da8:	486d      	ldr	r0, [pc, #436]	; (8002f60 <menuSelector+0x2fc>)
 8002daa:	f7ff fd92 	bl	80028d2 <HD44780_PrintStr>
		break;
 8002dae:	e133      	b.n	8003018 <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d103      	bne.n	8002dbe <menuSelector+0x15a>
			selector = MENU_START;
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <menuSelector+0x2ec>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
		break;
 8002dbc:	e12c      	b.n	8003018 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002dbe:	486f      	ldr	r0, [pc, #444]	; (8002f7c <menuSelector+0x318>)
 8002dc0:	f00c f910 	bl	800efe4 <puts>
		break;
 8002dc4:	e128      	b.n	8003018 <menuSelector+0x3b4>
	case (MENU_CALIBRATION):
		if (BUTTON_SELECT == button)
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d132      	bne.n	8002e32 <menuSelector+0x1ce>
		{
			startAdcDma();
 8002dcc:	f000 fde8 	bl	80039a0 <startAdcDma>
			travelPressureSensorCalibration();
 8002dd0:	f000 fe1a 	bl	8003a08 <travelPressureSensorCalibration>
			HD44780_Clear();
 8002dd4:	f7ff fce0 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff fcf2 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("CAL FINISH");
 8002de0:	4867      	ldr	r0, [pc, #412]	; (8002f80 <menuSelector+0x31c>)
 8002de2:	f7ff fd76 	bl	80028d2 <HD44780_PrintStr>
			osDelay(2000);
 8002de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dea:	f008 ffab 	bl	800bd44 <osDelay>
			HD44780_Clear();
 8002dee:	f7ff fcd3 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002df2:	2100      	movs	r1, #0
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7ff fce5 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002dfa:	485b      	ldr	r0, [pc, #364]	; (8002f68 <menuSelector+0x304>)
 8002dfc:	f7ff fd69 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002e00:	2101      	movs	r1, #1
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7ff fcde 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002e08:	4853      	ldr	r0, [pc, #332]	; (8002f58 <menuSelector+0x2f4>)
 8002e0a:	f7ff fd62 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2009      	movs	r0, #9
 8002e12:	f7ff fcd7 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002e16:	4855      	ldr	r0, [pc, #340]	; (8002f6c <menuSelector+0x308>)
 8002e18:	f7ff fd5b 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	200b      	movs	r0, #11
 8002e20:	f7ff fcd0 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002e24:	4852      	ldr	r0, [pc, #328]	; (8002f70 <menuSelector+0x30c>)
 8002e26:	f7ff fd54 	bl	80028d2 <HD44780_PrintStr>
			selector = MENU_START;
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <menuSelector+0x2ec>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002e30:	e0f2      	b.n	8003018 <menuSelector+0x3b4>
		else if (BUTTON_RIGHT == button)
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d121      	bne.n	8002e7c <menuSelector+0x218>
			selector = MENU_START;
 8002e38:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <menuSelector+0x2ec>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002e3e:	f7ff fcab 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e42:	2100      	movs	r1, #0
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fcbd 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002e4a:	4847      	ldr	r0, [pc, #284]	; (8002f68 <menuSelector+0x304>)
 8002e4c:	f7ff fd41 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002e50:	2101      	movs	r1, #1
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7ff fcb6 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002e58:	483f      	ldr	r0, [pc, #252]	; (8002f58 <menuSelector+0x2f4>)
 8002e5a:	f7ff fd3a 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2009      	movs	r0, #9
 8002e62:	f7ff fcaf 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002e66:	4841      	ldr	r0, [pc, #260]	; (8002f6c <menuSelector+0x308>)
 8002e68:	f7ff fd33 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	200b      	movs	r0, #11
 8002e70:	f7ff fca8 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002e74:	483e      	ldr	r0, [pc, #248]	; (8002f70 <menuSelector+0x30c>)
 8002e76:	f7ff fd2c 	bl	80028d2 <HD44780_PrintStr>
		break;
 8002e7a:	e0cd      	b.n	8003018 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002e7c:	483f      	ldr	r0, [pc, #252]	; (8002f7c <menuSelector+0x318>)
 8002e7e:	f00c f8b1 	bl	800efe4 <puts>
		break;
 8002e82:	e0c9      	b.n	8003018 <menuSelector+0x3b4>
	case (MENU_SAG_START):
		if (BUTTON_SELECT == button)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <menuSelector+0x26a>
		{

			selector = MENU_START;
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <menuSelector+0x2ec>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
			HD44780_Clear();
 8002e90:	f7ff fc82 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002e94:	2100      	movs	r1, #0
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7ff fc94 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002e9c:	4832      	ldr	r0, [pc, #200]	; (8002f68 <menuSelector+0x304>)
 8002e9e:	f7ff fd18 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7ff fc8d 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002eaa:	482b      	ldr	r0, [pc, #172]	; (8002f58 <menuSelector+0x2f4>)
 8002eac:	f7ff fd11 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2009      	movs	r0, #9
 8002eb4:	f7ff fc86 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002eb8:	482c      	ldr	r0, [pc, #176]	; (8002f6c <menuSelector+0x308>)
 8002eba:	f7ff fd0a 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	200b      	movs	r0, #11
 8002ec2:	f7ff fc7f 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8002ec6:	482a      	ldr	r0, [pc, #168]	; (8002f70 <menuSelector+0x30c>)
 8002ec8:	f7ff fd03 	bl	80028d2 <HD44780_PrintStr>
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 8002ecc:	e0a4      	b.n	8003018 <menuSelector+0x3b4>
			puts("nacisnij select aby wrocic do menu start");
 8002ece:	482d      	ldr	r0, [pc, #180]	; (8002f84 <menuSelector+0x320>)
 8002ed0:	f00c f888 	bl	800efe4 <puts>
		break;
 8002ed4:	e0a0      	b.n	8003018 <menuSelector+0x3b4>

	case (MENU_MEASURMENT):
		if (BUTTON_SELECT == button)
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d134      	bne.n	8002f46 <menuSelector+0x2e2>
		{
			HD44780_Clear();
 8002edc:	f7ff fc5c 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff fc6e 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("STARTING");
 8002ee8:	4827      	ldr	r0, [pc, #156]	; (8002f88 <menuSelector+0x324>)
 8002eea:	f7ff fcf2 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7ff fc67 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("FINISH");
 8002ef6:	4825      	ldr	r0, [pc, #148]	; (8002f8c <menuSelector+0x328>)
 8002ef8:	f7ff fceb 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(10,1);
 8002efc:	2101      	movs	r1, #1
 8002efe:	200a      	movs	r0, #10
 8002f00:	f7ff fc60 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SELECT");
 8002f04:	4816      	ldr	r0, [pc, #88]	; (8002f60 <menuSelector+0x2fc>)
 8002f06:	f7ff fce4 	bl	80028d2 <HD44780_PrintStr>
			setPath(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <menuSelector+0x32c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <menuSelector+0x330>)
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <menuSelector+0x334>)
 8002f16:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <menuSelector+0x338>)
 8002f18:	4921      	ldr	r1, [pc, #132]	; (8002fa0 <menuSelector+0x33c>)
 8002f1a:	4822      	ldr	r0, [pc, #136]	; (8002fa4 <menuSelector+0x340>)
 8002f1c:	f7fd fff2 	bl	8000f04 <setPath>
					rearPressureSensor, path);
			createNewFile(dir, frontSensor, rearSensor, frontPressureSensor,
 8002f20:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <menuSelector+0x32c>)
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <menuSelector+0x330>)
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <menuSelector+0x334>)
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <menuSelector+0x338>)
 8002f2c:	491c      	ldr	r1, [pc, #112]	; (8002fa0 <menuSelector+0x33c>)
 8002f2e:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <menuSelector+0x340>)
 8002f30:	f7fe f81c 	bl	8000f6c <createNewFile>
					rearPressureSensor, &path);
			startAdcDma();
 8002f34:	f000 fd34 	bl	80039a0 <startAdcDma>
			selector = MENU_MEASURMENT_START;
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <menuSelector+0x2ec>)
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	701a      	strb	r2, [r3, #0]
			puts("pomiar ciagly rozpoczety, kliknij select aby zakonczyc\n");
 8002f3e:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <menuSelector+0x344>)
 8002f40:	f00c f850 	bl	800efe4 <puts>
		}
		else
		{
			puts("nacisnij select aby rozpoczac pomiar\n");
		}
		break;
 8002f44:	e068      	b.n	8003018 <menuSelector+0x3b4>
			puts("nacisnij select aby rozpoczac pomiar\n");
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <menuSelector+0x318>)
 8002f48:	f00c f84c 	bl	800efe4 <puts>
		break;
 8002f4c:	e064      	b.n	8003018 <menuSelector+0x3b4>
 8002f4e:	bf00      	nop
 8002f50:	200056b5 	.word	0x200056b5
 8002f54:	08011914 	.word	0x08011914
 8002f58:	0801191c 	.word	0x0801191c
 8002f5c:	08011924 	.word	0x08011924
 8002f60:	0801192c 	.word	0x0801192c
 8002f64:	08011934 	.word	0x08011934
 8002f68:	08011944 	.word	0x08011944
 8002f6c:	08011948 	.word	0x08011948
 8002f70:	08011950 	.word	0x08011950
 8002f74:	08011958 	.word	0x08011958
 8002f78:	0801198c 	.word	0x0801198c
 8002f7c:	08011998 	.word	0x08011998
 8002f80:	080119c0 	.word	0x080119c0
 8002f84:	080119cc 	.word	0x080119cc
 8002f88:	080119f8 	.word	0x080119f8
 8002f8c:	08011a04 	.word	0x08011a04
 8002f90:	200056b6 	.word	0x200056b6
 8002f94:	20005708 	.word	0x20005708
 8002f98:	200056f4 	.word	0x200056f4
 8002f9c:	200056e0 	.word	0x200056e0
 8002fa0:	200056cc 	.word	0x200056cc
 8002fa4:	200056b8 	.word	0x200056b8
 8002fa8:	08011a0c 	.word	0x08011a0c

	case (MENU_MEASURMENT_START):
		if (BUTTON_SELECT == button)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d12e      	bne.n	8003010 <menuSelector+0x3ac>
		{

			HD44780_Clear();
 8002fb2:	f7ff fbf1 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7ff fc03 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("FINISHED");
 8002fbe:	4818      	ldr	r0, [pc, #96]	; (8003020 <menuSelector+0x3bc>)
 8002fc0:	f7ff fc87 	bl	80028d2 <HD44780_PrintStr>
			osDelay(2000);
 8002fc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fc8:	f008 febc 	bl	800bd44 <osDelay>

			HD44780_Clear();
 8002fcc:	f7ff fbe4 	bl	8002798 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff fbf6 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("SAG");
 8002fd8:	4812      	ldr	r0, [pc, #72]	; (8003024 <menuSelector+0x3c0>)
 8002fda:	f7ff fc7a 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fbef 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("LEFT");
 8002fe6:	4810      	ldr	r0, [pc, #64]	; (8003028 <menuSelector+0x3c4>)
 8002fe8:	f7ff fc73 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(9,0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	2009      	movs	r0, #9
 8002ff0:	f7ff fbe8 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("MESSURE");
 8002ff4:	480d      	ldr	r0, [pc, #52]	; (800302c <menuSelector+0x3c8>)
 8002ff6:	f7ff fc6c 	bl	80028d2 <HD44780_PrintStr>
			HD44780_SetCursor(11,1);
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	200b      	movs	r0, #11
 8002ffe:	f7ff fbe1 	bl	80027c4 <HD44780_SetCursor>
			HD44780_PrintStr("RIGHT");
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <menuSelector+0x3cc>)
 8003004:	f7ff fc65 	bl	80028d2 <HD44780_PrintStr>
			selector = MENU_START;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <menuSelector+0x3d0>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			puts("nacisnij select aby wrocic do menu start");
		}
		break;
 800300e:	e002      	b.n	8003016 <menuSelector+0x3b2>
			puts("nacisnij select aby wrocic do menu start");
 8003010:	4809      	ldr	r0, [pc, #36]	; (8003038 <menuSelector+0x3d4>)
 8003012:	f00b ffe7 	bl	800efe4 <puts>
		break;
 8003016:	bf00      	nop

	default:
	}

}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08011a44 	.word	0x08011a44
 8003024:	08011944 	.word	0x08011944
 8003028:	0801191c 	.word	0x0801191c
 800302c:	08011948 	.word	0x08011948
 8003030:	08011950 	.word	0x08011950
 8003034:	200056b5 	.word	0x200056b5
 8003038:	080119cc 	.word	0x080119cc

0800303c <menuCalculateBlock>:
void menuCalculateBlock(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
	switch (selector)
 8003042:	4b3e      	ldr	r3, [pc, #248]	; (800313c <menuCalculateBlock+0x100>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d002      	beq.n	8003050 <menuCalculateBlock+0x14>
 800304a:	2b05      	cmp	r3, #5
 800304c:	d06b      	beq.n	8003126 <menuCalculateBlock+0xea>
				rearPressureSensor);
		break;
	default:
	}

}
 800304e:	e071      	b.n	8003134 <menuCalculateBlock+0xf8>
		int16_t result[2] =
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
		int16_t resultPressure[2] =
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
		char lcdFirstLineTravel[8] = {0};
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
		char lcSecondLineTravel[8] = {0};
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
		char lcdFirstLinePressure[8] = {0};
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
		char lcSecondLinePressure[8] = {0};
 8003070:	2300      	movs	r3, #0
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	2300      	movs	r3, #0
 8003076:	607b      	str	r3, [r7, #4]
		processDataSag(result, resultPressure);
 8003078:	f107 0220 	add.w	r2, r7, #32
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd78 	bl	8003b78 <processDataSag>
		sprintf(lcdFirstLineTravel,"FT: %d", result[1]);
 8003088:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800308c:	461a      	mov	r2, r3
 800308e:	f107 0318 	add.w	r3, r7, #24
 8003092:	492b      	ldr	r1, [pc, #172]	; (8003140 <menuCalculateBlock+0x104>)
 8003094:	4618      	mov	r0, r3
 8003096:	f00b ffad 	bl	800eff4 <siprintf>
		sprintf(lcSecondLineTravel,"RT: %d", result[0]);
 800309a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800309e:	461a      	mov	r2, r3
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4927      	ldr	r1, [pc, #156]	; (8003144 <menuCalculateBlock+0x108>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00b ffa4 	bl	800eff4 <siprintf>
		sprintf(lcdFirstLinePressure, "FP: %d", resultPressure[1]);
 80030ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80030b0:	461a      	mov	r2, r3
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	4924      	ldr	r1, [pc, #144]	; (8003148 <menuCalculateBlock+0x10c>)
 80030b8:	4618      	mov	r0, r3
 80030ba:	f00b ff9b 	bl	800eff4 <siprintf>
		sprintf(lcSecondLinePressure, "RP: %d", resultPressure[0]);
 80030be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80030c2:	461a      	mov	r2, r3
 80030c4:	463b      	mov	r3, r7
 80030c6:	4921      	ldr	r1, [pc, #132]	; (800314c <menuCalculateBlock+0x110>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f00b ff93 	bl	800eff4 <siprintf>
		HD44780_NoBlink();
 80030ce:	f7ff fbc1 	bl	8002854 <HD44780_NoBlink>
		HD44780_Clear();
 80030d2:	f7ff fb61 	bl	8002798 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80030d6:	2100      	movs	r1, #0
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff fb73 	bl	80027c4 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLineTravel);
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fbf5 	bl	80028d2 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 80030e8:	2101      	movs	r1, #1
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fb6a 	bl	80027c4 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLineTravel);
 80030f0:	f107 0310 	add.w	r3, r7, #16
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fbec 	bl	80028d2 <HD44780_PrintStr>
		HD44780_SetCursor(9,0);
 80030fa:	2100      	movs	r1, #0
 80030fc:	2009      	movs	r0, #9
 80030fe:	f7ff fb61 	bl	80027c4 <HD44780_SetCursor>
		HD44780_PrintStr(lcdFirstLinePressure);
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fbe3 	bl	80028d2 <HD44780_PrintStr>
		HD44780_SetCursor(9,1);
 800310c:	2101      	movs	r1, #1
 800310e:	2009      	movs	r0, #9
 8003110:	f7ff fb58 	bl	80027c4 <HD44780_SetCursor>
		HD44780_PrintStr(lcSecondLinePressure);
 8003114:	463b      	mov	r3, r7
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fbdb 	bl	80028d2 <HD44780_PrintStr>
		osDelay(1000);
 800311c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003120:	f008 fe10 	bl	800bd44 <osDelay>
		break;
 8003124:	e006      	b.n	8003134 <menuCalculateBlock+0xf8>
		processData(frontSensor, rearSensor, frontPressureSensor,
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <menuCalculateBlock+0x114>)
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <menuCalculateBlock+0x118>)
 800312a:	490b      	ldr	r1, [pc, #44]	; (8003158 <menuCalculateBlock+0x11c>)
 800312c:	480b      	ldr	r0, [pc, #44]	; (800315c <menuCalculateBlock+0x120>)
 800312e:	f000 fcef 	bl	8003b10 <processData>
		break;
 8003132:	bf00      	nop
}
 8003134:	bf00      	nop
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200056b5 	.word	0x200056b5
 8003140:	08011a50 	.word	0x08011a50
 8003144:	08011a58 	.word	0x08011a58
 8003148:	08011a60 	.word	0x08011a60
 800314c:	08011a68 	.word	0x08011a68
 8003150:	20005708 	.word	0x20005708
 8003154:	200056f4 	.word	0x200056f4
 8003158:	200056e0 	.word	0x200056e0
 800315c:	200056cc 	.word	0x200056cc

08003160 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_SPI2_Init+0x64>)
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <MX_SPI2_Init+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_SPI2_Init+0x64>)
 800316c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003170:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_SPI2_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <MX_SPI2_Init+0x64>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_SPI2_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_SPI2_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_SPI2_Init+0x64>)
 800318c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003190:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_SPI2_Init+0x64>)
 8003194:	2218      	movs	r2, #24
 8003196:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_SPI2_Init+0x64>)
 800319a:	2200      	movs	r2, #0
 800319c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_SPI2_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <MX_SPI2_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_SPI2_Init+0x64>)
 80031ac:	220a      	movs	r2, #10
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <MX_SPI2_Init+0x64>)
 80031b2:	f003 fe23 	bl	8006dfc <HAL_SPI_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031bc:	f7ff fd4c 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000571c 	.word	0x2000571c
 80031c8:	40003800 	.word	0x40003800

080031cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a30      	ldr	r2, [pc, #192]	; (80032ac <HAL_SPI_MspInit+0xe0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d15a      	bne.n	80032a4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 80031f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_SPI_MspInit+0xe4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003242:	2302      	movs	r3, #2
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003252:	2307      	movs	r3, #7
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	4815      	ldr	r0, [pc, #84]	; (80032b4 <HAL_SPI_MspInit+0xe8>)
 800325e:	f002 f9b9 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003262:	2304      	movs	r3, #4
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003272:	2305      	movs	r3, #5
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	480d      	ldr	r0, [pc, #52]	; (80032b4 <HAL_SPI_MspInit+0xe8>)
 800327e:	f002 f9a9 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	2303      	movs	r3, #3
 8003292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003294:	2305      	movs	r3, #5
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4619      	mov	r1, r3
 800329e:	4806      	ldr	r0, [pc, #24]	; (80032b8 <HAL_SPI_MspInit+0xec>)
 80032a0:	f002 f998 	bl	80055d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032a4:	bf00      	nop
 80032a6:	3728      	adds	r7, #40	; 0x28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40003800 	.word	0x40003800
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020400 	.word	0x40020400

080032bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_MspInit+0x54>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_MspInit+0x54>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_MspInit+0x54>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_MspInit+0x54>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_MspInit+0x54>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_MspInit+0x54>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	210f      	movs	r1, #15
 80032fe:	f06f 0001 	mvn.w	r0, #1
 8003302:	f001 fd5d 	bl	8004dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_InitTick+0xe4>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <HAL_InitTick+0xe4>)
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	6413      	str	r3, [r2, #64]	; 0x40
 8003334:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_InitTick+0xe4>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003340:	f107 0210 	add.w	r2, r7, #16
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f003 f856 	bl	80063fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800335a:	f003 f827 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 800335e:	6378      	str	r0, [r7, #52]	; 0x34
 8003360:	e004      	b.n	800336c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003362:	f003 f823 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8003366:	4603      	mov	r3, r0
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_InitTick+0xe8>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	3b01      	subs	r3, #1
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_InitTick+0xec>)
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_InitTick+0xf0>)
 800337e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_InitTick+0xec>)
 8003382:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003386:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_InitTick+0xec>)
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_InitTick+0xec>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_InitTick+0xec>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_InitTick+0xec>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80033a0:	4817      	ldr	r0, [pc, #92]	; (8003400 <HAL_InitTick+0xec>)
 80033a2:	f004 f96b 	bl	800767c <HAL_TIM_Base_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80033ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11b      	bne.n	80033ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80033b4:	4812      	ldr	r0, [pc, #72]	; (8003400 <HAL_InitTick+0xec>)
 80033b6:	f004 fa41 	bl	800783c <HAL_TIM_Base_Start_IT>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80033c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d111      	bne.n	80033ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033c8:	201d      	movs	r0, #29
 80033ca:	f001 fd15 	bl	8004df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d808      	bhi.n	80033e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80033d4:	2200      	movs	r2, #0
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	201d      	movs	r0, #29
 80033da:	f001 fcf1 	bl	8004dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_InitTick+0xf4>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	e002      	b.n	80033ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3738      	adds	r7, #56	; 0x38
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	431bde83 	.word	0x431bde83
 8003400:	20005774 	.word	0x20005774
 8003404:	40000400 	.word	0x40000400
 8003408:	20000028 	.word	0x20000028

0800340c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1;
volatile uint8_t Timer2;
void SDTimer_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <SDTimer_Handler+0x40>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <SDTimer_Handler+0x1c>
		Timer1--;
 800341a:	4b0c      	ldr	r3, [pc, #48]	; (800344c <SDTimer_Handler+0x40>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <SDTimer_Handler+0x40>)
 8003426:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <SDTimer_Handler+0x44>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <SDTimer_Handler+0x34>
		Timer2--;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <SDTimer_Handler+0x44>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <SDTimer_Handler+0x44>)
 800343e:	701a      	strb	r2, [r3, #0]
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	200057bd 	.word	0x200057bd
 8003450:	200057be 	.word	0x200057be

08003454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003458:	e7fe      	b.n	8003458 <NMI_Handler+0x4>

0800345a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345e:	e7fe      	b.n	800345e <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	e7fe      	b.n	8003464 <MemManage_Handler+0x4>

08003466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346a:	e7fe      	b.n	800346a <BusFault_Handler+0x4>

0800346c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003470:	e7fe      	b.n	8003470 <UsageFault_Handler+0x4>

08003472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	FatFsCnt++;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <TIM3_IRQHandler+0x30>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3301      	adds	r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <TIM3_IRQHandler+0x30>)
 8003490:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10)
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <TIM3_IRQHandler+0x30>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b09      	cmp	r3, #9
 800349a:	d904      	bls.n	80034a6 <TIM3_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <TIM3_IRQHandler+0x30>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80034a2:	f7ff ffb3 	bl	800340c <SDTimer_Handler>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034a6:	4803      	ldr	r0, [pc, #12]	; (80034b4 <TIM3_IRQHandler+0x34>)
 80034a8:	f004 fa91 	bl	80079ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200057bc 	.word	0x200057bc
 80034b4:	20005774 	.word	0x20005774

080034b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA2_Stream2_IRQHandler+0x10>)
 80034be:	f001 fe1f 	bl	8005100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000740 	.word	0x20000740

080034cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
	return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_kill>:

int _kill(int pid, int sig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80034e6:	f00b ff39 	bl	800f35c <__errno>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2216      	movs	r2, #22
 80034ee:	601a      	str	r2, [r3, #0]
	return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_exit>:

void _exit(int status)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_kill>
	while (1)
 800350e:	e7fe      	b.n	800350e <_exit+0x12>

08003510 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e00a      	b.n	8003538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003522:	f3af 8000 	nop.w
 8003526:	4601      	mov	r1, r0
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	60ba      	str	r2, [r7, #8]
 800352e:	b2ca      	uxtb	r2, r1
 8003530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3301      	adds	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	dbf0      	blt.n	8003522 <_read+0x12>
	}

	return len;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e009      	b.n	8003570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff faca 	bl	8002afe <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	dbf1      	blt.n	800355c <_write+0x12>
	}
	return len;
 8003578:	687b      	ldr	r3, [r7, #4]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_close>:

int _close(int file)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_fstat>:

int _fstat(int file, struct stat *st)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035aa:	605a      	str	r2, [r3, #4]
	return 0;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_isatty>:

int _isatty(int file)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_sbrk+0x64>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_sbrk+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <_sbrk+0x40>
	{
		errno = ENOMEM;
 800361c:	f00b fe9e 	bl	800f35c <__errno>
 8003620:	4603      	mov	r3, r0
 8003622:	220c      	movs	r2, #12
 8003624:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e009      	b.n	8003640 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <_sbrk+0x64>)
 800363c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20020000 	.word	0x20020000
 800364c:	00000400 	.word	0x00000400
 8003650:	200057c0 	.word	0x200057c0
 8003654:	2000a018 	.word	0x2000a018

08003658 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	; 0x38
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003690:	f107 0320 	add.w	r3, r7, #32
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <MX_TIM2_Init+0xe0>)
 80036ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <MX_TIM2_Init+0xe0>)
 80036b6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80036ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <MX_TIM2_Init+0xe0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <MX_TIM2_Init+0xe0>)
 80036c4:	2263      	movs	r2, #99	; 0x63
 80036c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <MX_TIM2_Init+0xe0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <MX_TIM2_Init+0xe0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036d4:	4821      	ldr	r0, [pc, #132]	; (800375c <MX_TIM2_Init+0xe0>)
 80036d6:	f003 ffd1 	bl	800767c <HAL_TIM_Base_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80036e0:	f7ff faba 	bl	8002c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ee:	4619      	mov	r1, r3
 80036f0:	481a      	ldr	r0, [pc, #104]	; (800375c <MX_TIM2_Init+0xe0>)
 80036f2:	f004 fb37 	bl	8007d64 <HAL_TIM_ConfigClockSource>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80036fc:	f7ff faac 	bl	8002c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003700:	4816      	ldr	r0, [pc, #88]	; (800375c <MX_TIM2_Init+0xe0>)
 8003702:	f004 f90b 	bl	800791c <HAL_TIM_PWM_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800370c:	f7ff faa4 	bl	8002c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003710:	2320      	movs	r3, #32
 8003712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003718:	f107 0320 	add.w	r3, r7, #32
 800371c:	4619      	mov	r1, r3
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <MX_TIM2_Init+0xe0>)
 8003720:	f004 fefa 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800372a:	f7ff fa95 	bl	8002c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800372e:	2360      	movs	r3, #96	; 0x60
 8003730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	4619      	mov	r1, r3
 8003744:	4805      	ldr	r0, [pc, #20]	; (800375c <MX_TIM2_Init+0xe0>)
 8003746:	f004 fa4b 	bl	8007be0 <HAL_TIM_PWM_ConfigChannel>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003750:	f7ff fa82 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003754:	bf00      	nop
 8003756:	3738      	adds	r7, #56	; 0x38
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200057c4 	.word	0x200057c4

08003760 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003766:	463b      	mov	r3, r7
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <MX_TIM6_Init+0x64>)
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <MX_TIM6_Init+0x68>)
 8003772:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000-1;
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <MX_TIM6_Init+0x64>)
 8003776:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800377a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <MX_TIM6_Init+0x64>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <MX_TIM6_Init+0x64>)
 8003784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003788:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <MX_TIM6_Init+0x64>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <MX_TIM6_Init+0x64>)
 8003792:	f003 ff73 	bl	800767c <HAL_TIM_Base_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800379c:	f7ff fa5c 	bl	8002c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037a8:	463b      	mov	r3, r7
 80037aa:	4619      	mov	r1, r3
 80037ac:	4805      	ldr	r0, [pc, #20]	; (80037c4 <MX_TIM6_Init+0x64>)
 80037ae:	f004 feb3 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037b8:	f7ff fa4e 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000580c 	.word	0x2000580c
 80037c8:	40001000 	.word	0x40001000

080037cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b096      	sub	sp, #88	; 0x58
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	615a      	str	r2, [r3, #20]
 80037fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2220      	movs	r2, #32
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f00b fced 	bl	800f1e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <MX_TIM8_Init+0x134>)
 800380c:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <MX_TIM8_Init+0x138>)
 800380e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1800-1;
 8003810:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <MX_TIM8_Init+0x134>)
 8003812:	f240 7207 	movw	r2, #1799	; 0x707
 8003816:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <MX_TIM8_Init+0x134>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 270-1;
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <MX_TIM8_Init+0x134>)
 8003820:	f240 120d 	movw	r2, #269	; 0x10d
 8003824:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <MX_TIM8_Init+0x134>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <MX_TIM8_Init+0x134>)
 800382e:	2200      	movs	r2, #0
 8003830:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <MX_TIM8_Init+0x134>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003838:	4831      	ldr	r0, [pc, #196]	; (8003900 <MX_TIM8_Init+0x134>)
 800383a:	f003 ff1f 	bl	800767c <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003844:	f7ff fa08 	bl	8002c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800384e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003852:	4619      	mov	r1, r3
 8003854:	482a      	ldr	r0, [pc, #168]	; (8003900 <MX_TIM8_Init+0x134>)
 8003856:	f004 fa85 	bl	8007d64 <HAL_TIM_ConfigClockSource>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003860:	f7ff f9fa 	bl	8002c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003864:	4826      	ldr	r0, [pc, #152]	; (8003900 <MX_TIM8_Init+0x134>)
 8003866:	f004 f859 	bl	800791c <HAL_TIM_PWM_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003870:	f7ff f9f2 	bl	8002c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003874:	2320      	movs	r3, #32
 8003876:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800387c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003880:	4619      	mov	r1, r3
 8003882:	481f      	ldr	r0, [pc, #124]	; (8003900 <MX_TIM8_Init+0x134>)
 8003884:	f004 fe48 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800388e:	f7ff f9e3 	bl	8002c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003892:	2360      	movs	r3, #96	; 0x60
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800389e:	2300      	movs	r3, #0
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b2:	2200      	movs	r2, #0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4812      	ldr	r0, [pc, #72]	; (8003900 <MX_TIM8_Init+0x134>)
 80038b8:	f004 f992 	bl	8007be0 <HAL_TIM_PWM_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80038c2:	f7ff f9c9 	bl	8002c58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <MX_TIM8_Init+0x134>)
 80038ea:	f004 fe91 	bl	8008610 <HAL_TIMEx_ConfigBreakDeadTime>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80038f4:	f7ff f9b0 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	3758      	adds	r7, #88	; 0x58
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20005854 	.word	0x20005854
 8003904:	40010400 	.word	0x40010400

08003908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003936:	e026      	b.n	8003986 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIM_Base_MspInit+0x90>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 800394c:	f043 0310 	orr.w	r3, r3, #16
 8003950:	6413      	str	r3, [r2, #64]	; 0x40
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
}
 800395e:	e012      	b.n	8003986 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM8)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_TIM_Base_MspInit+0x94>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a08      	ldr	r2, [pc, #32]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_TIM_Base_MspInit+0x8c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40001000 	.word	0x40001000
 800399c:	40010400 	.word	0x40010400

080039a0 <startAdcDma>:
static void sendDataSD(char *file, volatile int16_t *sensor);
/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void startAdcDma(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	osDelayUntil((uint32_t*) osKernelSysTick(), SD_INIT_TIME);
 80039a4:	f008 f972 	bl	800bc8c <osKernelSysTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	210a      	movs	r1, #10
 80039ac:	4618      	mov	r0, r3
 80039ae:	f008 faa6 	bl	800befe <osDelayUntil>
	HAL_ADC_Start_DMA(TRAVEL_SENSOR_ADC_CHANNEL, (uint32_t*) adcDataWrite,
 80039b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b6:	4906      	ldr	r1, [pc, #24]	; (80039d0 <startAdcDma+0x30>)
 80039b8:	4806      	ldr	r0, [pc, #24]	; (80039d4 <startAdcDma+0x34>)
 80039ba:	f000 fd25 	bl	8004408 <HAL_ADC_Start_DMA>
	BUFFER_SIZE);
	HAL_TIM_Base_Start(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <startAdcDma+0x38>)
 80039c0:	f003 feac 	bl	800771c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <startAdcDma+0x3c>)
 80039c6:	f003 fea9 	bl	800771c <HAL_TIM_Base_Start>
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200058a4 	.word	0x200058a4
 80039d4:	200006b0 	.word	0x200006b0
 80039d8:	2000580c 	.word	0x2000580c
 80039dc:	200057c4 	.word	0x200057c4

080039e0 <stopAdcDma>:
void stopAdcDma(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(TRAVEL_SENSOR_ADC_CHANNEL);
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <stopAdcDma+0x1c>)
 80039e6:	f000 fe1f 	bl	8004628 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_TIMER_SAMPLE_CHECK);
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <stopAdcDma+0x20>)
 80039ec:	f003 fefe 	bl	80077ec <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(TRAVEL_SENSOR_ADC_TRIGER_TIMER);
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <stopAdcDma+0x24>)
 80039f2:	f003 fefb 	bl	80077ec <HAL_TIM_Base_Stop>
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200006b0 	.word	0x200006b0
 8003a00:	2000580c 	.word	0x2000580c
 8003a04:	200057c4 	.word	0x200057c4

08003a08 <travelPressureSensorCalibration>:
void travelPressureSensorCalibration(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <travelPressureSensorCalibration+0xf0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f04f 31ff 	mov.w	r1, #4294967295
 8003a16:	4618      	mov	r0, r3
 8003a18:	f008 f9da 	bl	800bdd0 <osSemaphoreWait>
#endif

	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e046      	b.n	8003ab0 <travelPressureSensorCalibration+0xa8>
	{
		calibrationValues.rearTravelSensor += outRearBufPtr[i];
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <travelPressureSensorCalibration+0xf4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b219      	sxth	r1, r3
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	b28b      	uxth	r3, r1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a42:	801a      	strh	r2, [r3, #0]
		calibrationValues.frontTravelSensor += outFrontBufPtr[i];
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <travelPressureSensorCalibration+0xfc>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b219      	sxth	r1, r3
 8003a52:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	b28b      	uxth	r3, r1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	b21a      	sxth	r2, r3
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a64:	805a      	strh	r2, [r3, #2]
		calibrationValues.rearPressureSensor += outRearPressureBufPtr[i];
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <travelPressureSensorCalibration+0x100>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b219      	sxth	r1, r3
 8003a74:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	b28b      	uxth	r3, r1
 8003a7e:	4413      	add	r3, r2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a86:	809a      	strh	r2, [r3, #4]
		calibrationValues.frontPressureSensor += outFrontPressureBufPtr[i];
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <travelPressureSensorCalibration+0x104>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b219      	sxth	r1, r3
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003a98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	b28b      	uxth	r3, r1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003aa8:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3301      	adds	r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ab4:	d9b5      	bls.n	8003a22 <travelPressureSensorCalibration+0x1a>

	}
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003abc:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearTravelSensor = calibrationValues.rearTravelSensor
 8003abe:	b21a      	sxth	r2, r3
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ac2:	801a      	strh	r2, [r3, #0]
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003aca:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontTravelSensor = calibrationValues.frontTravelSensor
 8003acc:	b21a      	sxth	r2, r3
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ad0:	805a      	strh	r2, [r3, #2]
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ad4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003ad8:	099b      	lsrs	r3, r3, #6
	calibrationValues.rearPressureSensor = calibrationValues.rearPressureSensor
 8003ada:	b21a      	sxth	r2, r3
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ade:	809a      	strh	r2, [r3, #4]
	calibrationValues.frontPressureSensor =
			calibrationValues.frontPressureSensor
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003ae2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
					/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003ae6:	099b      	lsrs	r3, r3, #6
	calibrationValues.frontPressureSensor =
 8003ae8:	b21a      	sxth	r2, r3
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <travelPressureSensorCalibration+0xf8>)
 8003aec:	80da      	strh	r2, [r3, #6]
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200052d8 	.word	0x200052d8
 8003afc:	20000018 	.word	0x20000018
 8003b00:	2000589c 	.word	0x2000589c
 8003b04:	2000001c 	.word	0x2000001c
 8003b08:	20000020 	.word	0x20000020
 8003b0c:	20000024 	.word	0x20000024

08003b10 <processData>:

void processData(char *sensorFront, char *sensorRear, char *sensorPressureFront,
		char *sensorPressureRear)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <processData+0x54>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 31ff 	mov.w	r1, #4294967295
 8003b26:	4618      	mov	r0, r3
 8003b28:	f008 f952 	bl	800bdd0 <osSemaphoreWait>
#endif
	sendDataSD(sensorRear, outRearBufPtr);
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <processData+0x58>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f000 faa8 	bl	8004088 <sendDataSD>
	sendDataSD(sensorFront, outFrontBufPtr);
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <processData+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 faa2 	bl	8004088 <sendDataSD>
	sendDataSD(sensorPressureRear, outRearPressureBufPtr);
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <processData+0x60>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6838      	ldr	r0, [r7, #0]
 8003b4c:	f000 fa9c 	bl	8004088 <sendDataSD>
	sendDataSD(sensorPressureFront, outFrontPressureBufPtr);
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <processData+0x64>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa96 	bl	8004088 <sendDataSD>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200052d8 	.word	0x200052d8
 8003b68:	20000018 	.word	0x20000018
 8003b6c:	2000001c 	.word	0x2000001c
 8003b70:	20000020 	.word	0x20000020
 8003b74:	20000024 	.word	0x20000024

08003b78 <processDataSag>:

void processDataSag(int16_t *sagRearFront, int16_t *pressureRearFront)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
#ifdef FREE_RTOS
	osSemaphoreWait(travelSensorSemHandle, osWaitForever);
 8003b82:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <processDataSag+0x17c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f008 f920 	bl	800bdd0 <osSemaphoreWait>
#endif
	(uint32_t*) sagRearFront;
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e04a      	b.n	8003c2c <processDataSag+0xb4>
	{
		sagRearFront[0] += outRearBufPtr[i];
 8003b96:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <processDataSag+0x180>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b219      	sxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	b28b      	uxth	r3, r1
 8003bae:	4413      	add	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	801a      	strh	r2, [r3, #0]
		sagRearFront[1] += outFrontBufPtr[i];
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <processDataSag+0x184>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b219      	sxth	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	b28b      	uxth	r3, r1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	b212      	sxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
		pressureRearFront[0] += outRearPressureBufPtr[i];
 8003bde:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <processDataSag+0x188>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b219      	sxth	r1, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	b28b      	uxth	r3, r1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	b21a      	sxth	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	801a      	strh	r2, [r3, #0]
		pressureRearFront[1] += outFrontPressureBufPtr[i];
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <processDataSag+0x18c>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b219      	sxth	r1, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3302      	adds	r3, #2
 8003c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	b28b      	uxth	r3, r1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	3302      	adds	r3, #2
 8003c22:	b212      	sxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE / HALF_CONV_BUFF_SIZE; i++)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8003c30:	d9b1      	bls.n	8003b96 <processDataSag+0x1e>

	}
	sagRearFront[0] = sagRearFront[0] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	b21a      	sxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = sagRearFront[1] / (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3302      	adds	r3, #2
 8003c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c48:	099a      	lsrs	r2, r3, #6
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	b212      	sxth	r2, r2
 8003c50:	801a      	strh	r2, [r3, #0]
	pressureRearFront[0] = pressureRearFront[0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c58:	099b      	lsrs	r3, r3, #6
	pressureRearFront[0] = pressureRearFront[0]
 8003c5a:	b21a      	sxth	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	801a      	strh	r2, [r3, #0]
	pressureRearFront[1] = pressureRearFront[1]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	3302      	adds	r3, #2
 8003c64:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ (BUFFER_SIZE / HALF_CONV_BUFF_SIZE);
 8003c68:	099a      	lsrs	r2, r3, #6
	pressureRearFront[1] = pressureRearFront[1]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	b212      	sxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]

	sagRearFront[0] = CONVERT_TO_PERCENT
			* (sagRearFront[0] / ((float) (REAR_SUSPENSION_TRAVEL - calibrationValues.rearTravelSensor)));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <processDataSag+0x190>)
 8003c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c86:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c96:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d0c <processDataSag+0x194>
 8003c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[0] = CONVERT_TO_PERCENT
 8003c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca2:	ee17 3a90 	vmov	r3, s15
 8003ca6:	b21a      	sxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	801a      	strh	r2, [r3, #0]
	sagRearFront[1] = CONVERT_TO_PERCENT
			* (sagRearFront[1] / ((float) (FRONT_SUSPENSION_TRAVEL - calibrationValues.frontTravelSensor)));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3302      	adds	r3, #2
 8003cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <processDataSag+0x190>)
 8003cbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cc2:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d0c <processDataSag+0x194>
 8003cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
	sagRearFront[1] = CONVERT_TO_PERCENT
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce2:	ee17 2a90 	vmov	r2, s15
 8003ce6:	b212      	sxth	r2, r2
 8003ce8:	801a      	strh	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200052d8 	.word	0x200052d8
 8003cf8:	20000018 	.word	0x20000018
 8003cfc:	2000001c 	.word	0x2000001c
 8003d00:	20000020 	.word	0x20000020
 8003d04:	20000024 	.word	0x20000024
 8003d08:	2000589c 	.word	0x2000589c
 8003d0c:	42c80000 	.word	0x42c80000

08003d10 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcDataWrite[0];
 8003d18:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d1a:	4a45      	ldr	r2, [pc, #276]	; (8003e30 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8003d1c:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[0];
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003d20:	4a45      	ldr	r2, [pc, #276]	; (8003e38 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8003d22:	601a      	str	r2, [r3, #0]
	outFrontPressureBufPtr = &adcFrontPressureDataRead[0];
 8003d24:	4b45      	ldr	r3, [pc, #276]	; (8003e3c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003d26:	4a46      	ldr	r2, [pc, #280]	; (8003e40 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 8003d28:	601a      	str	r2, [r3, #0]
	outRearBufPtr = &adcRearDataRead[0];
 8003d2a:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003d2c:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_ADC_ConvHalfCpltCallback+0x138>)
 8003d2e:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[0];
 8003d30:	4b46      	ldr	r3, [pc, #280]	; (8003e4c <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003d32:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 8003d34:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e06a      	b.n	8003e12 <HAL_ADC_ConvHalfCpltCallback+0x102>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d44:	4413      	add	r3, r2
 8003d46:	2106      	movs	r1, #6
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f973 	bl	8004034 <convertAdcToPressure>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003d54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d5e:	4b35      	ldr	r3, [pc, #212]	; (8003e34 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003d6a:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d6c:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3301      	adds	r3, #1
 8003d76:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d78:	4413      	add	r3, r2
 8003d7a:	2106      	movs	r1, #6
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f959 	bl	8004034 <convertAdcToPressure>
 8003d82:	4603      	mov	r3, r0
 8003d84:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003d88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003d9e:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003da0:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003da4:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3302      	adds	r3, #2
 8003daa:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dac:	4413      	add	r3, r2
 8003dae:	217d      	movs	r1, #125	; 0x7d
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f929 	bl	8004008 <convertAdcToTravel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <HAL_ADC_ConvHalfCpltCallback+0x134>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003dd2:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dd4:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3303      	adds	r3, #3
 8003dde:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003de0:	4413      	add	r3, r2
 8003de2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f90e 	bl	8004008 <convertAdcToTravel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003df0:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8003df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003e08:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003e0a:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2bfe      	cmp	r3, #254	; 0xfe
 8003e16:	d991      	bls.n	8003d3c <HAL_ADC_ConvHalfCpltCallback+0x2c>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_ADC_ConvHalfCpltCallback+0x148>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f008 f825 	bl	800be6c <osSemaphoreRelease>
#endif
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200060a4 	.word	0x200060a4
 8003e30:	200058a4 	.word	0x200058a4
 8003e34:	20000020 	.word	0x20000020
 8003e38:	20005ea4 	.word	0x20005ea4
 8003e3c:	20000024 	.word	0x20000024
 8003e40:	20005fa4 	.word	0x20005fa4
 8003e44:	20000018 	.word	0x20000018
 8003e48:	20005ca4 	.word	0x20005ca4
 8003e4c:	2000001c 	.word	0x2000001c
 8003e50:	20005da4 	.word	0x20005da4
 8003e54:	2000589c 	.word	0x2000589c
 8003e58:	200052d8 	.word	0x200052d8

08003e5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
#ifdef CHECK_SAMPLE_TIME
	previousTime = time_end;
 8003e64:	4b56      	ldr	r3, [pc, #344]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <HAL_ADC_ConvCpltCallback+0x168>)
 8003e6a:	6013      	str	r3, [r2, #0]
	time_end = __HAL_TIM_GET_COUNTER(&htim6);
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_ADC_ConvCpltCallback+0x16c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b52      	ldr	r3, [pc, #328]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x164>)
 8003e76:	601a      	str	r2, [r3, #0]
	sample_time = ((time_end - previousTime)/NUMBER_OF_SENSORS)/(float)(BUFFER_SIZE/NUMBER_OF_SENSORS);
 8003e78:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x164>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <HAL_ADC_ConvCpltCallback+0x168>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	ee07 3a90 	vmov	s15, r3
 8003e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e8c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fcc <HAL_ADC_ConvCpltCallback+0x170>
 8003e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e94:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x174>)
 8003e96:	edc3 7a00 	vstr	s15, [r3]
	printf("semFullTime: %f\n", sample_time);
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x174>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fb82 	bl	80005a8 <__aeabi_f2d>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	484a      	ldr	r0, [pc, #296]	; (8003fd4 <HAL_ADC_ConvCpltCallback+0x178>)
 8003eaa:	f00b f835 	bl	800ef18 <iprintf>
#endif

	inBufPtr = &adcDataWrite[BUFFER_SIZE / 2];
 8003eae:	4b4a      	ldr	r3, [pc, #296]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8003eb0:	4a4a      	ldr	r2, [pc, #296]	; (8003fdc <HAL_ADC_ConvCpltCallback+0x180>)
 8003eb2:	601a      	str	r2, [r3, #0]
	outRearPressureBufPtr = &adcRearPressureDataRead[BUFFER_SIZE
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x184>)
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <HAL_ADC_ConvCpltCallback+0x188>)
 8003eb8:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outFrontPressureBufPtr = &adcFrontPressureDataRead[BUFFER_SIZE
 8003eba:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8003ebc:	4a4b      	ldr	r2, [pc, #300]	; (8003fec <HAL_ADC_ConvCpltCallback+0x190>)
 8003ebe:	601a      	str	r2, [r3, #0]
			/ HALF_CONV_BUFF_SIZE];
	outRearBufPtr = &adcRearDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x194>)
 8003ec2:	4a4c      	ldr	r2, [pc, #304]	; (8003ff4 <HAL_ADC_ConvCpltCallback+0x198>)
 8003ec4:	601a      	str	r2, [r3, #0]
	outFrontBufPtr = &adcFrontDataRead[BUFFER_SIZE / HALF_CONV_BUFF_SIZE];
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_ADC_ConvCpltCallback+0x19c>)
 8003ec8:	4a4c      	ldr	r2, [pc, #304]	; (8003ffc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8003eca:	601a      	str	r2, [r3, #0]

	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e06a      	b.n	8003fa8 <HAL_ADC_ConvCpltCallback+0x14c>
	{
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n],
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	005b      	lsls	r3, r3, #1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003eda:	4413      	add	r3, r2
 8003edc:	2106      	movs	r1, #6
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f8a8 	bl	8004034 <convertAdcToPressure>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.rearPressureSensor;
 8003ee8:	4b45      	ldr	r3, [pc, #276]	; (8004000 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8003eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b299      	uxth	r1, r3
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x184>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4413      	add	r3, r2
				- calibrationValues.rearPressureSensor;
 8003f00:	b20a      	sxth	r2, r1
		outRearPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f02:	801a      	strh	r2, [r3, #0]
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8003f06:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 1],
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	005b      	lsls	r3, r3, #1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f0e:	4413      	add	r3, r2
 8003f10:	2106      	movs	r1, #6
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f88e 	bl	8004034 <convertAdcToPressure>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	b29a      	uxth	r2, r3
				PRESSURE_SENSOR_MAX_VALUE)
				- calibrationValues.frontPressureSensor;
 8003f1c:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8003f1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	b299      	uxth	r1, r3
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f28:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
				- calibrationValues.frontPressureSensor;
 8003f34:	b20a      	sxth	r2, r1
		outFrontPressureBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToPressure(
 8003f36:	801a      	strh	r2, [r3, #0]
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 2],
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3302      	adds	r3, #2
 8003f40:	005b      	lsls	r3, r3, #1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f42:	4413      	add	r3, r2
 8003f44:	217d      	movs	r1, #125	; 0x7d
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f85e 	bl	8004008 <convertAdcToTravel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	b29a      	uxth	r2, r3
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8003f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	b299      	uxth	r1, r3
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x194>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
				REAR_SENSOR_TRAVEL) - calibrationValues.rearTravelSensor;
 8003f68:	b20a      	sxth	r2, r1
		outRearBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f6a:	801a      	strh	r2, [r3, #0]
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
				&inBufPtr[n + 3],
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3303      	adds	r3, #3
 8003f74:	005b      	lsls	r3, r3, #1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f76:	4413      	add	r3, r2
 8003f78:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f843 	bl	8004008 <convertAdcToTravel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	b29a      	uxth	r2, r3
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8003f88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	b299      	uxth	r1, r3
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_ADC_ConvCpltCallback+0x19c>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
				FRONT_SENSOR_TRAVEL) - calibrationValues.frontTravelSensor;
 8003f9e:	b20a      	sxth	r2, r1
		outFrontBufPtr[n / NUMBER_OF_SENSORS] = convertAdcToTravel(
 8003fa0:	801a      	strh	r2, [r3, #0]
	for (int n = 0; n < (BUFFER_SIZE / 2) - 1; n += NUMBER_OF_SENSORS)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2bfe      	cmp	r3, #254	; 0xfe
 8003fac:	d991      	bls.n	8003ed2 <HAL_ADC_ConvCpltCallback+0x76>
	}
#ifdef FREE_RTOS
	osSemaphoreRelease(travelSensorSemHandle);
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f007 ff5a 	bl	800be6c <osSemaphoreRelease>
#endif
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	200060a8 	.word	0x200060a8
 8003fc4:	200060ac 	.word	0x200060ac
 8003fc8:	2000580c 	.word	0x2000580c
 8003fcc:	43000000 	.word	0x43000000
 8003fd0:	200060b0 	.word	0x200060b0
 8003fd4:	08011a70 	.word	0x08011a70
 8003fd8:	200060a4 	.word	0x200060a4
 8003fdc:	20005aa4 	.word	0x20005aa4
 8003fe0:	20000020 	.word	0x20000020
 8003fe4:	20005f24 	.word	0x20005f24
 8003fe8:	20000024 	.word	0x20000024
 8003fec:	20006024 	.word	0x20006024
 8003ff0:	20000018 	.word	0x20000018
 8003ff4:	20005d24 	.word	0x20005d24
 8003ff8:	2000001c 	.word	0x2000001c
 8003ffc:	20005e24 	.word	0x20005e24
 8004000:	2000589c 	.word	0x2000589c
 8004004:	200052d8 	.word	0x200052d8

08004008 <convertAdcToTravel>:

static int16_t convertAdcToTravel(volatile int16_t *adcDataWrite,
		int16_t sensorTravel)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]

	return (*adcDataWrite * sensorTravel / ADC_RESOLUTION);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b21b      	sxth	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	0b1b      	lsrs	r3, r3, #12
 8004026:	b21b      	sxth	r3, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <convertAdcToPressure>:

static int16_t convertAdcToPressure(volatile int16_t *adcDataWrite,
		int16_t sensorMaxPressure)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]

	return ((CONVERT_MPa_to_PSI)
			* (*adcDataWrite * sensorMaxPressure / ((float) ADC_RESOLUTION)));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b21b      	sxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004058:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004080 <convertAdcToPressure+0x4c>
 800405c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004060:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004084 <convertAdcToPressure+0x50>
 8004064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	b21b      	sxth	r3, r3
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	45800000 	.word	0x45800000
 8004084:	43110000 	.word	0x43110000

08004088 <sendDataSD>:

static void sendDataSD(char *file, volatile int16_t *sensor)
{
 8004088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8004090:	af00      	add	r7, sp, #0
 8004092:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004096:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800409a:	6018      	str	r0, [r3, #0]
 800409c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040a0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80040a4:	6019      	str	r1, [r3, #0]
 80040a6:	466b      	mov	r3, sp
 80040a8:	469a      	mov	sl, r3
	char buffer[BUFFER_SIZE + 1];
	memset(buffer, 0, BUFFER_SIZE + 1);
 80040aa:	f107 030c 	add.w	r3, r7, #12
 80040ae:	f240 2201 	movw	r2, #513	; 0x201
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f00b f895 	bl	800f1e4 <memset>
	int i;
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80040c0:	e01c      	b.n	80040fc <sendDataSD+0x74>
	{
		sprintf(buffer + strlen(buffer), "%d ", sensor[i]);
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc f902 	bl	80002d0 <strlen>
 80040cc:	4602      	mov	r2, r0
 80040ce:	f107 030c 	add.w	r3, r7, #12
 80040d2:	1898      	adds	r0, r3, r2
 80040d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80040de:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	4933      	ldr	r1, [pc, #204]	; (80041bc <sendDataSD+0x134>)
 80040ee:	f00a ff81 	bl	800eff4 <siprintf>
	for (i = 0; i < (BUFFER_SIZE) / HALF_CONV_BUFF_SIZE; i++)
 80040f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80040f6:	3301      	adds	r3, #1
 80040f8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80040fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004100:	2b3f      	cmp	r3, #63	; 0x3f
 8004102:	d9de      	bls.n	80040c2 <sendDataSD+0x3a>
	}
	size_t size = strlen(buffer) + 1;
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc f8e1 	bl	80002d0 <strlen>
 800410e:	4603      	mov	r3, r0
 8004110:	3301      	adds	r3, #1
 8004112:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	char newBuff[size];
 8004116:	f8d7 6218 	ldr.w	r6, [r7, #536]	; 0x218
 800411a:	4633      	mov	r3, r6
 800411c:	3b01      	subs	r3, #1
 800411e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004122:	2300      	movs	r3, #0
 8004124:	46b0      	mov	r8, r6
 8004126:	4699      	mov	r9, r3
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413c:	2300      	movs	r3, #0
 800413e:	4634      	mov	r4, r6
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	00eb      	lsls	r3, r5, #3
 800414c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004150:	00e2      	lsls	r2, r4, #3
 8004152:	1df3      	adds	r3, r6, #7
 8004154:	08db      	lsrs	r3, r3, #3
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	ebad 0d03 	sub.w	sp, sp, r3
 800415c:	466b      	mov	r3, sp
 800415e:	3300      	adds	r3, #0
 8004160:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	memset(newBuff, 0, size);
 8004164:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004168:	2100      	movs	r1, #0
 800416a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800416e:	f00b f839 	bl	800f1e4 <memset>
	strncpy(newBuff, buffer, sizeof(newBuff));
 8004172:	f107 030c 	add.w	r3, r7, #12
 8004176:	4632      	mov	r2, r6
 8004178:	4619      	mov	r1, r3
 800417a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800417e:	f00b f839 	bl	800f1f4 <strncpy>
	newBuff[size] = '\0';
 8004182:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004186:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800418a:	4413      	add	r3, r2
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
	Mount_SD("/");
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <sendDataSD+0x138>)
 8004192:	f7fc ff31 	bl	8000ff8 <Mount_SD>
	Update_File(file, newBuff);
 8004196:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800419a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800419e:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f7fd f8a0 	bl	80012e8 <Update_File>
	Unmount_SD("/");
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <sendDataSD+0x138>)
 80041aa:	f7fc ff49 	bl	8001040 <Unmount_SD>
 80041ae:	46d5      	mov	sp, sl
}
 80041b0:	bf00      	nop
 80041b2:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	08011a84 	.word	0x08011a84
 80041c0:	08011a88 	.word	0x08011a88

080041c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041ca:	4a12      	ldr	r2, [pc, #72]	; (8004214 <MX_USART2_UART_Init+0x50>)
 80041cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041ea:	220c      	movs	r2, #12
 80041ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041fa:	4805      	ldr	r0, [pc, #20]	; (8004210 <MX_USART2_UART_Init+0x4c>)
 80041fc:	f004 fa6e 	bl	80086dc <HAL_UART_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004206:	f7fe fd27 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200060b4 	.word	0x200060b4
 8004214:	40004400 	.word	0x40004400

08004218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a19      	ldr	r2, [pc, #100]	; (800429c <HAL_UART_MspInit+0x84>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d12b      	bne.n	8004292 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_UART_MspInit+0x88>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <HAL_UART_MspInit+0x88>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_UART_MspInit+0x88>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_UART_MspInit+0x88>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_UART_MspInit+0x88>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_UART_MspInit+0x88>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004272:	230c      	movs	r3, #12
 8004274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427e:	2303      	movs	r3, #3
 8004280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004282:	2307      	movs	r3, #7
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4619      	mov	r1, r3
 800428c:	4805      	ldr	r0, [pc, #20]	; (80042a4 <HAL_UART_MspInit+0x8c>)
 800428e:	f001 f9a1 	bl	80055d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004292:	bf00      	nop
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40004400 	.word	0x40004400
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020000 	.word	0x40020000

080042a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042ac:	480d      	ldr	r0, [pc, #52]	; (80042e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042ae:	490e      	ldr	r1, [pc, #56]	; (80042e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042b0:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b4:	e002      	b.n	80042bc <LoopCopyDataInit>

080042b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ba:	3304      	adds	r3, #4

080042bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c0:	d3f9      	bcc.n	80042b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042c2:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042c4:	4c0b      	ldr	r4, [pc, #44]	; (80042f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042c8:	e001      	b.n	80042ce <LoopFillZerobss>

080042ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042cc:	3204      	adds	r2, #4

080042ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d0:	d3fb      	bcc.n	80042ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042d2:	f7ff f9c1 	bl	8003658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042d6:	f00b f847 	bl	800f368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042da:	f7fe fc1d 	bl	8002b18 <main>
  bx  lr    
 80042de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80042ec:	08011efc 	.word	0x08011efc
  ldr r2, =_sbss
 80042f0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80042f4:	2000a018 	.word	0x2000a018

080042f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042f8:	e7fe      	b.n	80042f8 <ADC_IRQHandler>
	...

080042fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_Init+0x40>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_Init+0x40>)
 8004306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800430a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_Init+0x40>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <HAL_Init+0x40>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_Init+0x40>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a07      	ldr	r2, [pc, #28]	; (800433c <HAL_Init+0x40>)
 800431e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004324:	2003      	movs	r0, #3
 8004326:	f000 fd40 	bl	8004daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800432a:	200f      	movs	r0, #15
 800432c:	f7fe fff2 	bl	8003314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004330:	f7fe ffc4 	bl	80032bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023c00 	.word	0x40023c00

08004340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_IncTick+0x20>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_IncTick+0x24>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4413      	add	r3, r2
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <HAL_IncTick+0x24>)
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000002c 	.word	0x2000002c
 8004364:	200060f8 	.word	0x200060f8

08004368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return uwTick;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_GetTick+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	200060f8 	.word	0x200060f8

08004380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e033      	b.n	80043fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd f96e 	bl	8001680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d118      	bne.n	80043f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043c6:	f023 0302 	bic.w	r3, r3, #2
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fabe 	bl	8004954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
 80043ee:	e001      	b.n	80043f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_ADC_Start_DMA+0x1e>
 8004422:	2302      	movs	r3, #2
 8004424:	e0e9      	b.n	80045fa <HAL_ADC_Start_DMA+0x1f2>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d018      	beq.n	800446e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800444c:	4b6d      	ldr	r3, [pc, #436]	; (8004604 <HAL_ADC_Start_DMA+0x1fc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6d      	ldr	r2, [pc, #436]	; (8004608 <HAL_ADC_Start_DMA+0x200>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0c9a      	lsrs	r2, r3, #18
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004460:	e002      	b.n	8004468 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3b01      	subs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f9      	bne.n	8004462 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447c:	d107      	bne.n	800448e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 80a1 	bne.w	80045e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044dc:	d106      	bne.n	80044ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f023 0206 	bic.w	r2, r3, #6
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
 80044ea:	e002      	b.n	80044f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044fa:	4b44      	ldr	r3, [pc, #272]	; (800460c <HAL_ADC_Start_DMA+0x204>)
 80044fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	4a43      	ldr	r2, [pc, #268]	; (8004610 <HAL_ADC_Start_DMA+0x208>)
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4a42      	ldr	r2, [pc, #264]	; (8004614 <HAL_ADC_Start_DMA+0x20c>)
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4a41      	ldr	r2, [pc, #260]	; (8004618 <HAL_ADC_Start_DMA+0x210>)
 8004514:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800451e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800452e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	334c      	adds	r3, #76	; 0x4c
 800454a:	4619      	mov	r1, r3
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f000 fd0e 	bl	8004f70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2b00      	cmp	r3, #0
 800455e:	d12a      	bne.n	80045b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2d      	ldr	r2, [pc, #180]	; (800461c <HAL_ADC_Start_DMA+0x214>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d015      	beq.n	8004596 <HAL_ADC_Start_DMA+0x18e>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <HAL_ADC_Start_DMA+0x218>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d105      	bne.n	8004580 <HAL_ADC_Start_DMA+0x178>
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_ADC_Start_DMA+0x204>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_ADC_Start_DMA+0x21c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d136      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_ADC_Start_DMA+0x204>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d130      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d129      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	e020      	b.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_ADC_Start_DMA+0x214>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d11b      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d114      	bne.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e00b      	b.n	80045f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000014 	.word	0x20000014
 8004608:	431bde83 	.word	0x431bde83
 800460c:	40012300 	.word	0x40012300
 8004610:	08004b4d 	.word	0x08004b4d
 8004614:	08004c07 	.word	0x08004c07
 8004618:	08004c23 	.word	0x08004c23
 800461c:	40012000 	.word	0x40012000
 8004620:	40012100 	.word	0x40012100
 8004624:	40012200 	.word	0x40012200

08004628 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_ADC_Stop_DMA+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e048      	b.n	80046d4 <HAL_ADC_Stop_DMA+0xac>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d130      	bne.n	80046ca <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004676:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d10f      	bne.n	80046a6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fcc8 	bl	8005020 <HAL_DMA_Abort>
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80046b4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x1c>
 8004708:	2302      	movs	r3, #2
 800470a:	e113      	b.n	8004934 <HAL_ADC_ConfigChannel+0x244>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b09      	cmp	r3, #9
 800471a:	d925      	bls.n	8004768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68d9      	ldr	r1, [r3, #12]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	3b1e      	subs	r3, #30
 8004732:	2207      	movs	r2, #7
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43da      	mvns	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	400a      	ands	r2, r1
 8004740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68d9      	ldr	r1, [r3, #12]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	4618      	mov	r0, r3
 8004754:	4603      	mov	r3, r0
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4403      	add	r3, r0
 800475a:	3b1e      	subs	r3, #30
 800475c:	409a      	lsls	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	e022      	b.n	80047ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6919      	ldr	r1, [r3, #16]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	2207      	movs	r2, #7
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	400a      	ands	r2, r1
 800478a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6919      	ldr	r1, [r3, #16]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	4618      	mov	r0, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4403      	add	r3, r0
 80047a4:	409a      	lsls	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d824      	bhi.n	8004800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	3b05      	subs	r3, #5
 80047c8:	221f      	movs	r2, #31
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	400a      	ands	r2, r1
 80047d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4618      	mov	r0, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b05      	subs	r3, #5
 80047f2:	fa00 f203 	lsl.w	r2, r0, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34
 80047fe:	e04c      	b.n	800489a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d824      	bhi.n	8004852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	3b23      	subs	r3, #35	; 0x23
 800481a:	221f      	movs	r2, #31
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43da      	mvns	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	400a      	ands	r2, r1
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	4618      	mov	r0, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	3b23      	subs	r3, #35	; 0x23
 8004844:	fa00 f203 	lsl.w	r2, r0, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
 8004850:	e023      	b.n	800489a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	3b41      	subs	r3, #65	; 0x41
 8004864:	221f      	movs	r2, #31
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43da      	mvns	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	400a      	ands	r2, r1
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	4618      	mov	r0, r3
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	3b41      	subs	r3, #65	; 0x41
 800488e:	fa00 f203 	lsl.w	r2, r0, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_ADC_ConfigChannel+0x250>)
 800489c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a28      	ldr	r2, [pc, #160]	; (8004944 <HAL_ADC_ConfigChannel+0x254>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10f      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1d8>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d10b      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_ADC_ConfigChannel+0x254>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d12b      	bne.n	800492a <HAL_ADC_ConfigChannel+0x23a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_ADC_ConfigChannel+0x258>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <HAL_ADC_ConfigChannel+0x1f4>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b11      	cmp	r3, #17
 80048e2:	d122      	bne.n	800492a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <HAL_ADC_ConfigChannel+0x258>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d111      	bne.n	800492a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004906:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_ADC_ConfigChannel+0x25c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a11      	ldr	r2, [pc, #68]	; (8004950 <HAL_ADC_ConfigChannel+0x260>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	0c9a      	lsrs	r2, r3, #18
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800491c:	e002      	b.n	8004924 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3b01      	subs	r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f9      	bne.n	800491e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40012300 	.word	0x40012300
 8004944:	40012000 	.word	0x40012000
 8004948:	10000012 	.word	0x10000012
 800494c:	20000014 	.word	0x20000014
 8004950:	431bde83 	.word	0x431bde83

08004954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495c:	4b79      	ldr	r3, [pc, #484]	; (8004b44 <ADC_Init+0x1f0>)
 800495e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	4a58      	ldr	r2, [pc, #352]	; (8004b48 <ADC_Init+0x1f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d022      	beq.n	8004a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6899      	ldr	r1, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6899      	ldr	r1, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	e00f      	b.n	8004a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0202 	bic.w	r2, r2, #2
 8004a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7e1b      	ldrb	r3, [r3, #24]
 8004a6c:	005a      	lsls	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	035a      	lsls	r2, r3, #13
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	e007      	b.n	8004ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	051a      	lsls	r2, r3, #20
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6899      	ldr	r1, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b0a:	025a      	lsls	r2, r3, #9
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	029a      	lsls	r2, r3, #10
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40012300 	.word	0x40012300
 8004b48:	0f000001 	.word	0x0f000001

08004b4c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d13c      	bne.n	8004be0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d12b      	bne.n	8004bd8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d127      	bne.n	8004bd8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d119      	bne.n	8004bd8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0220 	bic.w	r2, r2, #32
 8004bb2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff f93f 	bl	8003e5c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bde:	e00e      	b.n	8004bfe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7ff fd75 	bl	80046dc <HAL_ADC_ErrorCallback>
}
 8004bf2:	e004      	b.n	8004bfe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff f87b 	bl	8003d10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fd4a 	bl	80046dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <__NVIC_SetPriorityGrouping>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c82:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <__NVIC_SetPriorityGrouping+0x44>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <__NVIC_GetPriorityGrouping>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 0307 	and.w	r3, r3, #7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_EnableIRQ>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db0b      	blt.n	8004cde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	f003 021f 	and.w	r2, r3, #31
 8004ccc:	4907      	ldr	r1, [pc, #28]	; (8004cec <__NVIC_EnableIRQ+0x38>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000e100 	.word	0xe000e100

08004cf0 <__NVIC_SetPriority>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db0a      	blt.n	8004d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <__NVIC_SetPriority+0x4c>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	0112      	lsls	r2, r2, #4
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	440b      	add	r3, r1
 8004d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d18:	e00a      	b.n	8004d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4908      	ldr	r1, [pc, #32]	; (8004d40 <__NVIC_SetPriority+0x50>)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	3b04      	subs	r3, #4
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	761a      	strb	r2, [r3, #24]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e100 	.word	0xe000e100
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <NVIC_EncodePriority>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f1c3 0307 	rsb	r3, r3, #7
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	bf28      	it	cs
 8004d62:	2304      	movcs	r3, #4
 8004d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d902      	bls.n	8004d74 <NVIC_EncodePriority+0x30>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3b03      	subs	r3, #3
 8004d72:	e000      	b.n	8004d76 <NVIC_EncodePriority+0x32>
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	401a      	ands	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43d9      	mvns	r1, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9c:	4313      	orrs	r3, r2
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3724      	adds	r7, #36	; 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff4c 	bl	8004c50 <__NVIC_SetPriorityGrouping>
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd2:	f7ff ff61 	bl	8004c98 <__NVIC_GetPriorityGrouping>
 8004dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	f7ff ffb1 	bl	8004d44 <NVIC_EncodePriority>
 8004de2:	4602      	mov	r2, r0
 8004de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ff80 	bl	8004cf0 <__NVIC_SetPriority>
}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ff54 	bl	8004cb4 <__NVIC_EnableIRQ>
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e20:	f7ff faa2 	bl	8004368 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e099      	b.n	8004f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e50:	e00f      	b.n	8004e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e52:	f7ff fa89 	bl	8004368 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	d908      	bls.n	8004e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e078      	b.n	8004f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e8      	bne.n	8004e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_DMA_Init+0x158>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d107      	bne.n	8004edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0307 	bic.w	r3, r3, #7
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d117      	bne.n	8004f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fadf 	bl	80054dc <DMA_CheckFifoParam>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2240      	movs	r2, #64	; 0x40
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f32:	2301      	movs	r3, #1
 8004f34:	e016      	b.n	8004f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa96 	bl	8005470 <DMA_CalcBaseAndBitshift>
 8004f44:	4603      	mov	r3, r0
 8004f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	223f      	movs	r2, #63	; 0x3f
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	f010803f 	.word	0xf010803f

08004f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Start_IT+0x26>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e040      	b.n	8005018 <HAL_DMA_Start_IT+0xa8>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d12f      	bne.n	800500a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fa28 	bl	8005414 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	223f      	movs	r2, #63	; 0x3f
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0216 	orr.w	r2, r2, #22
 8004fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e005      	b.n	8005016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800502e:	f7ff f99b 	bl	8004368 <HAL_GetTick>
 8005032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d008      	beq.n	8005052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e052      	b.n	80050f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0216 	bic.w	r2, r2, #22
 8005060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_DMA_Abort+0x62>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050a2:	e013      	b.n	80050cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a4:	f7ff f960 	bl	8004368 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d90c      	bls.n	80050cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e015      	b.n	80050f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e4      	bne.n	80050a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	223f      	movs	r2, #63	; 0x3f
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800510c:	4b8e      	ldr	r3, [pc, #568]	; (8005348 <HAL_DMA_IRQHandler+0x248>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a8e      	ldr	r2, [pc, #568]	; (800534c <HAL_DMA_IRQHandler+0x24c>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0a9b      	lsrs	r3, r3, #10
 8005118:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512a:	2208      	movs	r2, #8
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01a      	beq.n	800516c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d013      	beq.n	800516c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	2208      	movs	r2, #8
 800515a:	409a      	lsls	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005170:	2201      	movs	r2, #1
 8005172:	409a      	lsls	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518e:	2201      	movs	r2, #1
 8005190:	409a      	lsls	r2, r3
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f043 0202 	orr.w	r2, r3, #2
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	2204      	movs	r2, #4
 80051a8:	409a      	lsls	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	2204      	movs	r2, #4
 80051c6:	409a      	lsls	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0204 	orr.w	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	2210      	movs	r2, #16
 80051de:	409a      	lsls	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d043      	beq.n	8005270 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03c      	beq.n	8005270 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2210      	movs	r2, #16
 80051fc:	409a      	lsls	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d018      	beq.n	8005242 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d108      	bne.n	8005230 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d024      	beq.n	8005270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
 800522e:	e01f      	b.n	8005270 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
 8005240:	e016      	b.n	8005270 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d107      	bne.n	8005260 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0208 	bic.w	r2, r2, #8
 800525e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	2220      	movs	r2, #32
 8005276:	409a      	lsls	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 808f 	beq.w	80053a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8087 	beq.w	80053a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	2220      	movs	r2, #32
 8005298:	409a      	lsls	r2, r3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d136      	bne.n	8005318 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0216 	bic.w	r2, r2, #22
 80052b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <HAL_DMA_IRQHandler+0x1da>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0208 	bic.w	r2, r2, #8
 80052e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	223f      	movs	r2, #63	; 0x3f
 80052f0:	409a      	lsls	r2, r3
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530a:	2b00      	cmp	r3, #0
 800530c:	d07e      	beq.n	800540c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
        }
        return;
 8005316:	e079      	b.n	800540c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01d      	beq.n	8005362 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	2b00      	cmp	r3, #0
 800533a:	d031      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
 8005344:	e02c      	b.n	80053a0 <HAL_DMA_IRQHandler+0x2a0>
 8005346:	bf00      	nop
 8005348:	20000014 	.word	0x20000014
 800534c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d023      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	e01e      	b.n	80053a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0210 	bic.w	r2, r2, #16
 800537e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d032      	beq.n	800540e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2205      	movs	r2, #5
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d307      	bcc.n	80053e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f2      	bne.n	80053cc <HAL_DMA_IRQHandler+0x2cc>
 80053e6:	e000      	b.n	80053ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
 800540a:	e000      	b.n	800540e <HAL_DMA_IRQHandler+0x30e>
        return;
 800540c:	bf00      	nop
    }
  }
}
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005430:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d108      	bne.n	8005454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005452:	e007      	b.n	8005464 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	3b10      	subs	r3, #16
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <DMA_CalcBaseAndBitshift+0x64>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800548a:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <DMA_CalcBaseAndBitshift+0x68>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d909      	bls.n	80054b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	659a      	str	r2, [r3, #88]	; 0x58
 80054b0:	e007      	b.n	80054c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	aaaaaaab 	.word	0xaaaaaaab
 80054d8:	08011af0 	.word	0x08011af0

080054dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11f      	bne.n	8005536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d856      	bhi.n	80055aa <DMA_CheckFifoParam+0xce>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <DMA_CheckFifoParam+0x28>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005515 	.word	0x08005515
 8005508:	08005527 	.word	0x08005527
 800550c:	08005515 	.word	0x08005515
 8005510:	080055ab 	.word	0x080055ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d046      	beq.n	80055ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005524:	e043      	b.n	80055ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800552e:	d140      	bne.n	80055b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005534:	e03d      	b.n	80055b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	d121      	bne.n	8005584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d837      	bhi.n	80055b6 <DMA_CheckFifoParam+0xda>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <DMA_CheckFifoParam+0x70>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005563 	.word	0x08005563
 8005554:	0800555d 	.word	0x0800555d
 8005558:	08005575 	.word	0x08005575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e030      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d025      	beq.n	80055ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005572:	e022      	b.n	80055ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800557c:	d11f      	bne.n	80055be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005582:	e01c      	b.n	80055be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d903      	bls.n	8005592 <DMA_CheckFifoParam+0xb6>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d003      	beq.n	8005598 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005590:	e018      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
      break;
 8005596:	e015      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00e      	beq.n	80055c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e00b      	b.n	80055c2 <DMA_CheckFifoParam+0xe6>
      break;
 80055aa:	bf00      	nop
 80055ac:	e00a      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;
 80055ae:	bf00      	nop
 80055b0:	e008      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;
 80055b2:	bf00      	nop
 80055b4:	e006      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;
 80055b6:	bf00      	nop
 80055b8:	e004      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <DMA_CheckFifoParam+0xe8>
      break;
 80055c2:	bf00      	nop
    }
  } 
  
  return status; 
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop

080055d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e165      	b.n	80058bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f0:	2201      	movs	r2, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 8154 	bne.w	80058b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d005      	beq.n	8005626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005622:	2b02      	cmp	r3, #2
 8005624:	d130      	bne.n	8005688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 0201 	and.w	r2, r3, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d017      	beq.n	80056c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d123      	bne.n	8005718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	220f      	movs	r2, #15
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	08da      	lsrs	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3208      	adds	r2, #8
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80ae 	beq.w	80058b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4b5d      	ldr	r3, [pc, #372]	; (80058d4 <HAL_GPIO_Init+0x300>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a5c      	ldr	r2, [pc, #368]	; (80058d4 <HAL_GPIO_Init+0x300>)
 8005764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_GPIO_Init+0x300>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005776:	4a58      	ldr	r2, [pc, #352]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	220f      	movs	r2, #15
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a4f      	ldr	r2, [pc, #316]	; (80058dc <HAL_GPIO_Init+0x308>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d025      	beq.n	80057ee <HAL_GPIO_Init+0x21a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a4e      	ldr	r2, [pc, #312]	; (80058e0 <HAL_GPIO_Init+0x30c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01f      	beq.n	80057ea <HAL_GPIO_Init+0x216>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a4d      	ldr	r2, [pc, #308]	; (80058e4 <HAL_GPIO_Init+0x310>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d019      	beq.n	80057e6 <HAL_GPIO_Init+0x212>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a4c      	ldr	r2, [pc, #304]	; (80058e8 <HAL_GPIO_Init+0x314>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_GPIO_Init+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <HAL_GPIO_Init+0x318>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00d      	beq.n	80057de <HAL_GPIO_Init+0x20a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <HAL_GPIO_Init+0x31c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <HAL_GPIO_Init+0x206>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a49      	ldr	r2, [pc, #292]	; (80058f4 <HAL_GPIO_Init+0x320>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_GPIO_Init+0x202>
 80057d2:	2306      	movs	r3, #6
 80057d4:	e00c      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057d6:	2307      	movs	r3, #7
 80057d8:	e00a      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057da:	2305      	movs	r3, #5
 80057dc:	e008      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057de:	2304      	movs	r3, #4
 80057e0:	e006      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057e2:	2303      	movs	r3, #3
 80057e4:	e004      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e002      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_GPIO_Init+0x21c>
 80057ee:	2300      	movs	r3, #0
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f002 0203 	and.w	r2, r2, #3
 80057f6:	0092      	lsls	r2, r2, #2
 80057f8:	4093      	lsls	r3, r2
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005800:	4935      	ldr	r1, [pc, #212]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	089b      	lsrs	r3, r3, #2
 8005806:	3302      	adds	r3, #2
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800580e:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005832:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005838:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <HAL_GPIO_Init+0x324>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <HAL_GPIO_Init+0x324>)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005886:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_GPIO_Init+0x324>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058b0:	4a11      	ldr	r2, [pc, #68]	; (80058f8 <HAL_GPIO_Init+0x324>)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	f67f ae96 	bls.w	80055f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3724      	adds	r7, #36	; 0x24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40013800 	.word	0x40013800
 80058dc:	40020000 	.word	0x40020000
 80058e0:	40020400 	.word	0x40020400
 80058e4:	40020800 	.word	0x40020800
 80058e8:	40020c00 	.word	0x40020c00
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40021400 	.word	0x40021400
 80058f4:	40021800 	.word	0x40021800
 80058f8:	40013c00 	.word	0x40013c00

080058fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
 8005908:	4613      	mov	r3, r2
 800590a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800590c:	787b      	ldrb	r3, [r7, #1]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005918:	e003      	b.n	8005922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800591a:	887b      	ldrh	r3, [r7, #2]
 800591c:	041a      	lsls	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	619a      	str	r2, [r3, #24]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e12b      	b.n	8005b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc fe52 	bl	8002600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005994:	f000 fd0a 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8005998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4a81      	ldr	r2, [pc, #516]	; (8005ba4 <HAL_I2C_Init+0x274>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d807      	bhi.n	80059b4 <HAL_I2C_Init+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a80      	ldr	r2, [pc, #512]	; (8005ba8 <HAL_I2C_Init+0x278>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e006      	b.n	80059c2 <HAL_I2C_Init+0x92>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a7d      	ldr	r2, [pc, #500]	; (8005bac <HAL_I2C_Init+0x27c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	bf94      	ite	ls
 80059bc:	2301      	movls	r3, #1
 80059be:	2300      	movhi	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0e7      	b.n	8005b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a78      	ldr	r2, [pc, #480]	; (8005bb0 <HAL_I2C_Init+0x280>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	0c9b      	lsrs	r3, r3, #18
 80059d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a6a      	ldr	r2, [pc, #424]	; (8005ba4 <HAL_I2C_Init+0x274>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d802      	bhi.n	8005a04 <HAL_I2C_Init+0xd4>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3301      	adds	r3, #1
 8005a02:	e009      	b.n	8005a18 <HAL_I2C_Init+0xe8>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <HAL_I2C_Init+0x284>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	3301      	adds	r3, #1
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	495c      	ldr	r1, [pc, #368]	; (8005ba4 <HAL_I2C_Init+0x274>)
 8005a34:	428b      	cmp	r3, r1
 8005a36:	d819      	bhi.n	8005a6c <HAL_I2C_Init+0x13c>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1e59      	subs	r1, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a4c:	400b      	ands	r3, r1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_I2C_Init+0x138>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e59      	subs	r1, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a60:	3301      	adds	r3, #1
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a66:	e051      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	e04f      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d111      	bne.n	8005a98 <HAL_I2C_Init+0x168>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	1e58      	subs	r0, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e012      	b.n	8005abe <HAL_I2C_Init+0x18e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1e58      	subs	r0, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	0099      	lsls	r1, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x196>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e022      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10e      	bne.n	8005aec <HAL_I2C_Init+0x1bc>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1e58      	subs	r0, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	440b      	add	r3, r1
 8005adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	e00f      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1e58      	subs	r0, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6859      	ldr	r1, [r3, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	0099      	lsls	r1, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b02:	3301      	adds	r3, #1
 8005b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	6809      	ldr	r1, [r1, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6911      	ldr	r1, [r2, #16]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	000186a0 	.word	0x000186a0
 8005ba8:	001e847f 	.word	0x001e847f
 8005bac:	003d08ff 	.word	0x003d08ff
 8005bb0:	431bde83 	.word	0x431bde83
 8005bb4:	10624dd3 	.word	0x10624dd3

08005bb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	817b      	strh	r3, [r7, #10]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bcc:	f7fe fbcc 	bl	8004368 <HAL_GetTick>
 8005bd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	f040 80e0 	bne.w	8005da0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2319      	movs	r3, #25
 8005be6:	2201      	movs	r2, #1
 8005be8:	4970      	ldr	r1, [pc, #448]	; (8005dac <HAL_I2C_Master_Transmit+0x1f4>)
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f964 	bl	8005eb8 <I2C_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e0d3      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_I2C_Master_Transmit+0x50>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0cc      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d007      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2221      	movs	r2, #33	; 0x21
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2210      	movs	r2, #16
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	893a      	ldrh	r2, [r7, #8]
 8005c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a50      	ldr	r2, [pc, #320]	; (8005db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c70:	8979      	ldrh	r1, [r7, #10]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f89c 	bl	8005db4 <I2C_MasterRequestWrite>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e08d      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c9c:	e066      	b.n	8005d6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	6a39      	ldr	r1, [r7, #32]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f9de 	bl	8006064 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d107      	bne.n	8005cc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e06b      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d11b      	bne.n	8005d40 <HAL_I2C_Master_Transmit+0x188>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d017      	beq.n	8005d40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	6a39      	ldr	r1, [r7, #32]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f9ce 	bl	80060e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d107      	bne.n	8005d68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e01a      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d194      	bne.n	8005c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	00100002 	.word	0x00100002
 8005db0:	ffff0000 	.word	0xffff0000

08005db4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	607a      	str	r2, [r7, #4]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d006      	beq.n	8005dde <I2C_MasterRequestWrite+0x2a>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d003      	beq.n	8005dde <I2C_MasterRequestWrite+0x2a>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ddc:	d108      	bne.n	8005df0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e00b      	b.n	8005e08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b12      	cmp	r3, #18
 8005df6:	d107      	bne.n	8005e08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f84f 	bl	8005eb8 <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2e:	d103      	bne.n	8005e38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e035      	b.n	8005ea8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e44:	d108      	bne.n	8005e58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e46:	897b      	ldrh	r3, [r7, #10]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e54:	611a      	str	r2, [r3, #16]
 8005e56:	e01b      	b.n	8005e90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	11db      	asrs	r3, r3, #7
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0306 	and.w	r3, r3, #6
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f063 030f 	orn	r3, r3, #15
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	490e      	ldr	r1, [pc, #56]	; (8005eb0 <I2C_MasterRequestWrite+0xfc>)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f875 	bl	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e010      	b.n	8005ea8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	4907      	ldr	r1, [pc, #28]	; (8005eb4 <I2C_MasterRequestWrite+0x100>)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f865 	bl	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	00010008 	.word	0x00010008
 8005eb4:	00010002 	.word	0x00010002

08005eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec8:	e025      	b.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d021      	beq.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fe fa49 	bl	8004368 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d116      	bne.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f043 0220 	orr.w	r2, r3, #32
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e023      	b.n	8005f5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10d      	bne.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	43da      	mvns	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bf0c      	ite	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	2300      	movne	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	e00c      	b.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	43da      	mvns	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d0b6      	beq.n	8005eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f74:	e051      	b.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d123      	bne.n	8005fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0204 	orr.w	r2, r3, #4
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e046      	b.n	800605c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d021      	beq.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fe f9c7 	bl	8004368 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d116      	bne.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e020      	b.n	800605c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d10c      	bne.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	43da      	mvns	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e00b      	b.n	8006056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	43da      	mvns	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4013      	ands	r3, r2
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d18d      	bne.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006070:	e02d      	b.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f878 	bl	8006168 <I2C_IsAcknowledgeFailed>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e02d      	b.n	80060de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d021      	beq.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608a:	f7fe f96d 	bl	8004368 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d302      	bcc.n	80060a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d116      	bne.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e007      	b.n	80060de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d1ca      	bne.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060f2:	e02d      	b.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f837 	bl	8006168 <I2C_IsAcknowledgeFailed>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e02d      	b.n	8006160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d021      	beq.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610c:	f7fe f92c 	bl	8004368 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d302      	bcc.n	8006122 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d116      	bne.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f043 0220 	orr.w	r2, r3, #32
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e007      	b.n	8006160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b04      	cmp	r3, #4
 800615c:	d1ca      	bne.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d11b      	bne.n	80061b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006188:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f043 0204 	orr.w	r2, r3, #4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0cc      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061dc:	4b68      	ldr	r3, [pc, #416]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d90c      	bls.n	8006204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b65      	ldr	r3, [pc, #404]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b63      	ldr	r3, [pc, #396]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0b8      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d020      	beq.n	8006252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800621c:	4b59      	ldr	r3, [pc, #356]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a58      	ldr	r2, [pc, #352]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006234:	4b53      	ldr	r3, [pc, #332]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a52      	ldr	r2, [pc, #328]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800623e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006240:	4b50      	ldr	r3, [pc, #320]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	494d      	ldr	r1, [pc, #308]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d044      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d107      	bne.n	8006276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	4b47      	ldr	r3, [pc, #284]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d119      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e07f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d003      	beq.n	8006286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006282:	2b03      	cmp	r3, #3
 8006284:	d107      	bne.n	8006296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006286:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e06f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006296:	4b3b      	ldr	r3, [pc, #236]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e067      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f023 0203 	bic.w	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4934      	ldr	r1, [pc, #208]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b8:	f7fe f856 	bl	8004368 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	e00a      	b.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c0:	f7fe f852 	bl	8004368 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e04f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 020c 	and.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1eb      	bne.n	80062c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d20c      	bcs.n	8006310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f6:	4b22      	ldr	r3, [pc, #136]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b20      	ldr	r3, [pc, #128]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e032      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800631c:	4b19      	ldr	r3, [pc, #100]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4916      	ldr	r1, [pc, #88]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	490e      	ldr	r1, [pc, #56]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	4313      	orrs	r3, r2
 800634c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800634e:	f000 f887 	bl	8006460 <HAL_RCC_GetSysClockFreq>
 8006352:	4602      	mov	r2, r0
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	490a      	ldr	r1, [pc, #40]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 8006360:	5ccb      	ldrb	r3, [r1, r3]
 8006362:	fa22 f303 	lsr.w	r3, r2, r3
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCC_ClockConfig+0x1c8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fc ffd0 	bl	8003314 <HAL_InitTick>

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40023c00 	.word	0x40023c00
 8006384:	40023800 	.word	0x40023800
 8006388:	08011ad8 	.word	0x08011ad8
 800638c:	20000014 	.word	0x20000014
 8006390:	20000028 	.word	0x20000028

08006394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000014 	.word	0x20000014

080063ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063b0:	f7ff fff0 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	0a9b      	lsrs	r3, r3, #10
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4903      	ldr	r1, [pc, #12]	; (80063d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	08011ae8 	.word	0x08011ae8

080063d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063d8:	f7ff ffdc 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	0b5b      	lsrs	r3, r3, #13
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4903      	ldr	r1, [pc, #12]	; (80063f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40023800 	.word	0x40023800
 80063f8:	08011ae8 	.word	0x08011ae8

080063fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	220f      	movs	r2, #15
 800640a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0203 	and.w	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <HAL_RCC_GetClockConfig+0x5c>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <HAL_RCC_GetClockConfig+0x5c>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006430:	4b09      	ldr	r3, [pc, #36]	; (8006458 <HAL_RCC_GetClockConfig+0x5c>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	08db      	lsrs	r3, r3, #3
 8006436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <HAL_RCC_GetClockConfig+0x60>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 020f 	and.w	r2, r3, #15
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	601a      	str	r2, [r3, #0]
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800
 800645c:	40023c00 	.word	0x40023c00

08006460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006464:	b0ae      	sub	sp, #184	; 0xb8
 8006466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006486:	4bcb      	ldr	r3, [pc, #812]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b0c      	cmp	r3, #12
 8006490:	f200 8206 	bhi.w	80068a0 <HAL_RCC_GetSysClockFreq+0x440>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080068a1 	.word	0x080068a1
 80064a4:	080068a1 	.word	0x080068a1
 80064a8:	080068a1 	.word	0x080068a1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	080068a1 	.word	0x080068a1
 80064b4:	080068a1 	.word	0x080068a1
 80064b8:	080068a1 	.word	0x080068a1
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080068a1 	.word	0x080068a1
 80064c4:	080068a1 	.word	0x080068a1
 80064c8:	080068a1 	.word	0x080068a1
 80064cc:	080066d1 	.word	0x080066d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d0:	4bb9      	ldr	r3, [pc, #740]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80064d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80064d6:	e1e7      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d8:	4bb8      	ldr	r3, [pc, #736]	; (80067bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80064da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064de:	e1e3      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e0:	4bb4      	ldr	r3, [pc, #720]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ec:	4bb1      	ldr	r3, [pc, #708]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d071      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f8:	4bae      	ldr	r3, [pc, #696]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	099b      	lsrs	r3, r3, #6
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006504:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800650c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800651a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	0159      	lsls	r1, r3, #5
 800652c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006530:	0150      	lsls	r0, r2, #5
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4621      	mov	r1, r4
 8006538:	1a51      	subs	r1, r2, r1
 800653a:	6439      	str	r1, [r7, #64]	; 0x40
 800653c:	4629      	mov	r1, r5
 800653e:	eb63 0301 	sbc.w	r3, r3, r1
 8006542:	647b      	str	r3, [r7, #68]	; 0x44
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006550:	4649      	mov	r1, r9
 8006552:	018b      	lsls	r3, r1, #6
 8006554:	4641      	mov	r1, r8
 8006556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800655a:	4641      	mov	r1, r8
 800655c:	018a      	lsls	r2, r1, #6
 800655e:	4641      	mov	r1, r8
 8006560:	1a51      	subs	r1, r2, r1
 8006562:	63b9      	str	r1, [r7, #56]	; 0x38
 8006564:	4649      	mov	r1, r9
 8006566:	eb63 0301 	sbc.w	r3, r3, r1
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006578:	4649      	mov	r1, r9
 800657a:	00cb      	lsls	r3, r1, #3
 800657c:	4641      	mov	r1, r8
 800657e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006582:	4641      	mov	r1, r8
 8006584:	00ca      	lsls	r2, r1, #3
 8006586:	4610      	mov	r0, r2
 8006588:	4619      	mov	r1, r3
 800658a:	4603      	mov	r3, r0
 800658c:	4622      	mov	r2, r4
 800658e:	189b      	adds	r3, r3, r2
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	462b      	mov	r3, r5
 8006594:	460a      	mov	r2, r1
 8006596:	eb42 0303 	adc.w	r3, r2, r3
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065a8:	4629      	mov	r1, r5
 80065aa:	024b      	lsls	r3, r1, #9
 80065ac:	4621      	mov	r1, r4
 80065ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065b2:	4621      	mov	r1, r4
 80065b4:	024a      	lsls	r2, r1, #9
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80065cc:	f7fa fb1c 	bl	8000c08 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065da:	e067      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065dc:	4b75      	ldr	r3, [pc, #468]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	099b      	lsrs	r3, r3, #6
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80065ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065f6:	2300      	movs	r3, #0
 80065f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f04f 0100 	mov.w	r1, #0
 800660a:	0159      	lsls	r1, r3, #5
 800660c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006610:	0150      	lsls	r0, r2, #5
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4621      	mov	r1, r4
 8006618:	1a51      	subs	r1, r2, r1
 800661a:	62b9      	str	r1, [r7, #40]	; 0x28
 800661c:	4629      	mov	r1, r5
 800661e:	eb63 0301 	sbc.w	r3, r3, r1
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006630:	4649      	mov	r1, r9
 8006632:	018b      	lsls	r3, r1, #6
 8006634:	4641      	mov	r1, r8
 8006636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800663a:	4641      	mov	r1, r8
 800663c:	018a      	lsls	r2, r1, #6
 800663e:	4641      	mov	r1, r8
 8006640:	ebb2 0a01 	subs.w	sl, r2, r1
 8006644:	4649      	mov	r1, r9
 8006646:	eb63 0b01 	sbc.w	fp, r3, r1
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800665a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800665e:	4692      	mov	sl, r2
 8006660:	469b      	mov	fp, r3
 8006662:	4623      	mov	r3, r4
 8006664:	eb1a 0303 	adds.w	r3, sl, r3
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	462b      	mov	r3, r5
 800666c:	eb4b 0303 	adc.w	r3, fp, r3
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800667e:	4629      	mov	r1, r5
 8006680:	028b      	lsls	r3, r1, #10
 8006682:	4621      	mov	r1, r4
 8006684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006688:	4621      	mov	r1, r4
 800668a:	028a      	lsls	r2, r1, #10
 800668c:	4610      	mov	r0, r2
 800668e:	4619      	mov	r1, r3
 8006690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006694:	2200      	movs	r2, #0
 8006696:	673b      	str	r3, [r7, #112]	; 0x70
 8006698:	677a      	str	r2, [r7, #116]	; 0x74
 800669a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800669e:	f7fa fab3 	bl	8000c08 <__aeabi_uldivmod>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4613      	mov	r3, r2
 80066a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066ac:	4b41      	ldr	r3, [pc, #260]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	3301      	adds	r3, #1
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80066be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066ce:	e0eb      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d0:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066dc:	4b35      	ldr	r3, [pc, #212]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d06b      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e8:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	099b      	lsrs	r3, r3, #6
 80066ee:	2200      	movs	r2, #0
 80066f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fa:	663b      	str	r3, [r7, #96]	; 0x60
 80066fc:	2300      	movs	r3, #0
 80066fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006704:	4622      	mov	r2, r4
 8006706:	462b      	mov	r3, r5
 8006708:	f04f 0000 	mov.w	r0, #0
 800670c:	f04f 0100 	mov.w	r1, #0
 8006710:	0159      	lsls	r1, r3, #5
 8006712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006716:	0150      	lsls	r0, r2, #5
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4621      	mov	r1, r4
 800671e:	1a51      	subs	r1, r2, r1
 8006720:	61b9      	str	r1, [r7, #24]
 8006722:	4629      	mov	r1, r5
 8006724:	eb63 0301 	sbc.w	r3, r3, r1
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006736:	4659      	mov	r1, fp
 8006738:	018b      	lsls	r3, r1, #6
 800673a:	4651      	mov	r1, sl
 800673c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006740:	4651      	mov	r1, sl
 8006742:	018a      	lsls	r2, r1, #6
 8006744:	4651      	mov	r1, sl
 8006746:	ebb2 0801 	subs.w	r8, r2, r1
 800674a:	4659      	mov	r1, fp
 800674c:	eb63 0901 	sbc.w	r9, r3, r1
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006764:	4690      	mov	r8, r2
 8006766:	4699      	mov	r9, r3
 8006768:	4623      	mov	r3, r4
 800676a:	eb18 0303 	adds.w	r3, r8, r3
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	462b      	mov	r3, r5
 8006772:	eb49 0303 	adc.w	r3, r9, r3
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006784:	4629      	mov	r1, r5
 8006786:	024b      	lsls	r3, r1, #9
 8006788:	4621      	mov	r1, r4
 800678a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800678e:	4621      	mov	r1, r4
 8006790:	024a      	lsls	r2, r1, #9
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679a:	2200      	movs	r2, #0
 800679c:	65bb      	str	r3, [r7, #88]	; 0x58
 800679e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80067a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067a4:	f7fa fa30 	bl	8000c08 <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4613      	mov	r3, r2
 80067ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067b2:	e065      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x420>
 80067b4:	40023800 	.word	0x40023800
 80067b8:	00f42400 	.word	0x00f42400
 80067bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c0:	4b3d      	ldr	r3, [pc, #244]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	099b      	lsrs	r3, r3, #6
 80067c6:	2200      	movs	r2, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	4611      	mov	r1, r2
 80067cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067d0:	653b      	str	r3, [r7, #80]	; 0x50
 80067d2:	2300      	movs	r3, #0
 80067d4:	657b      	str	r3, [r7, #84]	; 0x54
 80067d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	f04f 0000 	mov.w	r0, #0
 80067e2:	f04f 0100 	mov.w	r1, #0
 80067e6:	0159      	lsls	r1, r3, #5
 80067e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ec:	0150      	lsls	r0, r2, #5
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4641      	mov	r1, r8
 80067f4:	1a51      	subs	r1, r2, r1
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	4649      	mov	r1, r9
 80067fa:	eb63 0301 	sbc.w	r3, r3, r1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800680c:	4659      	mov	r1, fp
 800680e:	018b      	lsls	r3, r1, #6
 8006810:	4651      	mov	r1, sl
 8006812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006816:	4651      	mov	r1, sl
 8006818:	018a      	lsls	r2, r1, #6
 800681a:	4651      	mov	r1, sl
 800681c:	1a54      	subs	r4, r2, r1
 800681e:	4659      	mov	r1, fp
 8006820:	eb63 0501 	sbc.w	r5, r3, r1
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	00eb      	lsls	r3, r5, #3
 800682e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006832:	00e2      	lsls	r2, r4, #3
 8006834:	4614      	mov	r4, r2
 8006836:	461d      	mov	r5, r3
 8006838:	4643      	mov	r3, r8
 800683a:	18e3      	adds	r3, r4, r3
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	464b      	mov	r3, r9
 8006840:	eb45 0303 	adc.w	r3, r5, r3
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006852:	4629      	mov	r1, r5
 8006854:	028b      	lsls	r3, r1, #10
 8006856:	4621      	mov	r1, r4
 8006858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800685c:	4621      	mov	r1, r4
 800685e:	028a      	lsls	r2, r1, #10
 8006860:	4610      	mov	r0, r2
 8006862:	4619      	mov	r1, r3
 8006864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006868:	2200      	movs	r2, #0
 800686a:	64bb      	str	r3, [r7, #72]	; 0x48
 800686c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800686e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006872:	f7fa f9c9 	bl	8000c08 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4613      	mov	r3, r2
 800687c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	0f1b      	lsrs	r3, r3, #28
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800688e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800689e:	e003      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80068a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80068a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	37b8      	adds	r7, #184	; 0xb8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e28d      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 8083 	beq.w	80069e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068e0:	4b94      	ldr	r3, [pc, #592]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d019      	beq.n	8006920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068ec:	4b91      	ldr	r3, [pc, #580]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d106      	bne.n	8006906 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068f8:	4b8e      	ldr	r3, [pc, #568]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4b8b      	ldr	r3, [pc, #556]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006912:	4b88      	ldr	r3, [pc, #544]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b84      	ldr	r3, [pc, #528]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x124>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d157      	bne.n	80069e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e25a      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x90>
 8006942:	4b7c      	ldr	r3, [pc, #496]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7b      	ldr	r2, [pc, #492]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xcc>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0xb4>
 800695a:	4b76      	ldr	r3, [pc, #472]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a75      	ldr	r2, [pc, #468]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b73      	ldr	r3, [pc, #460]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a72      	ldr	r2, [pc, #456]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xcc>
 8006974:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a6e      	ldr	r2, [pc, #440]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a6b      	ldr	r2, [pc, #428]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fd fce8 	bl	8004368 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd fce4 	bl	8004368 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e21f      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xdc>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fd fcd4 	bl	8004368 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fd fcd0 	bl	8004368 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e20b      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b57      	ldr	r3, [pc, #348]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x104>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d06f      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069f2:	4b50      	ldr	r3, [pc, #320]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d017      	beq.n	8006a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069fe:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d105      	bne.n	8006a16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a0a:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a1e:	2b0c      	cmp	r3, #12
 8006a20:	d11c      	bne.n	8006a5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a22:	4b44      	ldr	r3, [pc, #272]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d116      	bne.n	8006a5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2e:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_RCC_OscConfig+0x186>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d001      	beq.n	8006a46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e1d3      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a46:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a5a:	e03a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d020      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a64:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <HAL_RCC_OscConfig+0x278>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6a:	f7fd fc7d 	bl	8004368 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a72:	f7fd fc79 	bl	8004368 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e1b4      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a84:	4b2b      	ldr	r3, [pc, #172]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4925      	ldr	r1, [pc, #148]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]
 8006aa4:	e015      	b.n	8006ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa6:	4b24      	ldr	r3, [pc, #144]	; (8006b38 <HAL_RCC_OscConfig+0x278>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd fc5c 	bl	8004368 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab4:	f7fd fc58 	bl	8004368 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e193      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d036      	beq.n	8006b4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <HAL_RCC_OscConfig+0x27c>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fd fc3c 	bl	8004368 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006af4:	f7fd fc38 	bl	8004368 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e173      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_OscConfig+0x274>)
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x234>
 8006b12:	e01b      	b.n	8006b4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <HAL_RCC_OscConfig+0x27c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1a:	f7fd fc25 	bl	8004368 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b20:	e00e      	b.n	8006b40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b22:	f7fd fc21 	bl	8004368 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d907      	bls.n	8006b40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e15c      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
 8006b34:	40023800 	.word	0x40023800
 8006b38:	42470000 	.word	0x42470000
 8006b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b40:	4b8a      	ldr	r3, [pc, #552]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ea      	bne.n	8006b22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8097 	beq.w	8006c88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5e:	4b83      	ldr	r3, [pc, #524]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	4b7f      	ldr	r3, [pc, #508]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4a7e      	ldr	r2, [pc, #504]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	; 0x40
 8006b7a:	4b7c      	ldr	r3, [pc, #496]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8a:	4b79      	ldr	r3, [pc, #484]	; (8006d70 <HAL_RCC_OscConfig+0x4b0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d118      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b96:	4b76      	ldr	r3, [pc, #472]	; (8006d70 <HAL_RCC_OscConfig+0x4b0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a75      	ldr	r2, [pc, #468]	; (8006d70 <HAL_RCC_OscConfig+0x4b0>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba2:	f7fd fbe1 	bl	8004368 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fd fbdd 	bl	8004368 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e118      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bbc:	4b6c      	ldr	r3, [pc, #432]	; (8006d70 <HAL_RCC_OscConfig+0x4b0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x31e>
 8006bd0:	4b66      	ldr	r3, [pc, #408]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	4a65      	ldr	r2, [pc, #404]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	6713      	str	r3, [r2, #112]	; 0x70
 8006bdc:	e01c      	b.n	8006c18 <HAL_RCC_OscConfig+0x358>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x340>
 8006be6:	4b61      	ldr	r3, [pc, #388]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	4a60      	ldr	r2, [pc, #384]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006bec:	f043 0304 	orr.w	r3, r3, #4
 8006bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf2:	4b5e      	ldr	r3, [pc, #376]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4a5d      	ldr	r2, [pc, #372]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfe:	e00b      	b.n	8006c18 <HAL_RCC_OscConfig+0x358>
 8006c00:	4b5a      	ldr	r3, [pc, #360]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	4a59      	ldr	r2, [pc, #356]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0c:	4b57      	ldr	r3, [pc, #348]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	4a56      	ldr	r2, [pc, #344]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c12:	f023 0304 	bic.w	r3, r3, #4
 8006c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d015      	beq.n	8006c4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c20:	f7fd fba2 	bl	8004368 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c26:	e00a      	b.n	8006c3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c28:	f7fd fb9e 	bl	8004368 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e0d7      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3e:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0ee      	beq.n	8006c28 <HAL_RCC_OscConfig+0x368>
 8006c4a:	e014      	b.n	8006c76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7fd fb8c 	bl	8004368 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c54:	f7fd fb88 	bl	8004368 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e0c1      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6a:	4b40      	ldr	r3, [pc, #256]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1ee      	bne.n	8006c54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d105      	bne.n	8006c88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7c:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	4a3a      	ldr	r2, [pc, #232]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80ad 	beq.w	8006dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c92:	4b36      	ldr	r3, [pc, #216]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d060      	beq.n	8006d60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d145      	bne.n	8006d32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ca6:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <HAL_RCC_OscConfig+0x4b4>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cac:	f7fd fb5c 	bl	8004368 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb4:	f7fd fb58 	bl	8004368 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e093      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc6:	4b29      	ldr	r3, [pc, #164]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69da      	ldr	r2, [r3, #28]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	019b      	lsls	r3, r3, #6
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	3b01      	subs	r3, #1
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	061b      	lsls	r3, r3, #24
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	071b      	lsls	r3, r3, #28
 8006cfe:	491b      	ldr	r1, [pc, #108]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <HAL_RCC_OscConfig+0x4b4>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0a:	f7fd fb2d 	bl	8004368 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d12:	f7fd fb29 	bl	8004368 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e064      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x452>
 8006d30:	e05c      	b.n	8006dec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_RCC_OscConfig+0x4b4>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d38:	f7fd fb16 	bl	8004368 <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3e:	e008      	b.n	8006d52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d40:	f7fd fb12 	bl	8004368 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e04d      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_OscConfig+0x4ac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f0      	bne.n	8006d40 <HAL_RCC_OscConfig+0x480>
 8006d5e:	e045      	b.n	8006dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d107      	bne.n	8006d78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e040      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40007000 	.word	0x40007000
 8006d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d78:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <HAL_RCC_OscConfig+0x538>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d030      	beq.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d129      	bne.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d122      	bne.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006da8:	4013      	ands	r3, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d119      	bne.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d10f      	bne.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d001      	beq.n	8006dec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800

08006dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e07b      	b.n	8006f06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1e:	d009      	beq.n	8006e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	61da      	str	r2, [r3, #28]
 8006e26:	e005      	b.n	8006e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc f9bc 	bl	80031cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb8:	ea42 0103 	orr.w	r1, r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	f003 0104 	and.w	r1, r3, #4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	f003 0210 	and.w	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b088      	sub	sp, #32
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_SPI_Transmit+0x22>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e126      	b.n	800717e <HAL_SPI_Transmit+0x270>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f38:	f7fd fa16 	bl	8004368 <HAL_GetTick>
 8006f3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d002      	beq.n	8006f54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f52:	e10b      	b.n	800716c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_Transmit+0x52>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f64:	e102      	b.n	800716c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fac:	d10f      	bne.n	8006fce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d007      	beq.n	8006fec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff4:	d14b      	bne.n	800708e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_SPI_Transmit+0xf6>
 8006ffe:	8afb      	ldrh	r3, [r7, #22]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d13e      	bne.n	8007082 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	881a      	ldrh	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007028:	e02b      	b.n	8007082 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d112      	bne.n	800705e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	86da      	strh	r2, [r3, #54]	; 0x36
 800705c:	e011      	b.n	8007082 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705e:	f7fd f983 	bl	8004368 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d803      	bhi.n	8007076 <HAL_SPI_Transmit+0x168>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d102      	bne.n	800707c <HAL_SPI_Transmit+0x16e>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007080:	e074      	b.n	800716c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1ce      	bne.n	800702a <HAL_SPI_Transmit+0x11c>
 800708c:	e04c      	b.n	8007128 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_SPI_Transmit+0x18e>
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d140      	bne.n	800711e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070c2:	e02c      	b.n	800711e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d113      	bne.n	80070fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80070f8:	e011      	b.n	800711e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070fa:	f7fd f935 	bl	8004368 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d803      	bhi.n	8007112 <HAL_SPI_Transmit+0x204>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d102      	bne.n	8007118 <HAL_SPI_Transmit+0x20a>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800711c:	e026      	b.n	800716c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1cd      	bne.n	80070c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fa63 	bl	80075f8 <SPI_EndRxTxTransaction>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e000      	b.n	800716c <HAL_SPI_Transmit+0x25e>
  }

error:
 800716a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800717c:	7ffb      	ldrb	r3, [r7, #31]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b08c      	sub	sp, #48	; 0x30
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007194:	2301      	movs	r3, #1
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x26>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e18a      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x33c>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b4:	f7fd f8d8 	bl	8004368 <HAL_GetTick>
 80071b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d00f      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x70>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071dc:	d107      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x68>
 80071e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d003      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
 80071f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071f4:	e15b      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x82>
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800720e:	e14e      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b04      	cmp	r3, #4
 800721a:	d003      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2205      	movs	r2, #5
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	887a      	ldrh	r2, [r7, #2]
 8007246:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	887a      	ldrh	r2, [r7, #2]
 800724c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d007      	beq.n	8007278 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007280:	d178      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x10a>
 800728a:	8b7b      	ldrh	r3, [r7, #26]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d166      	bne.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	1c9a      	adds	r2, r3, #2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b4:	e053      	b.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d11b      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x176>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x176>
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d113      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d119      	bne.n	800733e <HAL_SPI_TransmitReceive+0x1b8>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d014      	beq.n	800733e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	b292      	uxth	r2, r2
 8007320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800733a:	2301      	movs	r3, #1
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800733e:	f7fd f813 	bl	8004368 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734a:	429a      	cmp	r2, r3
 800734c:	d807      	bhi.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d003      	beq.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800735c:	e0a7      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1a6      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x130>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1a1      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x130>
 8007372:	e07c      	b.n	800746e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x1fc>
 800737c:	8b7b      	ldrh	r3, [r7, #26]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d16b      	bne.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a8:	e057      	b.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d11c      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d114      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	7812      	ldrb	r2, [r2, #0]
 80073d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d119      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x2ae>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007430:	2301      	movs	r3, #1
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007434:	f7fc ff98 	bl	8004368 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007440:	429a      	cmp	r2, r3
 8007442:	d803      	bhi.n	800744c <HAL_SPI_TransmitReceive+0x2c6>
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d102      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x2cc>
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007458:	e029      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1a2      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x224>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d19d      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800746e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f8c0 	bl	80075f8 <SPI_EndRxTxTransaction>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800748a:	e010      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	e000      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80074ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d8:	b2db      	uxtb	r3, r3
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074f8:	f7fc ff36 	bl	8004368 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	4413      	add	r3, r2
 8007506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007508:	f7fc ff2e 	bl	8004368 <HAL_GetTick>
 800750c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800750e:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	015b      	lsls	r3, r3, #5
 8007514:	0d1b      	lsrs	r3, r3, #20
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	fb02 f303 	mul.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800751e:	e054      	b.n	80075ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d050      	beq.n	80075ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007528:	f7fc ff1e 	bl	8004368 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	429a      	cmp	r2, r3
 8007536:	d902      	bls.n	800753e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d13d      	bne.n	80075ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800754c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007556:	d111      	bne.n	800757c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007560:	d004      	beq.n	800756c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d107      	bne.n	800757c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d10f      	bne.n	80075a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e017      	b.n	80075ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4013      	ands	r3, r2
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	bf0c      	ite	eq
 80075da:	2301      	moveq	r3, #1
 80075dc:	2300      	movne	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d19b      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000014 	.word	0x20000014

080075f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007604:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <SPI_EndRxTxTransaction+0x7c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1b      	ldr	r2, [pc, #108]	; (8007678 <SPI_EndRxTxTransaction+0x80>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	0d5b      	lsrs	r3, r3, #21
 8007610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007614:	fb02 f303 	mul.w	r3, r2, r3
 8007618:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007622:	d112      	bne.n	800764a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff ff5a 	bl	80074e8 <SPI_WaitFlagStateUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e00f      	b.n	800766a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	3b01      	subs	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	2b80      	cmp	r3, #128	; 0x80
 8007662:	d0f2      	beq.n	800764a <SPI_EndRxTxTransaction+0x52>
 8007664:	e000      	b.n	8007668 <SPI_EndRxTxTransaction+0x70>
        break;
 8007666:	bf00      	nop
  }

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000014 	.word	0x20000014
 8007678:	165e9f81 	.word	0x165e9f81

0800767c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e041      	b.n	8007712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fc f930 	bl	8003908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f000 fc42 	bl	8007f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d001      	beq.n	8007734 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e046      	b.n	80077c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a23      	ldr	r2, [pc, #140]	; (80077d0 <HAL_TIM_Base_Start+0xb4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d022      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d01d      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <HAL_TIM_Base_Start+0xb8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <HAL_TIM_Base_Start+0xbc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <HAL_TIM_Base_Start+0xc0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <HAL_TIM_Base_Start+0xc4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <HAL_TIM_Base_Start+0xc8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIM_Base_Start+0x70>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <HAL_TIM_Base_Start+0xcc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d111      	bne.n	80077b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d010      	beq.n	80077c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ae:	e007      	b.n	80077c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40010400 	.word	0x40010400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40001800 	.word	0x40001800

080077ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80077fe:	4013      	ands	r3, r2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10f      	bne.n	8007824 <HAL_TIM_Base_Stop+0x38>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	f240 4344 	movw	r3, #1092	; 0x444
 800780e:	4013      	ands	r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <HAL_TIM_Base_Stop+0x38>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d001      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e04e      	b.n	80078f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a23      	ldr	r2, [pc, #140]	; (8007900 <HAL_TIM_Base_Start_IT+0xc4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d022      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d01d      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <HAL_TIM_Base_Start_IT+0xc8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d018      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <HAL_TIM_Base_Start_IT+0xcc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1c      	ldr	r2, [pc, #112]	; (800790c <HAL_TIM_Base_Start_IT+0xd0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00e      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <HAL_TIM_Base_Start_IT+0xd4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d009      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <HAL_TIM_Base_Start_IT+0xd8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x80>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <HAL_TIM_Base_Start_IT+0xdc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d111      	bne.n	80078e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b06      	cmp	r3, #6
 80078cc:	d010      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0201 	orr.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078de:	e007      	b.n	80078f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40010000 	.word	0x40010000
 8007904:	40000400 	.word	0x40000400
 8007908:	40000800 	.word	0x40000800
 800790c:	40000c00 	.word	0x40000c00
 8007910:	40010400 	.word	0x40010400
 8007914:	40014000 	.word	0x40014000
 8007918:	40001800 	.word	0x40001800

0800791c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e041      	b.n	80079b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f839 	bl	80079ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 faf2 	bl	8007f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d122      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d11b      	bne.n	8007a2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0202 	mvn.w	r2, #2
 80079fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa78 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007a16:	e005      	b.n	8007a24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fa6a 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa7b 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d122      	bne.n	8007a7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d11b      	bne.n	8007a7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f06f 0204 	mvn.w	r2, #4
 8007a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa4e 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007a6a:	e005      	b.n	8007a78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fa40 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa51 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d122      	bne.n	8007ad2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d11b      	bne.n	8007ad2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f06f 0208 	mvn.w	r2, #8
 8007aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa24 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007abe:	e005      	b.n	8007acc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa16 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa27 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d122      	bne.n	8007b26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d11b      	bne.n	8007b26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f06f 0210 	mvn.w	r2, #16
 8007af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2208      	movs	r2, #8
 8007afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9fa 	bl	8007f06 <HAL_TIM_IC_CaptureCallback>
 8007b12:	e005      	b.n	8007b20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9ec 	bl	8007ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9fd 	bl	8007f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d10e      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d107      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f06f 0201 	mvn.w	r2, #1
 8007b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fb f871 	bl	8002c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d10e      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d107      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fda5 	bl	80086c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d10e      	bne.n	8007baa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d107      	bne.n	8007baa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9c2 	bl	8007f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d10e      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d107      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f06f 0220 	mvn.w	r2, #32
 8007bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fd6f 	bl	80086b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e0ae      	b.n	8007d5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	f200 809f 	bhi.w	8007d4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c49 	.word	0x08007c49
 8007c18:	08007d4d 	.word	0x08007d4d
 8007c1c:	08007d4d 	.word	0x08007d4d
 8007c20:	08007d4d 	.word	0x08007d4d
 8007c24:	08007c89 	.word	0x08007c89
 8007c28:	08007d4d 	.word	0x08007d4d
 8007c2c:	08007d4d 	.word	0x08007d4d
 8007c30:	08007d4d 	.word	0x08007d4d
 8007c34:	08007ccb 	.word	0x08007ccb
 8007c38:	08007d4d 	.word	0x08007d4d
 8007c3c:	08007d4d 	.word	0x08007d4d
 8007c40:	08007d4d 	.word	0x08007d4d
 8007c44:	08007d0b 	.word	0x08007d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa18 	bl	8008084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0208 	orr.w	r2, r2, #8
 8007c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0204 	bic.w	r2, r2, #4
 8007c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6999      	ldr	r1, [r3, #24]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	619a      	str	r2, [r3, #24]
      break;
 8007c86:	e064      	b.n	8007d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fa68 	bl	8008164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699a      	ldr	r2, [r3, #24]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6999      	ldr	r1, [r3, #24]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	619a      	str	r2, [r3, #24]
      break;
 8007cc8:	e043      	b.n	8007d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fabd 	bl	8008250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0204 	bic.w	r2, r2, #4
 8007cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69d9      	ldr	r1, [r3, #28]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	61da      	str	r2, [r3, #28]
      break;
 8007d08:	e023      	b.n	8007d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fb11 	bl	8008338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69d9      	ldr	r1, [r3, #28]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	021a      	lsls	r2, r3, #8
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	61da      	str	r2, [r3, #28]
      break;
 8007d4a:	e002      	b.n	8007d52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_TIM_ConfigClockSource+0x1c>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e0b4      	b.n	8007eea <HAL_TIM_ConfigClockSource+0x186>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db8:	d03e      	beq.n	8007e38 <HAL_TIM_ConfigClockSource+0xd4>
 8007dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbe:	f200 8087 	bhi.w	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc6:	f000 8086 	beq.w	8007ed6 <HAL_TIM_ConfigClockSource+0x172>
 8007dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dce:	d87f      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b70      	cmp	r3, #112	; 0x70
 8007dd2:	d01a      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0xa6>
 8007dd4:	2b70      	cmp	r3, #112	; 0x70
 8007dd6:	d87b      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b60      	cmp	r3, #96	; 0x60
 8007dda:	d050      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x11a>
 8007ddc:	2b60      	cmp	r3, #96	; 0x60
 8007dde:	d877      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b50      	cmp	r3, #80	; 0x50
 8007de2:	d03c      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0xfa>
 8007de4:	2b50      	cmp	r3, #80	; 0x50
 8007de6:	d873      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d058      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x13a>
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d86f      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d064      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d86b      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d060      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d867      	bhi.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d05c      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d05a      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x15a>
 8007e08:	e062      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6899      	ldr	r1, [r3, #8]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f000 fb5d 	bl	80084d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	609a      	str	r2, [r3, #8]
      break;
 8007e36:	e04f      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	6899      	ldr	r1, [r3, #8]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f000 fb46 	bl	80084d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e5a:	609a      	str	r2, [r3, #8]
      break;
 8007e5c:	e03c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 faba 	bl	80083e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2150      	movs	r1, #80	; 0x50
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fb13 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e02c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 fad9 	bl	8008442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2160      	movs	r1, #96	; 0x60
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fb03 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e01c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6859      	ldr	r1, [r3, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f000 fa9a 	bl	80083e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2140      	movs	r1, #64	; 0x40
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 faf3 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007ebc:	e00c      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f000 faea 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007ece:	e003      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed4:	e000      	b.n	8007ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a40      	ldr	r2, [pc, #256]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d013      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f62:	d00f      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a3d      	ldr	r2, [pc, #244]	; (800805c <TIM_Base_SetConfig+0x118>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3c      	ldr	r2, [pc, #240]	; (8008060 <TIM_Base_SetConfig+0x11c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3b      	ldr	r2, [pc, #236]	; (8008064 <TIM_Base_SetConfig+0x120>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3a      	ldr	r2, [pc, #232]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2f      	ldr	r2, [pc, #188]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d02b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa4:	d027      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2c      	ldr	r2, [pc, #176]	; (800805c <TIM_Base_SetConfig+0x118>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d023      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2b      	ldr	r2, [pc, #172]	; (8008060 <TIM_Base_SetConfig+0x11c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <TIM_Base_SetConfig+0x120>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a29      	ldr	r2, [pc, #164]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d017      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a28      	ldr	r2, [pc, #160]	; (800806c <TIM_Base_SetConfig+0x128>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a27      	ldr	r2, [pc, #156]	; (8008070 <TIM_Base_SetConfig+0x12c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	; (8008074 <TIM_Base_SetConfig+0x130>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <TIM_Base_SetConfig+0x134>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a24      	ldr	r2, [pc, #144]	; (800807c <TIM_Base_SetConfig+0x138>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a23      	ldr	r2, [pc, #140]	; (8008080 <TIM_Base_SetConfig+0x13c>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <TIM_Base_SetConfig+0x114>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_Base_SetConfig+0xf8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <TIM_Base_SetConfig+0x124>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d103      	bne.n	8008044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	615a      	str	r2, [r3, #20]
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800
 8008078:	40001800 	.word	0x40001800
 800807c:	40001c00 	.word	0x40001c00
 8008080:	40002000 	.word	0x40002000

08008084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f023 0201 	bic.w	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f023 0302 	bic.w	r3, r3, #2
 80080cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a20      	ldr	r2, [pc, #128]	; (800815c <TIM_OC1_SetConfig+0xd8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_OC1_SetConfig+0x64>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <TIM_OC1_SetConfig+0xdc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d10c      	bne.n	8008102 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0308 	bic.w	r3, r3, #8
 80080ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f023 0304 	bic.w	r3, r3, #4
 8008100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a15      	ldr	r2, [pc, #84]	; (800815c <TIM_OC1_SetConfig+0xd8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d003      	beq.n	8008112 <TIM_OC1_SetConfig+0x8e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a14      	ldr	r2, [pc, #80]	; (8008160 <TIM_OC1_SetConfig+0xdc>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d111      	bne.n	8008136 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	621a      	str	r2, [r3, #32]
}
 8008150:	bf00      	nop
 8008152:	371c      	adds	r7, #28
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	40010000 	.word	0x40010000
 8008160:	40010400 	.word	0x40010400

08008164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	f023 0210 	bic.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a22      	ldr	r2, [pc, #136]	; (8008248 <TIM_OC2_SetConfig+0xe4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC2_SetConfig+0x68>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a21      	ldr	r2, [pc, #132]	; (800824c <TIM_OC2_SetConfig+0xe8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d10d      	bne.n	80081e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a17      	ldr	r2, [pc, #92]	; (8008248 <TIM_OC2_SetConfig+0xe4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC2_SetConfig+0x94>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a16      	ldr	r2, [pc, #88]	; (800824c <TIM_OC2_SetConfig+0xe8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d113      	bne.n	8008220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40010000 	.word	0x40010000
 800824c:	40010400 	.word	0x40010400

08008250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <TIM_OC3_SetConfig+0xe0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC3_SetConfig+0x66>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a20      	ldr	r2, [pc, #128]	; (8008334 <TIM_OC3_SetConfig+0xe4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10d      	bne.n	80082d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a16      	ldr	r2, [pc, #88]	; (8008330 <TIM_OC3_SetConfig+0xe0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_OC3_SetConfig+0x92>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a15      	ldr	r2, [pc, #84]	; (8008334 <TIM_OC3_SetConfig+0xe4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d113      	bne.n	800830a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a12      	ldr	r2, [pc, #72]	; (80083dc <TIM_OC4_SetConfig+0xa4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC4_SetConfig+0x68>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a11      	ldr	r2, [pc, #68]	; (80083e0 <TIM_OC4_SetConfig+0xa8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d109      	bne.n	80083b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	019b      	lsls	r3, r3, #6
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40010400 	.word	0x40010400

080083e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f023 0201 	bic.w	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800840e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f023 030a 	bic.w	r3, r3, #10
 8008420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	621a      	str	r2, [r3, #32]
}
 8008436:	bf00      	nop
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008442:	b480      	push	{r7}
 8008444:	b087      	sub	sp, #28
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f023 0210 	bic.w	r2, r3, #16
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800846c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	031b      	lsls	r3, r3, #12
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800847e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	f043 0307 	orr.w	r3, r3, #7
 80084c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	609a      	str	r2, [r3, #8]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	021a      	lsls	r2, r3, #8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4313      	orrs	r3, r2
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	609a      	str	r2, [r3, #8]
}
 800850c:	bf00      	nop
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800852c:	2302      	movs	r3, #2
 800852e:	e05a      	b.n	80085e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857c:	d01d      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1d      	ldr	r2, [pc, #116]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d018      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1a      	ldr	r2, [pc, #104]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00e      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d004      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d10c      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40001800 	.word	0x40001800

08008610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e03d      	b.n	80086a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e03f      	b.n	800876e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fb fd88 	bl	8004218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2224      	movs	r2, #36	; 0x24
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800871e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f929 	bl	8008978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b08a      	sub	sp, #40	; 0x28
 800877a:	af02      	add	r7, sp, #8
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b20      	cmp	r3, #32
 8008794:	d17c      	bne.n	8008890 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <HAL_UART_Transmit+0x2c>
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e075      	b.n	8008892 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Transmit+0x3e>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e06e      	b.n	8008892 <HAL_UART_Transmit+0x11c>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2221      	movs	r2, #33	; 0x21
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ca:	f7fb fdcd 	bl	8004368 <HAL_GetTick>
 80087ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	88fa      	ldrh	r2, [r7, #6]
 80087da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e4:	d108      	bne.n	80087f8 <HAL_UART_Transmit+0x82>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	e003      	b.n	8008800 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008808:	e02a      	b.n	8008860 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f840 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e036      	b.n	8008892 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	3302      	adds	r3, #2
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	e007      	b.n	8008852 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	3301      	adds	r3, #1
 8008850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1cf      	bne.n	800880a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2200      	movs	r2, #0
 8008872:	2140      	movs	r1, #64	; 0x40
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f810 	bl	800889a <UART_WaitOnFlagUntilTimeout>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e006      	b.n	8008892 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b090      	sub	sp, #64	; 0x40
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088aa:	e050      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d04c      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <UART_WaitOnFlagUntilTimeout+0x30>
 80088ba:	f7fb fd55 	bl	8004368 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d241      	bcs.n	800894e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	330c      	adds	r3, #12
 80088d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	330c      	adds	r3, #12
 80088e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088ea:	637a      	str	r2, [r7, #52]	; 0x34
 80088ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e5      	bne.n	80088ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3314      	adds	r3, #20
 8008904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	613b      	str	r3, [r7, #16]
   return(result);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	63bb      	str	r3, [r7, #56]	; 0x38
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800891e:	623a      	str	r2, [r7, #32]
 8008920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	69f9      	ldr	r1, [r7, #28]
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	61bb      	str	r3, [r7, #24]
   return(result);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e5      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e00f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d09f      	beq.n	80088ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3740      	adds	r7, #64	; 0x40
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800897c:	b0c0      	sub	sp, #256	; 0x100
 800897e:	af00      	add	r7, sp, #0
 8008980:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008994:	68d9      	ldr	r1, [r3, #12]
 8008996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	ea40 0301 	orr.w	r3, r0, r1
 80089a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	431a      	orrs	r2, r3
 80089b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	431a      	orrs	r2, r3
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089d0:	f021 010c 	bic.w	r1, r1, #12
 80089d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089de:	430b      	orrs	r3, r1
 80089e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f2:	6999      	ldr	r1, [r3, #24]
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	ea40 0301 	orr.w	r3, r0, r1
 80089fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b8f      	ldr	r3, [pc, #572]	; (8008c44 <UART_SetConfig+0x2cc>)
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d005      	beq.n	8008a18 <UART_SetConfig+0xa0>
 8008a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b8d      	ldr	r3, [pc, #564]	; (8008c48 <UART_SetConfig+0x2d0>)
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d104      	bne.n	8008a22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a18:	f7fd fcdc 	bl	80063d4 <HAL_RCC_GetPCLK2Freq>
 8008a1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a20:	e003      	b.n	8008a2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a22:	f7fd fcc3 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8008a26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a34:	f040 810c 	bne.w	8008c50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	1891      	adds	r1, r2, r2
 8008a50:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a52:	415b      	adcs	r3, r3
 8008a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	eb12 0801 	adds.w	r8, r2, r1
 8008a60:	4629      	mov	r1, r5
 8008a62:	eb43 0901 	adc.w	r9, r3, r1
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	f04f 0300 	mov.w	r3, #0
 8008a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a7a:	4690      	mov	r8, r2
 8008a7c:	4699      	mov	r9, r3
 8008a7e:	4623      	mov	r3, r4
 8008a80:	eb18 0303 	adds.w	r3, r8, r3
 8008a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a88:	462b      	mov	r3, r5
 8008a8a:	eb49 0303 	adc.w	r3, r9, r3
 8008a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008aa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	18db      	adds	r3, r3, r3
 8008aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8008aac:	4613      	mov	r3, r2
 8008aae:	eb42 0303 	adc.w	r3, r2, r3
 8008ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ab8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008abc:	f7f8 f8a4 	bl	8000c08 <__aeabi_uldivmod>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4b61      	ldr	r3, [pc, #388]	; (8008c4c <UART_SetConfig+0x2d4>)
 8008ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	011c      	lsls	r4, r3, #4
 8008ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ad8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008adc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	1891      	adds	r1, r2, r2
 8008ae6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ae8:	415b      	adcs	r3, r3
 8008aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008af0:	4641      	mov	r1, r8
 8008af2:	eb12 0a01 	adds.w	sl, r2, r1
 8008af6:	4649      	mov	r1, r9
 8008af8:	eb43 0b01 	adc.w	fp, r3, r1
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b10:	4692      	mov	sl, r2
 8008b12:	469b      	mov	fp, r3
 8008b14:	4643      	mov	r3, r8
 8008b16:	eb1a 0303 	adds.w	r3, sl, r3
 8008b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	eb4b 0303 	adc.w	r3, fp, r3
 8008b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	18db      	adds	r3, r3, r3
 8008b40:	643b      	str	r3, [r7, #64]	; 0x40
 8008b42:	4613      	mov	r3, r2
 8008b44:	eb42 0303 	adc.w	r3, r2, r3
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b52:	f7f8 f859 	bl	8000c08 <__aeabi_uldivmod>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <UART_SetConfig+0x2d4>)
 8008b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	2264      	movs	r2, #100	; 0x64
 8008b66:	fb02 f303 	mul.w	r3, r2, r3
 8008b6a:	1acb      	subs	r3, r1, r3
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b72:	4b36      	ldr	r3, [pc, #216]	; (8008c4c <UART_SetConfig+0x2d4>)
 8008b74:	fba3 2302 	umull	r2, r3, r3, r2
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b80:	441c      	add	r4, r3
 8008b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b94:	4642      	mov	r2, r8
 8008b96:	464b      	mov	r3, r9
 8008b98:	1891      	adds	r1, r2, r2
 8008b9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b9c:	415b      	adcs	r3, r3
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	1851      	adds	r1, r2, r1
 8008ba8:	6339      	str	r1, [r7, #48]	; 0x30
 8008baa:	4649      	mov	r1, r9
 8008bac:	414b      	adcs	r3, r1
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb0:	f04f 0200 	mov.w	r2, #0
 8008bb4:	f04f 0300 	mov.w	r3, #0
 8008bb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bbc:	4659      	mov	r1, fp
 8008bbe:	00cb      	lsls	r3, r1, #3
 8008bc0:	4651      	mov	r1, sl
 8008bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bc6:	4651      	mov	r1, sl
 8008bc8:	00ca      	lsls	r2, r1, #3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	189b      	adds	r3, r3, r2
 8008bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bd8:	464b      	mov	r3, r9
 8008bda:	460a      	mov	r2, r1
 8008bdc:	eb42 0303 	adc.w	r3, r2, r3
 8008be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	18db      	adds	r3, r3, r3
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bfe:	4613      	mov	r3, r2
 8008c00:	eb42 0303 	adc.w	r3, r2, r3
 8008c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c0e:	f7f7 fffb 	bl	8000c08 <__aeabi_uldivmod>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <UART_SetConfig+0x2d4>)
 8008c18:	fba3 1302 	umull	r1, r3, r3, r2
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	2164      	movs	r1, #100	; 0x64
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	3332      	adds	r3, #50	; 0x32
 8008c2a:	4a08      	ldr	r2, [pc, #32]	; (8008c4c <UART_SetConfig+0x2d4>)
 8008c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	f003 0207 	and.w	r2, r3, #7
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4422      	add	r2, r4
 8008c3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c40:	e106      	b.n	8008e50 <UART_SetConfig+0x4d8>
 8008c42:	bf00      	nop
 8008c44:	40011000 	.word	0x40011000
 8008c48:	40011400 	.word	0x40011400
 8008c4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c62:	4642      	mov	r2, r8
 8008c64:	464b      	mov	r3, r9
 8008c66:	1891      	adds	r1, r2, r2
 8008c68:	6239      	str	r1, [r7, #32]
 8008c6a:	415b      	adcs	r3, r3
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c72:	4641      	mov	r1, r8
 8008c74:	1854      	adds	r4, r2, r1
 8008c76:	4649      	mov	r1, r9
 8008c78:	eb43 0501 	adc.w	r5, r3, r1
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	00eb      	lsls	r3, r5, #3
 8008c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c8a:	00e2      	lsls	r2, r4, #3
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	461d      	mov	r5, r3
 8008c90:	4643      	mov	r3, r8
 8008c92:	18e3      	adds	r3, r4, r3
 8008c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c98:	464b      	mov	r3, r9
 8008c9a:	eb45 0303 	adc.w	r3, r5, r3
 8008c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	008b      	lsls	r3, r1, #2
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cc8:	4621      	mov	r1, r4
 8008cca:	008a      	lsls	r2, r1, #2
 8008ccc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cd0:	f7f7 ff9a 	bl	8000c08 <__aeabi_uldivmod>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4b60      	ldr	r3, [pc, #384]	; (8008e5c <UART_SetConfig+0x4e4>)
 8008cda:	fba3 2302 	umull	r2, r3, r3, r2
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	011c      	lsls	r4, r3, #4
 8008ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	1891      	adds	r1, r2, r2
 8008cfa:	61b9      	str	r1, [r7, #24]
 8008cfc:	415b      	adcs	r3, r3
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d04:	4641      	mov	r1, r8
 8008d06:	1851      	adds	r1, r2, r1
 8008d08:	6139      	str	r1, [r7, #16]
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	414b      	adcs	r3, r1
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	f04f 0300 	mov.w	r3, #0
 8008d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d1c:	4659      	mov	r1, fp
 8008d1e:	00cb      	lsls	r3, r1, #3
 8008d20:	4651      	mov	r1, sl
 8008d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d26:	4651      	mov	r1, sl
 8008d28:	00ca      	lsls	r2, r1, #3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4642      	mov	r2, r8
 8008d32:	189b      	adds	r3, r3, r2
 8008d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d38:	464b      	mov	r3, r9
 8008d3a:	460a      	mov	r2, r1
 8008d3c:	eb42 0303 	adc.w	r3, r2, r3
 8008d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	008b      	lsls	r3, r1, #2
 8008d60:	4641      	mov	r1, r8
 8008d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d66:	4641      	mov	r1, r8
 8008d68:	008a      	lsls	r2, r1, #2
 8008d6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d6e:	f7f7 ff4b 	bl	8000c08 <__aeabi_uldivmod>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	4b38      	ldr	r3, [pc, #224]	; (8008e5c <UART_SetConfig+0x4e4>)
 8008d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	2264      	movs	r2, #100	; 0x64
 8008d82:	fb02 f303 	mul.w	r3, r2, r3
 8008d86:	1acb      	subs	r3, r1, r3
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	3332      	adds	r3, #50	; 0x32
 8008d8c:	4a33      	ldr	r2, [pc, #204]	; (8008e5c <UART_SetConfig+0x4e4>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d98:	441c      	add	r4, r3
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	673b      	str	r3, [r7, #112]	; 0x70
 8008da2:	677a      	str	r2, [r7, #116]	; 0x74
 8008da4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	1891      	adds	r1, r2, r2
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	415b      	adcs	r3, r3
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008db8:	4641      	mov	r1, r8
 8008dba:	1851      	adds	r1, r2, r1
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	414b      	adcs	r3, r1
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	00cb      	lsls	r3, r1, #3
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dda:	4651      	mov	r1, sl
 8008ddc:	00ca      	lsls	r2, r1, #3
 8008dde:	4610      	mov	r0, r2
 8008de0:	4619      	mov	r1, r3
 8008de2:	4603      	mov	r3, r0
 8008de4:	4642      	mov	r2, r8
 8008de6:	189b      	adds	r3, r3, r2
 8008de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dea:	464b      	mov	r3, r9
 8008dec:	460a      	mov	r2, r1
 8008dee:	eb42 0303 	adc.w	r3, r2, r3
 8008df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8008dfe:	667a      	str	r2, [r7, #100]	; 0x64
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	008b      	lsls	r3, r1, #2
 8008e10:	4641      	mov	r1, r8
 8008e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e16:	4641      	mov	r1, r8
 8008e18:	008a      	lsls	r2, r1, #2
 8008e1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e1e:	f7f7 fef3 	bl	8000c08 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <UART_SetConfig+0x4e4>)
 8008e28:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	2164      	movs	r1, #100	; 0x64
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	3332      	adds	r3, #50	; 0x32
 8008e3a:	4a08      	ldr	r2, [pc, #32]	; (8008e5c <UART_SetConfig+0x4e4>)
 8008e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	f003 020f 	and.w	r2, r3, #15
 8008e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4422      	add	r2, r4
 8008e4e:	609a      	str	r2, [r3, #8]
}
 8008e50:	bf00      	nop
 8008e52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e56:	46bd      	mov	sp, r7
 8008e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e5c:	51eb851f 	.word	0x51eb851f

08008e60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <MX_FATFS_Init+0x18>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <MX_FATFS_Init+0x1c>)
 8008e68:	f002 fe84 	bl	800bb74 <FATFS_LinkDriver>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <MX_FATFS_Init+0x20>)
 8008e72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e74:	bf00      	nop
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20006100 	.word	0x20006100
 8008e7c:	20000030 	.word	0x20000030
 8008e80:	200060fc 	.word	0x200060fc

08008e84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008e88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SD_disk_initialize(pdrv));
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7f8 fe8b 	bl	8001bbc <SD_disk_initialize>
 8008ea6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return (SD_disk_status(pdrv));
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f8 ff67 	bl	8001d90 <SD_disk_status>
 8008ec2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (SD_disk_read(pdrv,buff, sector, count));
 8008edc:	7bf8      	ldrb	r0, [r7, #15]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	f7f8 ff6a 	bl	8001dbc <SD_disk_read>
 8008ee8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return (SD_disk_write(pdrv, buff, sector, count));
 8008f02:	7bf8      	ldrb	r0, [r7, #15]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	f7f8 ffc1 	bl	8001e90 <SD_disk_write>
 8008f0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	603a      	str	r2, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
 8008f24:	460b      	mov	r3, r1
 8008f26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return (SD_disk_ioctl(pdrv, cmd, buff));
 8008f28:	79b9      	ldrb	r1, [r7, #6]
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7f9 f832 	bl	8001f98 <SD_disk_ioctl>
 8008f34:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	4a08      	ldr	r2, [pc, #32]	; (8008f70 <disk_status+0x30>)
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	79fa      	ldrb	r2, [r7, #7]
 8008f58:	4905      	ldr	r1, [pc, #20]	; (8008f70 <disk_status+0x30>)
 8008f5a:	440a      	add	r2, r1
 8008f5c:	7a12      	ldrb	r2, [r2, #8]
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4798      	blx	r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	2000612c 	.word	0x2000612c

08008f74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	4a0d      	ldr	r2, [pc, #52]	; (8008fbc <disk_initialize+0x48>)
 8008f86:	5cd3      	ldrb	r3, [r2, r3]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d111      	bne.n	8008fb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	4a0b      	ldr	r2, [pc, #44]	; (8008fbc <disk_initialize+0x48>)
 8008f90:	2101      	movs	r1, #1
 8008f92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <disk_initialize+0x48>)
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	79fa      	ldrb	r2, [r7, #7]
 8008fa2:	4906      	ldr	r1, [pc, #24]	; (8008fbc <disk_initialize+0x48>)
 8008fa4:	440a      	add	r2, r1
 8008fa6:	7a12      	ldrb	r2, [r2, #8]
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000612c 	.word	0x2000612c

08008fc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <disk_read+0x3c>)
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	689c      	ldr	r4, [r3, #8]
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	4a07      	ldr	r2, [pc, #28]	; (8008ffc <disk_read+0x3c>)
 8008fe0:	4413      	add	r3, r2
 8008fe2:	7a18      	ldrb	r0, [r3, #8]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	47a0      	blx	r4
 8008fec:	4603      	mov	r3, r0
 8008fee:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd90      	pop	{r4, r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000612c 	.word	0x2000612c

08009000 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009000:	b590      	push	{r4, r7, lr}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <disk_write+0x3c>)
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68dc      	ldr	r4, [r3, #12]
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4a07      	ldr	r2, [pc, #28]	; (800903c <disk_write+0x3c>)
 8009020:	4413      	add	r3, r2
 8009022:	7a18      	ldrb	r0, [r3, #8]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	47a0      	blx	r4
 800902c:	4603      	mov	r3, r0
 800902e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
}
 8009032:	4618      	mov	r0, r3
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	2000612c 	.word	0x2000612c

08009040 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	603a      	str	r2, [r7, #0]
 800904a:	71fb      	strb	r3, [r7, #7]
 800904c:	460b      	mov	r3, r1
 800904e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	4a09      	ldr	r2, [pc, #36]	; (8009078 <disk_ioctl+0x38>)
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	79fa      	ldrb	r2, [r7, #7]
 800905e:	4906      	ldr	r1, [pc, #24]	; (8009078 <disk_ioctl+0x38>)
 8009060:	440a      	add	r2, r1
 8009062:	7a10      	ldrb	r0, [r2, #8]
 8009064:	79b9      	ldrb	r1, [r7, #6]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]
  return res;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	2000612c 	.word	0x2000612c

0800907c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3301      	adds	r3, #1
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800908c:	89fb      	ldrh	r3, [r7, #14]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	b21a      	sxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b21b      	sxth	r3, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	b21b      	sxth	r3, r3
 800909c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800909e:	89fb      	ldrh	r3, [r7, #14]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3303      	adds	r3, #3
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	021b      	lsls	r3, r3, #8
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	3202      	adds	r2, #2
 80090c4:	7812      	ldrb	r2, [r2, #0]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	3201      	adds	r2, #1
 80090d2:	7812      	ldrb	r2, [r2, #0]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80090e4:	68fb      	ldr	r3, [r7, #12]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	887a      	ldrh	r2, [r7, #2]
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	887b      	ldrh	r3, [r7, #2]
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	887a      	ldrh	r2, [r7, #2]
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	b2d2      	uxtb	r2, r2
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	0a1b      	lsrs	r3, r3, #8
 8009166:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00d      	beq.n	80091b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	1c53      	adds	r3, r2, #1
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	1c59      	adds	r1, r3, #1
 80091a4:	6179      	str	r1, [r7, #20]
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	607b      	str	r3, [r7, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f1      	bne.n	800919a <mem_cpy+0x1a>
	}
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80091c2:	b480      	push	{r7}
 80091c4:	b087      	sub	sp, #28
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	60f8      	str	r0, [r7, #12]
 80091ca:	60b9      	str	r1, [r7, #8]
 80091cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	617a      	str	r2, [r7, #20]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	607b      	str	r3, [r7, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f3      	bne.n	80091d2 <mem_set+0x10>
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	371c      	adds	r7, #28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80091f8:	b480      	push	{r7}
 80091fa:	b089      	sub	sp, #36	; 0x24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	61fa      	str	r2, [r7, #28]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	4619      	mov	r1, r3
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	61ba      	str	r2, [r7, #24]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	1acb      	subs	r3, r1, r3
 8009224:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3b01      	subs	r3, #1
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <mem_cmp+0x40>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0eb      	beq.n	8009210 <mem_cmp+0x18>

	return r;
 8009238:	697b      	ldr	r3, [r7, #20]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3724      	adds	r7, #36	; 0x24
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009250:	e002      	b.n	8009258 <chk_chr+0x12>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3301      	adds	r3, #1
 8009256:	607b      	str	r3, [r7, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <chk_chr+0x26>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	4293      	cmp	r3, r2
 800926a:	d1f2      	bne.n	8009252 <chk_chr+0xc>
	return *str;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	781b      	ldrb	r3, [r3, #0]
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <lock_fs+0x22>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	4618      	mov	r0, r3
 8009290:	f002 fcab 	bl	800bbea <ff_req_grant>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <lock_fs+0x22>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <lock_fs+0x24>
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00d      	beq.n	80092d6 <unlock_fs+0x2e>
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	2b0c      	cmp	r3, #12
 80092be:	d00a      	beq.n	80092d6 <unlock_fs+0x2e>
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2b0b      	cmp	r3, #11
 80092c4:	d007      	beq.n	80092d6 <unlock_fs+0x2e>
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	2b0f      	cmp	r3, #15
 80092ca:	d004      	beq.n	80092d6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f002 fc9f 	bl	800bc14 <ff_rel_grant>
	}
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80092ea:	2300      	movs	r3, #0
 80092ec:	60bb      	str	r3, [r7, #8]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e029      	b.n	8009348 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80092f4:	4a27      	ldr	r2, [pc, #156]	; (8009394 <chk_lock+0xb4>)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	4413      	add	r3, r2
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01d      	beq.n	800933e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009302:	4a24      	ldr	r2, [pc, #144]	; (8009394 <chk_lock+0xb4>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	4413      	add	r3, r2
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d116      	bne.n	8009342 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009314:	4a1f      	ldr	r2, [pc, #124]	; (8009394 <chk_lock+0xb4>)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	011b      	lsls	r3, r3, #4
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009324:	429a      	cmp	r2, r3
 8009326:	d10c      	bne.n	8009342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009328:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <chk_lock+0xb4>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	4413      	add	r3, r2
 8009330:	3308      	adds	r3, #8
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009338:	429a      	cmp	r2, r3
 800933a:	d102      	bne.n	8009342 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800933c:	e007      	b.n	800934e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800933e:	2301      	movs	r3, #1
 8009340:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d9d2      	bls.n	80092f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d109      	bne.n	8009368 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <chk_lock+0x80>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d101      	bne.n	8009364 <chk_lock+0x84>
 8009360:	2300      	movs	r3, #0
 8009362:	e010      	b.n	8009386 <chk_lock+0xa6>
 8009364:	2312      	movs	r3, #18
 8009366:	e00e      	b.n	8009386 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d108      	bne.n	8009380 <chk_lock+0xa0>
 800936e:	4a09      	ldr	r2, [pc, #36]	; (8009394 <chk_lock+0xb4>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	4413      	add	r3, r2
 8009376:	330c      	adds	r3, #12
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937e:	d101      	bne.n	8009384 <chk_lock+0xa4>
 8009380:	2310      	movs	r3, #16
 8009382:	e000      	b.n	8009386 <chk_lock+0xa6>
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	2000610c 	.word	0x2000610c

08009398 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800939e:	2300      	movs	r3, #0
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	e002      	b.n	80093aa <enq_lock+0x12>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3301      	adds	r3, #1
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d806      	bhi.n	80093be <enq_lock+0x26>
 80093b0:	4a09      	ldr	r2, [pc, #36]	; (80093d8 <enq_lock+0x40>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	4413      	add	r3, r2
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f2      	bne.n	80093a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	bf14      	ite	ne
 80093c4:	2301      	movne	r3, #1
 80093c6:	2300      	moveq	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	2000610c 	.word	0x2000610c

080093dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	e01f      	b.n	800942c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80093ec:	4a41      	ldr	r2, [pc, #260]	; (80094f4 <inc_lock+0x118>)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	4413      	add	r3, r2
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d113      	bne.n	8009426 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80093fe:	4a3d      	ldr	r2, [pc, #244]	; (80094f4 <inc_lock+0x118>)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800940e:	429a      	cmp	r2, r3
 8009410:	d109      	bne.n	8009426 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009412:	4a38      	ldr	r2, [pc, #224]	; (80094f4 <inc_lock+0x118>)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	4413      	add	r3, r2
 800941a:	3308      	adds	r3, #8
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009422:	429a      	cmp	r2, r3
 8009424:	d006      	beq.n	8009434 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d9dc      	bls.n	80093ec <inc_lock+0x10>
 8009432:	e000      	b.n	8009436 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009434:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d132      	bne.n	80094a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	e002      	b.n	8009448 <inc_lock+0x6c>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d806      	bhi.n	800945c <inc_lock+0x80>
 800944e:	4a29      	ldr	r2, [pc, #164]	; (80094f4 <inc_lock+0x118>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f2      	bne.n	8009442 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d101      	bne.n	8009466 <inc_lock+0x8a>
 8009462:	2300      	movs	r3, #0
 8009464:	e040      	b.n	80094e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4922      	ldr	r1, [pc, #136]	; (80094f4 <inc_lock+0x118>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	440b      	add	r3, r1
 8009472:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	491e      	ldr	r1, [pc, #120]	; (80094f4 <inc_lock+0x118>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	440b      	add	r3, r1
 8009480:	3304      	adds	r3, #4
 8009482:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695a      	ldr	r2, [r3, #20]
 8009488:	491a      	ldr	r1, [pc, #104]	; (80094f4 <inc_lock+0x118>)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	440b      	add	r3, r1
 8009490:	3308      	adds	r3, #8
 8009492:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009494:	4a17      	ldr	r2, [pc, #92]	; (80094f4 <inc_lock+0x118>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	4413      	add	r3, r2
 800949c:	330c      	adds	r3, #12
 800949e:	2200      	movs	r2, #0
 80094a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d009      	beq.n	80094bc <inc_lock+0xe0>
 80094a8:	4a12      	ldr	r2, [pc, #72]	; (80094f4 <inc_lock+0x118>)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	4413      	add	r3, r2
 80094b0:	330c      	adds	r3, #12
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <inc_lock+0xe0>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e015      	b.n	80094e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d108      	bne.n	80094d4 <inc_lock+0xf8>
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <inc_lock+0x118>)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	4413      	add	r3, r2
 80094ca:	330c      	adds	r3, #12
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	e001      	b.n	80094d8 <inc_lock+0xfc>
 80094d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094d8:	4906      	ldr	r1, [pc, #24]	; (80094f4 <inc_lock+0x118>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	440b      	add	r3, r1
 80094e0:	330c      	adds	r3, #12
 80094e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3301      	adds	r3, #1
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	2000610c 	.word	0x2000610c

080094f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3b01      	subs	r3, #1
 8009504:	607b      	str	r3, [r7, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d825      	bhi.n	8009558 <dec_lock+0x60>
		n = Files[i].ctr;
 800950c:	4a17      	ldr	r2, [pc, #92]	; (800956c <dec_lock+0x74>)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	4413      	add	r3, r2
 8009514:	330c      	adds	r3, #12
 8009516:	881b      	ldrh	r3, [r3, #0]
 8009518:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800951a:	89fb      	ldrh	r3, [r7, #14]
 800951c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009520:	d101      	bne.n	8009526 <dec_lock+0x2e>
 8009522:	2300      	movs	r3, #0
 8009524:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009526:	89fb      	ldrh	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <dec_lock+0x3a>
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	3b01      	subs	r3, #1
 8009530:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009532:	4a0e      	ldr	r2, [pc, #56]	; (800956c <dec_lock+0x74>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	4413      	add	r3, r2
 800953a:	330c      	adds	r3, #12
 800953c:	89fa      	ldrh	r2, [r7, #14]
 800953e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009540:	89fb      	ldrh	r3, [r7, #14]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <dec_lock+0x5a>
 8009546:	4a09      	ldr	r2, [pc, #36]	; (800956c <dec_lock+0x74>)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	4413      	add	r3, r2
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	737b      	strb	r3, [r7, #13]
 8009556:	e001      	b.n	800955c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009558:	2302      	movs	r3, #2
 800955a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800955c:	7b7b      	ldrb	r3, [r7, #13]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	2000610c 	.word	0x2000610c

08009570 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	e010      	b.n	80095a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800957e:	4a0d      	ldr	r2, [pc, #52]	; (80095b4 <clear_lock+0x44>)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	4413      	add	r3, r2
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d105      	bne.n	800959a <clear_lock+0x2a>
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <clear_lock+0x44>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	4413      	add	r3, r2
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d9eb      	bls.n	800957e <clear_lock+0xe>
	}
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	2000610c 	.word	0x2000610c

080095b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	78db      	ldrb	r3, [r3, #3]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d034      	beq.n	8009636 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	7858      	ldrb	r0, [r3, #1]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095dc:	2301      	movs	r3, #1
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	f7ff fd0e 	bl	8009000 <disk_write>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	73fb      	strb	r3, [r7, #15]
 80095ee:	e022      	b.n	8009636 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	1ad2      	subs	r2, r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	429a      	cmp	r2, r3
 8009604:	d217      	bcs.n	8009636 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	789b      	ldrb	r3, [r3, #2]
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	e010      	b.n	8009630 <sync_window+0x78>
					wsect += fs->fsize;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	7858      	ldrb	r0, [r3, #1]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009622:	2301      	movs	r3, #1
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	f7ff fceb 	bl	8009000 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3b01      	subs	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d8eb      	bhi.n	800960e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d01b      	beq.n	8009690 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff ffad 	bl	80095b8 <sync_window>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d113      	bne.n	8009690 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	7858      	ldrb	r0, [r3, #1]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009672:	2301      	movs	r3, #1
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	f7ff fca3 	bl	8008fc0 <disk_read>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d004      	beq.n	800968a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009686:	2301      	movs	r3, #1
 8009688:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff ff87 	bl	80095b8 <sync_window>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d158      	bne.n	8009766 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d148      	bne.n	800974e <sync_fs+0xb2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	791b      	ldrb	r3, [r3, #4]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d144      	bne.n	800974e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3334      	adds	r3, #52	; 0x34
 80096c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fd77 	bl	80091c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3334      	adds	r3, #52	; 0x34
 80096d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fd06 	bl	80090f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3334      	adds	r3, #52	; 0x34
 80096ea:	4921      	ldr	r1, [pc, #132]	; (8009770 <sync_fs+0xd4>)
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff fd1b 	bl	8009128 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3334      	adds	r3, #52	; 0x34
 80096f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80096fa:	491e      	ldr	r1, [pc, #120]	; (8009774 <sync_fs+0xd8>)
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fd13 	bl	8009128 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3334      	adds	r3, #52	; 0x34
 8009706:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7ff fd09 	bl	8009128 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3334      	adds	r3, #52	; 0x34
 800971a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f7ff fcff 	bl	8009128 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7858      	ldrb	r0, [r3, #1]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009742:	2301      	movs	r3, #1
 8009744:	f7ff fc5c 	bl	8009000 <disk_write>
			fs->fsi_flag = 0;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2200      	movs	r2, #0
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fc72 	bl	8009040 <disk_ioctl>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <sync_fs+0xca>
 8009762:	2301      	movs	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	41615252 	.word	0x41615252
 8009774:	61417272 	.word	0x61417272

08009778 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	3b02      	subs	r3, #2
 8009786:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	3b02      	subs	r3, #2
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d301      	bcc.n	8009798 <clust2sect+0x20>
 8009794:	2300      	movs	r3, #0
 8009796:	e008      	b.n	80097aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	895b      	ldrh	r3, [r3, #10]
 800979c:	461a      	mov	r2, r3
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	fb03 f202 	mul.w	r2, r3, r2
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	4413      	add	r3, r2
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b086      	sub	sp, #24
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d904      	bls.n	80097d6 <get_fat+0x20>
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d302      	bcc.n	80097dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e08f      	b.n	80098fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d062      	beq.n	80098b0 <get_fat+0xfa>
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	dc7c      	bgt.n	80098e8 <get_fat+0x132>
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d002      	beq.n	80097f8 <get_fat+0x42>
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d042      	beq.n	800987c <get_fat+0xc6>
 80097f6:	e077      	b.n	80098e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	0a5b      	lsrs	r3, r3, #9
 800980e:	4413      	add	r3, r2
 8009810:	4619      	mov	r1, r3
 8009812:	6938      	ldr	r0, [r7, #16]
 8009814:	f7ff ff14 	bl	8009640 <move_window>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d167      	bne.n	80098ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	60fa      	str	r2, [r7, #12]
 8009824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009830:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	0a5b      	lsrs	r3, r3, #9
 800983a:	4413      	add	r3, r2
 800983c:	4619      	mov	r1, r3
 800983e:	6938      	ldr	r0, [r7, #16]
 8009840:	f7ff fefe 	bl	8009640 <move_window>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d153      	bne.n	80098f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	4413      	add	r3, r2
 8009854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	461a      	mov	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4313      	orrs	r3, r2
 8009860:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <get_fat+0xbc>
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	091b      	lsrs	r3, r3, #4
 8009870:	e002      	b.n	8009878 <get_fat+0xc2>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009878:	617b      	str	r3, [r7, #20]
			break;
 800987a:	e03f      	b.n	80098fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	0a1b      	lsrs	r3, r3, #8
 8009884:	4413      	add	r3, r2
 8009886:	4619      	mov	r1, r3
 8009888:	6938      	ldr	r0, [r7, #16]
 800988a:	f7ff fed9 	bl	8009640 <move_window>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d130      	bne.n	80098f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80098a2:	4413      	add	r3, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fbe9 	bl	800907c <ld_word>
 80098aa:	4603      	mov	r3, r0
 80098ac:	617b      	str	r3, [r7, #20]
			break;
 80098ae:	e025      	b.n	80098fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	09db      	lsrs	r3, r3, #7
 80098b8:	4413      	add	r3, r2
 80098ba:	4619      	mov	r1, r3
 80098bc:	6938      	ldr	r0, [r7, #16]
 80098be:	f7ff febf 	bl	8009640 <move_window>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d118      	bne.n	80098fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098d6:	4413      	add	r3, r2
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fbe7 	bl	80090ac <ld_dword>
 80098de:	4603      	mov	r3, r0
 80098e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098e4:	617b      	str	r3, [r7, #20]
			break;
 80098e6:	e009      	b.n	80098fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e006      	b.n	80098fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098ee:	bf00      	nop
 80098f0:	e004      	b.n	80098fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098f2:	bf00      	nop
 80098f4:	e002      	b.n	80098fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098f6:	bf00      	nop
 80098f8:	e000      	b.n	80098fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098fa:	bf00      	nop
		}
	}

	return val;
 80098fc:	697b      	ldr	r3, [r7, #20]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009906:	b590      	push	{r4, r7, lr}
 8009908:	b089      	sub	sp, #36	; 0x24
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009912:	2302      	movs	r3, #2
 8009914:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b01      	cmp	r3, #1
 800991a:	f240 80d9 	bls.w	8009ad0 <put_fat+0x1ca>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	429a      	cmp	r2, r3
 8009926:	f080 80d3 	bcs.w	8009ad0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b03      	cmp	r3, #3
 8009930:	f000 8096 	beq.w	8009a60 <put_fat+0x15a>
 8009934:	2b03      	cmp	r3, #3
 8009936:	f300 80cb 	bgt.w	8009ad0 <put_fat+0x1ca>
 800993a:	2b01      	cmp	r3, #1
 800993c:	d002      	beq.n	8009944 <put_fat+0x3e>
 800993e:	2b02      	cmp	r3, #2
 8009940:	d06e      	beq.n	8009a20 <put_fat+0x11a>
 8009942:	e0c5      	b.n	8009ad0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	085b      	lsrs	r3, r3, #1
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	4413      	add	r3, r2
 8009950:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	0a5b      	lsrs	r3, r3, #9
 800995a:	4413      	add	r3, r2
 800995c:	4619      	mov	r1, r3
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fe6e 	bl	8009640 <move_window>
 8009964:	4603      	mov	r3, r0
 8009966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009968:	7ffb      	ldrb	r3, [r7, #31]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f040 80a9 	bne.w	8009ac2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	1c59      	adds	r1, r3, #1
 800997a:	61b9      	str	r1, [r7, #24]
 800997c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009980:	4413      	add	r3, r2
 8009982:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00d      	beq.n	80099aa <put_fat+0xa4>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b25b      	sxtb	r3, r3
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	b25a      	sxtb	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	b25b      	sxtb	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	b25b      	sxtb	r3, r3
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	e001      	b.n	80099ae <put_fat+0xa8>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2201      	movs	r2, #1
 80099b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	0a5b      	lsrs	r3, r3, #9
 80099c0:	4413      	add	r3, r2
 80099c2:	4619      	mov	r1, r3
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f7ff fe3b 	bl	8009640 <move_window>
 80099ca:	4603      	mov	r3, r0
 80099cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099ce:	7ffb      	ldrb	r3, [r7, #31]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d178      	bne.n	8009ac6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e0:	4413      	add	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <put_fat+0xf0>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	091b      	lsrs	r3, r3, #4
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	e00e      	b.n	8009a14 <put_fat+0x10e>
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	f023 030f 	bic.w	r3, r3, #15
 8009a00:	b25a      	sxtb	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	0a1b      	lsrs	r3, r3, #8
 8009a06:	b25b      	sxtb	r3, r3
 8009a08:	f003 030f 	and.w	r3, r3, #15
 8009a0c:	b25b      	sxtb	r3, r3
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	b25b      	sxtb	r3, r3
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	70da      	strb	r2, [r3, #3]
			break;
 8009a1e:	e057      	b.n	8009ad0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	4413      	add	r3, r2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7ff fe07 	bl	8009640 <move_window>
 8009a32:	4603      	mov	r3, r0
 8009a34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a36:	7ffb      	ldrb	r3, [r7, #31]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d146      	bne.n	8009aca <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009a4a:	4413      	add	r3, r2
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	4611      	mov	r1, r2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fb4d 	bl	80090f2 <st_word>
			fs->wflag = 1;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	70da      	strb	r2, [r3, #3]
			break;
 8009a5e:	e037      	b.n	8009ad0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	09db      	lsrs	r3, r3, #7
 8009a68:	4413      	add	r3, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff fde7 	bl	8009640 <move_window>
 8009a72:	4603      	mov	r3, r0
 8009a74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a76:	7ffb      	ldrb	r3, [r7, #31]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d128      	bne.n	8009ace <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009a90:	4413      	add	r3, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff fb0a 	bl	80090ac <ld_dword>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a9e:	4323      	orrs	r3, r4
 8009aa0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ab0:	4413      	add	r3, r2
 8009ab2:	6879      	ldr	r1, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fb37 	bl	8009128 <st_dword>
			fs->wflag = 1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	70da      	strb	r2, [r3, #3]
			break;
 8009ac0:	e006      	b.n	8009ad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ac2:	bf00      	nop
 8009ac4:	e004      	b.n	8009ad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ac6:	bf00      	nop
 8009ac8:	e002      	b.n	8009ad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009aca:	bf00      	nop
 8009acc:	e000      	b.n	8009ad0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ace:	bf00      	nop
		}
	}
	return res;
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3724      	adds	r7, #36	; 0x24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd90      	pop	{r4, r7, pc}

08009ada <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d904      	bls.n	8009b00 <remove_chain+0x26>
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d301      	bcc.n	8009b04 <remove_chain+0x2a>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e04b      	b.n	8009b9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00c      	beq.n	8009b24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	69b8      	ldr	r0, [r7, #24]
 8009b12:	f7ff fef8 	bl	8009906 <put_fat>
 8009b16:	4603      	mov	r3, r0
 8009b18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b1a:	7ffb      	ldrb	r3, [r7, #31]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <remove_chain+0x4a>
 8009b20:	7ffb      	ldrb	r3, [r7, #31]
 8009b22:	e03b      	b.n	8009b9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fe45 	bl	80097b6 <get_fat>
 8009b2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d031      	beq.n	8009b98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <remove_chain+0x64>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e02e      	b.n	8009b9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d101      	bne.n	8009b4a <remove_chain+0x70>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e028      	b.n	8009b9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	69b8      	ldr	r0, [r7, #24]
 8009b50:	f7ff fed9 	bl	8009906 <put_fat>
 8009b54:	4603      	mov	r3, r0
 8009b56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b58:	7ffb      	ldrb	r3, [r7, #31]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <remove_chain+0x88>
 8009b5e:	7ffb      	ldrb	r3, [r7, #31]
 8009b60:	e01c      	b.n	8009b9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	695a      	ldr	r2, [r3, #20]
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	3b02      	subs	r3, #2
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d20b      	bcs.n	8009b88 <remove_chain+0xae>
			fs->free_clst++;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	791b      	ldrb	r3, [r3, #4]
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d3c6      	bcc.n	8009b24 <remove_chain+0x4a>
 8009b96:	e000      	b.n	8009b9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009b98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3720      	adds	r7, #32
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10d      	bne.n	8009bd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <create_chain+0x2c>
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d31b      	bcc.n	8009c08 <create_chain+0x64>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	e018      	b.n	8009c08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff fdec 	bl	80097b6 <get_fat>
 8009bde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d801      	bhi.n	8009bea <create_chain+0x46>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e070      	b.n	8009ccc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf0:	d101      	bne.n	8009bf6 <create_chain+0x52>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	e06a      	b.n	8009ccc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d201      	bcs.n	8009c04 <create_chain+0x60>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	e063      	b.n	8009ccc <create_chain+0x128>
		scl = clst;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	69fa      	ldr	r2, [r7, #28]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d307      	bcc.n	8009c2c <create_chain+0x88>
				ncl = 2;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d901      	bls.n	8009c2c <create_chain+0x88>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e04f      	b.n	8009ccc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c2c:	69f9      	ldr	r1, [r7, #28]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fdc1 	bl	80097b6 <get_fat>
 8009c34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00e      	beq.n	8009c5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d003      	beq.n	8009c4a <create_chain+0xa6>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d101      	bne.n	8009c4e <create_chain+0xaa>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	e03e      	b.n	8009ccc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009c4e:	69fa      	ldr	r2, [r7, #28]
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d1da      	bne.n	8009c0c <create_chain+0x68>
 8009c56:	2300      	movs	r3, #0
 8009c58:	e038      	b.n	8009ccc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009c5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	69f9      	ldr	r1, [r7, #28]
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f7ff fe4f 	bl	8009906 <put_fat>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d109      	bne.n	8009c86 <create_chain+0xe2>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d006      	beq.n	8009c86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6938      	ldr	r0, [r7, #16]
 8009c7e:	f7ff fe42 	bl	8009906 <put_fat>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d116      	bne.n	8009cba <create_chain+0x116>
		fs->last_clst = ncl;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	69fa      	ldr	r2, [r7, #28]
 8009c90:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	695a      	ldr	r2, [r3, #20]
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	3b02      	subs	r3, #2
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d804      	bhi.n	8009caa <create_chain+0x106>
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	1e5a      	subs	r2, r3, #1
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	711a      	strb	r2, [r3, #4]
 8009cb8:	e007      	b.n	8009cca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d102      	bne.n	8009cc6 <create_chain+0x122>
 8009cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc4:	e000      	b.n	8009cc8 <create_chain+0x124>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009cca:	69fb      	ldr	r3, [r7, #28]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3720      	adds	r7, #32
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	3304      	adds	r3, #4
 8009cea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	0a5b      	lsrs	r3, r3, #9
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	8952      	ldrh	r2, [r2, #10]
 8009cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1d1a      	adds	r2, r3, #4
 8009cfe:	613a      	str	r2, [r7, #16]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <clmt_clust+0x3a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e010      	b.n	8009d30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d307      	bcc.n	8009d26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	617b      	str	r3, [r7, #20]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	3304      	adds	r3, #4
 8009d22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d24:	e7e9      	b.n	8009cfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009d26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	4413      	add	r3, r2
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d52:	d204      	bcs.n	8009d5e <dir_sdi+0x22>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	f003 031f 	and.w	r3, r3, #31
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e063      	b.n	8009e2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <dir_sdi+0x46>
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d902      	bls.n	8009d82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10c      	bne.n	8009da2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	8912      	ldrh	r2, [r2, #8]
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d301      	bcc.n	8009d98 <dir_sdi+0x5c>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e048      	b.n	8009e2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	61da      	str	r2, [r3, #28]
 8009da0:	e029      	b.n	8009df6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	895b      	ldrh	r3, [r3, #10]
 8009da6:	025b      	lsls	r3, r3, #9
 8009da8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009daa:	e019      	b.n	8009de0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6979      	ldr	r1, [r7, #20]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff fd00 	bl	80097b6 <get_fat>
 8009db6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d101      	bne.n	8009dc4 <dir_sdi+0x88>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e032      	b.n	8009e2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d904      	bls.n	8009dd4 <dir_sdi+0x98>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d301      	bcc.n	8009dd8 <dir_sdi+0x9c>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e028      	b.n	8009e2a <dir_sdi+0xee>
			ofs -= csz;
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d2e1      	bcs.n	8009dac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009de8:	6979      	ldr	r1, [r7, #20]
 8009dea:	6938      	ldr	r0, [r7, #16]
 8009dec:	f7ff fcc4 	bl	8009778 <clust2sect>
 8009df0:	4602      	mov	r2, r0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <dir_sdi+0xcc>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e010      	b.n	8009e2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69da      	ldr	r2, [r3, #28]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	0a5b      	lsrs	r3, r3, #9
 8009e10:	441a      	add	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e22:	441a      	add	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	3320      	adds	r3, #32
 8009e48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <dir_next+0x28>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e58:	d301      	bcc.n	8009e5e <dir_next+0x2c>
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	e0aa      	b.n	8009fb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f040 8098 	bne.w	8009f9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	095b      	lsrs	r3, r3, #5
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	8912      	ldrh	r2, [r2, #8]
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f0c0 8088 	bcc.w	8009f9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	61da      	str	r2, [r3, #28]
 8009e90:	2304      	movs	r3, #4
 8009e92:	e08f      	b.n	8009fb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	0a5b      	lsrs	r3, r3, #9
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	8952      	ldrh	r2, [r2, #10]
 8009e9c:	3a01      	subs	r2, #1
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d17a      	bne.n	8009f9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7ff fc82 	bl	80097b6 <get_fat>
 8009eb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d801      	bhi.n	8009ebe <dir_next+0x8c>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e07a      	b.n	8009fb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d101      	bne.n	8009eca <dir_next+0x98>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e074      	b.n	8009fb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d358      	bcc.n	8009f86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	61da      	str	r2, [r3, #28]
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	e067      	b.n	8009fb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7ff fe59 	bl	8009ba4 <create_chain>
 8009ef2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <dir_next+0xcc>
 8009efa:	2307      	movs	r3, #7
 8009efc:	e05a      	b.n	8009fb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <dir_next+0xd6>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e055      	b.n	8009fb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d101      	bne.n	8009f14 <dir_next+0xe2>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e04f      	b.n	8009fb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fb4f 	bl	80095b8 <sync_window>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <dir_next+0xf2>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e047      	b.n	8009fb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3334      	adds	r3, #52	; 0x34
 8009f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff f947 	bl	80091c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f34:	2300      	movs	r3, #0
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	6979      	ldr	r1, [r7, #20]
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7ff fc1c 	bl	8009778 <clust2sect>
 8009f40:	4602      	mov	r2, r0
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	631a      	str	r2, [r3, #48]	; 0x30
 8009f46:	e012      	b.n	8009f6e <dir_next+0x13c>
						fs->wflag = 1;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fb32 	bl	80095b8 <sync_window>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <dir_next+0x12c>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e02a      	b.n	8009fb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	3301      	adds	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	895b      	ldrh	r3, [r3, #10]
 8009f72:	461a      	mov	r2, r3
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d3e6      	bcc.n	8009f48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fbf2 	bl	8009778 <clust2sect>
 8009f94:	4602      	mov	r2, r0
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fac:	441a      	add	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009fcc:	2100      	movs	r1, #0
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff feb4 	bl	8009d3c <dir_sdi>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d12b      	bne.n	800a036 <dir_alloc+0x7a>
		n = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff fb29 	bl	8009640 <move_window>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11d      	bne.n	800a034 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2be5      	cmp	r3, #229	; 0xe5
 800a000:	d004      	beq.n	800a00c <dir_alloc+0x50>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	3301      	adds	r3, #1
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d102      	bne.n	800a020 <dir_alloc+0x64>
 800a01a:	e00c      	b.n	800a036 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a01c:	2300      	movs	r3, #0
 800a01e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a020:	2101      	movs	r1, #1
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ff05 	bl	8009e32 <dir_next>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0d7      	beq.n	8009fe2 <dir_alloc+0x26>
 800a032:	e000      	b.n	800a036 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a034:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d101      	bne.n	800a040 <dir_alloc+0x84>
 800a03c:	2307      	movs	r3, #7
 800a03e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	331a      	adds	r3, #26
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff f80f 	bl	800907c <ld_word>
 800a05e:	4603      	mov	r3, r0
 800a060:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b03      	cmp	r3, #3
 800a068:	d109      	bne.n	800a07e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	3314      	adds	r3, #20
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff f804 	bl	800907c <ld_word>
 800a074:	4603      	mov	r3, r0
 800a076:	041b      	lsls	r3, r3, #16
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a07e:	68fb      	ldr	r3, [r7, #12]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	331a      	adds	r3, #26
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	b292      	uxth	r2, r2
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f827 	bl	80090f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d109      	bne.n	800a0c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f103 0214 	add.w	r2, r3, #20
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	0c1b      	lsrs	r3, r3, #16
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7ff f819 	bl	80090f2 <st_word>
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a0d2:	2304      	movs	r3, #4
 800a0d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a0dc:	e03c      	b.n	800a158 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6938      	ldr	r0, [r7, #16]
 800a0e6:	f7ff faab 	bl	8009640 <move_window>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d136      	bne.n	800a162 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d102      	bne.n	800a108 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a102:	2304      	movs	r3, #4
 800a104:	75fb      	strb	r3, [r7, #23]
 800a106:	e031      	b.n	800a16c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	330b      	adds	r3, #11
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a114:	73bb      	strb	r3, [r7, #14]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7bba      	ldrb	r2, [r7, #14]
 800a11a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2be5      	cmp	r3, #229	; 0xe5
 800a120:	d011      	beq.n	800a146 <dir_read+0x7e>
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d00e      	beq.n	800a146 <dir_read+0x7e>
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b0f      	cmp	r3, #15
 800a12c:	d00b      	beq.n	800a146 <dir_read+0x7e>
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	f023 0320 	bic.w	r3, r3, #32
 800a134:	2b08      	cmp	r3, #8
 800a136:	bf0c      	ite	eq
 800a138:	2301      	moveq	r3, #1
 800a13a:	2300      	movne	r3, #0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	461a      	mov	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a146:	2100      	movs	r1, #0
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fe72 	bl	8009e32 <dir_next>
 800a14e:	4603      	mov	r3, r0
 800a150:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d108      	bne.n	800a16a <dir_read+0xa2>
	while (dp->sect) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1be      	bne.n	800a0de <dir_read+0x16>
 800a160:	e004      	b.n	800a16c <dir_read+0xa4>
		if (res != FR_OK) break;
 800a162:	bf00      	nop
 800a164:	e002      	b.n	800a16c <dir_read+0xa4>
				break;
 800a166:	bf00      	nop
 800a168:	e000      	b.n	800a16c <dir_read+0xa4>
		if (res != FR_OK) break;
 800a16a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <dir_read+0xb0>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	61da      	str	r2, [r3, #28]
	return res;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b086      	sub	sp, #24
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a190:	2100      	movs	r1, #0
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff fdd2 	bl	8009d3c <dir_sdi>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <dir_find+0x24>
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	e03e      	b.n	800a224 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6938      	ldr	r0, [r7, #16]
 800a1ae:	f7ff fa47 	bl	8009640 <move_window>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d12f      	bne.n	800a21c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <dir_find+0x4e>
 800a1ca:	2304      	movs	r3, #4
 800a1cc:	75fb      	strb	r3, [r7, #23]
 800a1ce:	e028      	b.n	800a222 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	330b      	adds	r3, #11
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	330b      	adds	r3, #11
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <dir_find+0x86>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a18      	ldr	r0, [r3, #32]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3324      	adds	r3, #36	; 0x24
 800a1fa:	220b      	movs	r2, #11
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f7fe fffb 	bl	80091f8 <mem_cmp>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a208:	2100      	movs	r1, #0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff fe11 	bl	8009e32 <dir_next>
 800a210:	4603      	mov	r3, r0
 800a212:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0c5      	beq.n	800a1a6 <dir_find+0x24>
 800a21a:	e002      	b.n	800a222 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a21c:	bf00      	nop
 800a21e:	e000      	b.n	800a222 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a220:	bf00      	nop

	return res;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a23a:	2101      	movs	r1, #1
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff febd 	bl	8009fbc <dir_alloc>
 800a242:	4603      	mov	r3, r0
 800a244:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d11c      	bne.n	800a286 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	4619      	mov	r1, r3
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	f7ff f9f4 	bl	8009640 <move_window>
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d111      	bne.n	800a286 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	2220      	movs	r2, #32
 800a268:	2100      	movs	r1, #0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe ffa9 	bl	80091c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a18      	ldr	r0, [r3, #32]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3324      	adds	r3, #36	; 0x24
 800a278:	220b      	movs	r2, #11
 800a27a:	4619      	mov	r1, r3
 800a27c:	f7fe ff80 	bl	8009180 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2201      	movs	r2, #1
 800a284:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff f9cb 	bl	8009640 <move_window>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	22e5      	movs	r2, #229	; 0xe5
 800a2ba:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d04e      	beq.n	800a382 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a2ec:	e021      	b.n	800a332 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1a      	ldr	r2, [r3, #32]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1c59      	adds	r1, r3, #1
 800a2f6:	6179      	str	r1, [r7, #20]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	2b20      	cmp	r3, #32
 800a302:	d100      	bne.n	800a306 <get_fileinfo+0x3a>
 800a304:	e015      	b.n	800a332 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b05      	cmp	r3, #5
 800a30a:	d101      	bne.n	800a310 <get_fileinfo+0x44>
 800a30c:	23e5      	movs	r3, #229	; 0xe5
 800a30e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2b09      	cmp	r3, #9
 800a314:	d106      	bne.n	800a324 <get_fileinfo+0x58>
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	613a      	str	r2, [r7, #16]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	4413      	add	r3, r2
 800a320:	222e      	movs	r2, #46	; 0x2e
 800a322:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	613a      	str	r2, [r7, #16]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	7bfa      	ldrb	r2, [r7, #15]
 800a330:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b0a      	cmp	r3, #10
 800a336:	d9da      	bls.n	800a2ee <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	4413      	add	r3, r2
 800a33e:	3309      	adds	r3, #9
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	7ada      	ldrb	r2, [r3, #11]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	331c      	adds	r3, #28
 800a354:	4618      	mov	r0, r3
 800a356:	f7fe fea9 	bl	80090ac <ld_dword>
 800a35a:	4602      	mov	r2, r0
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	3316      	adds	r3, #22
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fea0 	bl	80090ac <ld_dword>
 800a36c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	b29a      	uxth	r2, r3
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	80da      	strh	r2, [r3, #6]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	809a      	strh	r2, [r3, #4]
 800a380:	e000      	b.n	800a384 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a382:	bf00      	nop
}
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3324      	adds	r3, #36	; 0x24
 800a3a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a3a2:	220b      	movs	r2, #11
 800a3a4:	2120      	movs	r1, #32
 800a3a6:	68b8      	ldr	r0, [r7, #8]
 800a3a8:	f7fe ff0b 	bl	80091c2 <mem_set>
	si = i = 0; ni = 8;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	61fa      	str	r2, [r7, #28]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a3c6:	7efb      	ldrb	r3, [r7, #27]
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d94e      	bls.n	800a46a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a3cc:	7efb      	ldrb	r3, [r7, #27]
 800a3ce:	2b2f      	cmp	r3, #47	; 0x2f
 800a3d0:	d006      	beq.n	800a3e0 <create_name+0x54>
 800a3d2:	7efb      	ldrb	r3, [r7, #27]
 800a3d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a3d6:	d110      	bne.n	800a3fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a3d8:	e002      	b.n	800a3e0 <create_name+0x54>
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b2f      	cmp	r3, #47	; 0x2f
 800a3ea:	d0f6      	beq.n	800a3da <create_name+0x4e>
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b5c      	cmp	r3, #92	; 0x5c
 800a3f6:	d0f0      	beq.n	800a3da <create_name+0x4e>
			break;
 800a3f8:	e038      	b.n	800a46c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a3fa:	7efb      	ldrb	r3, [r7, #27]
 800a3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3fe:	d003      	beq.n	800a408 <create_name+0x7c>
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	429a      	cmp	r2, r3
 800a406:	d30c      	bcc.n	800a422 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2b0b      	cmp	r3, #11
 800a40c:	d002      	beq.n	800a414 <create_name+0x88>
 800a40e:	7efb      	ldrb	r3, [r7, #27]
 800a410:	2b2e      	cmp	r3, #46	; 0x2e
 800a412:	d001      	beq.n	800a418 <create_name+0x8c>
 800a414:	2306      	movs	r3, #6
 800a416:	e044      	b.n	800a4a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a418:	2308      	movs	r3, #8
 800a41a:	613b      	str	r3, [r7, #16]
 800a41c:	230b      	movs	r3, #11
 800a41e:	617b      	str	r3, [r7, #20]
			continue;
 800a420:	e022      	b.n	800a468 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a422:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a426:	2b00      	cmp	r3, #0
 800a428:	da04      	bge.n	800a434 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a42a:	7efb      	ldrb	r3, [r7, #27]
 800a42c:	3b80      	subs	r3, #128	; 0x80
 800a42e:	4a1f      	ldr	r2, [pc, #124]	; (800a4ac <create_name+0x120>)
 800a430:	5cd3      	ldrb	r3, [r2, r3]
 800a432:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a434:	7efb      	ldrb	r3, [r7, #27]
 800a436:	4619      	mov	r1, r3
 800a438:	481d      	ldr	r0, [pc, #116]	; (800a4b0 <create_name+0x124>)
 800a43a:	f7fe ff04 	bl	8009246 <chk_chr>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <create_name+0xbc>
 800a444:	2306      	movs	r3, #6
 800a446:	e02c      	b.n	800a4a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a448:	7efb      	ldrb	r3, [r7, #27]
 800a44a:	2b60      	cmp	r3, #96	; 0x60
 800a44c:	d905      	bls.n	800a45a <create_name+0xce>
 800a44e:	7efb      	ldrb	r3, [r7, #27]
 800a450:	2b7a      	cmp	r3, #122	; 0x7a
 800a452:	d802      	bhi.n	800a45a <create_name+0xce>
 800a454:	7efb      	ldrb	r3, [r7, #27]
 800a456:	3b20      	subs	r3, #32
 800a458:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	613a      	str	r2, [r7, #16]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	4413      	add	r3, r2
 800a464:	7efa      	ldrb	r2, [r7, #27]
 800a466:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a468:	e7a6      	b.n	800a3b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a46a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	441a      	add	r2, r3
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <create_name+0xf4>
 800a47c:	2306      	movs	r3, #6
 800a47e:	e010      	b.n	800a4a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2be5      	cmp	r3, #229	; 0xe5
 800a486:	d102      	bne.n	800a48e <create_name+0x102>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2205      	movs	r2, #5
 800a48c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a48e:	7efb      	ldrb	r3, [r7, #27]
 800a490:	2b20      	cmp	r3, #32
 800a492:	d801      	bhi.n	800a498 <create_name+0x10c>
 800a494:	2204      	movs	r2, #4
 800a496:	e000      	b.n	800a49a <create_name+0x10e>
 800a498:	2200      	movs	r2, #0
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	330b      	adds	r3, #11
 800a49e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a4a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3720      	adds	r7, #32
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	08011af8 	.word	0x08011af8
 800a4b0:	08011a8c 	.word	0x08011a8c

0800a4b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a4c8:	e002      	b.n	800a4d0 <follow_path+0x1c>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b2f      	cmp	r3, #47	; 0x2f
 800a4d6:	d0f8      	beq.n	800a4ca <follow_path+0x16>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a4de:	d0f4      	beq.n	800a4ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b1f      	cmp	r3, #31
 800a4ec:	d80a      	bhi.n	800a504 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2280      	movs	r2, #128	; 0x80
 800a4f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fc1f 	bl	8009d3c <dir_sdi>
 800a4fe:	4603      	mov	r3, r0
 800a500:	75fb      	strb	r3, [r7, #23]
 800a502:	e043      	b.n	800a58c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a504:	463b      	mov	r3, r7
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ff3f 	bl	800a38c <create_name>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d134      	bne.n	800a582 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fe32 	bl	800a182 <dir_find>
 800a51e:	4603      	mov	r3, r0
 800a520:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a528:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b04      	cmp	r3, #4
 800a534:	d127      	bne.n	800a586 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d122      	bne.n	800a586 <follow_path+0xd2>
 800a540:	2305      	movs	r3, #5
 800a542:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a544:	e01f      	b.n	800a586 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a546:	7afb      	ldrb	r3, [r7, #11]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d11c      	bne.n	800a58a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	799b      	ldrb	r3, [r3, #6]
 800a554:	f003 0310 	and.w	r3, r3, #16
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a55c:	2305      	movs	r3, #5
 800a55e:	75fb      	strb	r3, [r7, #23]
 800a560:	e014      	b.n	800a58c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a570:	4413      	add	r3, r2
 800a572:	4619      	mov	r1, r3
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff fd68 	bl	800a04a <ld_clust>
 800a57a:	4602      	mov	r2, r0
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a580:	e7c0      	b.n	800a504 <follow_path+0x50>
			if (res != FR_OK) break;
 800a582:	bf00      	nop
 800a584:	e002      	b.n	800a58c <follow_path+0xd8>
				break;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a58a:	bf00      	nop
			}
		}
	}

	return res;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a596:	b480      	push	{r7}
 800a598:	b087      	sub	sp, #28
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d031      	beq.n	800a610 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e002      	b.n	800a5ba <get_ldnumber+0x24>
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	d903      	bls.n	800a5ca <get_ldnumber+0x34>
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b3a      	cmp	r3, #58	; 0x3a
 800a5c8:	d1f4      	bne.n	800a5b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b3a      	cmp	r3, #58	; 0x3a
 800a5d0:	d11c      	bne.n	800a60c <get_ldnumber+0x76>
			tp = *path;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	60fa      	str	r2, [r7, #12]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	3b30      	subs	r3, #48	; 0x30
 800a5e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d80e      	bhi.n	800a608 <get_ldnumber+0x72>
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d10a      	bne.n	800a608 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d107      	bne.n	800a608 <get_ldnumber+0x72>
					vol = (int)i;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	3301      	adds	r3, #1
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	e002      	b.n	800a612 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a610:	693b      	ldr	r3, [r7, #16]
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	70da      	strb	r2, [r3, #3]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff f800 	bl	8009640 <move_window>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <check_fs+0x2a>
 800a646:	2304      	movs	r3, #4
 800a648:	e038      	b.n	800a6bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3334      	adds	r3, #52	; 0x34
 800a64e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fd12 	bl	800907c <ld_word>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a660:	429a      	cmp	r2, r3
 800a662:	d001      	beq.n	800a668 <check_fs+0x48>
 800a664:	2303      	movs	r3, #3
 800a666:	e029      	b.n	800a6bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a66e:	2be9      	cmp	r3, #233	; 0xe9
 800a670:	d009      	beq.n	800a686 <check_fs+0x66>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a678:	2beb      	cmp	r3, #235	; 0xeb
 800a67a:	d11e      	bne.n	800a6ba <check_fs+0x9a>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a682:	2b90      	cmp	r3, #144	; 0x90
 800a684:	d119      	bne.n	800a6ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3334      	adds	r3, #52	; 0x34
 800a68a:	3336      	adds	r3, #54	; 0x36
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fd0d 	bl	80090ac <ld_dword>
 800a692:	4603      	mov	r3, r0
 800a694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a698:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <check_fs+0xa4>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d101      	bne.n	800a6a2 <check_fs+0x82>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e00c      	b.n	800a6bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3334      	adds	r3, #52	; 0x34
 800a6a6:	3352      	adds	r3, #82	; 0x52
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fcff 	bl	80090ac <ld_dword>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4a05      	ldr	r2, [pc, #20]	; (800a6c8 <check_fs+0xa8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d101      	bne.n	800a6ba <check_fs+0x9a>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e000      	b.n	800a6bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a6ba:	2302      	movs	r3, #2
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	00544146 	.word	0x00544146
 800a6c8:	33544146 	.word	0x33544146

0800a6cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b096      	sub	sp, #88	; 0x58
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff ff58 	bl	800a596 <get_ldnumber>
 800a6e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da01      	bge.n	800a6f2 <find_volume+0x26>
 800a6ee:	230b      	movs	r3, #11
 800a6f0:	e235      	b.n	800ab5e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a6f2:	4aa5      	ldr	r2, [pc, #660]	; (800a988 <find_volume+0x2bc>)
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <find_volume+0x3a>
 800a702:	230c      	movs	r3, #12
 800a704:	e22b      	b.n	800ab5e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a708:	f7fe fdb8 	bl	800927c <lock_fs>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <find_volume+0x4a>
 800a712:	230f      	movs	r3, #15
 800a714:	e223      	b.n	800ab5e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a71a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	f023 0301 	bic.w	r3, r3, #1
 800a722:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01a      	beq.n	800a762 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe fc05 	bl	8008f40 <disk_status>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a73c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10c      	bne.n	800a762 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d007      	beq.n	800a75e <find_volume+0x92>
 800a74e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a75a:	230a      	movs	r3, #10
 800a75c:	e1ff      	b.n	800ab5e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a75e:	2300      	movs	r3, #0
 800a760:	e1fd      	b.n	800ab5e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	785b      	ldrb	r3, [r3, #1]
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fbfd 	bl	8008f74 <disk_initialize>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a78c:	2303      	movs	r3, #3
 800a78e:	e1e6      	b.n	800ab5e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d007      	beq.n	800a7a6 <find_volume+0xda>
 800a796:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a7a2:	230a      	movs	r3, #10
 800a7a4:	e1db      	b.n	800ab5e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a7aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7ae:	f7ff ff37 	bl	800a620 <check_fs>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a7b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d149      	bne.n	800a854 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7c4:	e01e      	b.n	800a804 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a7d4:	4413      	add	r3, r2
 800a7d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	3304      	adds	r3, #4
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d006      	beq.n	800a7f0 <find_volume+0x124>
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fc60 	bl	80090ac <ld_dword>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	e000      	b.n	800a7f2 <find_volume+0x126>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	3358      	adds	r3, #88	; 0x58
 800a7f8:	443b      	add	r3, r7
 800a7fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a800:	3301      	adds	r3, #1
 800a802:	643b      	str	r3, [r7, #64]	; 0x40
 800a804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a806:	2b03      	cmp	r3, #3
 800a808:	d9dd      	bls.n	800a7c6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a80a:	2300      	movs	r3, #0
 800a80c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <find_volume+0x14e>
 800a814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a816:	3b01      	subs	r3, #1
 800a818:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	3358      	adds	r3, #88	; 0x58
 800a820:	443b      	add	r3, r7
 800a822:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a826:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <find_volume+0x16e>
 800a82e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a832:	f7ff fef5 	bl	800a620 <check_fs>
 800a836:	4603      	mov	r3, r0
 800a838:	e000      	b.n	800a83c <find_volume+0x170>
 800a83a:	2303      	movs	r3, #3
 800a83c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a844:	2b01      	cmp	r3, #1
 800a846:	d905      	bls.n	800a854 <find_volume+0x188>
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	3301      	adds	r3, #1
 800a84c:	643b      	str	r3, [r7, #64]	; 0x40
 800a84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a850:	2b03      	cmp	r3, #3
 800a852:	d9e2      	bls.n	800a81a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d101      	bne.n	800a860 <find_volume+0x194>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e17e      	b.n	800ab5e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a864:	2b01      	cmp	r3, #1
 800a866:	d901      	bls.n	800a86c <find_volume+0x1a0>
 800a868:	230d      	movs	r3, #13
 800a86a:	e178      	b.n	800ab5e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	3334      	adds	r3, #52	; 0x34
 800a870:	330b      	adds	r3, #11
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fc02 	bl	800907c <ld_word>
 800a878:	4603      	mov	r3, r0
 800a87a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a87e:	d001      	beq.n	800a884 <find_volume+0x1b8>
 800a880:	230d      	movs	r3, #13
 800a882:	e16c      	b.n	800ab5e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	3334      	adds	r3, #52	; 0x34
 800a888:	3316      	adds	r3, #22
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe fbf6 	bl	800907c <ld_word>
 800a890:	4603      	mov	r3, r0
 800a892:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <find_volume+0x1dc>
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	3334      	adds	r3, #52	; 0x34
 800a89e:	3324      	adds	r3, #36	; 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fe fc03 	bl	80090ac <ld_dword>
 800a8a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8ac:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	789b      	ldrb	r3, [r3, #2]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d005      	beq.n	800a8cc <find_volume+0x200>
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	789b      	ldrb	r3, [r3, #2]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d001      	beq.n	800a8cc <find_volume+0x200>
 800a8c8:	230d      	movs	r3, #13
 800a8ca:	e148      	b.n	800ab5e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	789b      	ldrb	r3, [r3, #2]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d4:	fb02 f303 	mul.w	r3, r2, r3
 800a8d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	895b      	ldrh	r3, [r3, #10]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d008      	beq.n	800a900 <find_volume+0x234>
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	895b      	ldrh	r3, [r3, #10]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	895b      	ldrh	r3, [r3, #10]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <find_volume+0x238>
 800a900:	230d      	movs	r3, #13
 800a902:	e12c      	b.n	800ab5e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	3334      	adds	r3, #52	; 0x34
 800a908:	3311      	adds	r3, #17
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fbb6 	bl	800907c <ld_word>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	891b      	ldrh	r3, [r3, #8]
 800a91c:	f003 030f 	and.w	r3, r3, #15
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <find_volume+0x25e>
 800a926:	230d      	movs	r3, #13
 800a928:	e119      	b.n	800ab5e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	3334      	adds	r3, #52	; 0x34
 800a92e:	3313      	adds	r3, #19
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe fba3 	bl	800907c <ld_word>
 800a936:	4603      	mov	r3, r0
 800a938:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d106      	bne.n	800a94e <find_volume+0x282>
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	3334      	adds	r3, #52	; 0x34
 800a944:	3320      	adds	r3, #32
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fbb0 	bl	80090ac <ld_dword>
 800a94c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	3334      	adds	r3, #52	; 0x34
 800a952:	330e      	adds	r3, #14
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fb91 	bl	800907c <ld_word>
 800a95a:	4603      	mov	r3, r0
 800a95c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a95e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <find_volume+0x29c>
 800a964:	230d      	movs	r3, #13
 800a966:	e0fa      	b.n	800ab5e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a968:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a96a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a96c:	4413      	add	r3, r2
 800a96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a970:	8912      	ldrh	r2, [r2, #8]
 800a972:	0912      	lsrs	r2, r2, #4
 800a974:	b292      	uxth	r2, r2
 800a976:	4413      	add	r3, r2
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a97a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	429a      	cmp	r2, r3
 800a980:	d204      	bcs.n	800a98c <find_volume+0x2c0>
 800a982:	230d      	movs	r3, #13
 800a984:	e0eb      	b.n	800ab5e <find_volume+0x492>
 800a986:	bf00      	nop
 800a988:	20006104 	.word	0x20006104
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a98c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a994:	8952      	ldrh	r2, [r2, #10]
 800a996:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <find_volume+0x2da>
 800a9a2:	230d      	movs	r3, #13
 800a9a4:	e0db      	b.n	800ab5e <find_volume+0x492>
		fmt = FS_FAT32;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d802      	bhi.n	800a9bc <find_volume+0x2f0>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d802      	bhi.n	800a9cc <find_volume+0x300>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	1c9a      	adds	r2, r3, #2
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9d8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a9da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9de:	441a      	add	r2, r3
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a9e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	441a      	add	r2, r3
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a9ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d11e      	bne.n	800aa34 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	3334      	adds	r3, #52	; 0x34
 800a9fa:	332a      	adds	r3, #42	; 0x2a
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fb3d 	bl	800907c <ld_word>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <find_volume+0x340>
 800aa08:	230d      	movs	r3, #13
 800aa0a:	e0a8      	b.n	800ab5e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	891b      	ldrh	r3, [r3, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <find_volume+0x34c>
 800aa14:	230d      	movs	r3, #13
 800aa16:	e0a2      	b.n	800ab5e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	3334      	adds	r3, #52	; 0x34
 800aa1c:	332c      	adds	r3, #44	; 0x2c
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe fb44 	bl	80090ac <ld_dword>
 800aa24:	4602      	mov	r2, r0
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	647b      	str	r3, [r7, #68]	; 0x44
 800aa32:	e01f      	b.n	800aa74 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	891b      	ldrh	r3, [r3, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <find_volume+0x374>
 800aa3c:	230d      	movs	r3, #13
 800aa3e:	e08e      	b.n	800ab5e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa46:	441a      	add	r2, r3
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aa4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d103      	bne.n	800aa5c <find_volume+0x390>
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	e00a      	b.n	800aa72 <find_volume+0x3a6>
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	699a      	ldr	r2, [r3, #24]
 800aa60:	4613      	mov	r3, r2
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	4413      	add	r3, r2
 800aa66:	085a      	lsrs	r2, r3, #1
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa72:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800aa7e:	0a5b      	lsrs	r3, r3, #9
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d201      	bcs.n	800aa88 <find_volume+0x3bc>
 800aa84:	230d      	movs	r3, #13
 800aa86:	e06a      	b.n	800ab5e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8e:	615a      	str	r2, [r3, #20]
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	695a      	ldr	r2, [r3, #20]
 800aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa96:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	2280      	movs	r2, #128	; 0x80
 800aa9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d149      	bne.n	800ab3a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	3334      	adds	r3, #52	; 0x34
 800aaaa:	3330      	adds	r3, #48	; 0x30
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe fae5 	bl	800907c <ld_word>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d140      	bne.n	800ab3a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaba:	3301      	adds	r3, #1
 800aabc:	4619      	mov	r1, r3
 800aabe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac0:	f7fe fdbe 	bl	8009640 <move_window>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d137      	bne.n	800ab3a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800aaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aacc:	2200      	movs	r2, #0
 800aace:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	3334      	adds	r3, #52	; 0x34
 800aad4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe facf 	bl	800907c <ld_word>
 800aade:	4603      	mov	r3, r0
 800aae0:	461a      	mov	r2, r3
 800aae2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d127      	bne.n	800ab3a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	3334      	adds	r3, #52	; 0x34
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fadc 	bl	80090ac <ld_dword>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	4a1c      	ldr	r2, [pc, #112]	; (800ab68 <find_volume+0x49c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d11e      	bne.n	800ab3a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	3334      	adds	r3, #52	; 0x34
 800ab00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fad1 	bl	80090ac <ld_dword>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4a17      	ldr	r2, [pc, #92]	; (800ab6c <find_volume+0x4a0>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d113      	bne.n	800ab3a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	3334      	adds	r3, #52	; 0x34
 800ab16:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fac6 	bl	80090ac <ld_dword>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	3334      	adds	r3, #52	; 0x34
 800ab2a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fe fabc 	bl	80090ac <ld_dword>
 800ab34:	4602      	mov	r2, r0
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ab40:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ab42:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <find_volume+0x4a4>)
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	3301      	adds	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <find_volume+0x4a4>)
 800ab4c:	801a      	strh	r2, [r3, #0]
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <find_volume+0x4a4>)
 800ab50:	881a      	ldrh	r2, [r3, #0]
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab58:	f7fe fd0a 	bl	8009570 <clear_lock>
#endif
	return FR_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3758      	adds	r7, #88	; 0x58
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	41615252 	.word	0x41615252
 800ab6c:	61417272 	.word	0x61417272
 800ab70:	20006108 	.word	0x20006108

0800ab74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab7e:	2309      	movs	r3, #9
 800ab80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02e      	beq.n	800abe6 <validate+0x72>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d02a      	beq.n	800abe6 <validate+0x72>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d025      	beq.n	800abe6 <validate+0x72>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	889a      	ldrh	r2, [r3, #4]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	88db      	ldrh	r3, [r3, #6]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d11e      	bne.n	800abe6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe fb65 	bl	800927c <lock_fs>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d014      	beq.n	800abe2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe f9be 	bl	8008f40 <disk_status>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d102      	bne.n	800abd4 <validate+0x60>
				res = FR_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
 800abd2:	e008      	b.n	800abe6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fb64 	bl	80092a8 <unlock_fs>
 800abe0:	e001      	b.n	800abe6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800abe2:	230f      	movs	r3, #15
 800abe4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <validate+0x7e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	e000      	b.n	800abf4 <validate+0x80>
 800abf2:	2300      	movs	r3, #0
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	6013      	str	r3, [r2, #0]
	return res;
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ac16:	f107 0310 	add.w	r3, r7, #16
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fcbb 	bl	800a596 <get_ldnumber>
 800ac20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	da01      	bge.n	800ac2c <f_mount+0x28>
 800ac28:	230b      	movs	r3, #11
 800ac2a:	e048      	b.n	800acbe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ac2c:	4a26      	ldr	r2, [pc, #152]	; (800acc8 <f_mount+0xc4>)
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00f      	beq.n	800ac5c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ac3c:	69b8      	ldr	r0, [r7, #24]
 800ac3e:	f7fe fc97 	bl	8009570 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 ffc3 	bl	800bbd2 <ff_del_syncobj>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <f_mount+0x52>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e033      	b.n	800acbe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00f      	beq.n	800ac82 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f000 ff8d 	bl	800bb92 <ff_cre_syncobj>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <f_mount+0x7e>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e01d      	b.n	800acbe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	4910      	ldr	r1, [pc, #64]	; (800acc8 <f_mount+0xc4>)
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <f_mount+0x94>
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d001      	beq.n	800ac9c <f_mount+0x98>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e010      	b.n	800acbe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ac9c:	f107 010c 	add.w	r1, r7, #12
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	2200      	movs	r2, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7ff fd10 	bl	800a6cc <find_volume>
 800acac:	4603      	mov	r3, r0
 800acae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	7dfa      	ldrb	r2, [r7, #23]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe faf6 	bl	80092a8 <unlock_fs>
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20006104 	.word	0x20006104

0800accc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b098      	sub	sp, #96	; 0x60
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <f_open+0x18>
 800ace0:	2309      	movs	r3, #9
 800ace2:	e1b4      	b.n	800b04e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ace4:	79fb      	ldrb	r3, [r7, #7]
 800ace6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800acec:	79fa      	ldrb	r2, [r7, #7]
 800acee:	f107 0110 	add.w	r1, r7, #16
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fce8 	bl	800a6cc <find_volume>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ad02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 8191 	bne.w	800b02e <f_open+0x362>
		dj.obj.fs = fs;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	f107 0314 	add.w	r3, r7, #20
 800ad16:	4611      	mov	r1, r2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fbcb 	bl	800a4b4 <follow_path>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ad24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d11a      	bne.n	800ad62 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ad2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad30:	b25b      	sxtb	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	da03      	bge.n	800ad3e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ad36:	2306      	movs	r3, #6
 800ad38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad3c:	e011      	b.n	800ad62 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	f023 0301 	bic.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bf14      	ite	ne
 800ad48:	2301      	movne	r3, #1
 800ad4a:	2300      	moveq	r3, #0
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f107 0314 	add.w	r3, r7, #20
 800ad54:	4611      	mov	r1, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe fac2 	bl	80092e0 <chk_lock>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	f003 031c 	and.w	r3, r3, #28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d07f      	beq.n	800ae6c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ad6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d017      	beq.n	800ada4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d10e      	bne.n	800ad9a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad7c:	f7fe fb0c 	bl	8009398 <enq_lock>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <f_open+0xc8>
 800ad86:	f107 0314 	add.w	r3, r7, #20
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff fa4e 	bl	800a22c <dir_register>
 800ad90:	4603      	mov	r3, r0
 800ad92:	e000      	b.n	800ad96 <f_open+0xca>
 800ad94:	2312      	movs	r3, #18
 800ad96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	f043 0308 	orr.w	r3, r3, #8
 800ada0:	71fb      	strb	r3, [r7, #7]
 800ada2:	e010      	b.n	800adc6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ada4:	7ebb      	ldrb	r3, [r7, #26]
 800ada6:	f003 0311 	and.w	r3, r3, #17
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <f_open+0xea>
					res = FR_DENIED;
 800adae:	2307      	movs	r3, #7
 800adb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800adb4:	e007      	b.n	800adc6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <f_open+0xfa>
 800adc0:	2308      	movs	r3, #8
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800adc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d168      	bne.n	800aea0 <f_open+0x1d4>
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	f003 0308 	and.w	r3, r3, #8
 800add4:	2b00      	cmp	r3, #0
 800add6:	d063      	beq.n	800aea0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800add8:	f7fe f854 	bl	8008e84 <get_fattime>
 800addc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	330e      	adds	r3, #14
 800ade2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe f99f 	bl	8009128 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	3316      	adds	r3, #22
 800adee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe f999 	bl	8009128 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf8:	330b      	adds	r3, #11
 800adfa:	2220      	movs	r2, #32
 800adfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff f920 	bl	800a04a <ld_clust>
 800ae0a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae10:	2200      	movs	r2, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff f938 	bl	800a088 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	331c      	adds	r3, #28
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe f982 	bl	8009128 <st_dword>
					fs->wflag = 1;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2201      	movs	r2, #1
 800ae28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d037      	beq.n	800aea0 <f_open+0x1d4>
						dw = fs->winsect;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ae36:	f107 0314 	add.w	r3, r7, #20
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe fe4b 	bl	8009ada <remove_chain>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ae4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d126      	bne.n	800aea0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe fbf2 	bl	8009640 <move_window>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae66:	3a01      	subs	r2, #1
 800ae68:	611a      	str	r2, [r3, #16]
 800ae6a:	e019      	b.n	800aea0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d115      	bne.n	800aea0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae74:	7ebb      	ldrb	r3, [r7, #26]
 800ae76:	f003 0310 	and.w	r3, r3, #16
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ae7e:	2304      	movs	r3, #4
 800ae80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae84:	e00c      	b.n	800aea0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d007      	beq.n	800aea0 <f_open+0x1d4>
 800ae90:	7ebb      	ldrb	r3, [r7, #26]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <f_open+0x1d4>
						res = FR_DENIED;
 800ae9a:	2307      	movs	r3, #7
 800ae9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d128      	bne.n	800aefa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	f003 0308 	and.w	r3, r3, #8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	f023 0301 	bic.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bf14      	ite	ne
 800aed2:	2301      	movne	r3, #1
 800aed4:	2300      	moveq	r3, #0
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	461a      	mov	r2, r3
 800aeda:	f107 0314 	add.w	r3, r7, #20
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe fa7b 	bl	80093dc <inc_lock>
 800aee6:	4602      	mov	r2, r0
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d102      	bne.n	800aefa <f_open+0x22e>
 800aef4:	2302      	movs	r3, #2
 800aef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aefa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 8095 	bne.w	800b02e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7ff f89d 	bl	800a04a <ld_clust>
 800af10:	4602      	mov	r2, r0
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800af16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af18:	331c      	adds	r3, #28
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe f8c6 	bl	80090ac <ld_dword>
 800af20:	4602      	mov	r2, r0
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	88da      	ldrh	r2, [r3, #6]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	79fa      	ldrb	r2, [r7, #7]
 800af3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3330      	adds	r3, #48	; 0x30
 800af56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af5a:	2100      	movs	r1, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe f930 	bl	80091c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d060      	beq.n	800b02e <f_open+0x362>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d05c      	beq.n	800b02e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	895b      	ldrh	r3, [r3, #10]
 800af80:	025b      	lsls	r3, r3, #9
 800af82:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	657b      	str	r3, [r7, #84]	; 0x54
 800af90:	e016      	b.n	800afc0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fc0d 	bl	80097b6 <get_fat>
 800af9c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800af9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d802      	bhi.n	800afaa <f_open+0x2de>
 800afa4:	2302      	movs	r3, #2
 800afa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800afaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb0:	d102      	bne.n	800afb8 <f_open+0x2ec>
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800afb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	657b      	str	r3, [r7, #84]	; 0x54
 800afc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d103      	bne.n	800afd0 <f_open+0x304>
 800afc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afcc:	429a      	cmp	r2, r3
 800afce:	d8e0      	bhi.n	800af92 <f_open+0x2c6>
				}
				fp->clust = clst;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afd4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800afd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d127      	bne.n	800b02e <f_open+0x362>
 800afde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d022      	beq.n	800b02e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afec:	4618      	mov	r0, r3
 800afee:	f7fe fbc3 	bl	8009778 <clust2sect>
 800aff2:	6478      	str	r0, [r7, #68]	; 0x44
 800aff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d103      	bne.n	800b002 <f_open+0x336>
						res = FR_INT_ERR;
 800affa:	2302      	movs	r3, #2
 800affc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b000:	e015      	b.n	800b02e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b004:	0a5a      	lsrs	r2, r3, #9
 800b006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b008:	441a      	add	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	7858      	ldrb	r0, [r3, #1]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a1a      	ldr	r2, [r3, #32]
 800b01c:	2301      	movs	r3, #1
 800b01e:	f7fd ffcf 	bl	8008fc0 <disk_read>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <f_open+0x362>
 800b028:	2301      	movs	r3, #1
 800b02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <f_open+0x370>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe f92f 	bl	80092a8 <unlock_fs>
 800b04a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3760      	adds	r7, #96	; 0x60
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b08c      	sub	sp, #48	; 0x30
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f107 0210 	add.w	r2, r7, #16
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fd7c 	bl	800ab74 <validate>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b086:	2b00      	cmp	r3, #0
 800b088:	d107      	bne.n	800b09a <f_write+0x44>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	7d5b      	ldrb	r3, [r3, #21]
 800b08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d009      	beq.n	800b0ae <f_write+0x58>
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe f900 	bl	80092a8 <unlock_fs>
 800b0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0ac:	e173      	b.n	800b396 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	7d1b      	ldrb	r3, [r3, #20]
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <f_write+0x72>
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2107      	movs	r1, #7
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f8f2 	bl	80092a8 <unlock_fs>
 800b0c4:	2307      	movs	r3, #7
 800b0c6:	e166      	b.n	800b396 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	699a      	ldr	r2, [r3, #24]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	441a      	add	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	f080 814b 	bcs.w	800b370 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	699b      	ldr	r3, [r3, #24]
 800b0de:	43db      	mvns	r3, r3
 800b0e0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b0e2:	e145      	b.n	800b370 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f040 8101 	bne.w	800b2f4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	0a5b      	lsrs	r3, r3, #9
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	8952      	ldrh	r2, [r2, #10]
 800b0fc:	3a01      	subs	r2, #1
 800b0fe:	4013      	ands	r3, r2
 800b100:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d14d      	bne.n	800b1a4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10c      	bne.n	800b12a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d11a      	bne.n	800b152 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fd3f 	bl	8009ba4 <create_chain>
 800b126:	62b8      	str	r0, [r7, #40]	; 0x28
 800b128:	e013      	b.n	800b152 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d007      	beq.n	800b142 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	4619      	mov	r1, r3
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7fe fdcb 	bl	8009cd4 <clmt_clust>
 800b13e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b140:	e007      	b.n	800b152 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	4619      	mov	r1, r3
 800b14a:	4610      	mov	r0, r2
 800b14c:	f7fe fd2a 	bl	8009ba4 <create_chain>
 800b150:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8110 	beq.w	800b37a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d109      	bne.n	800b174 <f_write+0x11e>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2202      	movs	r2, #2
 800b164:	755a      	strb	r2, [r3, #21]
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2102      	movs	r1, #2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe f89c 	bl	80092a8 <unlock_fs>
 800b170:	2302      	movs	r3, #2
 800b172:	e110      	b.n	800b396 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d109      	bne.n	800b190 <f_write+0x13a>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	755a      	strb	r2, [r3, #21]
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	2101      	movs	r1, #1
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe f88e 	bl	80092a8 <unlock_fs>
 800b18c:	2301      	movs	r3, #1
 800b18e:	e102      	b.n	800b396 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b194:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <f_write+0x14e>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	7d1b      	ldrb	r3, [r3, #20]
 800b1a8:	b25b      	sxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da1d      	bge.n	800b1ea <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	7858      	ldrb	r0, [r3, #1]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6a1a      	ldr	r2, [r3, #32]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f7fd ff1f 	bl	8009000 <disk_write>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d009      	beq.n	800b1dc <f_write+0x186>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	755a      	strb	r2, [r3, #21]
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe f868 	bl	80092a8 <unlock_fs>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e0dc      	b.n	800b396 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	7d1b      	ldrb	r3, [r3, #20]
 800b1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fe fac0 	bl	8009778 <clust2sect>
 800b1f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d109      	bne.n	800b214 <f_write+0x1be>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2202      	movs	r2, #2
 800b204:	755a      	strb	r2, [r3, #21]
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2102      	movs	r1, #2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe f84c 	bl	80092a8 <unlock_fs>
 800b210:	2302      	movs	r3, #2
 800b212:	e0c0      	b.n	800b396 <f_write+0x340>
			sect += csect;
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	4413      	add	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	0a5b      	lsrs	r3, r3, #9
 800b220:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d041      	beq.n	800b2ac <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	4413      	add	r3, r2
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	8952      	ldrh	r2, [r2, #10]
 800b232:	4293      	cmp	r3, r2
 800b234:	d905      	bls.n	800b242 <f_write+0x1ec>
					cc = fs->csize - csect;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	895b      	ldrh	r3, [r3, #10]
 800b23a:	461a      	mov	r2, r3
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	7858      	ldrb	r0, [r3, #1]
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	69f9      	ldr	r1, [r7, #28]
 800b24c:	f7fd fed8 	bl	8009000 <disk_write>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <f_write+0x214>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2201      	movs	r2, #1
 800b25a:	755a      	strb	r2, [r3, #21]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2101      	movs	r1, #1
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe f821 	bl	80092a8 <unlock_fs>
 800b266:	2301      	movs	r3, #1
 800b268:	e095      	b.n	800b396 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1a      	ldr	r2, [r3, #32]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	6a3a      	ldr	r2, [r7, #32]
 800b274:	429a      	cmp	r2, r3
 800b276:	d915      	bls.n	800b2a4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1a      	ldr	r2, [r3, #32]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	025b      	lsls	r3, r3, #9
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	4413      	add	r3, r2
 800b28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b290:	4619      	mov	r1, r3
 800b292:	f7fd ff75 	bl	8009180 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	7d1b      	ldrb	r3, [r3, #20]
 800b29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	025b      	lsls	r3, r3, #9
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b2aa:	e044      	b.n	800b336 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d01b      	beq.n	800b2ee <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d215      	bcs.n	800b2ee <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	7858      	ldrb	r0, [r3, #1]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	f7fd fe76 	bl	8008fc0 <disk_read>
 800b2d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d009      	beq.n	800b2ee <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	755a      	strb	r2, [r3, #21]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fd ffdf 	bl	80092a8 <unlock_fs>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e053      	b.n	800b396 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	429a      	cmp	r2, r3
 800b308:	d901      	bls.n	800b30e <f_write+0x2b8>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31c:	4413      	add	r3, r2
 800b31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b320:	69f9      	ldr	r1, [r7, #28]
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd ff2c 	bl	8009180 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	7d1b      	ldrb	r3, [r3, #20]
 800b32c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b330:	b2da      	uxtb	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	4413      	add	r3, r2
 800b33c:	61fb      	str	r3, [r7, #28]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	699a      	ldr	r2, [r3, #24]
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	441a      	add	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	619a      	str	r2, [r3, #24]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	429a      	cmp	r2, r3
 800b354:	bf38      	it	cc
 800b356:	461a      	movcc	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	60da      	str	r2, [r3, #12]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	441a      	add	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f47f aeb6 	bne.w	800b0e4 <f_write+0x8e>
 800b378:	e000      	b.n	800b37c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b37a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b384:	b2da      	uxtb	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fd ff8a 	bl	80092a8 <unlock_fs>
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3730      	adds	r7, #48	; 0x30
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f107 0208 	add.w	r2, r7, #8
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fbe0 	bl	800ab74 <validate>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d16d      	bne.n	800b49a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	7d1b      	ldrb	r3, [r3, #20]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d067      	beq.n	800b49a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	7d1b      	ldrb	r3, [r3, #20]
 800b3ce:	b25b      	sxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da1a      	bge.n	800b40a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	7858      	ldrb	r0, [r3, #1]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1a      	ldr	r2, [r3, #32]
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	f7fd fe0c 	bl	8009000 <disk_write>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d006      	beq.n	800b3fc <f_sync+0x5e>
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fd ff58 	bl	80092a8 <unlock_fs>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e055      	b.n	800b4a8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	7d1b      	ldrb	r3, [r3, #20]
 800b400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b404:	b2da      	uxtb	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b40a:	f7fd fd3b 	bl	8008e84 <get_fattime>
 800b40e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	4619      	mov	r1, r3
 800b418:	4610      	mov	r0, r2
 800b41a:	f7fe f911 	bl	8009640 <move_window>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d138      	bne.n	800b49a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	330b      	adds	r3, #11
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	330b      	adds	r3, #11
 800b438:	f042 0220 	orr.w	r2, r2, #32
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	461a      	mov	r2, r3
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	f7fe fe1c 	bl	800a088 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f103 021c 	add.w	r2, r3, #28
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f7fd fe63 	bl	8009128 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3316      	adds	r3, #22
 800b466:	6939      	ldr	r1, [r7, #16]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fd fe5d 	bl	8009128 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3312      	adds	r3, #18
 800b472:	2100      	movs	r1, #0
 800b474:	4618      	mov	r0, r3
 800b476:	f7fd fe3c 	bl	80090f2 <st_word>
					fs->wflag = 1;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2201      	movs	r2, #1
 800b47e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe f90a 	bl	800969c <sync_fs>
 800b488:	4603      	mov	r3, r0
 800b48a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7d1b      	ldrb	r3, [r3, #20]
 800b490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b494:	b2da      	uxtb	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	7dfa      	ldrb	r2, [r7, #23]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fd ff01 	bl	80092a8 <unlock_fs>
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff70 	bl	800b39e <f_sync>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d11d      	bne.n	800b504 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f107 0208 	add.w	r2, r7, #8
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fb4f 	bl	800ab74 <validate>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d111      	bne.n	800b504 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe f807 	bl	80094f8 <dec_lock>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd fed2 	bl	80092a8 <unlock_fs>
#endif
		}
	}
	return res;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b086      	sub	sp, #24
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <f_opendir+0x14>
 800b51e:	2309      	movs	r3, #9
 800b520:	e06a      	b.n	800b5f8 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b526:	f107 010c 	add.w	r1, r7, #12
 800b52a:	463b      	mov	r3, r7
 800b52c:	2200      	movs	r2, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff f8cc 	bl	800a6cc <find_volume>
 800b534:	4603      	mov	r3, r0
 800b536:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d14f      	bne.n	800b5de <f_opendir+0xd0>
		obj->fs = fs;
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7fe ffb3 	bl	800a4b4 <follow_path>
 800b54e:	4603      	mov	r3, r0
 800b550:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d13d      	bne.n	800b5d4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b55e:	b25b      	sxtb	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	db12      	blt.n	800b58a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	799b      	ldrb	r3, [r3, #6]
 800b568:	f003 0310 	and.w	r3, r3, #16
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7fe fd66 	bl	800a04a <ld_clust>
 800b57e:	4602      	mov	r2, r0
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	609a      	str	r2, [r3, #8]
 800b584:	e001      	b.n	800b58a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b586:	2305      	movs	r3, #5
 800b588:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d121      	bne.n	800b5d4 <f_opendir+0xc6>
				obj->id = fs->id;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	88da      	ldrh	r2, [r3, #6]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b598:	2100      	movs	r1, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7fe fbce 	bl	8009d3c <dir_sdi>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d114      	bne.n	800b5d4 <f_opendir+0xc6>
					if (obj->sclust) {
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7fd ff11 	bl	80093dc <inc_lock>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d105      	bne.n	800b5d4 <f_opendir+0xc6>
 800b5c8:	2312      	movs	r3, #18
 800b5ca:	75fb      	strb	r3, [r7, #23]
 800b5cc:	e002      	b.n	800b5d4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d101      	bne.n	800b5de <f_opendir+0xd0>
 800b5da:	2305      	movs	r3, #5
 800b5dc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <f_opendir+0xdc>
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	7dfa      	ldrb	r2, [r7, #23]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fd fe59 	bl	80092a8 <unlock_fs>
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f107 0208 	add.w	r2, r7, #8
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff faaf 	bl	800ab74 <validate>
 800b616:	4603      	mov	r3, r0
 800b618:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d115      	bne.n	800b64c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d006      	beq.n	800b636 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fd ff63 	bl	80094f8 <dec_lock>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2100      	movs	r1, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f7fd fe2e 	bl	80092a8 <unlock_fs>
#endif
	}
	return res;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f107 0208 	add.w	r2, r7, #8
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f7ff fa83 	bl	800ab74 <validate>
 800b66e:	4603      	mov	r3, r0
 800b670:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d126      	bne.n	800b6c6 <f_readdir+0x70>
		if (!fno) {
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d106      	bne.n	800b68c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b67e:	2100      	movs	r1, #0
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7fe fb5b 	bl	8009d3c <dir_sdi>
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
 800b68a:	e01c      	b.n	800b6c6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7fe fd1a 	bl	800a0c8 <dir_read>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	2b04      	cmp	r3, #4
 800b69c:	d101      	bne.n	800b6a2 <f_readdir+0x4c>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10e      	bne.n	800b6c6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7fe fe0e 	bl	800a2cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7fe fbbd 	bl	8009e32 <dir_next>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	d101      	bne.n	800b6c6 <f_readdir+0x70>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	7bfa      	ldrb	r2, [r7, #15]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fd fdeb 	bl	80092a8 <unlock_fs>
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b090      	sub	sp, #64	; 0x40
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b6e6:	f107 010c 	add.w	r1, r7, #12
 800b6ea:	1d3b      	adds	r3, r7, #4
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe ffec 	bl	800a6cc <find_volume>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b6fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d11f      	bne.n	800b742 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	f107 030c 	add.w	r3, r7, #12
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fed2 	bl	800a4b4 <follow_path>
 800b710:	4603      	mov	r3, r0
 800b712:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b716:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d111      	bne.n	800b742 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b71e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b722:	b25b      	sxtb	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	da03      	bge.n	800b730 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b728:	2306      	movs	r3, #6
 800b72a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b72e:	e008      	b.n	800b742 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <f_stat+0x66>
 800b736:	f107 030c 	add.w	r3, r7, #12
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe fdc5 	bl	800a2cc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b748:	4611      	mov	r1, r2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fd fdac 	bl	80092a8 <unlock_fs>
 800b750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b754:	4618      	mov	r0, r3
 800b756:	3740      	adds	r7, #64	; 0x40
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b09e      	sub	sp, #120	; 0x78
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b768:	f107 010c 	add.w	r1, r7, #12
 800b76c:	1d3b      	adds	r3, r7, #4
 800b76e:	2202      	movs	r2, #2
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe ffab 	bl	800a6cc <find_volume>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b780:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b784:	2b00      	cmp	r3, #0
 800b786:	f040 808e 	bne.w	800b8a6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b790:	4611      	mov	r1, r2
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fe8e 	bl	800a4b4 <follow_path>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b79e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d108      	bne.n	800b7b8 <f_unlink+0x5c>
 800b7a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fd fd97 	bl	80092e0 <chk_lock>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b7b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d172      	bne.n	800b8a6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b7c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da03      	bge.n	800b7d2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b7ca:	2306      	movs	r3, #6
 800b7cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b7d0:	e008      	b.n	800b7e4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b7d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b7de:	2307      	movs	r3, #7
 800b7e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b7e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d134      	bne.n	800b856 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fc29 	bl	800a04a <ld_clust>
 800b7f8:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b7fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b7fe:	f003 0310 	and.w	r3, r3, #16
 800b802:	2b00      	cmp	r3, #0
 800b804:	d027      	beq.n	800b856 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b80a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b80c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b80e:	f107 0310 	add.w	r3, r7, #16
 800b812:	2100      	movs	r1, #0
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fa91 	bl	8009d3c <dir_sdi>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b820:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b824:	2b00      	cmp	r3, #0
 800b826:	d116      	bne.n	800b856 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b828:	f107 0310 	add.w	r3, r7, #16
 800b82c:	2100      	movs	r1, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fc4a 	bl	800a0c8 <dir_read>
 800b834:	4603      	mov	r3, r0
 800b836:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b83a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d102      	bne.n	800b848 <f_unlink+0xec>
 800b842:	2307      	movs	r3, #7
 800b844:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d102      	bne.n	800b856 <f_unlink+0xfa>
 800b850:	2300      	movs	r3, #0
 800b852:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d123      	bne.n	800b8a6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b85e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fd14 	bl	800a290 <dir_remove>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b86e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10c      	bne.n	800b890 <f_unlink+0x134>
 800b876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b87c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b880:	2200      	movs	r2, #0
 800b882:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe f928 	bl	8009ada <remove_chain>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b890:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b894:	2b00      	cmp	r3, #0
 800b896:	d106      	bne.n	800b8a6 <f_unlink+0x14a>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd fefe 	bl	800969c <sync_fs>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fd fcfa 	bl	80092a8 <unlock_fs>
 800b8b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3778      	adds	r7, #120	; 0x78
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b096      	sub	sp, #88	; 0x58
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b8c8:	f107 0108 	add.w	r1, r7, #8
 800b8cc:	1d3b      	adds	r3, r7, #4
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fefb 	bl	800a6cc <find_volume>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 80ec 	bne.w	800bac2 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	f107 030c 	add.w	r3, r7, #12
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fdde 	bl	800a4b4 <follow_path>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b8fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <f_mkdir+0x4c>
 800b906:	2308      	movs	r3, #8
 800b908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b90c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b910:	2b04      	cmp	r3, #4
 800b912:	f040 80d6 	bne.w	800bac2 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b916:	f107 030c 	add.w	r3, r7, #12
 800b91a:	2100      	movs	r1, #0
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe f941 	bl	8009ba4 <create_chain>
 800b922:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	895b      	ldrh	r3, [r3, #10]
 800b928:	025b      	lsls	r3, r3, #9
 800b92a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <f_mkdir+0x7e>
 800b938:	2307      	movs	r3, #7
 800b93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b940:	2b01      	cmp	r3, #1
 800b942:	d102      	bne.n	800b94a <f_mkdir+0x8a>
 800b944:	2302      	movs	r3, #2
 800b946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d102      	bne.n	800b958 <f_mkdir+0x98>
 800b952:	2301      	movs	r3, #1
 800b954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <f_mkdir+0xae>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4618      	mov	r0, r3
 800b964:	f7fd fe28 	bl	80095b8 <sync_window>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b96e:	f7fd fa89 	bl	8008e84 <get_fattime>
 800b972:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d16a      	bne.n	800ba52 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b980:	4618      	mov	r0, r3
 800b982:	f7fd fef9 	bl	8009778 <clust2sect>
 800b986:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	3334      	adds	r3, #52	; 0x34
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b992:	2100      	movs	r1, #0
 800b994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b996:	f7fd fc14 	bl	80091c2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b99a:	220b      	movs	r2, #11
 800b99c:	2120      	movs	r1, #32
 800b99e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b9a0:	f7fd fc0f 	bl	80091c2 <mem_set>
					dir[DIR_Name] = '.';
 800b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a6:	222e      	movs	r2, #46	; 0x2e
 800b9a8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ac:	330b      	adds	r3, #11
 800b9ae:	2210      	movs	r2, #16
 800b9b0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b4:	3316      	adds	r3, #22
 800b9b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd fbb5 	bl	8009128 <st_dword>
					st_clust(fs, dir, dcl);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fb5f 	bl	800a088 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9cc:	3320      	adds	r3, #32
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fd fbd4 	bl	8009180 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9da:	3321      	adds	r3, #33	; 0x21
 800b9dc:	222e      	movs	r2, #46	; 0x2e
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d106      	bne.n	800b9fa <f_mkdir+0x13a>
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d101      	bne.n	800b9fa <f_mkdir+0x13a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b9fa:	68b8      	ldr	r0, [r7, #8]
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fe:	3320      	adds	r3, #32
 800ba00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba02:	4619      	mov	r1, r3
 800ba04:	f7fe fb40 	bl	800a088 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	895b      	ldrh	r3, [r3, #10]
 800ba0c:	653b      	str	r3, [r7, #80]	; 0x50
 800ba0e:	e01b      	b.n	800ba48 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800ba10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fd fdc8 	bl	80095b8 <sync_window>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800ba2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10c      	bne.n	800ba50 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800ba36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba3e:	f7fd fbc0 	bl	80091c2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ba42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba44:	3b01      	subs	r3, #1
 800ba46:	653b      	str	r3, [r7, #80]	; 0x50
 800ba48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e0      	bne.n	800ba10 <f_mkdir+0x150>
 800ba4e:	e000      	b.n	800ba52 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800ba50:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ba52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d107      	bne.n	800ba6a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ba5a:	f107 030c 	add.w	r3, r7, #12
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fbe4 	bl	800a22c <dir_register>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800ba6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d120      	bne.n	800bab4 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ba76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba78:	3316      	adds	r3, #22
 800ba7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fd fb53 	bl	8009128 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fafd 	bl	800a088 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ba8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba90:	330b      	adds	r3, #11
 800ba92:	2210      	movs	r2, #16
 800ba94:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ba9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10e      	bne.n	800bac2 <f_mkdir+0x202>
					res = sync_fs(fs);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fd fdf8 	bl	800969c <sync_fs>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800bab2:	e006      	b.n	800bac2 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	2200      	movs	r2, #0
 800baba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe f80c 	bl	8009ada <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fd fbec 	bl	80092a8 <unlock_fs>
 800bad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3758      	adds	r7, #88	; 0x58
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	4613      	mov	r3, r2
 800bae8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800baf2:	4b1f      	ldr	r3, [pc, #124]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800baf4:	7a5b      	ldrb	r3, [r3, #9]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d131      	bne.n	800bb60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bafc:	4b1c      	ldr	r3, [pc, #112]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bafe:	7a5b      	ldrb	r3, [r3, #9]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	461a      	mov	r2, r3
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb0a:	4b19      	ldr	r3, [pc, #100]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb0c:	7a5b      	ldrb	r3, [r3, #9]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4a17      	ldr	r2, [pc, #92]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb1a:	4b15      	ldr	r3, [pc, #84]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb1c:	7a5b      	ldrb	r3, [r3, #9]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb24:	4413      	add	r3, r2
 800bb26:	79fa      	ldrb	r2, [r7, #7]
 800bb28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb2a:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb2c:	7a5b      	ldrb	r3, [r3, #9]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	b2d1      	uxtb	r1, r2
 800bb34:	4a0e      	ldr	r2, [pc, #56]	; (800bb70 <FATFS_LinkDriverEx+0x94>)
 800bb36:	7251      	strb	r1, [r2, #9]
 800bb38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb3a:	7dbb      	ldrb	r3, [r7, #22]
 800bb3c:	3330      	adds	r3, #48	; 0x30
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	3301      	adds	r3, #1
 800bb48:	223a      	movs	r2, #58	; 0x3a
 800bb4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3302      	adds	r3, #2
 800bb50:	222f      	movs	r2, #47	; 0x2f
 800bb52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	3303      	adds	r3, #3
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	2000612c 	.word	0x2000612c

0800bb74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff ffaa 	bl	800badc <FATFS_LinkDriverEx>
 800bb88:	4603      	mov	r3, r0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b086      	sub	sp, #24
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	4603      	mov	r3, r0
 800bb9a:	6039      	str	r1, [r7, #0]
 800bb9c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bb9e:	2300      	movs	r3, #0
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	2300      	movs	r3, #0
 800bba4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bba6:	f107 030c 	add.w	r3, r7, #12
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f8dd 	bl	800bd6c <osSemaphoreCreate>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	bf14      	ite	ne
 800bbc0:	2301      	movne	r3, #1
 800bbc2:	2300      	moveq	r3, #0
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	617b      	str	r3, [r7, #20]

    return ret;
 800bbc8:	697b      	ldr	r3, [r7, #20]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f97c 	bl	800bed8 <osSemaphoreDelete>
#endif
    return 1;
 800bbe0:	2301      	movs	r3, #1
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800bbf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f8e8 	bl	800bdd0 <osSemaphoreWait>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800bc06:	2301      	movs	r3, #1
 800bc08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f925 	bl	800be6c <osSemaphoreRelease>
#endif
}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	4603      	mov	r3, r0
 800bc32:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bc34:	2300      	movs	r3, #0
 800bc36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bc38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc3c:	2b84      	cmp	r3, #132	; 0x84
 800bc3e:	d005      	beq.n	800bc4c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bc40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4413      	add	r3, r2
 800bc48:	3303      	adds	r3, #3
 800bc4a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc60:	f3ef 8305 	mrs	r3, IPSR
 800bc64:	607b      	str	r3, [r7, #4]
  return(result);
 800bc66:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bf14      	ite	ne
 800bc6c:	2301      	movne	r3, #1
 800bc6e:	2300      	moveq	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc82:	f001 f9a3 	bl	800cfcc <vTaskStartScheduler>
  
  return osOK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc90:	f7ff ffe3 	bl	800bc5a <inHandlerMode>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d003      	beq.n	800bca2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc9a:	f001 fabb 	bl	800d214 <xTaskGetTickCountFromISR>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	e002      	b.n	800bca8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bca2:	f001 faa7 	bl	800d1f4 <xTaskGetTickCount>
 800bca6:	4603      	mov	r3, r0
  }
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcae:	b089      	sub	sp, #36	; 0x24
 800bcb0:	af04      	add	r7, sp, #16
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d020      	beq.n	800bd00 <osThreadCreate+0x54>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d01c      	beq.n	800bd00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685c      	ldr	r4, [r3, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691e      	ldr	r6, [r3, #16]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff ffa6 	bl	800bc2a <makeFreeRtosPriority>
 800bcde:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bce8:	9202      	str	r2, [sp, #8]
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	9100      	str	r1, [sp, #0]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f000 ff8b 	bl	800cc10 <xTaskCreateStatic>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e01c      	b.n	800bd3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685c      	ldr	r4, [r3, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff ff88 	bl	800bc2a <makeFreeRtosPriority>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	f107 030c 	add.w	r3, r7, #12
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	9200      	str	r2, [sp, #0]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	4632      	mov	r2, r6
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 ffcd 	bl	800ccca <xTaskCreate>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d001      	beq.n	800bd3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	e000      	b.n	800bd3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <osDelay+0x16>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	e000      	b.n	800bd5c <osDelay+0x18>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 f901 	bl	800cf64 <vTaskDelay>
  
  return osOK;
 800bd62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00f      	beq.n	800bd9e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d10a      	bne.n	800bd9a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	9200      	str	r2, [sp, #0]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	2001      	movs	r0, #1
 800bd92:	f000 f9dd 	bl	800c150 <xQueueGenericCreateStatic>
 800bd96:	4603      	mov	r3, r0
 800bd98:	e016      	b.n	800bdc8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	e014      	b.n	800bdc8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d110      	bne.n	800bdc6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bda4:	2203      	movs	r2, #3
 800bda6:	2100      	movs	r1, #0
 800bda8:	2001      	movs	r0, #1
 800bdaa:	f000 fa49 	bl	800c240 <xQueueGenericCreate>
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d005      	beq.n	800bdc2 <osSemaphoreCreate+0x56>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2200      	movs	r2, #0
 800bdba:	2100      	movs	r1, #0
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f000 fa99 	bl	800c2f4 <xQueueGenericSend>
      return sema;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	e000      	b.n	800bdc8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bdc6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bdda:	2300      	movs	r3, #0
 800bddc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bde4:	2380      	movs	r3, #128	; 0x80
 800bde6:	e03a      	b.n	800be5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d103      	bne.n	800bdfc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	e009      	b.n	800be10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d006      	beq.n	800be10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <osSemaphoreWait+0x40>
      ticks = 1;
 800be0c:	2301      	movs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800be10:	f7ff ff23 	bl	800bc5a <inHandlerMode>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d017      	beq.n	800be4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	461a      	mov	r2, r3
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fcfe 	bl	800c824 <xQueueReceiveFromISR>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d001      	beq.n	800be32 <osSemaphoreWait+0x62>
      return osErrorOS;
 800be2e:	23ff      	movs	r3, #255	; 0xff
 800be30:	e015      	b.n	800be5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d011      	beq.n	800be5c <osSemaphoreWait+0x8c>
 800be38:	4b0b      	ldr	r3, [pc, #44]	; (800be68 <osSemaphoreWait+0x98>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	e008      	b.n	800be5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fbdd 	bl	800c60c <xQueueSemaphoreTake>
 800be52:	4603      	mov	r3, r0
 800be54:	2b01      	cmp	r3, #1
 800be56:	d001      	beq.n	800be5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800be58:	23ff      	movs	r3, #255	; 0xff
 800be5a:	e000      	b.n	800be5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be74:	2300      	movs	r3, #0
 800be76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be78:	2300      	movs	r3, #0
 800be7a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800be7c:	f7ff feed 	bl	800bc5a <inHandlerMode>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d016      	beq.n	800beb4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800be86:	f107 0308 	add.w	r3, r7, #8
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fb2f 	bl	800c4f0 <xQueueGiveFromISR>
 800be92:	4603      	mov	r3, r0
 800be94:	2b01      	cmp	r3, #1
 800be96:	d001      	beq.n	800be9c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800be98:	23ff      	movs	r3, #255	; 0xff
 800be9a:	e017      	b.n	800becc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d013      	beq.n	800beca <osSemaphoreRelease+0x5e>
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <osSemaphoreRelease+0x68>)
 800bea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	e00a      	b.n	800beca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800beb4:	2300      	movs	r3, #0
 800beb6:	2200      	movs	r2, #0
 800beb8:	2100      	movs	r1, #0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fa1a 	bl	800c2f4 <xQueueGenericSend>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d001      	beq.n	800beca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bec6:	23ff      	movs	r3, #255	; 0xff
 800bec8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800beca:	68fb      	ldr	r3, [r7, #12]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bee0:	f7ff febb 	bl	800bc5a <inHandlerMode>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <osSemaphoreDelete+0x16>
    return osErrorISR;
 800beea:	2382      	movs	r3, #130	; 0x82
 800beec:	e003      	b.n	800bef6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fd18 	bl	800c924 <vQueueDelete>

  return osOK; 
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800bf08:	2381      	movs	r3, #129	; 0x81
#endif
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f103 0208 	add.w	r2, r3, #8
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f103 0208 	add.w	r2, r3, #8
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f103 0208 	add.w	r2, r3, #8
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf56:	b480      	push	{r7}
 800bf58:	b083      	sub	sp, #12
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	689a      	ldr	r2, [r3, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	601a      	str	r2, [r3, #0]
}
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfce:	d103      	bne.n	800bfd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	e00c      	b.n	800bff2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	60fb      	str	r3, [r7, #12]
 800bfde:	e002      	b.n	800bfe6 <vListInsert+0x2e>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d2f6      	bcs.n	800bfe0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	601a      	str	r2, [r3, #0]
}
 800c01e:	bf00      	nop
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6892      	ldr	r2, [r2, #8]
 800c040:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6852      	ldr	r2, [r2, #4]
 800c04a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d103      	bne.n	800c05e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	1e5a      	subs	r2, r3, #1
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
	...

0800c080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c0aa:	f001 ff13 	bl	800ded4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	441a      	add	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0e0:	fb01 f303 	mul.w	r3, r1, r3
 800c0e4:	441a      	add	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	22ff      	movs	r2, #255	; 0xff
 800c0ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	22ff      	movs	r2, #255	; 0xff
 800c0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d114      	bne.n	800c12a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d01a      	beq.n	800c13e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3310      	adds	r3, #16
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 f9d1 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d012      	beq.n	800c13e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c118:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <xQueueGenericReset+0xcc>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	e009      	b.n	800c13e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3310      	adds	r3, #16
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fef1 	bl	800bf16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3324      	adds	r3, #36	; 0x24
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff feec 	bl	800bf16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c13e:	f001 fef9 	bl	800df34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c142:	2301      	movs	r3, #1
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	e000ed04 	.word	0xe000ed04

0800c150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <xQueueGenericCreateStatic+0x52>
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <xQueueGenericCreateStatic+0x56>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericCreateStatic+0x58>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10a      	bne.n	800c1c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	623b      	str	r3, [r7, #32]
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <xQueueGenericCreateStatic+0x7e>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <xQueueGenericCreateStatic+0x82>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <xQueueGenericCreateStatic+0x84>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	61fb      	str	r3, [r7, #28]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1ee:	2348      	movs	r3, #72	; 0x48
 800c1f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b48      	cmp	r3, #72	; 0x48
 800c1f6:	d00a      	beq.n	800c20e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61bb      	str	r3, [r7, #24]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c20e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00d      	beq.n	800c236 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c222:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	4613      	mov	r3, r2
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 f83f 	bl	800c2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c238:	4618      	mov	r0, r3
 800c23a:	3730      	adds	r7, #48	; 0x30
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08a      	sub	sp, #40	; 0x28
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	613b      	str	r3, [r7, #16]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3348      	adds	r3, #72	; 0x48
 800c278:	4618      	mov	r0, r3
 800c27a:	f001 ff4d 	bl	800e118 <pvPortMalloc>
 800c27e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d011      	beq.n	800c2aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3348      	adds	r3, #72	; 0x48
 800c28e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c298:	79fa      	ldrb	r2, [r7, #7]
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f805 	bl	800c2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	69b8      	ldr	r0, [r7, #24]
 800c2e6:	f7ff fecb 	bl	800c080 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2ea:	bf00      	nop
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08e      	sub	sp, #56	; 0x38
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c302:	2300      	movs	r3, #0
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <xQueueGenericSend+0x32>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d103      	bne.n	800c334 <xQueueGenericSend+0x40>
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <xQueueGenericSend+0x44>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <xQueueGenericSend+0x46>
 800c338:	2300      	movs	r3, #0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10a      	bne.n	800c354 <xQueueGenericSend+0x60>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c350:	bf00      	nop
 800c352:	e7fe      	b.n	800c352 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d103      	bne.n	800c362 <xQueueGenericSend+0x6e>
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <xQueueGenericSend+0x72>
 800c362:	2301      	movs	r3, #1
 800c364:	e000      	b.n	800c368 <xQueueGenericSend+0x74>
 800c366:	2300      	movs	r3, #0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <xQueueGenericSend+0x8e>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	623b      	str	r3, [r7, #32]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c382:	f001 fa57 	bl	800d834 <xTaskGetSchedulerState>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <xQueueGenericSend+0x9e>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <xQueueGenericSend+0xa2>
 800c392:	2301      	movs	r3, #1
 800c394:	e000      	b.n	800c398 <xQueueGenericSend+0xa4>
 800c396:	2300      	movs	r3, #0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	61fb      	str	r3, [r7, #28]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3b2:	f001 fd8f 	bl	800ded4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d302      	bcc.n	800c3c8 <xQueueGenericSend+0xd4>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d129      	bne.n	800c41c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	68b9      	ldr	r1, [r7, #8]
 800c3cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ce:	f000 fae4 	bl	800c99a <prvCopyDataToQueue>
 800c3d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d010      	beq.n	800c3fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	3324      	adds	r3, #36	; 0x24
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 f867 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d013      	beq.n	800c414 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3ec:	4b3f      	ldr	r3, [pc, #252]	; (800c4ec <xQueueGenericSend+0x1f8>)
 800c3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	e00a      	b.n	800c414 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	2b00      	cmp	r3, #0
 800c402:	d007      	beq.n	800c414 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c404:	4b39      	ldr	r3, [pc, #228]	; (800c4ec <xQueueGenericSend+0x1f8>)
 800c406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c414:	f001 fd8e 	bl	800df34 <vPortExitCritical>
				return pdPASS;
 800c418:	2301      	movs	r3, #1
 800c41a:	e063      	b.n	800c4e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d103      	bne.n	800c42a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c422:	f001 fd87 	bl	800df34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c426:	2300      	movs	r3, #0
 800c428:	e05c      	b.n	800c4e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c430:	f107 0314 	add.w	r3, r7, #20
 800c434:	4618      	mov	r0, r3
 800c436:	f001 f89f 	bl	800d578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c43a:	2301      	movs	r3, #1
 800c43c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c43e:	f001 fd79 	bl	800df34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c442:	f000 fe2d 	bl	800d0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c446:	f001 fd45 	bl	800ded4 <vPortEnterCritical>
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c450:	b25b      	sxtb	r3, r3
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	d103      	bne.n	800c460 <xQueueGenericSend+0x16c>
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c466:	b25b      	sxtb	r3, r3
 800c468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46c:	d103      	bne.n	800c476 <xQueueGenericSend+0x182>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c476:	f001 fd5d 	bl	800df34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c47a:	1d3a      	adds	r2, r7, #4
 800c47c:	f107 0314 	add.w	r3, r7, #20
 800c480:	4611      	mov	r1, r2
 800c482:	4618      	mov	r0, r3
 800c484:	f001 f88e 	bl	800d5a4 <xTaskCheckForTimeOut>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d124      	bne.n	800c4d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c48e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c490:	f000 fb7b 	bl	800cb8a <prvIsQueueFull>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d018      	beq.n	800c4cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	3310      	adds	r3, #16
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 ffe2 	bl	800d46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4aa:	f000 fb06 	bl	800caba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4ae:	f000 fe05 	bl	800d0bc <xTaskResumeAll>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f47f af7c 	bne.w	800c3b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4ba:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <xQueueGenericSend+0x1f8>)
 800c4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	e772      	b.n	800c3b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ce:	f000 faf4 	bl	800caba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4d2:	f000 fdf3 	bl	800d0bc <xTaskResumeAll>
 800c4d6:	e76c      	b.n	800c3b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4da:	f000 faee 	bl	800caba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4de:	f000 fded 	bl	800d0bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3738      	adds	r7, #56	; 0x38
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	e000ed04 	.word	0xe000ed04

0800c4f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08e      	sub	sp, #56	; 0x38
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	623b      	str	r3, [r7, #32]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00a      	beq.n	800c538 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	61fb      	str	r3, [r7, #28]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <xQueueGiveFromISR+0x58>
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <xQueueGiveFromISR+0x5c>
 800c548:	2301      	movs	r3, #1
 800c54a:	e000      	b.n	800c54e <xQueueGiveFromISR+0x5e>
 800c54c:	2300      	movs	r3, #0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	61bb      	str	r3, [r7, #24]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c568:	f001 fd96 	bl	800e098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c56c:	f3ef 8211 	mrs	r2, BASEPRI
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	617a      	str	r2, [r7, #20]
 800c582:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c584:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c594:	429a      	cmp	r2, r3
 800c596:	d22b      	bcs.n	800c5f0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d112      	bne.n	800c5da <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	3324      	adds	r3, #36	; 0x24
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 ff77 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00e      	beq.n	800c5ea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00b      	beq.n	800c5ea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e007      	b.n	800c5ea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5de:	3301      	adds	r3, #1
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	b25a      	sxtb	r2, r3
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ee:	e001      	b.n	800c5f4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c602:	4618      	mov	r0, r3
 800c604:	3738      	adds	r7, #56	; 0x38
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08e      	sub	sp, #56	; 0x38
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c616:	2300      	movs	r3, #0
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c61e:	2300      	movs	r3, #0
 800c620:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	623b      	str	r3, [r7, #32]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00a      	beq.n	800c65c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	61fb      	str	r3, [r7, #28]
}
 800c658:	bf00      	nop
 800c65a:	e7fe      	b.n	800c65a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c65c:	f001 f8ea 	bl	800d834 <xTaskGetSchedulerState>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d102      	bne.n	800c66c <xQueueSemaphoreTake+0x60>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <xQueueSemaphoreTake+0x64>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <xQueueSemaphoreTake+0x66>
 800c670:	2300      	movs	r3, #0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10a      	bne.n	800c68c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	61bb      	str	r3, [r7, #24]
}
 800c688:	bf00      	nop
 800c68a:	e7fe      	b.n	800c68a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c68c:	f001 fc22 	bl	800ded4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c694:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d024      	beq.n	800c6e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	1e5a      	subs	r2, r3, #1
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d104      	bne.n	800c6b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6ac:	f001 fa6a 	bl	800db84 <pvTaskIncrementMutexHeldCount>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00f      	beq.n	800c6de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	3310      	adds	r3, #16
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fef6 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d007      	beq.n	800c6de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6ce:	4b54      	ldr	r3, [pc, #336]	; (800c820 <xQueueSemaphoreTake+0x214>)
 800c6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6de:	f001 fc29 	bl	800df34 <vPortExitCritical>
				return pdPASS;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e097      	b.n	800c816 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d111      	bne.n	800c710 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00a      	beq.n	800c708 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	617b      	str	r3, [r7, #20]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c708:	f001 fc14 	bl	800df34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c70c:	2300      	movs	r3, #0
 800c70e:	e082      	b.n	800c816 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c716:	f107 030c 	add.w	r3, r7, #12
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 ff2c 	bl	800d578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c720:	2301      	movs	r3, #1
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c724:	f001 fc06 	bl	800df34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c728:	f000 fcba 	bl	800d0a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c72c:	f001 fbd2 	bl	800ded4 <vPortEnterCritical>
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c736:	b25b      	sxtb	r3, r3
 800c738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73c:	d103      	bne.n	800c746 <xQueueSemaphoreTake+0x13a>
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c74c:	b25b      	sxtb	r3, r3
 800c74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c752:	d103      	bne.n	800c75c <xQueueSemaphoreTake+0x150>
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c75c:	f001 fbea 	bl	800df34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c760:	463a      	mov	r2, r7
 800c762:	f107 030c 	add.w	r3, r7, #12
 800c766:	4611      	mov	r1, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f000 ff1b 	bl	800d5a4 <xTaskCheckForTimeOut>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d132      	bne.n	800c7da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c776:	f000 f9f2 	bl	800cb5e <prvIsQueueEmpty>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d026      	beq.n	800c7ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d109      	bne.n	800c79c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c788:	f001 fba4 	bl	800ded4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	4618      	mov	r0, r3
 800c792:	f001 f86d 	bl	800d870 <xTaskPriorityInherit>
 800c796:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c798:	f001 fbcc 	bl	800df34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	3324      	adds	r3, #36	; 0x24
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 fe61 	bl	800d46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ac:	f000 f985 	bl	800caba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7b0:	f000 fc84 	bl	800d0bc <xTaskResumeAll>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f47f af68 	bne.w	800c68c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c7bc:	4b18      	ldr	r3, [pc, #96]	; (800c820 <xQueueSemaphoreTake+0x214>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	e75e      	b.n	800c68c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c7ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7d0:	f000 f973 	bl	800caba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d4:	f000 fc72 	bl	800d0bc <xTaskResumeAll>
 800c7d8:	e758      	b.n	800c68c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7dc:	f000 f96d 	bl	800caba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7e0:	f000 fc6c 	bl	800d0bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7e6:	f000 f9ba 	bl	800cb5e <prvIsQueueEmpty>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f43f af4d 	beq.w	800c68c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00d      	beq.n	800c814 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c7f8:	f001 fb6c 	bl	800ded4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7fe:	f000 f8b4 	bl	800c96a <prvGetDisinheritPriorityAfterTimeout>
 800c802:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f001 f92c 	bl	800da68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c810:	f001 fb90 	bl	800df34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c816:	4618      	mov	r0, r3
 800c818:	3738      	adds	r7, #56	; 0x38
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08e      	sub	sp, #56	; 0x38
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10a      	bne.n	800c850 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	623b      	str	r3, [r7, #32]
}
 800c84c:	bf00      	nop
 800c84e:	e7fe      	b.n	800c84e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d103      	bne.n	800c85e <xQueueReceiveFromISR+0x3a>
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d101      	bne.n	800c862 <xQueueReceiveFromISR+0x3e>
 800c85e:	2301      	movs	r3, #1
 800c860:	e000      	b.n	800c864 <xQueueReceiveFromISR+0x40>
 800c862:	2300      	movs	r3, #0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10a      	bne.n	800c87e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61fb      	str	r3, [r7, #28]
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c87e:	f001 fc0b 	bl	800e098 <vPortValidateInterruptPriority>
	__asm volatile
 800c882:	f3ef 8211 	mrs	r2, BASEPRI
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	61ba      	str	r2, [r7, #24]
 800c898:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c89a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c89c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d02f      	beq.n	800c90a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b8:	f000 f8d9 	bl	800ca6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	1e5a      	subs	r2, r3, #1
 800c8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c8c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8cc:	d112      	bne.n	800c8f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d016      	beq.n	800c904 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	3310      	adds	r3, #16
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fdea 	bl	800d4b4 <xTaskRemoveFromEventList>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	e007      	b.n	800c904 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	b25a      	sxtb	r2, r3
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c904:	2301      	movs	r3, #1
 800c906:	637b      	str	r3, [r7, #52]	; 0x34
 800c908:	e001      	b.n	800c90e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
 800c90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c910:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f383 8811 	msr	BASEPRI, r3
}
 800c918:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3738      	adds	r7, #56	; 0x38
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10a      	bne.n	800c94c <vQueueDelete+0x28>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60bb      	str	r3, [r7, #8]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 f935 	bl	800cbbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f001 fca7 	bl	800e2b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c96a:	b480      	push	{r7}
 800c96c:	b085      	sub	sp, #20
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f1c3 0307 	rsb	r3, r3, #7
 800c984:	60fb      	str	r3, [r7, #12]
 800c986:	e001      	b.n	800c98c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c988:	2300      	movs	r3, #0
 800c98a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c98c:	68fb      	ldr	r3, [r7, #12]
	}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10d      	bne.n	800c9d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d14d      	bne.n	800ca5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 ffc9 	bl	800d95c <xTaskPriorityDisinherit>
 800c9ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	609a      	str	r2, [r3, #8]
 800c9d2:	e043      	b.n	800ca5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d119      	bne.n	800ca0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6858      	ldr	r0, [r3, #4]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	68b9      	ldr	r1, [r7, #8]
 800c9e6:	f002 fce5 	bl	800f3b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f2:	441a      	add	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d32b      	bcc.n	800ca5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	605a      	str	r2, [r3, #4]
 800ca0c:	e026      	b.n	800ca5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68d8      	ldr	r0, [r3, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca16:	461a      	mov	r2, r3
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	f002 fccb 	bl	800f3b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	68da      	ldr	r2, [r3, #12]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	425b      	negs	r3, r3
 800ca28:	441a      	add	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d207      	bcs.n	800ca4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	689a      	ldr	r2, [r3, #8]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	425b      	negs	r3, r3
 800ca44:	441a      	add	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d105      	bne.n	800ca5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca64:	697b      	ldr	r3, [r7, #20]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d018      	beq.n	800cab2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68da      	ldr	r2, [r3, #12]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca88:	441a      	add	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d303      	bcc.n	800caa2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68d9      	ldr	r1, [r3, #12]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	461a      	mov	r2, r3
 800caac:	6838      	ldr	r0, [r7, #0]
 800caae:	f002 fc81 	bl	800f3b4 <memcpy>
	}
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cac2:	f001 fa07 	bl	800ded4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cacc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cace:	e011      	b.n	800caf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d012      	beq.n	800cafe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	3324      	adds	r3, #36	; 0x24
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 fce9 	bl	800d4b4 <xTaskRemoveFromEventList>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cae8:	f000 fdbe 	bl	800d668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	3b01      	subs	r3, #1
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	dce9      	bgt.n	800cad0 <prvUnlockQueue+0x16>
 800cafc:	e000      	b.n	800cb00 <prvUnlockQueue+0x46>
					break;
 800cafe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	22ff      	movs	r2, #255	; 0xff
 800cb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb08:	f001 fa14 	bl	800df34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb0c:	f001 f9e2 	bl	800ded4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb18:	e011      	b.n	800cb3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d012      	beq.n	800cb48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3310      	adds	r3, #16
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 fcc4 	bl	800d4b4 <xTaskRemoveFromEventList>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb32:	f000 fd99 	bl	800d668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dce9      	bgt.n	800cb1a <prvUnlockQueue+0x60>
 800cb46:	e000      	b.n	800cb4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	22ff      	movs	r2, #255	; 0xff
 800cb4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb52:	f001 f9ef 	bl	800df34 <vPortExitCritical>
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb66:	f001 f9b5 	bl	800ded4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb72:	2301      	movs	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e001      	b.n	800cb7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb7c:	f001 f9da 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800cb80:	68fb      	ldr	r3, [r7, #12]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb92:	f001 f99f 	bl	800ded4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d102      	bne.n	800cba8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cba2:	2301      	movs	r3, #1
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	e001      	b.n	800cbac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbac:	f001 f9c2 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	e016      	b.n	800cbf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cbca:	4a10      	ldr	r2, [pc, #64]	; (800cc0c <vQueueUnregisterQueue+0x50>)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	4413      	add	r3, r2
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d10b      	bne.n	800cbf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cbda:	4a0c      	ldr	r2, [pc, #48]	; (800cc0c <vQueueUnregisterQueue+0x50>)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2100      	movs	r1, #0
 800cbe0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cbe4:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <vQueueUnregisterQueue+0x50>)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	4413      	add	r3, r2
 800cbec:	2200      	movs	r2, #0
 800cbee:	605a      	str	r2, [r3, #4]
				break;
 800cbf0:	e006      	b.n	800cc00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b07      	cmp	r3, #7
 800cbfc:	d9e5      	bls.n	800cbca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cbfe:	bf00      	nop
 800cc00:	bf00      	nop
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	20006138 	.word	0x20006138

0800cc10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08e      	sub	sp, #56	; 0x38
 800cc14:	af04      	add	r7, sp, #16
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	623b      	str	r3, [r7, #32]
}
 800cc36:	bf00      	nop
 800cc38:	e7fe      	b.n	800cc38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10a      	bne.n	800cc56 <xTaskCreateStatic+0x46>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	61fb      	str	r3, [r7, #28]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc56:	23a0      	movs	r3, #160	; 0xa0
 800cc58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	2ba0      	cmp	r3, #160	; 0xa0
 800cc5e:	d00a      	beq.n	800cc76 <xTaskCreateStatic+0x66>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	61bb      	str	r3, [r7, #24]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d01e      	beq.n	800ccbc <xTaskCreateStatic+0xac>
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01b      	beq.n	800ccbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	2202      	movs	r2, #2
 800cc92:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc96:	2300      	movs	r3, #0
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	9302      	str	r3, [sp, #8]
 800cc9e:	f107 0314 	add.w	r3, r7, #20
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f000 f850 	bl	800cd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccb6:	f000 f8eb 	bl	800ce90 <prvAddNewTaskToReadyList>
 800ccba:	e001      	b.n	800ccc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccc0:	697b      	ldr	r3, [r7, #20]
	}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3728      	adds	r7, #40	; 0x28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08c      	sub	sp, #48	; 0x30
 800ccce:	af04      	add	r7, sp, #16
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	603b      	str	r3, [r7, #0]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccda:	88fb      	ldrh	r3, [r7, #6]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 fa1a 	bl	800e118 <pvPortMalloc>
 800cce4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00e      	beq.n	800cd0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccec:	20a0      	movs	r0, #160	; 0xa0
 800ccee:	f001 fa13 	bl	800e118 <pvPortMalloc>
 800ccf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	631a      	str	r2, [r3, #48]	; 0x30
 800cd00:	e005      	b.n	800cd0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f001 fad4 	bl	800e2b0 <vPortFree>
 800cd08:	e001      	b.n	800cd0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d017      	beq.n	800cd44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd1c:	88fa      	ldrh	r2, [r7, #6]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f80e 	bl	800cd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd38:	69f8      	ldr	r0, [r7, #28]
 800cd3a:	f000 f8a9 	bl	800ce90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	61bb      	str	r3, [r7, #24]
 800cd42:	e002      	b.n	800cd4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd44:	f04f 33ff 	mov.w	r3, #4294967295
 800cd48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3720      	adds	r7, #32
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	617b      	str	r3, [r7, #20]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d01f      	beq.n	800cde2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	e012      	b.n	800cdce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	4413      	add	r3, r2
 800cdae:	7819      	ldrb	r1, [r3, #0]
 800cdb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	3334      	adds	r3, #52	; 0x34
 800cdb8:	460a      	mov	r2, r1
 800cdba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b0f      	cmp	r3, #15
 800cdd2:	d9e9      	bls.n	800cda8 <prvInitialiseNewTask+0x54>
 800cdd4:	e000      	b.n	800cdd8 <prvInitialiseNewTask+0x84>
			{
				break;
 800cdd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cde0:	e003      	b.n	800cdea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdec:	2b06      	cmp	r3, #6
 800cdee:	d901      	bls.n	800cdf4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdf0:	2306      	movs	r3, #6
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2200      	movs	r2, #0
 800ce04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff f8a3 	bl	800bf56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	3318      	adds	r3, #24
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff f89e 	bl	800bf56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	f1c3 0207 	rsb	r2, r3, #7
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	334c      	adds	r3, #76	; 0x4c
 800ce44:	224c      	movs	r2, #76	; 0x4c
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f002 f9cb 	bl	800f1e4 <memset>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	4a0c      	ldr	r2, [pc, #48]	; (800ce84 <prvInitialiseNewTask+0x130>)
 800ce52:	651a      	str	r2, [r3, #80]	; 0x50
 800ce54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce56:	4a0c      	ldr	r2, [pc, #48]	; (800ce88 <prvInitialiseNewTask+0x134>)
 800ce58:	655a      	str	r2, [r3, #84]	; 0x54
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	4a0b      	ldr	r2, [pc, #44]	; (800ce8c <prvInitialiseNewTask+0x138>)
 800ce5e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	69b8      	ldr	r0, [r7, #24]
 800ce66:	f000 ff07 	bl	800dc78 <pxPortInitialiseStack>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce7c:	bf00      	nop
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	20009ecc 	.word	0x20009ecc
 800ce88:	20009f34 	.word	0x20009f34
 800ce8c:	20009f9c 	.word	0x20009f9c

0800ce90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce98:	f001 f81c 	bl	800ded4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a29      	ldr	r2, [pc, #164]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800cea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cea6:	4b29      	ldr	r3, [pc, #164]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d109      	bne.n	800cec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ceae:	4a27      	ldr	r2, [pc, #156]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ceb4:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <prvAddNewTaskToReadyList+0xb8>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d110      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cebc:	f000 fbf8 	bl	800d6b0 <prvInitialiseTaskLists>
 800cec0:	e00d      	b.n	800cede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cec2:	4b23      	ldr	r3, [pc, #140]	; (800cf50 <prvAddNewTaskToReadyList+0xc0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d109      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceca:	4b20      	ldr	r3, [pc, #128]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d802      	bhi.n	800cede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ced8:	4a1c      	ldr	r2, [pc, #112]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cede:	4b1d      	ldr	r3, [pc, #116]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a1b      	ldr	r2, [pc, #108]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800cee6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceec:	2201      	movs	r2, #1
 800ceee:	409a      	lsls	r2, r3
 800cef0:	4b19      	ldr	r3, [pc, #100]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4a15      	ldr	r2, [pc, #84]	; (800cf5c <prvAddNewTaskToReadyList+0xcc>)
 800cf08:	441a      	add	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7ff f82d 	bl	800bf70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf16:	f001 f80d 	bl	800df34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <prvAddNewTaskToReadyList+0xc0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00e      	beq.n	800cf40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf22:	4b0a      	ldr	r3, [pc, #40]	; (800cf4c <prvAddNewTaskToReadyList+0xbc>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d207      	bcs.n	800cf40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf30:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <prvAddNewTaskToReadyList+0xd0>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	20006278 	.word	0x20006278
 800cf4c:	20006178 	.word	0x20006178
 800cf50:	20006284 	.word	0x20006284
 800cf54:	20006294 	.word	0x20006294
 800cf58:	20006280 	.word	0x20006280
 800cf5c:	2000617c 	.word	0x2000617c
 800cf60:	e000ed04 	.word	0xe000ed04

0800cf64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d017      	beq.n	800cfa6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf76:	4b13      	ldr	r3, [pc, #76]	; (800cfc4 <vTaskDelay+0x60>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <vTaskDelay+0x30>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60bb      	str	r3, [r7, #8]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf94:	f000 f884 	bl	800d0a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fe06 	bl	800dbac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfa0:	f000 f88c 	bl	800d0bc <xTaskResumeAll>
 800cfa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d107      	bne.n	800cfbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <vTaskDelay+0x64>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfbc:	bf00      	nop
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	200062a0 	.word	0x200062a0
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	; 0x28
 800cfd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfda:	463a      	mov	r2, r7
 800cfdc:	1d39      	adds	r1, r7, #4
 800cfde:	f107 0308 	add.w	r3, r7, #8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7f5 f90a 	bl	80021fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	9202      	str	r2, [sp, #8]
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	2300      	movs	r3, #0
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	2300      	movs	r3, #0
 800cff8:	460a      	mov	r2, r1
 800cffa:	4921      	ldr	r1, [pc, #132]	; (800d080 <vTaskStartScheduler+0xb4>)
 800cffc:	4821      	ldr	r0, [pc, #132]	; (800d084 <vTaskStartScheduler+0xb8>)
 800cffe:	f7ff fe07 	bl	800cc10 <xTaskCreateStatic>
 800d002:	4603      	mov	r3, r0
 800d004:	4a20      	ldr	r2, [pc, #128]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <vTaskStartScheduler+0xbc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d010:	2301      	movs	r3, #1
 800d012:	617b      	str	r3, [r7, #20]
 800d014:	e001      	b.n	800d01a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d11b      	bne.n	800d058 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	613b      	str	r3, [r7, #16]
}
 800d032:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d034:	4b15      	ldr	r3, [pc, #84]	; (800d08c <vTaskStartScheduler+0xc0>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	334c      	adds	r3, #76	; 0x4c
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <vTaskStartScheduler+0xc4>)
 800d03c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d03e:	4b15      	ldr	r3, [pc, #84]	; (800d094 <vTaskStartScheduler+0xc8>)
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d046:	4b14      	ldr	r3, [pc, #80]	; (800d098 <vTaskStartScheduler+0xcc>)
 800d048:	2201      	movs	r2, #1
 800d04a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d04c:	4b13      	ldr	r3, [pc, #76]	; (800d09c <vTaskStartScheduler+0xd0>)
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d052:	f000 fe9d 	bl	800dd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d056:	e00e      	b.n	800d076 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05e:	d10a      	bne.n	800d076 <vTaskStartScheduler+0xaa>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	60fb      	str	r3, [r7, #12]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <vTaskStartScheduler+0xa8>
}
 800d076:	bf00      	nop
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	08011ad0 	.word	0x08011ad0
 800d084:	0800d681 	.word	0x0800d681
 800d088:	2000629c 	.word	0x2000629c
 800d08c:	20006178 	.word	0x20006178
 800d090:	200000a0 	.word	0x200000a0
 800d094:	20006298 	.word	0x20006298
 800d098:	20006284 	.word	0x20006284
 800d09c:	2000627c 	.word	0x2000627c

0800d0a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <vTaskSuspendAll+0x18>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	4a03      	ldr	r2, [pc, #12]	; (800d0b8 <vTaskSuspendAll+0x18>)
 800d0ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0ae:	bf00      	nop
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	200062a0 	.word	0x200062a0

0800d0bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0ca:	4b41      	ldr	r3, [pc, #260]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	603b      	str	r3, [r7, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0e8:	f000 fef4 	bl	800ded4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0ec:	4b38      	ldr	r3, [pc, #224]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	4a37      	ldr	r2, [pc, #220]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0f6:	4b36      	ldr	r3, [pc, #216]	; (800d1d0 <xTaskResumeAll+0x114>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d161      	bne.n	800d1c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0fe:	4b35      	ldr	r3, [pc, #212]	; (800d1d4 <xTaskResumeAll+0x118>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d05d      	beq.n	800d1c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d106:	e02e      	b.n	800d166 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d108:	4b33      	ldr	r3, [pc, #204]	; (800d1d8 <xTaskResumeAll+0x11c>)
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3318      	adds	r3, #24
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe ff88 	bl	800c02a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3304      	adds	r3, #4
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe ff83 	bl	800c02a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	2201      	movs	r2, #1
 800d12a:	409a      	lsls	r2, r3
 800d12c:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <xTaskResumeAll+0x120>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4313      	orrs	r3, r2
 800d132:	4a2a      	ldr	r2, [pc, #168]	; (800d1dc <xTaskResumeAll+0x120>)
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13a:	4613      	mov	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4a27      	ldr	r2, [pc, #156]	; (800d1e0 <xTaskResumeAll+0x124>)
 800d144:	441a      	add	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3304      	adds	r3, #4
 800d14a:	4619      	mov	r1, r3
 800d14c:	4610      	mov	r0, r2
 800d14e:	f7fe ff0f 	bl	800bf70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d156:	4b23      	ldr	r3, [pc, #140]	; (800d1e4 <xTaskResumeAll+0x128>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d302      	bcc.n	800d166 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d160:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d162:	2201      	movs	r2, #1
 800d164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d166:	4b1c      	ldr	r3, [pc, #112]	; (800d1d8 <xTaskResumeAll+0x11c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1cc      	bne.n	800d108 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d174:	f000 fb3e 	bl	800d7f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d178:	4b1c      	ldr	r3, [pc, #112]	; (800d1ec <xTaskResumeAll+0x130>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d010      	beq.n	800d1a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d184:	f000 f858 	bl	800d238 <xTaskIncrementTick>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d18e:	4b16      	ldr	r3, [pc, #88]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d190:	2201      	movs	r2, #1
 800d192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3b01      	subs	r3, #1
 800d198:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f1      	bne.n	800d184 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d1a0:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <xTaskResumeAll+0x130>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1a6:	4b10      	ldr	r3, [pc, #64]	; (800d1e8 <xTaskResumeAll+0x12c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1b2:	4b0f      	ldr	r3, [pc, #60]	; (800d1f0 <xTaskResumeAll+0x134>)
 800d1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1c2:	f000 feb7 	bl	800df34 <vPortExitCritical>

	return xAlreadyYielded;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	200062a0 	.word	0x200062a0
 800d1d4:	20006278 	.word	0x20006278
 800d1d8:	20006238 	.word	0x20006238
 800d1dc:	20006280 	.word	0x20006280
 800d1e0:	2000617c 	.word	0x2000617c
 800d1e4:	20006178 	.word	0x20006178
 800d1e8:	2000628c 	.word	0x2000628c
 800d1ec:	20006288 	.word	0x20006288
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1fa:	4b05      	ldr	r3, [pc, #20]	; (800d210 <xTaskGetTickCount+0x1c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d200:	687b      	ldr	r3, [r7, #4]
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	2000627c 	.word	0x2000627c

0800d214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d21a:	f000 ff3d 	bl	800e098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d21e:	2300      	movs	r3, #0
 800d220:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d222:	4b04      	ldr	r3, [pc, #16]	; (800d234 <xTaskGetTickCountFromISR+0x20>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d228:	683b      	ldr	r3, [r7, #0]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	2000627c 	.word	0x2000627c

0800d238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d242:	4b4e      	ldr	r3, [pc, #312]	; (800d37c <xTaskIncrementTick+0x144>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f040 808e 	bne.w	800d368 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d24c:	4b4c      	ldr	r3, [pc, #304]	; (800d380 <xTaskIncrementTick+0x148>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d254:	4a4a      	ldr	r2, [pc, #296]	; (800d380 <xTaskIncrementTick+0x148>)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d120      	bne.n	800d2a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d260:	4b48      	ldr	r3, [pc, #288]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <xTaskIncrementTick+0x48>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	603b      	str	r3, [r7, #0]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <xTaskIncrementTick+0x46>
 800d280:	4b40      	ldr	r3, [pc, #256]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	60fb      	str	r3, [r7, #12]
 800d286:	4b40      	ldr	r3, [pc, #256]	; (800d388 <xTaskIncrementTick+0x150>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a3e      	ldr	r2, [pc, #248]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	4a3e      	ldr	r2, [pc, #248]	; (800d388 <xTaskIncrementTick+0x150>)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	4b3d      	ldr	r3, [pc, #244]	; (800d38c <xTaskIncrementTick+0x154>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	4a3c      	ldr	r2, [pc, #240]	; (800d38c <xTaskIncrementTick+0x154>)
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	f000 faa9 	bl	800d7f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2a2:	4b3b      	ldr	r3, [pc, #236]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d348      	bcc.n	800d33e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2ac:	4b35      	ldr	r3, [pc, #212]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d104      	bne.n	800d2c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2b6:	4b36      	ldr	r3, [pc, #216]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2bc:	601a      	str	r2, [r3, #0]
					break;
 800d2be:	e03e      	b.n	800d33e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c0:	4b30      	ldr	r3, [pc, #192]	; (800d384 <xTaskIncrementTick+0x14c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d203      	bcs.n	800d2e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2d8:	4a2d      	ldr	r2, [pc, #180]	; (800d390 <xTaskIncrementTick+0x158>)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2de:	e02e      	b.n	800d33e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fea0 	bl	800c02a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	3318      	adds	r3, #24
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe fe97 	bl	800c02a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	2201      	movs	r2, #1
 800d302:	409a      	lsls	r2, r3
 800d304:	4b23      	ldr	r3, [pc, #140]	; (800d394 <xTaskIncrementTick+0x15c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4313      	orrs	r3, r2
 800d30a:	4a22      	ldr	r2, [pc, #136]	; (800d394 <xTaskIncrementTick+0x15c>)
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d312:	4613      	mov	r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4a1f      	ldr	r2, [pc, #124]	; (800d398 <xTaskIncrementTick+0x160>)
 800d31c:	441a      	add	r2, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3304      	adds	r3, #4
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f7fe fe23 	bl	800bf70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32e:	4b1b      	ldr	r3, [pc, #108]	; (800d39c <xTaskIncrementTick+0x164>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	429a      	cmp	r2, r3
 800d336:	d3b9      	bcc.n	800d2ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d338:	2301      	movs	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d33c:	e7b6      	b.n	800d2ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d33e:	4b17      	ldr	r3, [pc, #92]	; (800d39c <xTaskIncrementTick+0x164>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d344:	4914      	ldr	r1, [pc, #80]	; (800d398 <xTaskIncrementTick+0x160>)
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	440b      	add	r3, r1
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d901      	bls.n	800d35a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d356:	2301      	movs	r3, #1
 800d358:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d35a:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <xTaskIncrementTick+0x168>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	e004      	b.n	800d372 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d368:	4b0e      	ldr	r3, [pc, #56]	; (800d3a4 <xTaskIncrementTick+0x16c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3301      	adds	r3, #1
 800d36e:	4a0d      	ldr	r2, [pc, #52]	; (800d3a4 <xTaskIncrementTick+0x16c>)
 800d370:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d372:	697b      	ldr	r3, [r7, #20]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200062a0 	.word	0x200062a0
 800d380:	2000627c 	.word	0x2000627c
 800d384:	20006230 	.word	0x20006230
 800d388:	20006234 	.word	0x20006234
 800d38c:	20006290 	.word	0x20006290
 800d390:	20006298 	.word	0x20006298
 800d394:	20006280 	.word	0x20006280
 800d398:	2000617c 	.word	0x2000617c
 800d39c:	20006178 	.word	0x20006178
 800d3a0:	2000628c 	.word	0x2000628c
 800d3a4:	20006288 	.word	0x20006288

0800d3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3ae:	4b29      	ldr	r3, [pc, #164]	; (800d454 <vTaskSwitchContext+0xac>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3b6:	4b28      	ldr	r3, [pc, #160]	; (800d458 <vTaskSwitchContext+0xb0>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3bc:	e044      	b.n	800d448 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d3be:	4b26      	ldr	r3, [pc, #152]	; (800d458 <vTaskSwitchContext+0xb0>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c4:	4b25      	ldr	r3, [pc, #148]	; (800d45c <vTaskSwitchContext+0xb4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	fab3 f383 	clz	r3, r3
 800d3d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d3d2:	7afb      	ldrb	r3, [r7, #11]
 800d3d4:	f1c3 031f 	rsb	r3, r3, #31
 800d3d8:	617b      	str	r3, [r7, #20]
 800d3da:	4921      	ldr	r1, [pc, #132]	; (800d460 <vTaskSwitchContext+0xb8>)
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	440b      	add	r3, r1
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	607b      	str	r3, [r7, #4]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <vTaskSwitchContext+0x5a>
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4a14      	ldr	r2, [pc, #80]	; (800d460 <vTaskSwitchContext+0xb8>)
 800d410:	4413      	add	r3, r2
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	605a      	str	r2, [r3, #4]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	685a      	ldr	r2, [r3, #4]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	3308      	adds	r3, #8
 800d426:	429a      	cmp	r2, r3
 800d428:	d104      	bne.n	800d434 <vTaskSwitchContext+0x8c>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	685a      	ldr	r2, [r3, #4]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	605a      	str	r2, [r3, #4]
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	4a0a      	ldr	r2, [pc, #40]	; (800d464 <vTaskSwitchContext+0xbc>)
 800d43c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d43e:	4b09      	ldr	r3, [pc, #36]	; (800d464 <vTaskSwitchContext+0xbc>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	334c      	adds	r3, #76	; 0x4c
 800d444:	4a08      	ldr	r2, [pc, #32]	; (800d468 <vTaskSwitchContext+0xc0>)
 800d446:	6013      	str	r3, [r2, #0]
}
 800d448:	bf00      	nop
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	200062a0 	.word	0x200062a0
 800d458:	2000628c 	.word	0x2000628c
 800d45c:	20006280 	.word	0x20006280
 800d460:	2000617c 	.word	0x2000617c
 800d464:	20006178 	.word	0x20006178
 800d468:	200000a0 	.word	0x200000a0

0800d46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <vTaskPlaceOnEventList+0x44>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3318      	adds	r3, #24
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7fe fd8c 	bl	800bfb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f000 fb82 	bl	800dbac <prvAddCurrentTaskToDelayedList>
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20006178 	.word	0x20006178

0800d4b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	60fb      	str	r3, [r7, #12]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3318      	adds	r3, #24
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe fda0 	bl	800c02a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ea:	4b1d      	ldr	r3, [pc, #116]	; (800d560 <xTaskRemoveFromEventList+0xac>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d11c      	bne.n	800d52c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fd97 	bl	800c02a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	2201      	movs	r2, #1
 800d502:	409a      	lsls	r2, r3
 800d504:	4b17      	ldr	r3, [pc, #92]	; (800d564 <xTaskRemoveFromEventList+0xb0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4313      	orrs	r3, r2
 800d50a:	4a16      	ldr	r2, [pc, #88]	; (800d564 <xTaskRemoveFromEventList+0xb0>)
 800d50c:	6013      	str	r3, [r2, #0]
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4a13      	ldr	r2, [pc, #76]	; (800d568 <xTaskRemoveFromEventList+0xb4>)
 800d51c:	441a      	add	r2, r3
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	3304      	adds	r3, #4
 800d522:	4619      	mov	r1, r3
 800d524:	4610      	mov	r0, r2
 800d526:	f7fe fd23 	bl	800bf70 <vListInsertEnd>
 800d52a:	e005      	b.n	800d538 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	3318      	adds	r3, #24
 800d530:	4619      	mov	r1, r3
 800d532:	480e      	ldr	r0, [pc, #56]	; (800d56c <xTaskRemoveFromEventList+0xb8>)
 800d534:	f7fe fd1c 	bl	800bf70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53c:	4b0c      	ldr	r3, [pc, #48]	; (800d570 <xTaskRemoveFromEventList+0xbc>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	429a      	cmp	r2, r3
 800d544:	d905      	bls.n	800d552 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d546:	2301      	movs	r3, #1
 800d548:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d54a:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <xTaskRemoveFromEventList+0xc0>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	e001      	b.n	800d556 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d556:	697b      	ldr	r3, [r7, #20]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	200062a0 	.word	0x200062a0
 800d564:	20006280 	.word	0x20006280
 800d568:	2000617c 	.word	0x2000617c
 800d56c:	20006238 	.word	0x20006238
 800d570:	20006178 	.word	0x20006178
 800d574:	2000628c 	.word	0x2000628c

0800d578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d580:	4b06      	ldr	r3, [pc, #24]	; (800d59c <vTaskInternalSetTimeOutState+0x24>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <vTaskInternalSetTimeOutState+0x28>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	605a      	str	r2, [r3, #4]
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20006290 	.word	0x20006290
 800d5a0:	2000627c 	.word	0x2000627c

0800d5a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	613b      	str	r3, [r7, #16]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10a      	bne.n	800d5e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	60fb      	str	r3, [r7, #12]
}
 800d5e2:	bf00      	nop
 800d5e4:	e7fe      	b.n	800d5e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d5e6:	f000 fc75 	bl	800ded4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5ea:	4b1d      	ldr	r3, [pc, #116]	; (800d660 <xTaskCheckForTimeOut+0xbc>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	69ba      	ldr	r2, [r7, #24]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d602:	d102      	bne.n	800d60a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e023      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4b15      	ldr	r3, [pc, #84]	; (800d664 <xTaskCheckForTimeOut+0xc0>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d007      	beq.n	800d626 <xTaskCheckForTimeOut+0x82>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	69ba      	ldr	r2, [r7, #24]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d302      	bcc.n	800d626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
 800d624:	e015      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d20b      	bcs.n	800d648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff ff9b 	bl	800d578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d642:	2300      	movs	r3, #0
 800d644:	61fb      	str	r3, [r7, #28]
 800d646:	e004      	b.n	800d652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	2200      	movs	r2, #0
 800d64c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d64e:	2301      	movs	r3, #1
 800d650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d652:	f000 fc6f 	bl	800df34 <vPortExitCritical>

	return xReturn;
 800d656:	69fb      	ldr	r3, [r7, #28]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3720      	adds	r7, #32
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	2000627c 	.word	0x2000627c
 800d664:	20006290 	.word	0x20006290

0800d668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d66c:	4b03      	ldr	r3, [pc, #12]	; (800d67c <vTaskMissedYield+0x14>)
 800d66e:	2201      	movs	r2, #1
 800d670:	601a      	str	r2, [r3, #0]
}
 800d672:	bf00      	nop
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	2000628c 	.word	0x2000628c

0800d680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d688:	f000 f852 	bl	800d730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <prvIdleTask+0x28>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d9f9      	bls.n	800d688 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <prvIdleTask+0x2c>)
 800d696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6a4:	e7f0      	b.n	800d688 <prvIdleTask+0x8>
 800d6a6:	bf00      	nop
 800d6a8:	2000617c 	.word	0x2000617c
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
 800d6ba:	e00c      	b.n	800d6d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4a12      	ldr	r2, [pc, #72]	; (800d710 <prvInitialiseTaskLists+0x60>)
 800d6c8:	4413      	add	r3, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe fc23 	bl	800bf16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	607b      	str	r3, [r7, #4]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b06      	cmp	r3, #6
 800d6da:	d9ef      	bls.n	800d6bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6dc:	480d      	ldr	r0, [pc, #52]	; (800d714 <prvInitialiseTaskLists+0x64>)
 800d6de:	f7fe fc1a 	bl	800bf16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6e2:	480d      	ldr	r0, [pc, #52]	; (800d718 <prvInitialiseTaskLists+0x68>)
 800d6e4:	f7fe fc17 	bl	800bf16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6e8:	480c      	ldr	r0, [pc, #48]	; (800d71c <prvInitialiseTaskLists+0x6c>)
 800d6ea:	f7fe fc14 	bl	800bf16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6ee:	480c      	ldr	r0, [pc, #48]	; (800d720 <prvInitialiseTaskLists+0x70>)
 800d6f0:	f7fe fc11 	bl	800bf16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6f4:	480b      	ldr	r0, [pc, #44]	; (800d724 <prvInitialiseTaskLists+0x74>)
 800d6f6:	f7fe fc0e 	bl	800bf16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <prvInitialiseTaskLists+0x78>)
 800d6fc:	4a05      	ldr	r2, [pc, #20]	; (800d714 <prvInitialiseTaskLists+0x64>)
 800d6fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <prvInitialiseTaskLists+0x7c>)
 800d702:	4a05      	ldr	r2, [pc, #20]	; (800d718 <prvInitialiseTaskLists+0x68>)
 800d704:	601a      	str	r2, [r3, #0]
}
 800d706:	bf00      	nop
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	2000617c 	.word	0x2000617c
 800d714:	20006208 	.word	0x20006208
 800d718:	2000621c 	.word	0x2000621c
 800d71c:	20006238 	.word	0x20006238
 800d720:	2000624c 	.word	0x2000624c
 800d724:	20006264 	.word	0x20006264
 800d728:	20006230 	.word	0x20006230
 800d72c:	20006234 	.word	0x20006234

0800d730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d736:	e019      	b.n	800d76c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d738:	f000 fbcc 	bl	800ded4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d73c:	4b10      	ldr	r3, [pc, #64]	; (800d780 <prvCheckTasksWaitingTermination+0x50>)
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	3304      	adds	r3, #4
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fe fc6e 	bl	800c02a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d74e:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <prvCheckTasksWaitingTermination+0x54>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3b01      	subs	r3, #1
 800d754:	4a0b      	ldr	r2, [pc, #44]	; (800d784 <prvCheckTasksWaitingTermination+0x54>)
 800d756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d758:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	4a0a      	ldr	r2, [pc, #40]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d762:	f000 fbe7 	bl	800df34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f810 	bl	800d78c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d76c:	4b06      	ldr	r3, [pc, #24]	; (800d788 <prvCheckTasksWaitingTermination+0x58>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e1      	bne.n	800d738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	2000624c 	.word	0x2000624c
 800d784:	20006278 	.word	0x20006278
 800d788:	20006260 	.word	0x20006260

0800d78c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	334c      	adds	r3, #76	; 0x4c
 800d798:	4618      	mov	r0, r3
 800d79a:	f001 fd53 	bl	800f244 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d108      	bne.n	800d7ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f000 fd7f 	bl	800e2b0 <vPortFree>
				vPortFree( pxTCB );
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fd7c 	bl	800e2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7b8:	e018      	b.n	800d7ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d103      	bne.n	800d7cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fd73 	bl	800e2b0 <vPortFree>
	}
 800d7ca:	e00f      	b.n	800d7ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d00a      	beq.n	800d7ec <prvDeleteTCB+0x60>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	60fb      	str	r3, [r7, #12]
}
 800d7e8:	bf00      	nop
 800d7ea:	e7fe      	b.n	800d7ea <prvDeleteTCB+0x5e>
	}
 800d7ec:	bf00      	nop
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7fa:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <prvResetNextTaskUnblockTime+0x38>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d104      	bne.n	800d80e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <prvResetNextTaskUnblockTime+0x3c>)
 800d806:	f04f 32ff 	mov.w	r2, #4294967295
 800d80a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d80c:	e008      	b.n	800d820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d80e:	4b07      	ldr	r3, [pc, #28]	; (800d82c <prvResetNextTaskUnblockTime+0x38>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4a04      	ldr	r2, [pc, #16]	; (800d830 <prvResetNextTaskUnblockTime+0x3c>)
 800d81e:	6013      	str	r3, [r2, #0]
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20006230 	.word	0x20006230
 800d830:	20006298 	.word	0x20006298

0800d834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d83a:	4b0b      	ldr	r3, [pc, #44]	; (800d868 <xTaskGetSchedulerState+0x34>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d102      	bne.n	800d848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d842:	2301      	movs	r3, #1
 800d844:	607b      	str	r3, [r7, #4]
 800d846:	e008      	b.n	800d85a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d848:	4b08      	ldr	r3, [pc, #32]	; (800d86c <xTaskGetSchedulerState+0x38>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d102      	bne.n	800d856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d850:	2302      	movs	r3, #2
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	e001      	b.n	800d85a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d856:	2300      	movs	r3, #0
 800d858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d85a:	687b      	ldr	r3, [r7, #4]
	}
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	20006284 	.word	0x20006284
 800d86c:	200062a0 	.word	0x200062a0

0800d870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d87c:	2300      	movs	r3, #0
 800d87e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d05e      	beq.n	800d944 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88a:	4b31      	ldr	r3, [pc, #196]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d24e      	bcs.n	800d932 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	db06      	blt.n	800d8aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d89c:	4b2c      	ldr	r3, [pc, #176]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a2:	f1c3 0207 	rsb	r2, r3, #7
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	6959      	ldr	r1, [r3, #20]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a26      	ldr	r2, [pc, #152]	; (800d954 <xTaskPriorityInherit+0xe4>)
 800d8bc:	4413      	add	r3, r2
 800d8be:	4299      	cmp	r1, r3
 800d8c0:	d12f      	bne.n	800d922 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fbaf 	bl	800c02a <uxListRemove>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10a      	bne.n	800d8e8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8dc:	43da      	mvns	r2, r3
 800d8de:	4b1e      	ldr	r3, [pc, #120]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	4a1c      	ldr	r2, [pc, #112]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8e8:	4b19      	ldr	r3, [pc, #100]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	409a      	lsls	r2, r3
 800d8fa:	4b17      	ldr	r3, [pc, #92]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	4a15      	ldr	r2, [pc, #84]	; (800d958 <xTaskPriorityInherit+0xe8>)
 800d902:	6013      	str	r3, [r2, #0]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d908:	4613      	mov	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4a10      	ldr	r2, [pc, #64]	; (800d954 <xTaskPriorityInherit+0xe4>)
 800d912:	441a      	add	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3304      	adds	r3, #4
 800d918:	4619      	mov	r1, r3
 800d91a:	4610      	mov	r0, r2
 800d91c:	f7fe fb28 	bl	800bf70 <vListInsertEnd>
 800d920:	e004      	b.n	800d92c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d922:	4b0b      	ldr	r3, [pc, #44]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	e008      	b.n	800d944 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d936:	4b06      	ldr	r3, [pc, #24]	; (800d950 <xTaskPriorityInherit+0xe0>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d201      	bcs.n	800d944 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d944:	68fb      	ldr	r3, [r7, #12]
	}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20006178 	.word	0x20006178
 800d954:	2000617c 	.word	0x2000617c
 800d958:	20006280 	.word	0x20006280

0800d95c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d968:	2300      	movs	r3, #0
 800d96a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d06e      	beq.n	800da50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d972:	4b3a      	ldr	r3, [pc, #232]	; (800da5c <xTaskPriorityDisinherit+0x100>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	693a      	ldr	r2, [r7, #16]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d00a      	beq.n	800d992 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	60fb      	str	r3, [r7, #12]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10a      	bne.n	800d9b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	60bb      	str	r3, [r7, #8]
}
 800d9ac:	bf00      	nop
 800d9ae:	e7fe      	b.n	800d9ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9b4:	1e5a      	subs	r2, r3, #1
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d044      	beq.n	800da50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d140      	bne.n	800da50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe fb29 	bl	800c02a <uxListRemove>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d115      	bne.n	800da0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e2:	491f      	ldr	r1, [pc, #124]	; (800da60 <xTaskPriorityDisinherit+0x104>)
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	440b      	add	r3, r1
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10a      	bne.n	800da0a <xTaskPriorityDisinherit+0xae>
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d9fe:	43da      	mvns	r2, r3
 800da00:	4b18      	ldr	r3, [pc, #96]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4013      	ands	r3, r2
 800da06:	4a17      	ldr	r2, [pc, #92]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	f1c3 0207 	rsb	r2, r3, #7
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	2201      	movs	r2, #1
 800da24:	409a      	lsls	r2, r3
 800da26:	4b0f      	ldr	r3, [pc, #60]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	4a0d      	ldr	r2, [pc, #52]	; (800da64 <xTaskPriorityDisinherit+0x108>)
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4a08      	ldr	r2, [pc, #32]	; (800da60 <xTaskPriorityDisinherit+0x104>)
 800da3e:	441a      	add	r2, r3
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	3304      	adds	r3, #4
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f7fe fa92 	bl	800bf70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da50:	697b      	ldr	r3, [r7, #20]
	}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20006178 	.word	0x20006178
 800da60:	2000617c 	.word	0x2000617c
 800da64:	20006280 	.word	0x20006280

0800da68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b088      	sub	sp, #32
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da76:	2301      	movs	r3, #1
 800da78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d077      	beq.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10a      	bne.n	800da9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	60fb      	str	r3, [r7, #12]
}
 800da9a:	bf00      	nop
 800da9c:	e7fe      	b.n	800da9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d902      	bls.n	800daae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	61fb      	str	r3, [r7, #28]
 800daac:	e002      	b.n	800dab4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dab2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	69fa      	ldr	r2, [r7, #28]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d058      	beq.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d153      	bne.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dac8:	4b2b      	ldr	r3, [pc, #172]	; (800db78 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	69ba      	ldr	r2, [r7, #24]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d10a      	bne.n	800dae8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	e7fe      	b.n	800dae6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db04      	blt.n	800db06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	f1c3 0207 	rsb	r2, r3, #7
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	6959      	ldr	r1, [r3, #20]
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4a19      	ldr	r2, [pc, #100]	; (800db7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db16:	4413      	add	r3, r2
 800db18:	4299      	cmp	r1, r3
 800db1a:	d129      	bne.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	3304      	adds	r3, #4
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fa82 	bl	800c02a <uxListRemove>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	2201      	movs	r2, #1
 800db32:	fa02 f303 	lsl.w	r3, r2, r3
 800db36:	43da      	mvns	r2, r3
 800db38:	4b11      	ldr	r3, [pc, #68]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4013      	ands	r3, r2
 800db3e:	4a10      	ldr	r2, [pc, #64]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	2201      	movs	r2, #1
 800db48:	409a      	lsls	r2, r3
 800db4a:	4b0d      	ldr	r3, [pc, #52]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4313      	orrs	r3, r2
 800db50:	4a0b      	ldr	r2, [pc, #44]	; (800db80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db52:	6013      	str	r3, [r2, #0]
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	4613      	mov	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4a06      	ldr	r2, [pc, #24]	; (800db7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db62:	441a      	add	r2, r3
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	3304      	adds	r3, #4
 800db68:	4619      	mov	r1, r3
 800db6a:	4610      	mov	r0, r2
 800db6c:	f7fe fa00 	bl	800bf70 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db70:	bf00      	nop
 800db72:	3720      	adds	r7, #32
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	20006178 	.word	0x20006178
 800db7c:	2000617c 	.word	0x2000617c
 800db80:	20006280 	.word	0x20006280

0800db84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db84:	b480      	push	{r7}
 800db86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db88:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db96:	3201      	adds	r2, #1
 800db98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db9a:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800db9c:	681b      	ldr	r3, [r3, #0]
	}
 800db9e:	4618      	mov	r0, r3
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	20006178 	.word	0x20006178

0800dbac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbb6:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbc:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe fa31 	bl	800c02a <uxListRemove>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10b      	bne.n	800dbe6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbce:	4b24      	ldr	r3, [pc, #144]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbda:	43da      	mvns	r2, r3
 800dbdc:	4b21      	ldr	r3, [pc, #132]	; (800dc64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	4a20      	ldr	r2, [pc, #128]	; (800dc64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbe4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbec:	d10a      	bne.n	800dc04 <prvAddCurrentTaskToDelayedList+0x58>
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d007      	beq.n	800dc04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbf4:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	481a      	ldr	r0, [pc, #104]	; (800dc68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbfe:	f7fe f9b7 	bl	800bf70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc02:	e026      	b.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4413      	add	r3, r2
 800dc0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc0c:	4b14      	ldr	r3, [pc, #80]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d209      	bcs.n	800dc30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc1c:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe f9c5 	bl	800bfb8 <vListInsert>
}
 800dc2e:	e010      	b.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	4610      	mov	r0, r2
 800dc3e:	f7fe f9bb 	bl	800bfb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc42:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d202      	bcs.n	800dc52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc4c:	4a09      	ldr	r2, [pc, #36]	; (800dc74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6013      	str	r3, [r2, #0]
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	2000627c 	.word	0x2000627c
 800dc60:	20006178 	.word	0x20006178
 800dc64:	20006280 	.word	0x20006280
 800dc68:	20006264 	.word	0x20006264
 800dc6c:	20006234 	.word	0x20006234
 800dc70:	20006230 	.word	0x20006230
 800dc74:	20006298 	.word	0x20006298

0800dc78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	3b04      	subs	r3, #4
 800dc88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3b04      	subs	r3, #4
 800dc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f023 0201 	bic.w	r2, r3, #1
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3b04      	subs	r3, #4
 800dca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dca8:	4a0c      	ldr	r2, [pc, #48]	; (800dcdc <pxPortInitialiseStack+0x64>)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3b14      	subs	r3, #20
 800dcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f06f 0202 	mvn.w	r2, #2
 800dcc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3b20      	subs	r3, #32
 800dccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcce:	68fb      	ldr	r3, [r7, #12]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	0800dce1 	.word	0x0800dce1

0800dce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcea:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <prvTaskExitError+0x54>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf2:	d00a      	beq.n	800dd0a <prvTaskExitError+0x2a>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	60fb      	str	r3, [r7, #12]
}
 800dd06:	bf00      	nop
 800dd08:	e7fe      	b.n	800dd08 <prvTaskExitError+0x28>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	60bb      	str	r3, [r7, #8]
}
 800dd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd1e:	bf00      	nop
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0fc      	beq.n	800dd20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	20000044 	.word	0x20000044
	...

0800dd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd40:	4b07      	ldr	r3, [pc, #28]	; (800dd60 <pxCurrentTCBConst2>)
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	6808      	ldr	r0, [r1, #0]
 800dd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	f380 8809 	msr	PSP, r0
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f04f 0000 	mov.w	r0, #0
 800dd56:	f380 8811 	msr	BASEPRI, r0
 800dd5a:	4770      	bx	lr
 800dd5c:	f3af 8000 	nop.w

0800dd60 <pxCurrentTCBConst2>:
 800dd60:	20006178 	.word	0x20006178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop

0800dd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd68:	4808      	ldr	r0, [pc, #32]	; (800dd8c <prvPortStartFirstTask+0x24>)
 800dd6a:	6800      	ldr	r0, [r0, #0]
 800dd6c:	6800      	ldr	r0, [r0, #0]
 800dd6e:	f380 8808 	msr	MSP, r0
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8814 	msr	CONTROL, r0
 800dd7a:	b662      	cpsie	i
 800dd7c:	b661      	cpsie	f
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	df00      	svc	0
 800dd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd8a:	bf00      	nop
 800dd8c:	e000ed08 	.word	0xe000ed08

0800dd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dd96:	4b46      	ldr	r3, [pc, #280]	; (800deb0 <xPortStartScheduler+0x120>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a46      	ldr	r2, [pc, #280]	; (800deb4 <xPortStartScheduler+0x124>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d10a      	bne.n	800ddb6 <xPortStartScheduler+0x26>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	613b      	str	r3, [r7, #16]
}
 800ddb2:	bf00      	nop
 800ddb4:	e7fe      	b.n	800ddb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddb6:	4b3e      	ldr	r3, [pc, #248]	; (800deb0 <xPortStartScheduler+0x120>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a3f      	ldr	r2, [pc, #252]	; (800deb8 <xPortStartScheduler+0x128>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10a      	bne.n	800ddd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddd6:	4b39      	ldr	r3, [pc, #228]	; (800debc <xPortStartScheduler+0x12c>)
 800ddd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	22ff      	movs	r2, #255	; 0xff
 800dde6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ddf0:	78fb      	ldrb	r3, [r7, #3]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	4b31      	ldr	r3, [pc, #196]	; (800dec0 <xPortStartScheduler+0x130>)
 800ddfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ddfe:	4b31      	ldr	r3, [pc, #196]	; (800dec4 <xPortStartScheduler+0x134>)
 800de00:	2207      	movs	r2, #7
 800de02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de04:	e009      	b.n	800de1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de06:	4b2f      	ldr	r3, [pc, #188]	; (800dec4 <xPortStartScheduler+0x134>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	4a2d      	ldr	r2, [pc, #180]	; (800dec4 <xPortStartScheduler+0x134>)
 800de0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	b2db      	uxtb	r3, r3
 800de18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de22:	2b80      	cmp	r3, #128	; 0x80
 800de24:	d0ef      	beq.n	800de06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de26:	4b27      	ldr	r3, [pc, #156]	; (800dec4 <xPortStartScheduler+0x134>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f1c3 0307 	rsb	r3, r3, #7
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d00a      	beq.n	800de48 <xPortStartScheduler+0xb8>
	__asm volatile
 800de32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	60bb      	str	r3, [r7, #8]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de48:	4b1e      	ldr	r3, [pc, #120]	; (800dec4 <xPortStartScheduler+0x134>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <xPortStartScheduler+0x134>)
 800de50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de52:	4b1c      	ldr	r3, [pc, #112]	; (800dec4 <xPortStartScheduler+0x134>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de5a:	4a1a      	ldr	r2, [pc, #104]	; (800dec4 <xPortStartScheduler+0x134>)
 800de5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	b2da      	uxtb	r2, r3
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de66:	4b18      	ldr	r3, [pc, #96]	; (800dec8 <xPortStartScheduler+0x138>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <xPortStartScheduler+0x138>)
 800de6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <xPortStartScheduler+0x138>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a14      	ldr	r2, [pc, #80]	; (800dec8 <xPortStartScheduler+0x138>)
 800de78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de7e:	f000 f8dd 	bl	800e03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <xPortStartScheduler+0x13c>)
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800de88:	f000 f8fc 	bl	800e084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800de8c:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <xPortStartScheduler+0x140>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a0f      	ldr	r2, [pc, #60]	; (800ded0 <xPortStartScheduler+0x140>)
 800de92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800de96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800de98:	f7ff ff66 	bl	800dd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800de9c:	f7ff fa84 	bl	800d3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800dea0:	f7ff ff1e 	bl	800dce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	e000ed00 	.word	0xe000ed00
 800deb4:	410fc271 	.word	0x410fc271
 800deb8:	410fc270 	.word	0x410fc270
 800debc:	e000e400 	.word	0xe000e400
 800dec0:	200062a4 	.word	0x200062a4
 800dec4:	200062a8 	.word	0x200062a8
 800dec8:	e000ed20 	.word	0xe000ed20
 800decc:	20000044 	.word	0x20000044
 800ded0:	e000ef34 	.word	0xe000ef34

0800ded4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	607b      	str	r3, [r7, #4]
}
 800deec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800deee:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <vPortEnterCritical+0x58>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3301      	adds	r3, #1
 800def4:	4a0d      	ldr	r2, [pc, #52]	; (800df2c <vPortEnterCritical+0x58>)
 800def6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800def8:	4b0c      	ldr	r3, [pc, #48]	; (800df2c <vPortEnterCritical+0x58>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d10f      	bne.n	800df20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df00:	4b0b      	ldr	r3, [pc, #44]	; (800df30 <vPortEnterCritical+0x5c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00a      	beq.n	800df20 <vPortEnterCritical+0x4c>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	603b      	str	r3, [r7, #0]
}
 800df1c:	bf00      	nop
 800df1e:	e7fe      	b.n	800df1e <vPortEnterCritical+0x4a>
	}
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	20000044 	.word	0x20000044
 800df30:	e000ed04 	.word	0xe000ed04

0800df34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df3a:	4b12      	ldr	r3, [pc, #72]	; (800df84 <vPortExitCritical+0x50>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d10a      	bne.n	800df58 <vPortExitCritical+0x24>
	__asm volatile
 800df42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df46:	f383 8811 	msr	BASEPRI, r3
 800df4a:	f3bf 8f6f 	isb	sy
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	607b      	str	r3, [r7, #4]
}
 800df54:	bf00      	nop
 800df56:	e7fe      	b.n	800df56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df58:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <vPortExitCritical+0x50>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4a09      	ldr	r2, [pc, #36]	; (800df84 <vPortExitCritical+0x50>)
 800df60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df62:	4b08      	ldr	r3, [pc, #32]	; (800df84 <vPortExitCritical+0x50>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d105      	bne.n	800df76 <vPortExitCritical+0x42>
 800df6a:	2300      	movs	r3, #0
 800df6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	f383 8811 	msr	BASEPRI, r3
}
 800df74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df76:	bf00      	nop
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20000044 	.word	0x20000044
	...

0800df90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800df90:	f3ef 8009 	mrs	r0, PSP
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	4b15      	ldr	r3, [pc, #84]	; (800dff0 <pxCurrentTCBConst>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	f01e 0f10 	tst.w	lr, #16
 800dfa0:	bf08      	it	eq
 800dfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfaa:	6010      	str	r0, [r2, #0]
 800dfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfb4:	f380 8811 	msr	BASEPRI, r0
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f7ff f9f2 	bl	800d3a8 <vTaskSwitchContext>
 800dfc4:	f04f 0000 	mov.w	r0, #0
 800dfc8:	f380 8811 	msr	BASEPRI, r0
 800dfcc:	bc09      	pop	{r0, r3}
 800dfce:	6819      	ldr	r1, [r3, #0]
 800dfd0:	6808      	ldr	r0, [r1, #0]
 800dfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd6:	f01e 0f10 	tst.w	lr, #16
 800dfda:	bf08      	it	eq
 800dfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dfe0:	f380 8809 	msr	PSP, r0
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w

0800dff0 <pxCurrentTCBConst>:
 800dff0:	20006178 	.word	0x20006178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop

0800dff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	607b      	str	r3, [r7, #4]
}
 800e010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e012:	f7ff f911 	bl	800d238 <xTaskIncrementTick>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d003      	beq.n	800e024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e01c:	4b06      	ldr	r3, [pc, #24]	; (800e038 <SysTick_Handler+0x40>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	2300      	movs	r3, #0
 800e026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f383 8811 	msr	BASEPRI, r3
}
 800e02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e046:	4b0b      	ldr	r3, [pc, #44]	; (800e074 <vPortSetupTimerInterrupt+0x38>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <vPortSetupTimerInterrupt+0x3c>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a0a      	ldr	r2, [pc, #40]	; (800e07c <vPortSetupTimerInterrupt+0x40>)
 800e052:	fba2 2303 	umull	r2, r3, r2, r3
 800e056:	099b      	lsrs	r3, r3, #6
 800e058:	4a09      	ldr	r2, [pc, #36]	; (800e080 <vPortSetupTimerInterrupt+0x44>)
 800e05a:	3b01      	subs	r3, #1
 800e05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e05e:	4b04      	ldr	r3, [pc, #16]	; (800e070 <vPortSetupTimerInterrupt+0x34>)
 800e060:	2207      	movs	r2, #7
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	e000e010 	.word	0xe000e010
 800e074:	e000e018 	.word	0xe000e018
 800e078:	20000014 	.word	0x20000014
 800e07c:	10624dd3 	.word	0x10624dd3
 800e080:	e000e014 	.word	0xe000e014

0800e084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e094 <vPortEnableVFP+0x10>
 800e088:	6801      	ldr	r1, [r0, #0]
 800e08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e08e:	6001      	str	r1, [r0, #0]
 800e090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e092:	bf00      	nop
 800e094:	e000ed88 	.word	0xe000ed88

0800e098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e09e:	f3ef 8305 	mrs	r3, IPSR
 800e0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d914      	bls.n	800e0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0aa:	4a17      	ldr	r2, [pc, #92]	; (800e108 <vPortValidateInterruptPriority+0x70>)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0b4:	4b15      	ldr	r3, [pc, #84]	; (800e10c <vPortValidateInterruptPriority+0x74>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	7afa      	ldrb	r2, [r7, #11]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d20a      	bcs.n	800e0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	607b      	str	r3, [r7, #4]
}
 800e0d0:	bf00      	nop
 800e0d2:	e7fe      	b.n	800e0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0d4:	4b0e      	ldr	r3, [pc, #56]	; (800e110 <vPortValidateInterruptPriority+0x78>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <vPortValidateInterruptPriority+0x7c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d90a      	bls.n	800e0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	603b      	str	r3, [r7, #0]
}
 800e0f6:	bf00      	nop
 800e0f8:	e7fe      	b.n	800e0f8 <vPortValidateInterruptPriority+0x60>
	}
 800e0fa:	bf00      	nop
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	e000e3f0 	.word	0xe000e3f0
 800e10c:	200062a4 	.word	0x200062a4
 800e110:	e000ed0c 	.word	0xe000ed0c
 800e114:	200062a8 	.word	0x200062a8

0800e118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08a      	sub	sp, #40	; 0x28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e120:	2300      	movs	r3, #0
 800e122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e124:	f7fe ffbc 	bl	800d0a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e128:	4b5b      	ldr	r3, [pc, #364]	; (800e298 <pvPortMalloc+0x180>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e130:	f000 f920 	bl	800e374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e134:	4b59      	ldr	r3, [pc, #356]	; (800e29c <pvPortMalloc+0x184>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4013      	ands	r3, r2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 8093 	bne.w	800e268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d01d      	beq.n	800e184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e148:	2208      	movs	r2, #8
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4413      	add	r3, r2
 800e14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f003 0307 	and.w	r3, r3, #7
 800e156:	2b00      	cmp	r3, #0
 800e158:	d014      	beq.n	800e184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f023 0307 	bic.w	r3, r3, #7
 800e160:	3308      	adds	r3, #8
 800e162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <pvPortMalloc+0x6c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	617b      	str	r3, [r7, #20]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d06e      	beq.n	800e268 <pvPortMalloc+0x150>
 800e18a:	4b45      	ldr	r3, [pc, #276]	; (800e2a0 <pvPortMalloc+0x188>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	429a      	cmp	r2, r3
 800e192:	d869      	bhi.n	800e268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e194:	4b43      	ldr	r3, [pc, #268]	; (800e2a4 <pvPortMalloc+0x18c>)
 800e196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e198:	4b42      	ldr	r3, [pc, #264]	; (800e2a4 <pvPortMalloc+0x18c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e19e:	e004      	b.n	800e1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d903      	bls.n	800e1bc <pvPortMalloc+0xa4>
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1f1      	bne.n	800e1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1bc:	4b36      	ldr	r3, [pc, #216]	; (800e298 <pvPortMalloc+0x180>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d050      	beq.n	800e268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2208      	movs	r2, #8
 800e1cc:	4413      	add	r3, r2
 800e1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	1ad2      	subs	r2, r2, r3
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d91f      	bls.n	800e228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	f003 0307 	and.w	r3, r3, #7
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <pvPortMalloc+0xf8>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	613b      	str	r3, [r7, #16]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	1ad2      	subs	r2, r2, r3
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e222:	69b8      	ldr	r0, [r7, #24]
 800e224:	f000 f908 	bl	800e438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e228:	4b1d      	ldr	r3, [pc, #116]	; (800e2a0 <pvPortMalloc+0x188>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	4a1b      	ldr	r2, [pc, #108]	; (800e2a0 <pvPortMalloc+0x188>)
 800e234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e236:	4b1a      	ldr	r3, [pc, #104]	; (800e2a0 <pvPortMalloc+0x188>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <pvPortMalloc+0x190>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d203      	bcs.n	800e24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e242:	4b17      	ldr	r3, [pc, #92]	; (800e2a0 <pvPortMalloc+0x188>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a18      	ldr	r2, [pc, #96]	; (800e2a8 <pvPortMalloc+0x190>)
 800e248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	4b13      	ldr	r3, [pc, #76]	; (800e29c <pvPortMalloc+0x184>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	431a      	orrs	r2, r3
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	2200      	movs	r2, #0
 800e25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <pvPortMalloc+0x194>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3301      	adds	r3, #1
 800e264:	4a11      	ldr	r2, [pc, #68]	; (800e2ac <pvPortMalloc+0x194>)
 800e266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e268:	f7fe ff28 	bl	800d0bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <pvPortMalloc+0x174>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	60fb      	str	r3, [r7, #12]
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <pvPortMalloc+0x172>
	return pvReturn;
 800e28c:	69fb      	ldr	r3, [r7, #28]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3728      	adds	r7, #40	; 0x28
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20009eb4 	.word	0x20009eb4
 800e29c:	20009ec8 	.word	0x20009ec8
 800e2a0:	20009eb8 	.word	0x20009eb8
 800e2a4:	20009eac 	.word	0x20009eac
 800e2a8:	20009ebc 	.word	0x20009ebc
 800e2ac:	20009ec0 	.word	0x20009ec0

0800e2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d04d      	beq.n	800e35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2c2:	2308      	movs	r3, #8
 800e2c4:	425b      	negs	r3, r3
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	4b24      	ldr	r3, [pc, #144]	; (800e368 <vPortFree+0xb8>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4013      	ands	r3, r2
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10a      	bne.n	800e2f4 <vPortFree+0x44>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	60fb      	str	r3, [r7, #12]
}
 800e2f0:	bf00      	nop
 800e2f2:	e7fe      	b.n	800e2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00a      	beq.n	800e312 <vPortFree+0x62>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	60bb      	str	r3, [r7, #8]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	4b14      	ldr	r3, [pc, #80]	; (800e368 <vPortFree+0xb8>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4013      	ands	r3, r2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01e      	beq.n	800e35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d11a      	bne.n	800e35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <vPortFree+0xb8>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	43db      	mvns	r3, r3
 800e332:	401a      	ands	r2, r3
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e338:	f7fe feb2 	bl	800d0a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <vPortFree+0xbc>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4413      	add	r3, r2
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <vPortFree+0xbc>)
 800e348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e34a:	6938      	ldr	r0, [r7, #16]
 800e34c:	f000 f874 	bl	800e438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <vPortFree+0xc0>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	4a06      	ldr	r2, [pc, #24]	; (800e370 <vPortFree+0xc0>)
 800e358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e35a:	f7fe feaf 	bl	800d0bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e35e:	bf00      	nop
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20009ec8 	.word	0x20009ec8
 800e36c:	20009eb8 	.word	0x20009eb8
 800e370:	20009ec4 	.word	0x20009ec4

0800e374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e380:	4b27      	ldr	r3, [pc, #156]	; (800e420 <prvHeapInit+0xac>)
 800e382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00c      	beq.n	800e3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3307      	adds	r3, #7
 800e392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f023 0307 	bic.w	r3, r3, #7
 800e39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	4a1f      	ldr	r2, [pc, #124]	; (800e420 <prvHeapInit+0xac>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3ac:	4a1d      	ldr	r2, [pc, #116]	; (800e424 <prvHeapInit+0xb0>)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <prvHeapInit+0xb0>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	4413      	add	r3, r2
 800e3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3c0:	2208      	movs	r2, #8
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f023 0307 	bic.w	r3, r3, #7
 800e3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	4a15      	ldr	r2, [pc, #84]	; (800e428 <prvHeapInit+0xb4>)
 800e3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3d6:	4b14      	ldr	r3, [pc, #80]	; (800e428 <prvHeapInit+0xb4>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3de:	4b12      	ldr	r3, [pc, #72]	; (800e428 <prvHeapInit+0xb4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	1ad2      	subs	r2, r2, r3
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e3f4:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <prvHeapInit+0xb4>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	4a0a      	ldr	r2, [pc, #40]	; (800e42c <prvHeapInit+0xb8>)
 800e402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	4a09      	ldr	r2, [pc, #36]	; (800e430 <prvHeapInit+0xbc>)
 800e40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e40c:	4b09      	ldr	r3, [pc, #36]	; (800e434 <prvHeapInit+0xc0>)
 800e40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e412:	601a      	str	r2, [r3, #0]
}
 800e414:	bf00      	nop
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr
 800e420:	200062ac 	.word	0x200062ac
 800e424:	20009eac 	.word	0x20009eac
 800e428:	20009eb4 	.word	0x20009eb4
 800e42c:	20009ebc 	.word	0x20009ebc
 800e430:	20009eb8 	.word	0x20009eb8
 800e434:	20009ec8 	.word	0x20009ec8

0800e438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e440:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <prvInsertBlockIntoFreeList+0xac>)
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	e002      	b.n	800e44c <prvInsertBlockIntoFreeList+0x14>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	429a      	cmp	r2, r3
 800e454:	d8f7      	bhi.n	800e446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	4413      	add	r3, r2
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	429a      	cmp	r2, r3
 800e466:	d108      	bne.n	800e47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	441a      	add	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	441a      	add	r2, r3
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d118      	bne.n	800e4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d00d      	beq.n	800e4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	441a      	add	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	e008      	b.n	800e4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4b6:	4b0c      	ldr	r3, [pc, #48]	; (800e4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	e003      	b.n	800e4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d002      	beq.n	800e4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4d6:	bf00      	nop
 800e4d8:	3714      	adds	r7, #20
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20009eac 	.word	0x20009eac
 800e4e8:	20009eb4 	.word	0x20009eb4

0800e4ec <__cvt>:
 800e4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f0:	ec55 4b10 	vmov	r4, r5, d0
 800e4f4:	2d00      	cmp	r5, #0
 800e4f6:	460e      	mov	r6, r1
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	bfbb      	ittet	lt
 800e4fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e502:	461d      	movlt	r5, r3
 800e504:	2300      	movge	r3, #0
 800e506:	232d      	movlt	r3, #45	; 0x2d
 800e508:	700b      	strb	r3, [r1, #0]
 800e50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e50c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e510:	4691      	mov	r9, r2
 800e512:	f023 0820 	bic.w	r8, r3, #32
 800e516:	bfbc      	itt	lt
 800e518:	4622      	movlt	r2, r4
 800e51a:	4614      	movlt	r4, r2
 800e51c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e520:	d005      	beq.n	800e52e <__cvt+0x42>
 800e522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e526:	d100      	bne.n	800e52a <__cvt+0x3e>
 800e528:	3601      	adds	r6, #1
 800e52a:	2102      	movs	r1, #2
 800e52c:	e000      	b.n	800e530 <__cvt+0x44>
 800e52e:	2103      	movs	r1, #3
 800e530:	ab03      	add	r3, sp, #12
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	ab02      	add	r3, sp, #8
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	ec45 4b10 	vmov	d0, r4, r5
 800e53c:	4653      	mov	r3, sl
 800e53e:	4632      	mov	r2, r6
 800e540:	f000 ffce 	bl	800f4e0 <_dtoa_r>
 800e544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e548:	4607      	mov	r7, r0
 800e54a:	d102      	bne.n	800e552 <__cvt+0x66>
 800e54c:	f019 0f01 	tst.w	r9, #1
 800e550:	d022      	beq.n	800e598 <__cvt+0xac>
 800e552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e556:	eb07 0906 	add.w	r9, r7, r6
 800e55a:	d110      	bne.n	800e57e <__cvt+0x92>
 800e55c:	783b      	ldrb	r3, [r7, #0]
 800e55e:	2b30      	cmp	r3, #48	; 0x30
 800e560:	d10a      	bne.n	800e578 <__cvt+0x8c>
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	4620      	mov	r0, r4
 800e568:	4629      	mov	r1, r5
 800e56a:	f7f2 fadd 	bl	8000b28 <__aeabi_dcmpeq>
 800e56e:	b918      	cbnz	r0, 800e578 <__cvt+0x8c>
 800e570:	f1c6 0601 	rsb	r6, r6, #1
 800e574:	f8ca 6000 	str.w	r6, [sl]
 800e578:	f8da 3000 	ldr.w	r3, [sl]
 800e57c:	4499      	add	r9, r3
 800e57e:	2200      	movs	r2, #0
 800e580:	2300      	movs	r3, #0
 800e582:	4620      	mov	r0, r4
 800e584:	4629      	mov	r1, r5
 800e586:	f7f2 facf 	bl	8000b28 <__aeabi_dcmpeq>
 800e58a:	b108      	cbz	r0, 800e590 <__cvt+0xa4>
 800e58c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e590:	2230      	movs	r2, #48	; 0x30
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	454b      	cmp	r3, r9
 800e596:	d307      	bcc.n	800e5a8 <__cvt+0xbc>
 800e598:	9b03      	ldr	r3, [sp, #12]
 800e59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e59c:	1bdb      	subs	r3, r3, r7
 800e59e:	4638      	mov	r0, r7
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	b004      	add	sp, #16
 800e5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a8:	1c59      	adds	r1, r3, #1
 800e5aa:	9103      	str	r1, [sp, #12]
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	e7f0      	b.n	800e592 <__cvt+0xa6>

0800e5b0 <__exponent>:
 800e5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	bfb8      	it	lt
 800e5b8:	4249      	neglt	r1, r1
 800e5ba:	f803 2b02 	strb.w	r2, [r3], #2
 800e5be:	bfb4      	ite	lt
 800e5c0:	222d      	movlt	r2, #45	; 0x2d
 800e5c2:	222b      	movge	r2, #43	; 0x2b
 800e5c4:	2909      	cmp	r1, #9
 800e5c6:	7042      	strb	r2, [r0, #1]
 800e5c8:	dd2a      	ble.n	800e620 <__exponent+0x70>
 800e5ca:	f10d 0207 	add.w	r2, sp, #7
 800e5ce:	4617      	mov	r7, r2
 800e5d0:	260a      	movs	r6, #10
 800e5d2:	4694      	mov	ip, r2
 800e5d4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e5d8:	fb06 1415 	mls	r4, r6, r5, r1
 800e5dc:	3430      	adds	r4, #48	; 0x30
 800e5de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	2c63      	cmp	r4, #99	; 0x63
 800e5e6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	dcf1      	bgt.n	800e5d2 <__exponent+0x22>
 800e5ee:	3130      	adds	r1, #48	; 0x30
 800e5f0:	f1ac 0402 	sub.w	r4, ip, #2
 800e5f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e5f8:	1c41      	adds	r1, r0, #1
 800e5fa:	4622      	mov	r2, r4
 800e5fc:	42ba      	cmp	r2, r7
 800e5fe:	d30a      	bcc.n	800e616 <__exponent+0x66>
 800e600:	f10d 0209 	add.w	r2, sp, #9
 800e604:	eba2 020c 	sub.w	r2, r2, ip
 800e608:	42bc      	cmp	r4, r7
 800e60a:	bf88      	it	hi
 800e60c:	2200      	movhi	r2, #0
 800e60e:	4413      	add	r3, r2
 800e610:	1a18      	subs	r0, r3, r0
 800e612:	b003      	add	sp, #12
 800e614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e616:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e61a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e61e:	e7ed      	b.n	800e5fc <__exponent+0x4c>
 800e620:	2330      	movs	r3, #48	; 0x30
 800e622:	3130      	adds	r1, #48	; 0x30
 800e624:	7083      	strb	r3, [r0, #2]
 800e626:	70c1      	strb	r1, [r0, #3]
 800e628:	1d03      	adds	r3, r0, #4
 800e62a:	e7f1      	b.n	800e610 <__exponent+0x60>

0800e62c <_printf_float>:
 800e62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e630:	ed2d 8b02 	vpush	{d8}
 800e634:	b08d      	sub	sp, #52	; 0x34
 800e636:	460c      	mov	r4, r1
 800e638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e63c:	4616      	mov	r6, r2
 800e63e:	461f      	mov	r7, r3
 800e640:	4605      	mov	r5, r0
 800e642:	f000 fdeb 	bl	800f21c <_localeconv_r>
 800e646:	f8d0 a000 	ldr.w	sl, [r0]
 800e64a:	4650      	mov	r0, sl
 800e64c:	f7f1 fe40 	bl	80002d0 <strlen>
 800e650:	2300      	movs	r3, #0
 800e652:	930a      	str	r3, [sp, #40]	; 0x28
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	9305      	str	r3, [sp, #20]
 800e658:	f8d8 3000 	ldr.w	r3, [r8]
 800e65c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e660:	3307      	adds	r3, #7
 800e662:	f023 0307 	bic.w	r3, r3, #7
 800e666:	f103 0208 	add.w	r2, r3, #8
 800e66a:	f8c8 2000 	str.w	r2, [r8]
 800e66e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e676:	9307      	str	r3, [sp, #28]
 800e678:	f8cd 8018 	str.w	r8, [sp, #24]
 800e67c:	ee08 0a10 	vmov	s16, r0
 800e680:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e688:	4b9e      	ldr	r3, [pc, #632]	; (800e904 <_printf_float+0x2d8>)
 800e68a:	f04f 32ff 	mov.w	r2, #4294967295
 800e68e:	f7f2 fa7d 	bl	8000b8c <__aeabi_dcmpun>
 800e692:	bb88      	cbnz	r0, 800e6f8 <_printf_float+0xcc>
 800e694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e698:	4b9a      	ldr	r3, [pc, #616]	; (800e904 <_printf_float+0x2d8>)
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	f7f2 fa57 	bl	8000b50 <__aeabi_dcmple>
 800e6a2:	bb48      	cbnz	r0, 800e6f8 <_printf_float+0xcc>
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	f7f2 fa46 	bl	8000b3c <__aeabi_dcmplt>
 800e6b0:	b110      	cbz	r0, 800e6b8 <_printf_float+0x8c>
 800e6b2:	232d      	movs	r3, #45	; 0x2d
 800e6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6b8:	4a93      	ldr	r2, [pc, #588]	; (800e908 <_printf_float+0x2dc>)
 800e6ba:	4b94      	ldr	r3, [pc, #592]	; (800e90c <_printf_float+0x2e0>)
 800e6bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e6c0:	bf94      	ite	ls
 800e6c2:	4690      	movls	r8, r2
 800e6c4:	4698      	movhi	r8, r3
 800e6c6:	2303      	movs	r3, #3
 800e6c8:	6123      	str	r3, [r4, #16]
 800e6ca:	9b05      	ldr	r3, [sp, #20]
 800e6cc:	f023 0304 	bic.w	r3, r3, #4
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	f04f 0900 	mov.w	r9, #0
 800e6d6:	9700      	str	r7, [sp, #0]
 800e6d8:	4633      	mov	r3, r6
 800e6da:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6dc:	4621      	mov	r1, r4
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 f9da 	bl	800ea98 <_printf_common>
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	f040 8090 	bne.w	800e80a <_printf_float+0x1de>
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ee:	b00d      	add	sp, #52	; 0x34
 800e6f0:	ecbd 8b02 	vpop	{d8}
 800e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f2 fa44 	bl	8000b8c <__aeabi_dcmpun>
 800e704:	b140      	cbz	r0, 800e718 <_printf_float+0xec>
 800e706:	464b      	mov	r3, r9
 800e708:	2b00      	cmp	r3, #0
 800e70a:	bfbc      	itt	lt
 800e70c:	232d      	movlt	r3, #45	; 0x2d
 800e70e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e712:	4a7f      	ldr	r2, [pc, #508]	; (800e910 <_printf_float+0x2e4>)
 800e714:	4b7f      	ldr	r3, [pc, #508]	; (800e914 <_printf_float+0x2e8>)
 800e716:	e7d1      	b.n	800e6bc <_printf_float+0x90>
 800e718:	6863      	ldr	r3, [r4, #4]
 800e71a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e71e:	9206      	str	r2, [sp, #24]
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	d13f      	bne.n	800e7a4 <_printf_float+0x178>
 800e724:	2306      	movs	r3, #6
 800e726:	6063      	str	r3, [r4, #4]
 800e728:	9b05      	ldr	r3, [sp, #20]
 800e72a:	6861      	ldr	r1, [r4, #4]
 800e72c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e730:	2300      	movs	r3, #0
 800e732:	9303      	str	r3, [sp, #12]
 800e734:	ab0a      	add	r3, sp, #40	; 0x28
 800e736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e73a:	ab09      	add	r3, sp, #36	; 0x24
 800e73c:	ec49 8b10 	vmov	d0, r8, r9
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	6022      	str	r2, [r4, #0]
 800e744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e748:	4628      	mov	r0, r5
 800e74a:	f7ff fecf 	bl	800e4ec <__cvt>
 800e74e:	9b06      	ldr	r3, [sp, #24]
 800e750:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e752:	2b47      	cmp	r3, #71	; 0x47
 800e754:	4680      	mov	r8, r0
 800e756:	d108      	bne.n	800e76a <_printf_float+0x13e>
 800e758:	1cc8      	adds	r0, r1, #3
 800e75a:	db02      	blt.n	800e762 <_printf_float+0x136>
 800e75c:	6863      	ldr	r3, [r4, #4]
 800e75e:	4299      	cmp	r1, r3
 800e760:	dd41      	ble.n	800e7e6 <_printf_float+0x1ba>
 800e762:	f1ab 0302 	sub.w	r3, fp, #2
 800e766:	fa5f fb83 	uxtb.w	fp, r3
 800e76a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e76e:	d820      	bhi.n	800e7b2 <_printf_float+0x186>
 800e770:	3901      	subs	r1, #1
 800e772:	465a      	mov	r2, fp
 800e774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e778:	9109      	str	r1, [sp, #36]	; 0x24
 800e77a:	f7ff ff19 	bl	800e5b0 <__exponent>
 800e77e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e780:	1813      	adds	r3, r2, r0
 800e782:	2a01      	cmp	r2, #1
 800e784:	4681      	mov	r9, r0
 800e786:	6123      	str	r3, [r4, #16]
 800e788:	dc02      	bgt.n	800e790 <_printf_float+0x164>
 800e78a:	6822      	ldr	r2, [r4, #0]
 800e78c:	07d2      	lsls	r2, r2, #31
 800e78e:	d501      	bpl.n	800e794 <_printf_float+0x168>
 800e790:	3301      	adds	r3, #1
 800e792:	6123      	str	r3, [r4, #16]
 800e794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d09c      	beq.n	800e6d6 <_printf_float+0xaa>
 800e79c:	232d      	movs	r3, #45	; 0x2d
 800e79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a2:	e798      	b.n	800e6d6 <_printf_float+0xaa>
 800e7a4:	9a06      	ldr	r2, [sp, #24]
 800e7a6:	2a47      	cmp	r2, #71	; 0x47
 800e7a8:	d1be      	bne.n	800e728 <_printf_float+0xfc>
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1bc      	bne.n	800e728 <_printf_float+0xfc>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e7b9      	b.n	800e726 <_printf_float+0xfa>
 800e7b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e7b6:	d118      	bne.n	800e7ea <_printf_float+0x1be>
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	6863      	ldr	r3, [r4, #4]
 800e7bc:	dd0b      	ble.n	800e7d6 <_printf_float+0x1aa>
 800e7be:	6121      	str	r1, [r4, #16]
 800e7c0:	b913      	cbnz	r3, 800e7c8 <_printf_float+0x19c>
 800e7c2:	6822      	ldr	r2, [r4, #0]
 800e7c4:	07d0      	lsls	r0, r2, #31
 800e7c6:	d502      	bpl.n	800e7ce <_printf_float+0x1a2>
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	440b      	add	r3, r1
 800e7cc:	6123      	str	r3, [r4, #16]
 800e7ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800e7d0:	f04f 0900 	mov.w	r9, #0
 800e7d4:	e7de      	b.n	800e794 <_printf_float+0x168>
 800e7d6:	b913      	cbnz	r3, 800e7de <_printf_float+0x1b2>
 800e7d8:	6822      	ldr	r2, [r4, #0]
 800e7da:	07d2      	lsls	r2, r2, #31
 800e7dc:	d501      	bpl.n	800e7e2 <_printf_float+0x1b6>
 800e7de:	3302      	adds	r3, #2
 800e7e0:	e7f4      	b.n	800e7cc <_printf_float+0x1a0>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e7f2      	b.n	800e7cc <_printf_float+0x1a0>
 800e7e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ec:	4299      	cmp	r1, r3
 800e7ee:	db05      	blt.n	800e7fc <_printf_float+0x1d0>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	6121      	str	r1, [r4, #16]
 800e7f4:	07d8      	lsls	r0, r3, #31
 800e7f6:	d5ea      	bpl.n	800e7ce <_printf_float+0x1a2>
 800e7f8:	1c4b      	adds	r3, r1, #1
 800e7fa:	e7e7      	b.n	800e7cc <_printf_float+0x1a0>
 800e7fc:	2900      	cmp	r1, #0
 800e7fe:	bfd4      	ite	le
 800e800:	f1c1 0202 	rsble	r2, r1, #2
 800e804:	2201      	movgt	r2, #1
 800e806:	4413      	add	r3, r2
 800e808:	e7e0      	b.n	800e7cc <_printf_float+0x1a0>
 800e80a:	6823      	ldr	r3, [r4, #0]
 800e80c:	055a      	lsls	r2, r3, #21
 800e80e:	d407      	bmi.n	800e820 <_printf_float+0x1f4>
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	4642      	mov	r2, r8
 800e814:	4631      	mov	r1, r6
 800e816:	4628      	mov	r0, r5
 800e818:	47b8      	blx	r7
 800e81a:	3001      	adds	r0, #1
 800e81c:	d12c      	bne.n	800e878 <_printf_float+0x24c>
 800e81e:	e764      	b.n	800e6ea <_printf_float+0xbe>
 800e820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e824:	f240 80e0 	bls.w	800e9e8 <_printf_float+0x3bc>
 800e828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e82c:	2200      	movs	r2, #0
 800e82e:	2300      	movs	r3, #0
 800e830:	f7f2 f97a 	bl	8000b28 <__aeabi_dcmpeq>
 800e834:	2800      	cmp	r0, #0
 800e836:	d034      	beq.n	800e8a2 <_printf_float+0x276>
 800e838:	4a37      	ldr	r2, [pc, #220]	; (800e918 <_printf_float+0x2ec>)
 800e83a:	2301      	movs	r3, #1
 800e83c:	4631      	mov	r1, r6
 800e83e:	4628      	mov	r0, r5
 800e840:	47b8      	blx	r7
 800e842:	3001      	adds	r0, #1
 800e844:	f43f af51 	beq.w	800e6ea <_printf_float+0xbe>
 800e848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e84c:	429a      	cmp	r2, r3
 800e84e:	db02      	blt.n	800e856 <_printf_float+0x22a>
 800e850:	6823      	ldr	r3, [r4, #0]
 800e852:	07d8      	lsls	r0, r3, #31
 800e854:	d510      	bpl.n	800e878 <_printf_float+0x24c>
 800e856:	ee18 3a10 	vmov	r3, s16
 800e85a:	4652      	mov	r2, sl
 800e85c:	4631      	mov	r1, r6
 800e85e:	4628      	mov	r0, r5
 800e860:	47b8      	blx	r7
 800e862:	3001      	adds	r0, #1
 800e864:	f43f af41 	beq.w	800e6ea <_printf_float+0xbe>
 800e868:	f04f 0800 	mov.w	r8, #0
 800e86c:	f104 091a 	add.w	r9, r4, #26
 800e870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e872:	3b01      	subs	r3, #1
 800e874:	4543      	cmp	r3, r8
 800e876:	dc09      	bgt.n	800e88c <_printf_float+0x260>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	079b      	lsls	r3, r3, #30
 800e87c:	f100 8107 	bmi.w	800ea8e <_printf_float+0x462>
 800e880:	68e0      	ldr	r0, [r4, #12]
 800e882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e884:	4298      	cmp	r0, r3
 800e886:	bfb8      	it	lt
 800e888:	4618      	movlt	r0, r3
 800e88a:	e730      	b.n	800e6ee <_printf_float+0xc2>
 800e88c:	2301      	movs	r3, #1
 800e88e:	464a      	mov	r2, r9
 800e890:	4631      	mov	r1, r6
 800e892:	4628      	mov	r0, r5
 800e894:	47b8      	blx	r7
 800e896:	3001      	adds	r0, #1
 800e898:	f43f af27 	beq.w	800e6ea <_printf_float+0xbe>
 800e89c:	f108 0801 	add.w	r8, r8, #1
 800e8a0:	e7e6      	b.n	800e870 <_printf_float+0x244>
 800e8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	dc39      	bgt.n	800e91c <_printf_float+0x2f0>
 800e8a8:	4a1b      	ldr	r2, [pc, #108]	; (800e918 <_printf_float+0x2ec>)
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f43f af19 	beq.w	800e6ea <_printf_float+0xbe>
 800e8b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	d102      	bne.n	800e8c6 <_printf_float+0x29a>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	07d9      	lsls	r1, r3, #31
 800e8c4:	d5d8      	bpl.n	800e878 <_printf_float+0x24c>
 800e8c6:	ee18 3a10 	vmov	r3, s16
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	47b8      	blx	r7
 800e8d2:	3001      	adds	r0, #1
 800e8d4:	f43f af09 	beq.w	800e6ea <_printf_float+0xbe>
 800e8d8:	f04f 0900 	mov.w	r9, #0
 800e8dc:	f104 0a1a 	add.w	sl, r4, #26
 800e8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e2:	425b      	negs	r3, r3
 800e8e4:	454b      	cmp	r3, r9
 800e8e6:	dc01      	bgt.n	800e8ec <_printf_float+0x2c0>
 800e8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ea:	e792      	b.n	800e812 <_printf_float+0x1e6>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	4652      	mov	r2, sl
 800e8f0:	4631      	mov	r1, r6
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	47b8      	blx	r7
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	f43f aef7 	beq.w	800e6ea <_printf_float+0xbe>
 800e8fc:	f109 0901 	add.w	r9, r9, #1
 800e900:	e7ee      	b.n	800e8e0 <_printf_float+0x2b4>
 800e902:	bf00      	nop
 800e904:	7fefffff 	.word	0x7fefffff
 800e908:	08011b78 	.word	0x08011b78
 800e90c:	08011b7c 	.word	0x08011b7c
 800e910:	08011b80 	.word	0x08011b80
 800e914:	08011b84 	.word	0x08011b84
 800e918:	08011b88 	.word	0x08011b88
 800e91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e91e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e920:	429a      	cmp	r2, r3
 800e922:	bfa8      	it	ge
 800e924:	461a      	movge	r2, r3
 800e926:	2a00      	cmp	r2, #0
 800e928:	4691      	mov	r9, r2
 800e92a:	dc37      	bgt.n	800e99c <_printf_float+0x370>
 800e92c:	f04f 0b00 	mov.w	fp, #0
 800e930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e934:	f104 021a 	add.w	r2, r4, #26
 800e938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e93a:	9305      	str	r3, [sp, #20]
 800e93c:	eba3 0309 	sub.w	r3, r3, r9
 800e940:	455b      	cmp	r3, fp
 800e942:	dc33      	bgt.n	800e9ac <_printf_float+0x380>
 800e944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e948:	429a      	cmp	r2, r3
 800e94a:	db3b      	blt.n	800e9c4 <_printf_float+0x398>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	07da      	lsls	r2, r3, #31
 800e950:	d438      	bmi.n	800e9c4 <_printf_float+0x398>
 800e952:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e956:	eba2 0903 	sub.w	r9, r2, r3
 800e95a:	9b05      	ldr	r3, [sp, #20]
 800e95c:	1ad2      	subs	r2, r2, r3
 800e95e:	4591      	cmp	r9, r2
 800e960:	bfa8      	it	ge
 800e962:	4691      	movge	r9, r2
 800e964:	f1b9 0f00 	cmp.w	r9, #0
 800e968:	dc35      	bgt.n	800e9d6 <_printf_float+0x3aa>
 800e96a:	f04f 0800 	mov.w	r8, #0
 800e96e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e972:	f104 0a1a 	add.w	sl, r4, #26
 800e976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e97a:	1a9b      	subs	r3, r3, r2
 800e97c:	eba3 0309 	sub.w	r3, r3, r9
 800e980:	4543      	cmp	r3, r8
 800e982:	f77f af79 	ble.w	800e878 <_printf_float+0x24c>
 800e986:	2301      	movs	r3, #1
 800e988:	4652      	mov	r2, sl
 800e98a:	4631      	mov	r1, r6
 800e98c:	4628      	mov	r0, r5
 800e98e:	47b8      	blx	r7
 800e990:	3001      	adds	r0, #1
 800e992:	f43f aeaa 	beq.w	800e6ea <_printf_float+0xbe>
 800e996:	f108 0801 	add.w	r8, r8, #1
 800e99a:	e7ec      	b.n	800e976 <_printf_float+0x34a>
 800e99c:	4613      	mov	r3, r2
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4642      	mov	r2, r8
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	47b8      	blx	r7
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	d1c0      	bne.n	800e92c <_printf_float+0x300>
 800e9aa:	e69e      	b.n	800e6ea <_printf_float+0xbe>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	9205      	str	r2, [sp, #20]
 800e9b4:	47b8      	blx	r7
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	f43f ae97 	beq.w	800e6ea <_printf_float+0xbe>
 800e9bc:	9a05      	ldr	r2, [sp, #20]
 800e9be:	f10b 0b01 	add.w	fp, fp, #1
 800e9c2:	e7b9      	b.n	800e938 <_printf_float+0x30c>
 800e9c4:	ee18 3a10 	vmov	r3, s16
 800e9c8:	4652      	mov	r2, sl
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	47b8      	blx	r7
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d1be      	bne.n	800e952 <_printf_float+0x326>
 800e9d4:	e689      	b.n	800e6ea <_printf_float+0xbe>
 800e9d6:	9a05      	ldr	r2, [sp, #20]
 800e9d8:	464b      	mov	r3, r9
 800e9da:	4442      	add	r2, r8
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4628      	mov	r0, r5
 800e9e0:	47b8      	blx	r7
 800e9e2:	3001      	adds	r0, #1
 800e9e4:	d1c1      	bne.n	800e96a <_printf_float+0x33e>
 800e9e6:	e680      	b.n	800e6ea <_printf_float+0xbe>
 800e9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ea:	2a01      	cmp	r2, #1
 800e9ec:	dc01      	bgt.n	800e9f2 <_printf_float+0x3c6>
 800e9ee:	07db      	lsls	r3, r3, #31
 800e9f0:	d53a      	bpl.n	800ea68 <_printf_float+0x43c>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	4642      	mov	r2, r8
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b8      	blx	r7
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	f43f ae74 	beq.w	800e6ea <_printf_float+0xbe>
 800ea02:	ee18 3a10 	vmov	r3, s16
 800ea06:	4652      	mov	r2, sl
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f ae6b 	beq.w	800e6ea <_printf_float+0xbe>
 800ea14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ea20:	f7f2 f882 	bl	8000b28 <__aeabi_dcmpeq>
 800ea24:	b9d8      	cbnz	r0, 800ea5e <_printf_float+0x432>
 800ea26:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea2a:	f108 0201 	add.w	r2, r8, #1
 800ea2e:	4631      	mov	r1, r6
 800ea30:	4628      	mov	r0, r5
 800ea32:	47b8      	blx	r7
 800ea34:	3001      	adds	r0, #1
 800ea36:	d10e      	bne.n	800ea56 <_printf_float+0x42a>
 800ea38:	e657      	b.n	800e6ea <_printf_float+0xbe>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4652      	mov	r2, sl
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	f43f ae50 	beq.w	800e6ea <_printf_float+0xbe>
 800ea4a:	f108 0801 	add.w	r8, r8, #1
 800ea4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea50:	3b01      	subs	r3, #1
 800ea52:	4543      	cmp	r3, r8
 800ea54:	dcf1      	bgt.n	800ea3a <_printf_float+0x40e>
 800ea56:	464b      	mov	r3, r9
 800ea58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea5c:	e6da      	b.n	800e814 <_printf_float+0x1e8>
 800ea5e:	f04f 0800 	mov.w	r8, #0
 800ea62:	f104 0a1a 	add.w	sl, r4, #26
 800ea66:	e7f2      	b.n	800ea4e <_printf_float+0x422>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	4642      	mov	r2, r8
 800ea6c:	e7df      	b.n	800ea2e <_printf_float+0x402>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	464a      	mov	r2, r9
 800ea72:	4631      	mov	r1, r6
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b8      	blx	r7
 800ea78:	3001      	adds	r0, #1
 800ea7a:	f43f ae36 	beq.w	800e6ea <_printf_float+0xbe>
 800ea7e:	f108 0801 	add.w	r8, r8, #1
 800ea82:	68e3      	ldr	r3, [r4, #12]
 800ea84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea86:	1a5b      	subs	r3, r3, r1
 800ea88:	4543      	cmp	r3, r8
 800ea8a:	dcf0      	bgt.n	800ea6e <_printf_float+0x442>
 800ea8c:	e6f8      	b.n	800e880 <_printf_float+0x254>
 800ea8e:	f04f 0800 	mov.w	r8, #0
 800ea92:	f104 0919 	add.w	r9, r4, #25
 800ea96:	e7f4      	b.n	800ea82 <_printf_float+0x456>

0800ea98 <_printf_common>:
 800ea98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea9c:	4616      	mov	r6, r2
 800ea9e:	4699      	mov	r9, r3
 800eaa0:	688a      	ldr	r2, [r1, #8]
 800eaa2:	690b      	ldr	r3, [r1, #16]
 800eaa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	bfb8      	it	lt
 800eaac:	4613      	movlt	r3, r2
 800eaae:	6033      	str	r3, [r6, #0]
 800eab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eab4:	4607      	mov	r7, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	b10a      	cbz	r2, 800eabe <_printf_common+0x26>
 800eaba:	3301      	adds	r3, #1
 800eabc:	6033      	str	r3, [r6, #0]
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	0699      	lsls	r1, r3, #26
 800eac2:	bf42      	ittt	mi
 800eac4:	6833      	ldrmi	r3, [r6, #0]
 800eac6:	3302      	addmi	r3, #2
 800eac8:	6033      	strmi	r3, [r6, #0]
 800eaca:	6825      	ldr	r5, [r4, #0]
 800eacc:	f015 0506 	ands.w	r5, r5, #6
 800ead0:	d106      	bne.n	800eae0 <_printf_common+0x48>
 800ead2:	f104 0a19 	add.w	sl, r4, #25
 800ead6:	68e3      	ldr	r3, [r4, #12]
 800ead8:	6832      	ldr	r2, [r6, #0]
 800eada:	1a9b      	subs	r3, r3, r2
 800eadc:	42ab      	cmp	r3, r5
 800eade:	dc26      	bgt.n	800eb2e <_printf_common+0x96>
 800eae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eae4:	1e13      	subs	r3, r2, #0
 800eae6:	6822      	ldr	r2, [r4, #0]
 800eae8:	bf18      	it	ne
 800eaea:	2301      	movne	r3, #1
 800eaec:	0692      	lsls	r2, r2, #26
 800eaee:	d42b      	bmi.n	800eb48 <_printf_common+0xb0>
 800eaf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	47c0      	blx	r8
 800eafa:	3001      	adds	r0, #1
 800eafc:	d01e      	beq.n	800eb3c <_printf_common+0xa4>
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	6922      	ldr	r2, [r4, #16]
 800eb02:	f003 0306 	and.w	r3, r3, #6
 800eb06:	2b04      	cmp	r3, #4
 800eb08:	bf02      	ittt	eq
 800eb0a:	68e5      	ldreq	r5, [r4, #12]
 800eb0c:	6833      	ldreq	r3, [r6, #0]
 800eb0e:	1aed      	subeq	r5, r5, r3
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	bf0c      	ite	eq
 800eb14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb18:	2500      	movne	r5, #0
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	bfc4      	itt	gt
 800eb1e:	1a9b      	subgt	r3, r3, r2
 800eb20:	18ed      	addgt	r5, r5, r3
 800eb22:	2600      	movs	r6, #0
 800eb24:	341a      	adds	r4, #26
 800eb26:	42b5      	cmp	r5, r6
 800eb28:	d11a      	bne.n	800eb60 <_printf_common+0xc8>
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	e008      	b.n	800eb40 <_printf_common+0xa8>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	4652      	mov	r2, sl
 800eb32:	4649      	mov	r1, r9
 800eb34:	4638      	mov	r0, r7
 800eb36:	47c0      	blx	r8
 800eb38:	3001      	adds	r0, #1
 800eb3a:	d103      	bne.n	800eb44 <_printf_common+0xac>
 800eb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb44:	3501      	adds	r5, #1
 800eb46:	e7c6      	b.n	800ead6 <_printf_common+0x3e>
 800eb48:	18e1      	adds	r1, r4, r3
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	2030      	movs	r0, #48	; 0x30
 800eb4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb52:	4422      	add	r2, r4
 800eb54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb5c:	3302      	adds	r3, #2
 800eb5e:	e7c7      	b.n	800eaf0 <_printf_common+0x58>
 800eb60:	2301      	movs	r3, #1
 800eb62:	4622      	mov	r2, r4
 800eb64:	4649      	mov	r1, r9
 800eb66:	4638      	mov	r0, r7
 800eb68:	47c0      	blx	r8
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	d0e6      	beq.n	800eb3c <_printf_common+0xa4>
 800eb6e:	3601      	adds	r6, #1
 800eb70:	e7d9      	b.n	800eb26 <_printf_common+0x8e>
	...

0800eb74 <_printf_i>:
 800eb74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb78:	7e0f      	ldrb	r7, [r1, #24]
 800eb7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb7c:	2f78      	cmp	r7, #120	; 0x78
 800eb7e:	4691      	mov	r9, r2
 800eb80:	4680      	mov	r8, r0
 800eb82:	460c      	mov	r4, r1
 800eb84:	469a      	mov	sl, r3
 800eb86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb8a:	d807      	bhi.n	800eb9c <_printf_i+0x28>
 800eb8c:	2f62      	cmp	r7, #98	; 0x62
 800eb8e:	d80a      	bhi.n	800eba6 <_printf_i+0x32>
 800eb90:	2f00      	cmp	r7, #0
 800eb92:	f000 80d4 	beq.w	800ed3e <_printf_i+0x1ca>
 800eb96:	2f58      	cmp	r7, #88	; 0x58
 800eb98:	f000 80c0 	beq.w	800ed1c <_printf_i+0x1a8>
 800eb9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eba4:	e03a      	b.n	800ec1c <_printf_i+0xa8>
 800eba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebaa:	2b15      	cmp	r3, #21
 800ebac:	d8f6      	bhi.n	800eb9c <_printf_i+0x28>
 800ebae:	a101      	add	r1, pc, #4	; (adr r1, 800ebb4 <_printf_i+0x40>)
 800ebb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebb4:	0800ec0d 	.word	0x0800ec0d
 800ebb8:	0800ec21 	.word	0x0800ec21
 800ebbc:	0800eb9d 	.word	0x0800eb9d
 800ebc0:	0800eb9d 	.word	0x0800eb9d
 800ebc4:	0800eb9d 	.word	0x0800eb9d
 800ebc8:	0800eb9d 	.word	0x0800eb9d
 800ebcc:	0800ec21 	.word	0x0800ec21
 800ebd0:	0800eb9d 	.word	0x0800eb9d
 800ebd4:	0800eb9d 	.word	0x0800eb9d
 800ebd8:	0800eb9d 	.word	0x0800eb9d
 800ebdc:	0800eb9d 	.word	0x0800eb9d
 800ebe0:	0800ed25 	.word	0x0800ed25
 800ebe4:	0800ec4d 	.word	0x0800ec4d
 800ebe8:	0800ecdf 	.word	0x0800ecdf
 800ebec:	0800eb9d 	.word	0x0800eb9d
 800ebf0:	0800eb9d 	.word	0x0800eb9d
 800ebf4:	0800ed47 	.word	0x0800ed47
 800ebf8:	0800eb9d 	.word	0x0800eb9d
 800ebfc:	0800ec4d 	.word	0x0800ec4d
 800ec00:	0800eb9d 	.word	0x0800eb9d
 800ec04:	0800eb9d 	.word	0x0800eb9d
 800ec08:	0800ece7 	.word	0x0800ece7
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	1d1a      	adds	r2, r3, #4
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	602a      	str	r2, [r5, #0]
 800ec14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e09f      	b.n	800ed60 <_printf_i+0x1ec>
 800ec20:	6820      	ldr	r0, [r4, #0]
 800ec22:	682b      	ldr	r3, [r5, #0]
 800ec24:	0607      	lsls	r7, r0, #24
 800ec26:	f103 0104 	add.w	r1, r3, #4
 800ec2a:	6029      	str	r1, [r5, #0]
 800ec2c:	d501      	bpl.n	800ec32 <_printf_i+0xbe>
 800ec2e:	681e      	ldr	r6, [r3, #0]
 800ec30:	e003      	b.n	800ec3a <_printf_i+0xc6>
 800ec32:	0646      	lsls	r6, r0, #25
 800ec34:	d5fb      	bpl.n	800ec2e <_printf_i+0xba>
 800ec36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ec3a:	2e00      	cmp	r6, #0
 800ec3c:	da03      	bge.n	800ec46 <_printf_i+0xd2>
 800ec3e:	232d      	movs	r3, #45	; 0x2d
 800ec40:	4276      	negs	r6, r6
 800ec42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec46:	485a      	ldr	r0, [pc, #360]	; (800edb0 <_printf_i+0x23c>)
 800ec48:	230a      	movs	r3, #10
 800ec4a:	e012      	b.n	800ec72 <_printf_i+0xfe>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	6820      	ldr	r0, [r4, #0]
 800ec50:	1d19      	adds	r1, r3, #4
 800ec52:	6029      	str	r1, [r5, #0]
 800ec54:	0605      	lsls	r5, r0, #24
 800ec56:	d501      	bpl.n	800ec5c <_printf_i+0xe8>
 800ec58:	681e      	ldr	r6, [r3, #0]
 800ec5a:	e002      	b.n	800ec62 <_printf_i+0xee>
 800ec5c:	0641      	lsls	r1, r0, #25
 800ec5e:	d5fb      	bpl.n	800ec58 <_printf_i+0xe4>
 800ec60:	881e      	ldrh	r6, [r3, #0]
 800ec62:	4853      	ldr	r0, [pc, #332]	; (800edb0 <_printf_i+0x23c>)
 800ec64:	2f6f      	cmp	r7, #111	; 0x6f
 800ec66:	bf0c      	ite	eq
 800ec68:	2308      	moveq	r3, #8
 800ec6a:	230a      	movne	r3, #10
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec72:	6865      	ldr	r5, [r4, #4]
 800ec74:	60a5      	str	r5, [r4, #8]
 800ec76:	2d00      	cmp	r5, #0
 800ec78:	bfa2      	ittt	ge
 800ec7a:	6821      	ldrge	r1, [r4, #0]
 800ec7c:	f021 0104 	bicge.w	r1, r1, #4
 800ec80:	6021      	strge	r1, [r4, #0]
 800ec82:	b90e      	cbnz	r6, 800ec88 <_printf_i+0x114>
 800ec84:	2d00      	cmp	r5, #0
 800ec86:	d04b      	beq.n	800ed20 <_printf_i+0x1ac>
 800ec88:	4615      	mov	r5, r2
 800ec8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec8e:	fb03 6711 	mls	r7, r3, r1, r6
 800ec92:	5dc7      	ldrb	r7, [r0, r7]
 800ec94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec98:	4637      	mov	r7, r6
 800ec9a:	42bb      	cmp	r3, r7
 800ec9c:	460e      	mov	r6, r1
 800ec9e:	d9f4      	bls.n	800ec8a <_printf_i+0x116>
 800eca0:	2b08      	cmp	r3, #8
 800eca2:	d10b      	bne.n	800ecbc <_printf_i+0x148>
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	07de      	lsls	r6, r3, #31
 800eca8:	d508      	bpl.n	800ecbc <_printf_i+0x148>
 800ecaa:	6923      	ldr	r3, [r4, #16]
 800ecac:	6861      	ldr	r1, [r4, #4]
 800ecae:	4299      	cmp	r1, r3
 800ecb0:	bfde      	ittt	le
 800ecb2:	2330      	movle	r3, #48	; 0x30
 800ecb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecbc:	1b52      	subs	r2, r2, r5
 800ecbe:	6122      	str	r2, [r4, #16]
 800ecc0:	f8cd a000 	str.w	sl, [sp]
 800ecc4:	464b      	mov	r3, r9
 800ecc6:	aa03      	add	r2, sp, #12
 800ecc8:	4621      	mov	r1, r4
 800ecca:	4640      	mov	r0, r8
 800eccc:	f7ff fee4 	bl	800ea98 <_printf_common>
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	d14a      	bne.n	800ed6a <_printf_i+0x1f6>
 800ecd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd8:	b004      	add	sp, #16
 800ecda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	f043 0320 	orr.w	r3, r3, #32
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	4833      	ldr	r0, [pc, #204]	; (800edb4 <_printf_i+0x240>)
 800ece8:	2778      	movs	r7, #120	; 0x78
 800ecea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	6829      	ldr	r1, [r5, #0]
 800ecf2:	061f      	lsls	r7, r3, #24
 800ecf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ecf8:	d402      	bmi.n	800ed00 <_printf_i+0x18c>
 800ecfa:	065f      	lsls	r7, r3, #25
 800ecfc:	bf48      	it	mi
 800ecfe:	b2b6      	uxthmi	r6, r6
 800ed00:	07df      	lsls	r7, r3, #31
 800ed02:	bf48      	it	mi
 800ed04:	f043 0320 	orrmi.w	r3, r3, #32
 800ed08:	6029      	str	r1, [r5, #0]
 800ed0a:	bf48      	it	mi
 800ed0c:	6023      	strmi	r3, [r4, #0]
 800ed0e:	b91e      	cbnz	r6, 800ed18 <_printf_i+0x1a4>
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	f023 0320 	bic.w	r3, r3, #32
 800ed16:	6023      	str	r3, [r4, #0]
 800ed18:	2310      	movs	r3, #16
 800ed1a:	e7a7      	b.n	800ec6c <_printf_i+0xf8>
 800ed1c:	4824      	ldr	r0, [pc, #144]	; (800edb0 <_printf_i+0x23c>)
 800ed1e:	e7e4      	b.n	800ecea <_printf_i+0x176>
 800ed20:	4615      	mov	r5, r2
 800ed22:	e7bd      	b.n	800eca0 <_printf_i+0x12c>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	6826      	ldr	r6, [r4, #0]
 800ed28:	6961      	ldr	r1, [r4, #20]
 800ed2a:	1d18      	adds	r0, r3, #4
 800ed2c:	6028      	str	r0, [r5, #0]
 800ed2e:	0635      	lsls	r5, r6, #24
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	d501      	bpl.n	800ed38 <_printf_i+0x1c4>
 800ed34:	6019      	str	r1, [r3, #0]
 800ed36:	e002      	b.n	800ed3e <_printf_i+0x1ca>
 800ed38:	0670      	lsls	r0, r6, #25
 800ed3a:	d5fb      	bpl.n	800ed34 <_printf_i+0x1c0>
 800ed3c:	8019      	strh	r1, [r3, #0]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6123      	str	r3, [r4, #16]
 800ed42:	4615      	mov	r5, r2
 800ed44:	e7bc      	b.n	800ecc0 <_printf_i+0x14c>
 800ed46:	682b      	ldr	r3, [r5, #0]
 800ed48:	1d1a      	adds	r2, r3, #4
 800ed4a:	602a      	str	r2, [r5, #0]
 800ed4c:	681d      	ldr	r5, [r3, #0]
 800ed4e:	6862      	ldr	r2, [r4, #4]
 800ed50:	2100      	movs	r1, #0
 800ed52:	4628      	mov	r0, r5
 800ed54:	f7f1 fa6c 	bl	8000230 <memchr>
 800ed58:	b108      	cbz	r0, 800ed5e <_printf_i+0x1ea>
 800ed5a:	1b40      	subs	r0, r0, r5
 800ed5c:	6060      	str	r0, [r4, #4]
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	6123      	str	r3, [r4, #16]
 800ed62:	2300      	movs	r3, #0
 800ed64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed68:	e7aa      	b.n	800ecc0 <_printf_i+0x14c>
 800ed6a:	6923      	ldr	r3, [r4, #16]
 800ed6c:	462a      	mov	r2, r5
 800ed6e:	4649      	mov	r1, r9
 800ed70:	4640      	mov	r0, r8
 800ed72:	47d0      	blx	sl
 800ed74:	3001      	adds	r0, #1
 800ed76:	d0ad      	beq.n	800ecd4 <_printf_i+0x160>
 800ed78:	6823      	ldr	r3, [r4, #0]
 800ed7a:	079b      	lsls	r3, r3, #30
 800ed7c:	d413      	bmi.n	800eda6 <_printf_i+0x232>
 800ed7e:	68e0      	ldr	r0, [r4, #12]
 800ed80:	9b03      	ldr	r3, [sp, #12]
 800ed82:	4298      	cmp	r0, r3
 800ed84:	bfb8      	it	lt
 800ed86:	4618      	movlt	r0, r3
 800ed88:	e7a6      	b.n	800ecd8 <_printf_i+0x164>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4632      	mov	r2, r6
 800ed8e:	4649      	mov	r1, r9
 800ed90:	4640      	mov	r0, r8
 800ed92:	47d0      	blx	sl
 800ed94:	3001      	adds	r0, #1
 800ed96:	d09d      	beq.n	800ecd4 <_printf_i+0x160>
 800ed98:	3501      	adds	r5, #1
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	9903      	ldr	r1, [sp, #12]
 800ed9e:	1a5b      	subs	r3, r3, r1
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dcf2      	bgt.n	800ed8a <_printf_i+0x216>
 800eda4:	e7eb      	b.n	800ed7e <_printf_i+0x20a>
 800eda6:	2500      	movs	r5, #0
 800eda8:	f104 0619 	add.w	r6, r4, #25
 800edac:	e7f5      	b.n	800ed9a <_printf_i+0x226>
 800edae:	bf00      	nop
 800edb0:	08011b8a 	.word	0x08011b8a
 800edb4:	08011b9b 	.word	0x08011b9b

0800edb8 <std>:
 800edb8:	2300      	movs	r3, #0
 800edba:	b510      	push	{r4, lr}
 800edbc:	4604      	mov	r4, r0
 800edbe:	e9c0 3300 	strd	r3, r3, [r0]
 800edc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edc6:	6083      	str	r3, [r0, #8]
 800edc8:	8181      	strh	r1, [r0, #12]
 800edca:	6643      	str	r3, [r0, #100]	; 0x64
 800edcc:	81c2      	strh	r2, [r0, #14]
 800edce:	6183      	str	r3, [r0, #24]
 800edd0:	4619      	mov	r1, r3
 800edd2:	2208      	movs	r2, #8
 800edd4:	305c      	adds	r0, #92	; 0x5c
 800edd6:	f000 fa05 	bl	800f1e4 <memset>
 800edda:	4b05      	ldr	r3, [pc, #20]	; (800edf0 <std+0x38>)
 800eddc:	6263      	str	r3, [r4, #36]	; 0x24
 800edde:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <std+0x3c>)
 800ede0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ede2:	4b05      	ldr	r3, [pc, #20]	; (800edf8 <std+0x40>)
 800ede4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ede6:	4b05      	ldr	r3, [pc, #20]	; (800edfc <std+0x44>)
 800ede8:	6224      	str	r4, [r4, #32]
 800edea:	6323      	str	r3, [r4, #48]	; 0x30
 800edec:	bd10      	pop	{r4, pc}
 800edee:	bf00      	nop
 800edf0:	0800f035 	.word	0x0800f035
 800edf4:	0800f057 	.word	0x0800f057
 800edf8:	0800f08f 	.word	0x0800f08f
 800edfc:	0800f0b3 	.word	0x0800f0b3

0800ee00 <stdio_exit_handler>:
 800ee00:	4a02      	ldr	r2, [pc, #8]	; (800ee0c <stdio_exit_handler+0xc>)
 800ee02:	4903      	ldr	r1, [pc, #12]	; (800ee10 <stdio_exit_handler+0x10>)
 800ee04:	4803      	ldr	r0, [pc, #12]	; (800ee14 <stdio_exit_handler+0x14>)
 800ee06:	f000 b869 	b.w	800eedc <_fwalk_sglue>
 800ee0a:	bf00      	nop
 800ee0c:	20000048 	.word	0x20000048
 800ee10:	08011001 	.word	0x08011001
 800ee14:	20000054 	.word	0x20000054

0800ee18 <cleanup_stdio>:
 800ee18:	6841      	ldr	r1, [r0, #4]
 800ee1a:	4b0c      	ldr	r3, [pc, #48]	; (800ee4c <cleanup_stdio+0x34>)
 800ee1c:	4299      	cmp	r1, r3
 800ee1e:	b510      	push	{r4, lr}
 800ee20:	4604      	mov	r4, r0
 800ee22:	d001      	beq.n	800ee28 <cleanup_stdio+0x10>
 800ee24:	f002 f8ec 	bl	8011000 <_fflush_r>
 800ee28:	68a1      	ldr	r1, [r4, #8]
 800ee2a:	4b09      	ldr	r3, [pc, #36]	; (800ee50 <cleanup_stdio+0x38>)
 800ee2c:	4299      	cmp	r1, r3
 800ee2e:	d002      	beq.n	800ee36 <cleanup_stdio+0x1e>
 800ee30:	4620      	mov	r0, r4
 800ee32:	f002 f8e5 	bl	8011000 <_fflush_r>
 800ee36:	68e1      	ldr	r1, [r4, #12]
 800ee38:	4b06      	ldr	r3, [pc, #24]	; (800ee54 <cleanup_stdio+0x3c>)
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	d004      	beq.n	800ee48 <cleanup_stdio+0x30>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee44:	f002 b8dc 	b.w	8011000 <_fflush_r>
 800ee48:	bd10      	pop	{r4, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20009ecc 	.word	0x20009ecc
 800ee50:	20009f34 	.word	0x20009f34
 800ee54:	20009f9c 	.word	0x20009f9c

0800ee58 <global_stdio_init.part.0>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	4b0b      	ldr	r3, [pc, #44]	; (800ee88 <global_stdio_init.part.0+0x30>)
 800ee5c:	4c0b      	ldr	r4, [pc, #44]	; (800ee8c <global_stdio_init.part.0+0x34>)
 800ee5e:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <global_stdio_init.part.0+0x38>)
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	4620      	mov	r0, r4
 800ee64:	2200      	movs	r2, #0
 800ee66:	2104      	movs	r1, #4
 800ee68:	f7ff ffa6 	bl	800edb8 <std>
 800ee6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ee70:	2201      	movs	r2, #1
 800ee72:	2109      	movs	r1, #9
 800ee74:	f7ff ffa0 	bl	800edb8 <std>
 800ee78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee82:	2112      	movs	r1, #18
 800ee84:	f7ff bf98 	b.w	800edb8 <std>
 800ee88:	2000a004 	.word	0x2000a004
 800ee8c:	20009ecc 	.word	0x20009ecc
 800ee90:	0800ee01 	.word	0x0800ee01

0800ee94 <__sfp_lock_acquire>:
 800ee94:	4801      	ldr	r0, [pc, #4]	; (800ee9c <__sfp_lock_acquire+0x8>)
 800ee96:	f000 ba8b 	b.w	800f3b0 <__retarget_lock_acquire_recursive>
 800ee9a:	bf00      	nop
 800ee9c:	2000a00d 	.word	0x2000a00d

0800eea0 <__sfp_lock_release>:
 800eea0:	4801      	ldr	r0, [pc, #4]	; (800eea8 <__sfp_lock_release+0x8>)
 800eea2:	f000 ba86 	b.w	800f3b2 <__retarget_lock_release_recursive>
 800eea6:	bf00      	nop
 800eea8:	2000a00d 	.word	0x2000a00d

0800eeac <__sinit>:
 800eeac:	b510      	push	{r4, lr}
 800eeae:	4604      	mov	r4, r0
 800eeb0:	f7ff fff0 	bl	800ee94 <__sfp_lock_acquire>
 800eeb4:	6a23      	ldr	r3, [r4, #32]
 800eeb6:	b11b      	cbz	r3, 800eec0 <__sinit+0x14>
 800eeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eebc:	f7ff bff0 	b.w	800eea0 <__sfp_lock_release>
 800eec0:	4b04      	ldr	r3, [pc, #16]	; (800eed4 <__sinit+0x28>)
 800eec2:	6223      	str	r3, [r4, #32]
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <__sinit+0x2c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1f5      	bne.n	800eeb8 <__sinit+0xc>
 800eecc:	f7ff ffc4 	bl	800ee58 <global_stdio_init.part.0>
 800eed0:	e7f2      	b.n	800eeb8 <__sinit+0xc>
 800eed2:	bf00      	nop
 800eed4:	0800ee19 	.word	0x0800ee19
 800eed8:	2000a004 	.word	0x2000a004

0800eedc <_fwalk_sglue>:
 800eedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee0:	4607      	mov	r7, r0
 800eee2:	4688      	mov	r8, r1
 800eee4:	4614      	mov	r4, r2
 800eee6:	2600      	movs	r6, #0
 800eee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eeec:	f1b9 0901 	subs.w	r9, r9, #1
 800eef0:	d505      	bpl.n	800eefe <_fwalk_sglue+0x22>
 800eef2:	6824      	ldr	r4, [r4, #0]
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	d1f7      	bne.n	800eee8 <_fwalk_sglue+0xc>
 800eef8:	4630      	mov	r0, r6
 800eefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefe:	89ab      	ldrh	r3, [r5, #12]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d907      	bls.n	800ef14 <_fwalk_sglue+0x38>
 800ef04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	d003      	beq.n	800ef14 <_fwalk_sglue+0x38>
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	4638      	mov	r0, r7
 800ef10:	47c0      	blx	r8
 800ef12:	4306      	orrs	r6, r0
 800ef14:	3568      	adds	r5, #104	; 0x68
 800ef16:	e7e9      	b.n	800eeec <_fwalk_sglue+0x10>

0800ef18 <iprintf>:
 800ef18:	b40f      	push	{r0, r1, r2, r3}
 800ef1a:	b507      	push	{r0, r1, r2, lr}
 800ef1c:	4906      	ldr	r1, [pc, #24]	; (800ef38 <iprintf+0x20>)
 800ef1e:	ab04      	add	r3, sp, #16
 800ef20:	6808      	ldr	r0, [r1, #0]
 800ef22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef26:	6881      	ldr	r1, [r0, #8]
 800ef28:	9301      	str	r3, [sp, #4]
 800ef2a:	f001 fec9 	bl	8010cc0 <_vfiprintf_r>
 800ef2e:	b003      	add	sp, #12
 800ef30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef34:	b004      	add	sp, #16
 800ef36:	4770      	bx	lr
 800ef38:	200000a0 	.word	0x200000a0

0800ef3c <_puts_r>:
 800ef3c:	6a03      	ldr	r3, [r0, #32]
 800ef3e:	b570      	push	{r4, r5, r6, lr}
 800ef40:	6884      	ldr	r4, [r0, #8]
 800ef42:	4605      	mov	r5, r0
 800ef44:	460e      	mov	r6, r1
 800ef46:	b90b      	cbnz	r3, 800ef4c <_puts_r+0x10>
 800ef48:	f7ff ffb0 	bl	800eeac <__sinit>
 800ef4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef4e:	07db      	lsls	r3, r3, #31
 800ef50:	d405      	bmi.n	800ef5e <_puts_r+0x22>
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	0598      	lsls	r0, r3, #22
 800ef56:	d402      	bmi.n	800ef5e <_puts_r+0x22>
 800ef58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef5a:	f000 fa29 	bl	800f3b0 <__retarget_lock_acquire_recursive>
 800ef5e:	89a3      	ldrh	r3, [r4, #12]
 800ef60:	0719      	lsls	r1, r3, #28
 800ef62:	d513      	bpl.n	800ef8c <_puts_r+0x50>
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	b18b      	cbz	r3, 800ef8c <_puts_r+0x50>
 800ef68:	3e01      	subs	r6, #1
 800ef6a:	68a3      	ldr	r3, [r4, #8]
 800ef6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ef70:	3b01      	subs	r3, #1
 800ef72:	60a3      	str	r3, [r4, #8]
 800ef74:	b9e9      	cbnz	r1, 800efb2 <_puts_r+0x76>
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	da2e      	bge.n	800efd8 <_puts_r+0x9c>
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	210a      	movs	r1, #10
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f000 f89b 	bl	800f0ba <__swbuf_r>
 800ef84:	3001      	adds	r0, #1
 800ef86:	d007      	beq.n	800ef98 <_puts_r+0x5c>
 800ef88:	250a      	movs	r5, #10
 800ef8a:	e007      	b.n	800ef9c <_puts_r+0x60>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 f8d0 	bl	800f134 <__swsetup_r>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d0e7      	beq.n	800ef68 <_puts_r+0x2c>
 800ef98:	f04f 35ff 	mov.w	r5, #4294967295
 800ef9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef9e:	07da      	lsls	r2, r3, #31
 800efa0:	d405      	bmi.n	800efae <_puts_r+0x72>
 800efa2:	89a3      	ldrh	r3, [r4, #12]
 800efa4:	059b      	lsls	r3, r3, #22
 800efa6:	d402      	bmi.n	800efae <_puts_r+0x72>
 800efa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efaa:	f000 fa02 	bl	800f3b2 <__retarget_lock_release_recursive>
 800efae:	4628      	mov	r0, r5
 800efb0:	bd70      	pop	{r4, r5, r6, pc}
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	da04      	bge.n	800efc0 <_puts_r+0x84>
 800efb6:	69a2      	ldr	r2, [r4, #24]
 800efb8:	429a      	cmp	r2, r3
 800efba:	dc06      	bgt.n	800efca <_puts_r+0x8e>
 800efbc:	290a      	cmp	r1, #10
 800efbe:	d004      	beq.n	800efca <_puts_r+0x8e>
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	6022      	str	r2, [r4, #0]
 800efc6:	7019      	strb	r1, [r3, #0]
 800efc8:	e7cf      	b.n	800ef6a <_puts_r+0x2e>
 800efca:	4622      	mov	r2, r4
 800efcc:	4628      	mov	r0, r5
 800efce:	f000 f874 	bl	800f0ba <__swbuf_r>
 800efd2:	3001      	adds	r0, #1
 800efd4:	d1c9      	bne.n	800ef6a <_puts_r+0x2e>
 800efd6:	e7df      	b.n	800ef98 <_puts_r+0x5c>
 800efd8:	6823      	ldr	r3, [r4, #0]
 800efda:	250a      	movs	r5, #10
 800efdc:	1c5a      	adds	r2, r3, #1
 800efde:	6022      	str	r2, [r4, #0]
 800efe0:	701d      	strb	r5, [r3, #0]
 800efe2:	e7db      	b.n	800ef9c <_puts_r+0x60>

0800efe4 <puts>:
 800efe4:	4b02      	ldr	r3, [pc, #8]	; (800eff0 <puts+0xc>)
 800efe6:	4601      	mov	r1, r0
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	f7ff bfa7 	b.w	800ef3c <_puts_r>
 800efee:	bf00      	nop
 800eff0:	200000a0 	.word	0x200000a0

0800eff4 <siprintf>:
 800eff4:	b40e      	push	{r1, r2, r3}
 800eff6:	b500      	push	{lr}
 800eff8:	b09c      	sub	sp, #112	; 0x70
 800effa:	ab1d      	add	r3, sp, #116	; 0x74
 800effc:	9002      	str	r0, [sp, #8]
 800effe:	9006      	str	r0, [sp, #24]
 800f000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f004:	4809      	ldr	r0, [pc, #36]	; (800f02c <siprintf+0x38>)
 800f006:	9107      	str	r1, [sp, #28]
 800f008:	9104      	str	r1, [sp, #16]
 800f00a:	4909      	ldr	r1, [pc, #36]	; (800f030 <siprintf+0x3c>)
 800f00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f010:	9105      	str	r1, [sp, #20]
 800f012:	6800      	ldr	r0, [r0, #0]
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	a902      	add	r1, sp, #8
 800f018:	f001 fd2a 	bl	8010a70 <_svfiprintf_r>
 800f01c:	9b02      	ldr	r3, [sp, #8]
 800f01e:	2200      	movs	r2, #0
 800f020:	701a      	strb	r2, [r3, #0]
 800f022:	b01c      	add	sp, #112	; 0x70
 800f024:	f85d eb04 	ldr.w	lr, [sp], #4
 800f028:	b003      	add	sp, #12
 800f02a:	4770      	bx	lr
 800f02c:	200000a0 	.word	0x200000a0
 800f030:	ffff0208 	.word	0xffff0208

0800f034 <__sread>:
 800f034:	b510      	push	{r4, lr}
 800f036:	460c      	mov	r4, r1
 800f038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f03c:	f000 f96a 	bl	800f314 <_read_r>
 800f040:	2800      	cmp	r0, #0
 800f042:	bfab      	itete	ge
 800f044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f046:	89a3      	ldrhlt	r3, [r4, #12]
 800f048:	181b      	addge	r3, r3, r0
 800f04a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f04e:	bfac      	ite	ge
 800f050:	6563      	strge	r3, [r4, #84]	; 0x54
 800f052:	81a3      	strhlt	r3, [r4, #12]
 800f054:	bd10      	pop	{r4, pc}

0800f056 <__swrite>:
 800f056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f05a:	461f      	mov	r7, r3
 800f05c:	898b      	ldrh	r3, [r1, #12]
 800f05e:	05db      	lsls	r3, r3, #23
 800f060:	4605      	mov	r5, r0
 800f062:	460c      	mov	r4, r1
 800f064:	4616      	mov	r6, r2
 800f066:	d505      	bpl.n	800f074 <__swrite+0x1e>
 800f068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f06c:	2302      	movs	r3, #2
 800f06e:	2200      	movs	r2, #0
 800f070:	f000 f93e 	bl	800f2f0 <_lseek_r>
 800f074:	89a3      	ldrh	r3, [r4, #12]
 800f076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f07a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f07e:	81a3      	strh	r3, [r4, #12]
 800f080:	4632      	mov	r2, r6
 800f082:	463b      	mov	r3, r7
 800f084:	4628      	mov	r0, r5
 800f086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f08a:	f000 b955 	b.w	800f338 <_write_r>

0800f08e <__sseek>:
 800f08e:	b510      	push	{r4, lr}
 800f090:	460c      	mov	r4, r1
 800f092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f096:	f000 f92b 	bl	800f2f0 <_lseek_r>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	89a3      	ldrh	r3, [r4, #12]
 800f09e:	bf15      	itete	ne
 800f0a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0aa:	81a3      	strheq	r3, [r4, #12]
 800f0ac:	bf18      	it	ne
 800f0ae:	81a3      	strhne	r3, [r4, #12]
 800f0b0:	bd10      	pop	{r4, pc}

0800f0b2 <__sclose>:
 800f0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b6:	f000 b8b5 	b.w	800f224 <_close_r>

0800f0ba <__swbuf_r>:
 800f0ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0bc:	460e      	mov	r6, r1
 800f0be:	4614      	mov	r4, r2
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	b118      	cbz	r0, 800f0cc <__swbuf_r+0x12>
 800f0c4:	6a03      	ldr	r3, [r0, #32]
 800f0c6:	b90b      	cbnz	r3, 800f0cc <__swbuf_r+0x12>
 800f0c8:	f7ff fef0 	bl	800eeac <__sinit>
 800f0cc:	69a3      	ldr	r3, [r4, #24]
 800f0ce:	60a3      	str	r3, [r4, #8]
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	071a      	lsls	r2, r3, #28
 800f0d4:	d525      	bpl.n	800f122 <__swbuf_r+0x68>
 800f0d6:	6923      	ldr	r3, [r4, #16]
 800f0d8:	b31b      	cbz	r3, 800f122 <__swbuf_r+0x68>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	6922      	ldr	r2, [r4, #16]
 800f0de:	1a98      	subs	r0, r3, r2
 800f0e0:	6963      	ldr	r3, [r4, #20]
 800f0e2:	b2f6      	uxtb	r6, r6
 800f0e4:	4283      	cmp	r3, r0
 800f0e6:	4637      	mov	r7, r6
 800f0e8:	dc04      	bgt.n	800f0f4 <__swbuf_r+0x3a>
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f001 ff87 	bl	8011000 <_fflush_r>
 800f0f2:	b9e0      	cbnz	r0, 800f12e <__swbuf_r+0x74>
 800f0f4:	68a3      	ldr	r3, [r4, #8]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	60a3      	str	r3, [r4, #8]
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	6022      	str	r2, [r4, #0]
 800f100:	701e      	strb	r6, [r3, #0]
 800f102:	6962      	ldr	r2, [r4, #20]
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	429a      	cmp	r2, r3
 800f108:	d004      	beq.n	800f114 <__swbuf_r+0x5a>
 800f10a:	89a3      	ldrh	r3, [r4, #12]
 800f10c:	07db      	lsls	r3, r3, #31
 800f10e:	d506      	bpl.n	800f11e <__swbuf_r+0x64>
 800f110:	2e0a      	cmp	r6, #10
 800f112:	d104      	bne.n	800f11e <__swbuf_r+0x64>
 800f114:	4621      	mov	r1, r4
 800f116:	4628      	mov	r0, r5
 800f118:	f001 ff72 	bl	8011000 <_fflush_r>
 800f11c:	b938      	cbnz	r0, 800f12e <__swbuf_r+0x74>
 800f11e:	4638      	mov	r0, r7
 800f120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f000 f805 	bl	800f134 <__swsetup_r>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d0d5      	beq.n	800f0da <__swbuf_r+0x20>
 800f12e:	f04f 37ff 	mov.w	r7, #4294967295
 800f132:	e7f4      	b.n	800f11e <__swbuf_r+0x64>

0800f134 <__swsetup_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4b2a      	ldr	r3, [pc, #168]	; (800f1e0 <__swsetup_r+0xac>)
 800f138:	4605      	mov	r5, r0
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	460c      	mov	r4, r1
 800f13e:	b118      	cbz	r0, 800f148 <__swsetup_r+0x14>
 800f140:	6a03      	ldr	r3, [r0, #32]
 800f142:	b90b      	cbnz	r3, 800f148 <__swsetup_r+0x14>
 800f144:	f7ff feb2 	bl	800eeac <__sinit>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f14e:	0718      	lsls	r0, r3, #28
 800f150:	d422      	bmi.n	800f198 <__swsetup_r+0x64>
 800f152:	06d9      	lsls	r1, r3, #27
 800f154:	d407      	bmi.n	800f166 <__swsetup_r+0x32>
 800f156:	2309      	movs	r3, #9
 800f158:	602b      	str	r3, [r5, #0]
 800f15a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f15e:	81a3      	strh	r3, [r4, #12]
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	e034      	b.n	800f1d0 <__swsetup_r+0x9c>
 800f166:	0758      	lsls	r0, r3, #29
 800f168:	d512      	bpl.n	800f190 <__swsetup_r+0x5c>
 800f16a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f16c:	b141      	cbz	r1, 800f180 <__swsetup_r+0x4c>
 800f16e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f172:	4299      	cmp	r1, r3
 800f174:	d002      	beq.n	800f17c <__swsetup_r+0x48>
 800f176:	4628      	mov	r0, r5
 800f178:	f000 ffa4 	bl	80100c4 <_free_r>
 800f17c:	2300      	movs	r3, #0
 800f17e:	6363      	str	r3, [r4, #52]	; 0x34
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f186:	81a3      	strh	r3, [r4, #12]
 800f188:	2300      	movs	r3, #0
 800f18a:	6063      	str	r3, [r4, #4]
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	f043 0308 	orr.w	r3, r3, #8
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	b94b      	cbnz	r3, 800f1b0 <__swsetup_r+0x7c>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1a6:	d003      	beq.n	800f1b0 <__swsetup_r+0x7c>
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f001 ff76 	bl	801109c <__smakebuf_r>
 800f1b0:	89a0      	ldrh	r0, [r4, #12]
 800f1b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1b6:	f010 0301 	ands.w	r3, r0, #1
 800f1ba:	d00a      	beq.n	800f1d2 <__swsetup_r+0x9e>
 800f1bc:	2300      	movs	r3, #0
 800f1be:	60a3      	str	r3, [r4, #8]
 800f1c0:	6963      	ldr	r3, [r4, #20]
 800f1c2:	425b      	negs	r3, r3
 800f1c4:	61a3      	str	r3, [r4, #24]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	b943      	cbnz	r3, 800f1dc <__swsetup_r+0xa8>
 800f1ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1ce:	d1c4      	bne.n	800f15a <__swsetup_r+0x26>
 800f1d0:	bd38      	pop	{r3, r4, r5, pc}
 800f1d2:	0781      	lsls	r1, r0, #30
 800f1d4:	bf58      	it	pl
 800f1d6:	6963      	ldrpl	r3, [r4, #20]
 800f1d8:	60a3      	str	r3, [r4, #8]
 800f1da:	e7f4      	b.n	800f1c6 <__swsetup_r+0x92>
 800f1dc:	2000      	movs	r0, #0
 800f1de:	e7f7      	b.n	800f1d0 <__swsetup_r+0x9c>
 800f1e0:	200000a0 	.word	0x200000a0

0800f1e4 <memset>:
 800f1e4:	4402      	add	r2, r0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d100      	bne.n	800f1ee <memset+0xa>
 800f1ec:	4770      	bx	lr
 800f1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f1f2:	e7f9      	b.n	800f1e8 <memset+0x4>

0800f1f4 <strncpy>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	3901      	subs	r1, #1
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	b132      	cbz	r2, 800f20a <strncpy+0x16>
 800f1fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f200:	f803 4b01 	strb.w	r4, [r3], #1
 800f204:	3a01      	subs	r2, #1
 800f206:	2c00      	cmp	r4, #0
 800f208:	d1f7      	bne.n	800f1fa <strncpy+0x6>
 800f20a:	441a      	add	r2, r3
 800f20c:	2100      	movs	r1, #0
 800f20e:	4293      	cmp	r3, r2
 800f210:	d100      	bne.n	800f214 <strncpy+0x20>
 800f212:	bd10      	pop	{r4, pc}
 800f214:	f803 1b01 	strb.w	r1, [r3], #1
 800f218:	e7f9      	b.n	800f20e <strncpy+0x1a>
	...

0800f21c <_localeconv_r>:
 800f21c:	4800      	ldr	r0, [pc, #0]	; (800f220 <_localeconv_r+0x4>)
 800f21e:	4770      	bx	lr
 800f220:	20000194 	.word	0x20000194

0800f224 <_close_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d06      	ldr	r5, [pc, #24]	; (800f240 <_close_r+0x1c>)
 800f228:	2300      	movs	r3, #0
 800f22a:	4604      	mov	r4, r0
 800f22c:	4608      	mov	r0, r1
 800f22e:	602b      	str	r3, [r5, #0]
 800f230:	f7f4 f9a7 	bl	8003582 <_close>
 800f234:	1c43      	adds	r3, r0, #1
 800f236:	d102      	bne.n	800f23e <_close_r+0x1a>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	b103      	cbz	r3, 800f23e <_close_r+0x1a>
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	bd38      	pop	{r3, r4, r5, pc}
 800f240:	2000a008 	.word	0x2000a008

0800f244 <_reclaim_reent>:
 800f244:	4b29      	ldr	r3, [pc, #164]	; (800f2ec <_reclaim_reent+0xa8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4283      	cmp	r3, r0
 800f24a:	b570      	push	{r4, r5, r6, lr}
 800f24c:	4604      	mov	r4, r0
 800f24e:	d04b      	beq.n	800f2e8 <_reclaim_reent+0xa4>
 800f250:	69c3      	ldr	r3, [r0, #28]
 800f252:	b143      	cbz	r3, 800f266 <_reclaim_reent+0x22>
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d144      	bne.n	800f2e4 <_reclaim_reent+0xa0>
 800f25a:	69e3      	ldr	r3, [r4, #28]
 800f25c:	6819      	ldr	r1, [r3, #0]
 800f25e:	b111      	cbz	r1, 800f266 <_reclaim_reent+0x22>
 800f260:	4620      	mov	r0, r4
 800f262:	f000 ff2f 	bl	80100c4 <_free_r>
 800f266:	6961      	ldr	r1, [r4, #20]
 800f268:	b111      	cbz	r1, 800f270 <_reclaim_reent+0x2c>
 800f26a:	4620      	mov	r0, r4
 800f26c:	f000 ff2a 	bl	80100c4 <_free_r>
 800f270:	69e1      	ldr	r1, [r4, #28]
 800f272:	b111      	cbz	r1, 800f27a <_reclaim_reent+0x36>
 800f274:	4620      	mov	r0, r4
 800f276:	f000 ff25 	bl	80100c4 <_free_r>
 800f27a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f27c:	b111      	cbz	r1, 800f284 <_reclaim_reent+0x40>
 800f27e:	4620      	mov	r0, r4
 800f280:	f000 ff20 	bl	80100c4 <_free_r>
 800f284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f286:	b111      	cbz	r1, 800f28e <_reclaim_reent+0x4a>
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 ff1b 	bl	80100c4 <_free_r>
 800f28e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f290:	b111      	cbz	r1, 800f298 <_reclaim_reent+0x54>
 800f292:	4620      	mov	r0, r4
 800f294:	f000 ff16 	bl	80100c4 <_free_r>
 800f298:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f29a:	b111      	cbz	r1, 800f2a2 <_reclaim_reent+0x5e>
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 ff11 	bl	80100c4 <_free_r>
 800f2a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f2a4:	b111      	cbz	r1, 800f2ac <_reclaim_reent+0x68>
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 ff0c 	bl	80100c4 <_free_r>
 800f2ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f2ae:	b111      	cbz	r1, 800f2b6 <_reclaim_reent+0x72>
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 ff07 	bl	80100c4 <_free_r>
 800f2b6:	6a23      	ldr	r3, [r4, #32]
 800f2b8:	b1b3      	cbz	r3, 800f2e8 <_reclaim_reent+0xa4>
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2c0:	4718      	bx	r3
 800f2c2:	5949      	ldr	r1, [r1, r5]
 800f2c4:	b941      	cbnz	r1, 800f2d8 <_reclaim_reent+0x94>
 800f2c6:	3504      	adds	r5, #4
 800f2c8:	69e3      	ldr	r3, [r4, #28]
 800f2ca:	2d80      	cmp	r5, #128	; 0x80
 800f2cc:	68d9      	ldr	r1, [r3, #12]
 800f2ce:	d1f8      	bne.n	800f2c2 <_reclaim_reent+0x7e>
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fef7 	bl	80100c4 <_free_r>
 800f2d6:	e7c0      	b.n	800f25a <_reclaim_reent+0x16>
 800f2d8:	680e      	ldr	r6, [r1, #0]
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 fef2 	bl	80100c4 <_free_r>
 800f2e0:	4631      	mov	r1, r6
 800f2e2:	e7ef      	b.n	800f2c4 <_reclaim_reent+0x80>
 800f2e4:	2500      	movs	r5, #0
 800f2e6:	e7ef      	b.n	800f2c8 <_reclaim_reent+0x84>
 800f2e8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ea:	bf00      	nop
 800f2ec:	200000a0 	.word	0x200000a0

0800f2f0 <_lseek_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d07      	ldr	r5, [pc, #28]	; (800f310 <_lseek_r+0x20>)
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	4608      	mov	r0, r1
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	602a      	str	r2, [r5, #0]
 800f2fe:	461a      	mov	r2, r3
 800f300:	f7f4 f966 	bl	80035d0 <_lseek>
 800f304:	1c43      	adds	r3, r0, #1
 800f306:	d102      	bne.n	800f30e <_lseek_r+0x1e>
 800f308:	682b      	ldr	r3, [r5, #0]
 800f30a:	b103      	cbz	r3, 800f30e <_lseek_r+0x1e>
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	2000a008 	.word	0x2000a008

0800f314 <_read_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4d07      	ldr	r5, [pc, #28]	; (800f334 <_read_r+0x20>)
 800f318:	4604      	mov	r4, r0
 800f31a:	4608      	mov	r0, r1
 800f31c:	4611      	mov	r1, r2
 800f31e:	2200      	movs	r2, #0
 800f320:	602a      	str	r2, [r5, #0]
 800f322:	461a      	mov	r2, r3
 800f324:	f7f4 f8f4 	bl	8003510 <_read>
 800f328:	1c43      	adds	r3, r0, #1
 800f32a:	d102      	bne.n	800f332 <_read_r+0x1e>
 800f32c:	682b      	ldr	r3, [r5, #0]
 800f32e:	b103      	cbz	r3, 800f332 <_read_r+0x1e>
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	bd38      	pop	{r3, r4, r5, pc}
 800f334:	2000a008 	.word	0x2000a008

0800f338 <_write_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d07      	ldr	r5, [pc, #28]	; (800f358 <_write_r+0x20>)
 800f33c:	4604      	mov	r4, r0
 800f33e:	4608      	mov	r0, r1
 800f340:	4611      	mov	r1, r2
 800f342:	2200      	movs	r2, #0
 800f344:	602a      	str	r2, [r5, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	f7f4 f8ff 	bl	800354a <_write>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_write_r+0x1e>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	b103      	cbz	r3, 800f356 <_write_r+0x1e>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	2000a008 	.word	0x2000a008

0800f35c <__errno>:
 800f35c:	4b01      	ldr	r3, [pc, #4]	; (800f364 <__errno+0x8>)
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	200000a0 	.word	0x200000a0

0800f368 <__libc_init_array>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	4d0d      	ldr	r5, [pc, #52]	; (800f3a0 <__libc_init_array+0x38>)
 800f36c:	4c0d      	ldr	r4, [pc, #52]	; (800f3a4 <__libc_init_array+0x3c>)
 800f36e:	1b64      	subs	r4, r4, r5
 800f370:	10a4      	asrs	r4, r4, #2
 800f372:	2600      	movs	r6, #0
 800f374:	42a6      	cmp	r6, r4
 800f376:	d109      	bne.n	800f38c <__libc_init_array+0x24>
 800f378:	4d0b      	ldr	r5, [pc, #44]	; (800f3a8 <__libc_init_array+0x40>)
 800f37a:	4c0c      	ldr	r4, [pc, #48]	; (800f3ac <__libc_init_array+0x44>)
 800f37c:	f001 fffe 	bl	801137c <_init>
 800f380:	1b64      	subs	r4, r4, r5
 800f382:	10a4      	asrs	r4, r4, #2
 800f384:	2600      	movs	r6, #0
 800f386:	42a6      	cmp	r6, r4
 800f388:	d105      	bne.n	800f396 <__libc_init_array+0x2e>
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f390:	4798      	blx	r3
 800f392:	3601      	adds	r6, #1
 800f394:	e7ee      	b.n	800f374 <__libc_init_array+0xc>
 800f396:	f855 3b04 	ldr.w	r3, [r5], #4
 800f39a:	4798      	blx	r3
 800f39c:	3601      	adds	r6, #1
 800f39e:	e7f2      	b.n	800f386 <__libc_init_array+0x1e>
 800f3a0:	08011ef4 	.word	0x08011ef4
 800f3a4:	08011ef4 	.word	0x08011ef4
 800f3a8:	08011ef4 	.word	0x08011ef4
 800f3ac:	08011ef8 	.word	0x08011ef8

0800f3b0 <__retarget_lock_acquire_recursive>:
 800f3b0:	4770      	bx	lr

0800f3b2 <__retarget_lock_release_recursive>:
 800f3b2:	4770      	bx	lr

0800f3b4 <memcpy>:
 800f3b4:	440a      	add	r2, r1
 800f3b6:	4291      	cmp	r1, r2
 800f3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3bc:	d100      	bne.n	800f3c0 <memcpy+0xc>
 800f3be:	4770      	bx	lr
 800f3c0:	b510      	push	{r4, lr}
 800f3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ca:	4291      	cmp	r1, r2
 800f3cc:	d1f9      	bne.n	800f3c2 <memcpy+0xe>
 800f3ce:	bd10      	pop	{r4, pc}

0800f3d0 <quorem>:
 800f3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	6903      	ldr	r3, [r0, #16]
 800f3d6:	690c      	ldr	r4, [r1, #16]
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	4607      	mov	r7, r0
 800f3dc:	db7e      	blt.n	800f4dc <quorem+0x10c>
 800f3de:	3c01      	subs	r4, #1
 800f3e0:	f101 0814 	add.w	r8, r1, #20
 800f3e4:	f100 0514 	add.w	r5, r0, #20
 800f3e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f3fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f402:	fbb2 f6f3 	udiv	r6, r2, r3
 800f406:	d331      	bcc.n	800f46c <quorem+0x9c>
 800f408:	f04f 0e00 	mov.w	lr, #0
 800f40c:	4640      	mov	r0, r8
 800f40e:	46ac      	mov	ip, r5
 800f410:	46f2      	mov	sl, lr
 800f412:	f850 2b04 	ldr.w	r2, [r0], #4
 800f416:	b293      	uxth	r3, r2
 800f418:	fb06 e303 	mla	r3, r6, r3, lr
 800f41c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f420:	0c1a      	lsrs	r2, r3, #16
 800f422:	b29b      	uxth	r3, r3
 800f424:	ebaa 0303 	sub.w	r3, sl, r3
 800f428:	f8dc a000 	ldr.w	sl, [ip]
 800f42c:	fa13 f38a 	uxtah	r3, r3, sl
 800f430:	fb06 220e 	mla	r2, r6, lr, r2
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	9b00      	ldr	r3, [sp, #0]
 800f438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f43c:	b292      	uxth	r2, r2
 800f43e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f442:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f446:	f8bd 3000 	ldrh.w	r3, [sp]
 800f44a:	4581      	cmp	r9, r0
 800f44c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f450:	f84c 3b04 	str.w	r3, [ip], #4
 800f454:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f458:	d2db      	bcs.n	800f412 <quorem+0x42>
 800f45a:	f855 300b 	ldr.w	r3, [r5, fp]
 800f45e:	b92b      	cbnz	r3, 800f46c <quorem+0x9c>
 800f460:	9b01      	ldr	r3, [sp, #4]
 800f462:	3b04      	subs	r3, #4
 800f464:	429d      	cmp	r5, r3
 800f466:	461a      	mov	r2, r3
 800f468:	d32c      	bcc.n	800f4c4 <quorem+0xf4>
 800f46a:	613c      	str	r4, [r7, #16]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f001 f9a5 	bl	80107bc <__mcmp>
 800f472:	2800      	cmp	r0, #0
 800f474:	db22      	blt.n	800f4bc <quorem+0xec>
 800f476:	3601      	adds	r6, #1
 800f478:	4629      	mov	r1, r5
 800f47a:	2000      	movs	r0, #0
 800f47c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f480:	f8d1 c000 	ldr.w	ip, [r1]
 800f484:	b293      	uxth	r3, r2
 800f486:	1ac3      	subs	r3, r0, r3
 800f488:	0c12      	lsrs	r2, r2, #16
 800f48a:	fa13 f38c 	uxtah	r3, r3, ip
 800f48e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f496:	b29b      	uxth	r3, r3
 800f498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f49c:	45c1      	cmp	r9, r8
 800f49e:	f841 3b04 	str.w	r3, [r1], #4
 800f4a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4a6:	d2e9      	bcs.n	800f47c <quorem+0xac>
 800f4a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4b0:	b922      	cbnz	r2, 800f4bc <quorem+0xec>
 800f4b2:	3b04      	subs	r3, #4
 800f4b4:	429d      	cmp	r5, r3
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	d30a      	bcc.n	800f4d0 <quorem+0x100>
 800f4ba:	613c      	str	r4, [r7, #16]
 800f4bc:	4630      	mov	r0, r6
 800f4be:	b003      	add	sp, #12
 800f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c4:	6812      	ldr	r2, [r2, #0]
 800f4c6:	3b04      	subs	r3, #4
 800f4c8:	2a00      	cmp	r2, #0
 800f4ca:	d1ce      	bne.n	800f46a <quorem+0x9a>
 800f4cc:	3c01      	subs	r4, #1
 800f4ce:	e7c9      	b.n	800f464 <quorem+0x94>
 800f4d0:	6812      	ldr	r2, [r2, #0]
 800f4d2:	3b04      	subs	r3, #4
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	d1f0      	bne.n	800f4ba <quorem+0xea>
 800f4d8:	3c01      	subs	r4, #1
 800f4da:	e7eb      	b.n	800f4b4 <quorem+0xe4>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	e7ee      	b.n	800f4be <quorem+0xee>

0800f4e0 <_dtoa_r>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	ed2d 8b04 	vpush	{d8-d9}
 800f4e8:	69c5      	ldr	r5, [r0, #28]
 800f4ea:	b093      	sub	sp, #76	; 0x4c
 800f4ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f4f0:	ec57 6b10 	vmov	r6, r7, d0
 800f4f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f4f8:	9107      	str	r1, [sp, #28]
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	920a      	str	r2, [sp, #40]	; 0x28
 800f4fe:	930d      	str	r3, [sp, #52]	; 0x34
 800f500:	b975      	cbnz	r5, 800f520 <_dtoa_r+0x40>
 800f502:	2010      	movs	r0, #16
 800f504:	f000 fe2a 	bl	801015c <malloc>
 800f508:	4602      	mov	r2, r0
 800f50a:	61e0      	str	r0, [r4, #28]
 800f50c:	b920      	cbnz	r0, 800f518 <_dtoa_r+0x38>
 800f50e:	4bae      	ldr	r3, [pc, #696]	; (800f7c8 <_dtoa_r+0x2e8>)
 800f510:	21ef      	movs	r1, #239	; 0xef
 800f512:	48ae      	ldr	r0, [pc, #696]	; (800f7cc <_dtoa_r+0x2ec>)
 800f514:	f001 fe4a 	bl	80111ac <__assert_func>
 800f518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f51c:	6005      	str	r5, [r0, #0]
 800f51e:	60c5      	str	r5, [r0, #12]
 800f520:	69e3      	ldr	r3, [r4, #28]
 800f522:	6819      	ldr	r1, [r3, #0]
 800f524:	b151      	cbz	r1, 800f53c <_dtoa_r+0x5c>
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	604a      	str	r2, [r1, #4]
 800f52a:	2301      	movs	r3, #1
 800f52c:	4093      	lsls	r3, r2
 800f52e:	608b      	str	r3, [r1, #8]
 800f530:	4620      	mov	r0, r4
 800f532:	f000 ff07 	bl	8010344 <_Bfree>
 800f536:	69e3      	ldr	r3, [r4, #28]
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	1e3b      	subs	r3, r7, #0
 800f53e:	bfbb      	ittet	lt
 800f540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f544:	9303      	strlt	r3, [sp, #12]
 800f546:	2300      	movge	r3, #0
 800f548:	2201      	movlt	r2, #1
 800f54a:	bfac      	ite	ge
 800f54c:	f8c8 3000 	strge.w	r3, [r8]
 800f550:	f8c8 2000 	strlt.w	r2, [r8]
 800f554:	4b9e      	ldr	r3, [pc, #632]	; (800f7d0 <_dtoa_r+0x2f0>)
 800f556:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f55a:	ea33 0308 	bics.w	r3, r3, r8
 800f55e:	d11b      	bne.n	800f598 <_dtoa_r+0xb8>
 800f560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f562:	f242 730f 	movw	r3, #9999	; 0x270f
 800f566:	6013      	str	r3, [r2, #0]
 800f568:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f56c:	4333      	orrs	r3, r6
 800f56e:	f000 8593 	beq.w	8010098 <_dtoa_r+0xbb8>
 800f572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f574:	b963      	cbnz	r3, 800f590 <_dtoa_r+0xb0>
 800f576:	4b97      	ldr	r3, [pc, #604]	; (800f7d4 <_dtoa_r+0x2f4>)
 800f578:	e027      	b.n	800f5ca <_dtoa_r+0xea>
 800f57a:	4b97      	ldr	r3, [pc, #604]	; (800f7d8 <_dtoa_r+0x2f8>)
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	3308      	adds	r3, #8
 800f580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	9800      	ldr	r0, [sp, #0]
 800f586:	b013      	add	sp, #76	; 0x4c
 800f588:	ecbd 8b04 	vpop	{d8-d9}
 800f58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f590:	4b90      	ldr	r3, [pc, #576]	; (800f7d4 <_dtoa_r+0x2f4>)
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	3303      	adds	r3, #3
 800f596:	e7f3      	b.n	800f580 <_dtoa_r+0xa0>
 800f598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f59c:	2200      	movs	r2, #0
 800f59e:	ec51 0b17 	vmov	r0, r1, d7
 800f5a2:	eeb0 8a47 	vmov.f32	s16, s14
 800f5a6:	eef0 8a67 	vmov.f32	s17, s15
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f7f1 fabc 	bl	8000b28 <__aeabi_dcmpeq>
 800f5b0:	4681      	mov	r9, r0
 800f5b2:	b160      	cbz	r0, 800f5ce <_dtoa_r+0xee>
 800f5b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	6013      	str	r3, [r2, #0]
 800f5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f000 8568 	beq.w	8010092 <_dtoa_r+0xbb2>
 800f5c2:	4b86      	ldr	r3, [pc, #536]	; (800f7dc <_dtoa_r+0x2fc>)
 800f5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	e7da      	b.n	800f584 <_dtoa_r+0xa4>
 800f5ce:	aa10      	add	r2, sp, #64	; 0x40
 800f5d0:	a911      	add	r1, sp, #68	; 0x44
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	eeb0 0a48 	vmov.f32	s0, s16
 800f5d8:	eef0 0a68 	vmov.f32	s1, s17
 800f5dc:	f001 f994 	bl	8010908 <__d2b>
 800f5e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	2d00      	cmp	r5, #0
 800f5e8:	d07f      	beq.n	800f6ea <_dtoa_r+0x20a>
 800f5ea:	ee18 3a90 	vmov	r3, s17
 800f5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f5f6:	ec51 0b18 	vmov	r0, r1, d8
 800f5fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f602:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f606:	4619      	mov	r1, r3
 800f608:	2200      	movs	r2, #0
 800f60a:	4b75      	ldr	r3, [pc, #468]	; (800f7e0 <_dtoa_r+0x300>)
 800f60c:	f7f0 fe6c 	bl	80002e8 <__aeabi_dsub>
 800f610:	a367      	add	r3, pc, #412	; (adr r3, 800f7b0 <_dtoa_r+0x2d0>)
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	f7f1 f81f 	bl	8000658 <__aeabi_dmul>
 800f61a:	a367      	add	r3, pc, #412	; (adr r3, 800f7b8 <_dtoa_r+0x2d8>)
 800f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f620:	f7f0 fe64 	bl	80002ec <__adddf3>
 800f624:	4606      	mov	r6, r0
 800f626:	4628      	mov	r0, r5
 800f628:	460f      	mov	r7, r1
 800f62a:	f7f0 ffab 	bl	8000584 <__aeabi_i2d>
 800f62e:	a364      	add	r3, pc, #400	; (adr r3, 800f7c0 <_dtoa_r+0x2e0>)
 800f630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f634:	f7f1 f810 	bl	8000658 <__aeabi_dmul>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4630      	mov	r0, r6
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f0 fe54 	bl	80002ec <__adddf3>
 800f644:	4606      	mov	r6, r0
 800f646:	460f      	mov	r7, r1
 800f648:	f7f1 fab6 	bl	8000bb8 <__aeabi_d2iz>
 800f64c:	2200      	movs	r2, #0
 800f64e:	4683      	mov	fp, r0
 800f650:	2300      	movs	r3, #0
 800f652:	4630      	mov	r0, r6
 800f654:	4639      	mov	r1, r7
 800f656:	f7f1 fa71 	bl	8000b3c <__aeabi_dcmplt>
 800f65a:	b148      	cbz	r0, 800f670 <_dtoa_r+0x190>
 800f65c:	4658      	mov	r0, fp
 800f65e:	f7f0 ff91 	bl	8000584 <__aeabi_i2d>
 800f662:	4632      	mov	r2, r6
 800f664:	463b      	mov	r3, r7
 800f666:	f7f1 fa5f 	bl	8000b28 <__aeabi_dcmpeq>
 800f66a:	b908      	cbnz	r0, 800f670 <_dtoa_r+0x190>
 800f66c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f670:	f1bb 0f16 	cmp.w	fp, #22
 800f674:	d857      	bhi.n	800f726 <_dtoa_r+0x246>
 800f676:	4b5b      	ldr	r3, [pc, #364]	; (800f7e4 <_dtoa_r+0x304>)
 800f678:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f680:	ec51 0b18 	vmov	r0, r1, d8
 800f684:	f7f1 fa5a 	bl	8000b3c <__aeabi_dcmplt>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d04e      	beq.n	800f72a <_dtoa_r+0x24a>
 800f68c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f690:	2300      	movs	r3, #0
 800f692:	930c      	str	r3, [sp, #48]	; 0x30
 800f694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f696:	1b5b      	subs	r3, r3, r5
 800f698:	1e5a      	subs	r2, r3, #1
 800f69a:	bf45      	ittet	mi
 800f69c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f6a0:	9305      	strmi	r3, [sp, #20]
 800f6a2:	2300      	movpl	r3, #0
 800f6a4:	2300      	movmi	r3, #0
 800f6a6:	9206      	str	r2, [sp, #24]
 800f6a8:	bf54      	ite	pl
 800f6aa:	9305      	strpl	r3, [sp, #20]
 800f6ac:	9306      	strmi	r3, [sp, #24]
 800f6ae:	f1bb 0f00 	cmp.w	fp, #0
 800f6b2:	db3c      	blt.n	800f72e <_dtoa_r+0x24e>
 800f6b4:	9b06      	ldr	r3, [sp, #24]
 800f6b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f6ba:	445b      	add	r3, fp
 800f6bc:	9306      	str	r3, [sp, #24]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	9308      	str	r3, [sp, #32]
 800f6c2:	9b07      	ldr	r3, [sp, #28]
 800f6c4:	2b09      	cmp	r3, #9
 800f6c6:	d868      	bhi.n	800f79a <_dtoa_r+0x2ba>
 800f6c8:	2b05      	cmp	r3, #5
 800f6ca:	bfc4      	itt	gt
 800f6cc:	3b04      	subgt	r3, #4
 800f6ce:	9307      	strgt	r3, [sp, #28]
 800f6d0:	9b07      	ldr	r3, [sp, #28]
 800f6d2:	f1a3 0302 	sub.w	r3, r3, #2
 800f6d6:	bfcc      	ite	gt
 800f6d8:	2500      	movgt	r5, #0
 800f6da:	2501      	movle	r5, #1
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	f200 8085 	bhi.w	800f7ec <_dtoa_r+0x30c>
 800f6e2:	e8df f003 	tbb	[pc, r3]
 800f6e6:	3b2e      	.short	0x3b2e
 800f6e8:	5839      	.short	0x5839
 800f6ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f6ee:	441d      	add	r5, r3
 800f6f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	bfc1      	itttt	gt
 800f6f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f6fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800f700:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f704:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f708:	bfd6      	itet	le
 800f70a:	f1c3 0320 	rsble	r3, r3, #32
 800f70e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f712:	fa06 f003 	lslle.w	r0, r6, r3
 800f716:	f7f0 ff25 	bl	8000564 <__aeabi_ui2d>
 800f71a:	2201      	movs	r2, #1
 800f71c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f720:	3d01      	subs	r5, #1
 800f722:	920e      	str	r2, [sp, #56]	; 0x38
 800f724:	e76f      	b.n	800f606 <_dtoa_r+0x126>
 800f726:	2301      	movs	r3, #1
 800f728:	e7b3      	b.n	800f692 <_dtoa_r+0x1b2>
 800f72a:	900c      	str	r0, [sp, #48]	; 0x30
 800f72c:	e7b2      	b.n	800f694 <_dtoa_r+0x1b4>
 800f72e:	9b05      	ldr	r3, [sp, #20]
 800f730:	eba3 030b 	sub.w	r3, r3, fp
 800f734:	9305      	str	r3, [sp, #20]
 800f736:	f1cb 0300 	rsb	r3, fp, #0
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	2300      	movs	r3, #0
 800f73e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f740:	e7bf      	b.n	800f6c2 <_dtoa_r+0x1e2>
 800f742:	2300      	movs	r3, #0
 800f744:	9309      	str	r3, [sp, #36]	; 0x24
 800f746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f748:	2b00      	cmp	r3, #0
 800f74a:	dc52      	bgt.n	800f7f2 <_dtoa_r+0x312>
 800f74c:	2301      	movs	r3, #1
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	461a      	mov	r2, r3
 800f754:	920a      	str	r2, [sp, #40]	; 0x28
 800f756:	e00b      	b.n	800f770 <_dtoa_r+0x290>
 800f758:	2301      	movs	r3, #1
 800f75a:	e7f3      	b.n	800f744 <_dtoa_r+0x264>
 800f75c:	2300      	movs	r3, #0
 800f75e:	9309      	str	r3, [sp, #36]	; 0x24
 800f760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f762:	445b      	add	r3, fp
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	3301      	adds	r3, #1
 800f768:	2b01      	cmp	r3, #1
 800f76a:	9304      	str	r3, [sp, #16]
 800f76c:	bfb8      	it	lt
 800f76e:	2301      	movlt	r3, #1
 800f770:	69e0      	ldr	r0, [r4, #28]
 800f772:	2100      	movs	r1, #0
 800f774:	2204      	movs	r2, #4
 800f776:	f102 0614 	add.w	r6, r2, #20
 800f77a:	429e      	cmp	r6, r3
 800f77c:	d93d      	bls.n	800f7fa <_dtoa_r+0x31a>
 800f77e:	6041      	str	r1, [r0, #4]
 800f780:	4620      	mov	r0, r4
 800f782:	f000 fd9f 	bl	80102c4 <_Balloc>
 800f786:	9000      	str	r0, [sp, #0]
 800f788:	2800      	cmp	r0, #0
 800f78a:	d139      	bne.n	800f800 <_dtoa_r+0x320>
 800f78c:	4b16      	ldr	r3, [pc, #88]	; (800f7e8 <_dtoa_r+0x308>)
 800f78e:	4602      	mov	r2, r0
 800f790:	f240 11af 	movw	r1, #431	; 0x1af
 800f794:	e6bd      	b.n	800f512 <_dtoa_r+0x32>
 800f796:	2301      	movs	r3, #1
 800f798:	e7e1      	b.n	800f75e <_dtoa_r+0x27e>
 800f79a:	2501      	movs	r5, #1
 800f79c:	2300      	movs	r3, #0
 800f79e:	9307      	str	r3, [sp, #28]
 800f7a0:	9509      	str	r5, [sp, #36]	; 0x24
 800f7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	2312      	movs	r3, #18
 800f7ae:	e7d1      	b.n	800f754 <_dtoa_r+0x274>
 800f7b0:	636f4361 	.word	0x636f4361
 800f7b4:	3fd287a7 	.word	0x3fd287a7
 800f7b8:	8b60c8b3 	.word	0x8b60c8b3
 800f7bc:	3fc68a28 	.word	0x3fc68a28
 800f7c0:	509f79fb 	.word	0x509f79fb
 800f7c4:	3fd34413 	.word	0x3fd34413
 800f7c8:	08011bb9 	.word	0x08011bb9
 800f7cc:	08011bd0 	.word	0x08011bd0
 800f7d0:	7ff00000 	.word	0x7ff00000
 800f7d4:	08011bb5 	.word	0x08011bb5
 800f7d8:	08011bac 	.word	0x08011bac
 800f7dc:	08011b89 	.word	0x08011b89
 800f7e0:	3ff80000 	.word	0x3ff80000
 800f7e4:	08011cc0 	.word	0x08011cc0
 800f7e8:	08011c28 	.word	0x08011c28
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f7f0:	e7d7      	b.n	800f7a2 <_dtoa_r+0x2c2>
 800f7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	9304      	str	r3, [sp, #16]
 800f7f8:	e7ba      	b.n	800f770 <_dtoa_r+0x290>
 800f7fa:	3101      	adds	r1, #1
 800f7fc:	0052      	lsls	r2, r2, #1
 800f7fe:	e7ba      	b.n	800f776 <_dtoa_r+0x296>
 800f800:	69e3      	ldr	r3, [r4, #28]
 800f802:	9a00      	ldr	r2, [sp, #0]
 800f804:	601a      	str	r2, [r3, #0]
 800f806:	9b04      	ldr	r3, [sp, #16]
 800f808:	2b0e      	cmp	r3, #14
 800f80a:	f200 80a8 	bhi.w	800f95e <_dtoa_r+0x47e>
 800f80e:	2d00      	cmp	r5, #0
 800f810:	f000 80a5 	beq.w	800f95e <_dtoa_r+0x47e>
 800f814:	f1bb 0f00 	cmp.w	fp, #0
 800f818:	dd38      	ble.n	800f88c <_dtoa_r+0x3ac>
 800f81a:	4bc0      	ldr	r3, [pc, #768]	; (800fb1c <_dtoa_r+0x63c>)
 800f81c:	f00b 020f 	and.w	r2, fp, #15
 800f820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f824:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f828:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f82c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f830:	d019      	beq.n	800f866 <_dtoa_r+0x386>
 800f832:	4bbb      	ldr	r3, [pc, #748]	; (800fb20 <_dtoa_r+0x640>)
 800f834:	ec51 0b18 	vmov	r0, r1, d8
 800f838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f83c:	f7f1 f836 	bl	80008ac <__aeabi_ddiv>
 800f840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f844:	f008 080f 	and.w	r8, r8, #15
 800f848:	2503      	movs	r5, #3
 800f84a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fb20 <_dtoa_r+0x640>
 800f84e:	f1b8 0f00 	cmp.w	r8, #0
 800f852:	d10a      	bne.n	800f86a <_dtoa_r+0x38a>
 800f854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f858:	4632      	mov	r2, r6
 800f85a:	463b      	mov	r3, r7
 800f85c:	f7f1 f826 	bl	80008ac <__aeabi_ddiv>
 800f860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f864:	e02b      	b.n	800f8be <_dtoa_r+0x3de>
 800f866:	2502      	movs	r5, #2
 800f868:	e7ef      	b.n	800f84a <_dtoa_r+0x36a>
 800f86a:	f018 0f01 	tst.w	r8, #1
 800f86e:	d008      	beq.n	800f882 <_dtoa_r+0x3a2>
 800f870:	4630      	mov	r0, r6
 800f872:	4639      	mov	r1, r7
 800f874:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f878:	f7f0 feee 	bl	8000658 <__aeabi_dmul>
 800f87c:	3501      	adds	r5, #1
 800f87e:	4606      	mov	r6, r0
 800f880:	460f      	mov	r7, r1
 800f882:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f886:	f109 0908 	add.w	r9, r9, #8
 800f88a:	e7e0      	b.n	800f84e <_dtoa_r+0x36e>
 800f88c:	f000 809f 	beq.w	800f9ce <_dtoa_r+0x4ee>
 800f890:	f1cb 0600 	rsb	r6, fp, #0
 800f894:	4ba1      	ldr	r3, [pc, #644]	; (800fb1c <_dtoa_r+0x63c>)
 800f896:	4fa2      	ldr	r7, [pc, #648]	; (800fb20 <_dtoa_r+0x640>)
 800f898:	f006 020f 	and.w	r2, r6, #15
 800f89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	ec51 0b18 	vmov	r0, r1, d8
 800f8a8:	f7f0 fed6 	bl	8000658 <__aeabi_dmul>
 800f8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8b0:	1136      	asrs	r6, r6, #4
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	2502      	movs	r5, #2
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	d17e      	bne.n	800f9b8 <_dtoa_r+0x4d8>
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1d0      	bne.n	800f860 <_dtoa_r+0x380>
 800f8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 8084 	beq.w	800f9d2 <_dtoa_r+0x4f2>
 800f8ca:	4b96      	ldr	r3, [pc, #600]	; (800fb24 <_dtoa_r+0x644>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	4640      	mov	r0, r8
 800f8d0:	4649      	mov	r1, r9
 800f8d2:	f7f1 f933 	bl	8000b3c <__aeabi_dcmplt>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d07b      	beq.n	800f9d2 <_dtoa_r+0x4f2>
 800f8da:	9b04      	ldr	r3, [sp, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d078      	beq.n	800f9d2 <_dtoa_r+0x4f2>
 800f8e0:	9b01      	ldr	r3, [sp, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	dd39      	ble.n	800f95a <_dtoa_r+0x47a>
 800f8e6:	4b90      	ldr	r3, [pc, #576]	; (800fb28 <_dtoa_r+0x648>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	f7f0 feb3 	bl	8000658 <__aeabi_dmul>
 800f8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8f6:	9e01      	ldr	r6, [sp, #4]
 800f8f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f8fc:	3501      	adds	r5, #1
 800f8fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f902:	4628      	mov	r0, r5
 800f904:	f7f0 fe3e 	bl	8000584 <__aeabi_i2d>
 800f908:	4642      	mov	r2, r8
 800f90a:	464b      	mov	r3, r9
 800f90c:	f7f0 fea4 	bl	8000658 <__aeabi_dmul>
 800f910:	4b86      	ldr	r3, [pc, #536]	; (800fb2c <_dtoa_r+0x64c>)
 800f912:	2200      	movs	r2, #0
 800f914:	f7f0 fcea 	bl	80002ec <__adddf3>
 800f918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f920:	9303      	str	r3, [sp, #12]
 800f922:	2e00      	cmp	r6, #0
 800f924:	d158      	bne.n	800f9d8 <_dtoa_r+0x4f8>
 800f926:	4b82      	ldr	r3, [pc, #520]	; (800fb30 <_dtoa_r+0x650>)
 800f928:	2200      	movs	r2, #0
 800f92a:	4640      	mov	r0, r8
 800f92c:	4649      	mov	r1, r9
 800f92e:	f7f0 fcdb 	bl	80002e8 <__aeabi_dsub>
 800f932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f936:	4680      	mov	r8, r0
 800f938:	4689      	mov	r9, r1
 800f93a:	f7f1 f91d 	bl	8000b78 <__aeabi_dcmpgt>
 800f93e:	2800      	cmp	r0, #0
 800f940:	f040 8296 	bne.w	800fe70 <_dtoa_r+0x990>
 800f944:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f948:	4640      	mov	r0, r8
 800f94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f94e:	4649      	mov	r1, r9
 800f950:	f7f1 f8f4 	bl	8000b3c <__aeabi_dcmplt>
 800f954:	2800      	cmp	r0, #0
 800f956:	f040 8289 	bne.w	800fe6c <_dtoa_r+0x98c>
 800f95a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f95e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f960:	2b00      	cmp	r3, #0
 800f962:	f2c0 814e 	blt.w	800fc02 <_dtoa_r+0x722>
 800f966:	f1bb 0f0e 	cmp.w	fp, #14
 800f96a:	f300 814a 	bgt.w	800fc02 <_dtoa_r+0x722>
 800f96e:	4b6b      	ldr	r3, [pc, #428]	; (800fb1c <_dtoa_r+0x63c>)
 800f970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f974:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f280 80dc 	bge.w	800fb38 <_dtoa_r+0x658>
 800f980:	9b04      	ldr	r3, [sp, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	f300 80d8 	bgt.w	800fb38 <_dtoa_r+0x658>
 800f988:	f040 826f 	bne.w	800fe6a <_dtoa_r+0x98a>
 800f98c:	4b68      	ldr	r3, [pc, #416]	; (800fb30 <_dtoa_r+0x650>)
 800f98e:	2200      	movs	r2, #0
 800f990:	4640      	mov	r0, r8
 800f992:	4649      	mov	r1, r9
 800f994:	f7f0 fe60 	bl	8000658 <__aeabi_dmul>
 800f998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f99c:	f7f1 f8e2 	bl	8000b64 <__aeabi_dcmpge>
 800f9a0:	9e04      	ldr	r6, [sp, #16]
 800f9a2:	4637      	mov	r7, r6
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	f040 8245 	bne.w	800fe34 <_dtoa_r+0x954>
 800f9aa:	9d00      	ldr	r5, [sp, #0]
 800f9ac:	2331      	movs	r3, #49	; 0x31
 800f9ae:	f805 3b01 	strb.w	r3, [r5], #1
 800f9b2:	f10b 0b01 	add.w	fp, fp, #1
 800f9b6:	e241      	b.n	800fe3c <_dtoa_r+0x95c>
 800f9b8:	07f2      	lsls	r2, r6, #31
 800f9ba:	d505      	bpl.n	800f9c8 <_dtoa_r+0x4e8>
 800f9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9c0:	f7f0 fe4a 	bl	8000658 <__aeabi_dmul>
 800f9c4:	3501      	adds	r5, #1
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	1076      	asrs	r6, r6, #1
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	e773      	b.n	800f8b6 <_dtoa_r+0x3d6>
 800f9ce:	2502      	movs	r5, #2
 800f9d0:	e775      	b.n	800f8be <_dtoa_r+0x3de>
 800f9d2:	9e04      	ldr	r6, [sp, #16]
 800f9d4:	465f      	mov	r7, fp
 800f9d6:	e792      	b.n	800f8fe <_dtoa_r+0x41e>
 800f9d8:	9900      	ldr	r1, [sp, #0]
 800f9da:	4b50      	ldr	r3, [pc, #320]	; (800fb1c <_dtoa_r+0x63c>)
 800f9dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9e0:	4431      	add	r1, r6
 800f9e2:	9102      	str	r1, [sp, #8]
 800f9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9e6:	eeb0 9a47 	vmov.f32	s18, s14
 800f9ea:	eef0 9a67 	vmov.f32	s19, s15
 800f9ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f9f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f9f6:	2900      	cmp	r1, #0
 800f9f8:	d044      	beq.n	800fa84 <_dtoa_r+0x5a4>
 800f9fa:	494e      	ldr	r1, [pc, #312]	; (800fb34 <_dtoa_r+0x654>)
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	f7f0 ff55 	bl	80008ac <__aeabi_ddiv>
 800fa02:	ec53 2b19 	vmov	r2, r3, d9
 800fa06:	f7f0 fc6f 	bl	80002e8 <__aeabi_dsub>
 800fa0a:	9d00      	ldr	r5, [sp, #0]
 800fa0c:	ec41 0b19 	vmov	d9, r0, r1
 800fa10:	4649      	mov	r1, r9
 800fa12:	4640      	mov	r0, r8
 800fa14:	f7f1 f8d0 	bl	8000bb8 <__aeabi_d2iz>
 800fa18:	4606      	mov	r6, r0
 800fa1a:	f7f0 fdb3 	bl	8000584 <__aeabi_i2d>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	460b      	mov	r3, r1
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f0 fc5f 	bl	80002e8 <__aeabi_dsub>
 800fa2a:	3630      	adds	r6, #48	; 0x30
 800fa2c:	f805 6b01 	strb.w	r6, [r5], #1
 800fa30:	ec53 2b19 	vmov	r2, r3, d9
 800fa34:	4680      	mov	r8, r0
 800fa36:	4689      	mov	r9, r1
 800fa38:	f7f1 f880 	bl	8000b3c <__aeabi_dcmplt>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d164      	bne.n	800fb0a <_dtoa_r+0x62a>
 800fa40:	4642      	mov	r2, r8
 800fa42:	464b      	mov	r3, r9
 800fa44:	4937      	ldr	r1, [pc, #220]	; (800fb24 <_dtoa_r+0x644>)
 800fa46:	2000      	movs	r0, #0
 800fa48:	f7f0 fc4e 	bl	80002e8 <__aeabi_dsub>
 800fa4c:	ec53 2b19 	vmov	r2, r3, d9
 800fa50:	f7f1 f874 	bl	8000b3c <__aeabi_dcmplt>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	f040 80b6 	bne.w	800fbc6 <_dtoa_r+0x6e6>
 800fa5a:	9b02      	ldr	r3, [sp, #8]
 800fa5c:	429d      	cmp	r5, r3
 800fa5e:	f43f af7c 	beq.w	800f95a <_dtoa_r+0x47a>
 800fa62:	4b31      	ldr	r3, [pc, #196]	; (800fb28 <_dtoa_r+0x648>)
 800fa64:	ec51 0b19 	vmov	r0, r1, d9
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f7f0 fdf5 	bl	8000658 <__aeabi_dmul>
 800fa6e:	4b2e      	ldr	r3, [pc, #184]	; (800fb28 <_dtoa_r+0x648>)
 800fa70:	ec41 0b19 	vmov	d9, r0, r1
 800fa74:	2200      	movs	r2, #0
 800fa76:	4640      	mov	r0, r8
 800fa78:	4649      	mov	r1, r9
 800fa7a:	f7f0 fded 	bl	8000658 <__aeabi_dmul>
 800fa7e:	4680      	mov	r8, r0
 800fa80:	4689      	mov	r9, r1
 800fa82:	e7c5      	b.n	800fa10 <_dtoa_r+0x530>
 800fa84:	ec51 0b17 	vmov	r0, r1, d7
 800fa88:	f7f0 fde6 	bl	8000658 <__aeabi_dmul>
 800fa8c:	9b02      	ldr	r3, [sp, #8]
 800fa8e:	9d00      	ldr	r5, [sp, #0]
 800fa90:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa92:	ec41 0b19 	vmov	d9, r0, r1
 800fa96:	4649      	mov	r1, r9
 800fa98:	4640      	mov	r0, r8
 800fa9a:	f7f1 f88d 	bl	8000bb8 <__aeabi_d2iz>
 800fa9e:	4606      	mov	r6, r0
 800faa0:	f7f0 fd70 	bl	8000584 <__aeabi_i2d>
 800faa4:	3630      	adds	r6, #48	; 0x30
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4640      	mov	r0, r8
 800faac:	4649      	mov	r1, r9
 800faae:	f7f0 fc1b 	bl	80002e8 <__aeabi_dsub>
 800fab2:	f805 6b01 	strb.w	r6, [r5], #1
 800fab6:	9b02      	ldr	r3, [sp, #8]
 800fab8:	429d      	cmp	r5, r3
 800faba:	4680      	mov	r8, r0
 800fabc:	4689      	mov	r9, r1
 800fabe:	f04f 0200 	mov.w	r2, #0
 800fac2:	d124      	bne.n	800fb0e <_dtoa_r+0x62e>
 800fac4:	4b1b      	ldr	r3, [pc, #108]	; (800fb34 <_dtoa_r+0x654>)
 800fac6:	ec51 0b19 	vmov	r0, r1, d9
 800faca:	f7f0 fc0f 	bl	80002ec <__adddf3>
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	4640      	mov	r0, r8
 800fad4:	4649      	mov	r1, r9
 800fad6:	f7f1 f84f 	bl	8000b78 <__aeabi_dcmpgt>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d173      	bne.n	800fbc6 <_dtoa_r+0x6e6>
 800fade:	ec53 2b19 	vmov	r2, r3, d9
 800fae2:	4914      	ldr	r1, [pc, #80]	; (800fb34 <_dtoa_r+0x654>)
 800fae4:	2000      	movs	r0, #0
 800fae6:	f7f0 fbff 	bl	80002e8 <__aeabi_dsub>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	4640      	mov	r0, r8
 800faf0:	4649      	mov	r1, r9
 800faf2:	f7f1 f823 	bl	8000b3c <__aeabi_dcmplt>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f43f af2f 	beq.w	800f95a <_dtoa_r+0x47a>
 800fafc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fafe:	1e6b      	subs	r3, r5, #1
 800fb00:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb06:	2b30      	cmp	r3, #48	; 0x30
 800fb08:	d0f8      	beq.n	800fafc <_dtoa_r+0x61c>
 800fb0a:	46bb      	mov	fp, r7
 800fb0c:	e04a      	b.n	800fba4 <_dtoa_r+0x6c4>
 800fb0e:	4b06      	ldr	r3, [pc, #24]	; (800fb28 <_dtoa_r+0x648>)
 800fb10:	f7f0 fda2 	bl	8000658 <__aeabi_dmul>
 800fb14:	4680      	mov	r8, r0
 800fb16:	4689      	mov	r9, r1
 800fb18:	e7bd      	b.n	800fa96 <_dtoa_r+0x5b6>
 800fb1a:	bf00      	nop
 800fb1c:	08011cc0 	.word	0x08011cc0
 800fb20:	08011c98 	.word	0x08011c98
 800fb24:	3ff00000 	.word	0x3ff00000
 800fb28:	40240000 	.word	0x40240000
 800fb2c:	401c0000 	.word	0x401c0000
 800fb30:	40140000 	.word	0x40140000
 800fb34:	3fe00000 	.word	0x3fe00000
 800fb38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb3c:	9d00      	ldr	r5, [sp, #0]
 800fb3e:	4642      	mov	r2, r8
 800fb40:	464b      	mov	r3, r9
 800fb42:	4630      	mov	r0, r6
 800fb44:	4639      	mov	r1, r7
 800fb46:	f7f0 feb1 	bl	80008ac <__aeabi_ddiv>
 800fb4a:	f7f1 f835 	bl	8000bb8 <__aeabi_d2iz>
 800fb4e:	9001      	str	r0, [sp, #4]
 800fb50:	f7f0 fd18 	bl	8000584 <__aeabi_i2d>
 800fb54:	4642      	mov	r2, r8
 800fb56:	464b      	mov	r3, r9
 800fb58:	f7f0 fd7e 	bl	8000658 <__aeabi_dmul>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	4630      	mov	r0, r6
 800fb62:	4639      	mov	r1, r7
 800fb64:	f7f0 fbc0 	bl	80002e8 <__aeabi_dsub>
 800fb68:	9e01      	ldr	r6, [sp, #4]
 800fb6a:	9f04      	ldr	r7, [sp, #16]
 800fb6c:	3630      	adds	r6, #48	; 0x30
 800fb6e:	f805 6b01 	strb.w	r6, [r5], #1
 800fb72:	9e00      	ldr	r6, [sp, #0]
 800fb74:	1bae      	subs	r6, r5, r6
 800fb76:	42b7      	cmp	r7, r6
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	d134      	bne.n	800fbe8 <_dtoa_r+0x708>
 800fb7e:	f7f0 fbb5 	bl	80002ec <__adddf3>
 800fb82:	4642      	mov	r2, r8
 800fb84:	464b      	mov	r3, r9
 800fb86:	4606      	mov	r6, r0
 800fb88:	460f      	mov	r7, r1
 800fb8a:	f7f0 fff5 	bl	8000b78 <__aeabi_dcmpgt>
 800fb8e:	b9c8      	cbnz	r0, 800fbc4 <_dtoa_r+0x6e4>
 800fb90:	4642      	mov	r2, r8
 800fb92:	464b      	mov	r3, r9
 800fb94:	4630      	mov	r0, r6
 800fb96:	4639      	mov	r1, r7
 800fb98:	f7f0 ffc6 	bl	8000b28 <__aeabi_dcmpeq>
 800fb9c:	b110      	cbz	r0, 800fba4 <_dtoa_r+0x6c4>
 800fb9e:	9b01      	ldr	r3, [sp, #4]
 800fba0:	07db      	lsls	r3, r3, #31
 800fba2:	d40f      	bmi.n	800fbc4 <_dtoa_r+0x6e4>
 800fba4:	4651      	mov	r1, sl
 800fba6:	4620      	mov	r0, r4
 800fba8:	f000 fbcc 	bl	8010344 <_Bfree>
 800fbac:	2300      	movs	r3, #0
 800fbae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbb0:	702b      	strb	r3, [r5, #0]
 800fbb2:	f10b 0301 	add.w	r3, fp, #1
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f43f ace2 	beq.w	800f584 <_dtoa_r+0xa4>
 800fbc0:	601d      	str	r5, [r3, #0]
 800fbc2:	e4df      	b.n	800f584 <_dtoa_r+0xa4>
 800fbc4:	465f      	mov	r7, fp
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	461d      	mov	r5, r3
 800fbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbce:	2a39      	cmp	r2, #57	; 0x39
 800fbd0:	d106      	bne.n	800fbe0 <_dtoa_r+0x700>
 800fbd2:	9a00      	ldr	r2, [sp, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d1f7      	bne.n	800fbc8 <_dtoa_r+0x6e8>
 800fbd8:	9900      	ldr	r1, [sp, #0]
 800fbda:	2230      	movs	r2, #48	; 0x30
 800fbdc:	3701      	adds	r7, #1
 800fbde:	700a      	strb	r2, [r1, #0]
 800fbe0:	781a      	ldrb	r2, [r3, #0]
 800fbe2:	3201      	adds	r2, #1
 800fbe4:	701a      	strb	r2, [r3, #0]
 800fbe6:	e790      	b.n	800fb0a <_dtoa_r+0x62a>
 800fbe8:	4ba3      	ldr	r3, [pc, #652]	; (800fe78 <_dtoa_r+0x998>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	f7f0 fd34 	bl	8000658 <__aeabi_dmul>
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	4606      	mov	r6, r0
 800fbf6:	460f      	mov	r7, r1
 800fbf8:	f7f0 ff96 	bl	8000b28 <__aeabi_dcmpeq>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d09e      	beq.n	800fb3e <_dtoa_r+0x65e>
 800fc00:	e7d0      	b.n	800fba4 <_dtoa_r+0x6c4>
 800fc02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc04:	2a00      	cmp	r2, #0
 800fc06:	f000 80ca 	beq.w	800fd9e <_dtoa_r+0x8be>
 800fc0a:	9a07      	ldr	r2, [sp, #28]
 800fc0c:	2a01      	cmp	r2, #1
 800fc0e:	f300 80ad 	bgt.w	800fd6c <_dtoa_r+0x88c>
 800fc12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc14:	2a00      	cmp	r2, #0
 800fc16:	f000 80a5 	beq.w	800fd64 <_dtoa_r+0x884>
 800fc1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc1e:	9e08      	ldr	r6, [sp, #32]
 800fc20:	9d05      	ldr	r5, [sp, #20]
 800fc22:	9a05      	ldr	r2, [sp, #20]
 800fc24:	441a      	add	r2, r3
 800fc26:	9205      	str	r2, [sp, #20]
 800fc28:	9a06      	ldr	r2, [sp, #24]
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	441a      	add	r2, r3
 800fc2e:	4620      	mov	r0, r4
 800fc30:	9206      	str	r2, [sp, #24]
 800fc32:	f000 fc3d 	bl	80104b0 <__i2b>
 800fc36:	4607      	mov	r7, r0
 800fc38:	b165      	cbz	r5, 800fc54 <_dtoa_r+0x774>
 800fc3a:	9b06      	ldr	r3, [sp, #24]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	dd09      	ble.n	800fc54 <_dtoa_r+0x774>
 800fc40:	42ab      	cmp	r3, r5
 800fc42:	9a05      	ldr	r2, [sp, #20]
 800fc44:	bfa8      	it	ge
 800fc46:	462b      	movge	r3, r5
 800fc48:	1ad2      	subs	r2, r2, r3
 800fc4a:	9205      	str	r2, [sp, #20]
 800fc4c:	9a06      	ldr	r2, [sp, #24]
 800fc4e:	1aed      	subs	r5, r5, r3
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	9306      	str	r3, [sp, #24]
 800fc54:	9b08      	ldr	r3, [sp, #32]
 800fc56:	b1f3      	cbz	r3, 800fc96 <_dtoa_r+0x7b6>
 800fc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f000 80a3 	beq.w	800fda6 <_dtoa_r+0x8c6>
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	dd10      	ble.n	800fc86 <_dtoa_r+0x7a6>
 800fc64:	4639      	mov	r1, r7
 800fc66:	4632      	mov	r2, r6
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f000 fce1 	bl	8010630 <__pow5mult>
 800fc6e:	4652      	mov	r2, sl
 800fc70:	4601      	mov	r1, r0
 800fc72:	4607      	mov	r7, r0
 800fc74:	4620      	mov	r0, r4
 800fc76:	f000 fc31 	bl	80104dc <__multiply>
 800fc7a:	4651      	mov	r1, sl
 800fc7c:	4680      	mov	r8, r0
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fb60 	bl	8010344 <_Bfree>
 800fc84:	46c2      	mov	sl, r8
 800fc86:	9b08      	ldr	r3, [sp, #32]
 800fc88:	1b9a      	subs	r2, r3, r6
 800fc8a:	d004      	beq.n	800fc96 <_dtoa_r+0x7b6>
 800fc8c:	4651      	mov	r1, sl
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f000 fcce 	bl	8010630 <__pow5mult>
 800fc94:	4682      	mov	sl, r0
 800fc96:	2101      	movs	r1, #1
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f000 fc09 	bl	80104b0 <__i2b>
 800fc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	4606      	mov	r6, r0
 800fca4:	f340 8081 	ble.w	800fdaa <_dtoa_r+0x8ca>
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4601      	mov	r1, r0
 800fcac:	4620      	mov	r0, r4
 800fcae:	f000 fcbf 	bl	8010630 <__pow5mult>
 800fcb2:	9b07      	ldr	r3, [sp, #28]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	dd7a      	ble.n	800fdb0 <_dtoa_r+0x8d0>
 800fcba:	f04f 0800 	mov.w	r8, #0
 800fcbe:	6933      	ldr	r3, [r6, #16]
 800fcc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fcc4:	6918      	ldr	r0, [r3, #16]
 800fcc6:	f000 fba5 	bl	8010414 <__hi0bits>
 800fcca:	f1c0 0020 	rsb	r0, r0, #32
 800fcce:	9b06      	ldr	r3, [sp, #24]
 800fcd0:	4418      	add	r0, r3
 800fcd2:	f010 001f 	ands.w	r0, r0, #31
 800fcd6:	f000 8094 	beq.w	800fe02 <_dtoa_r+0x922>
 800fcda:	f1c0 0320 	rsb	r3, r0, #32
 800fcde:	2b04      	cmp	r3, #4
 800fce0:	f340 8085 	ble.w	800fdee <_dtoa_r+0x90e>
 800fce4:	9b05      	ldr	r3, [sp, #20]
 800fce6:	f1c0 001c 	rsb	r0, r0, #28
 800fcea:	4403      	add	r3, r0
 800fcec:	9305      	str	r3, [sp, #20]
 800fcee:	9b06      	ldr	r3, [sp, #24]
 800fcf0:	4403      	add	r3, r0
 800fcf2:	4405      	add	r5, r0
 800fcf4:	9306      	str	r3, [sp, #24]
 800fcf6:	9b05      	ldr	r3, [sp, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	dd05      	ble.n	800fd08 <_dtoa_r+0x828>
 800fcfc:	4651      	mov	r1, sl
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 fcef 	bl	80106e4 <__lshift>
 800fd06:	4682      	mov	sl, r0
 800fd08:	9b06      	ldr	r3, [sp, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	dd05      	ble.n	800fd1a <_dtoa_r+0x83a>
 800fd0e:	4631      	mov	r1, r6
 800fd10:	461a      	mov	r2, r3
 800fd12:	4620      	mov	r0, r4
 800fd14:	f000 fce6 	bl	80106e4 <__lshift>
 800fd18:	4606      	mov	r6, r0
 800fd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d072      	beq.n	800fe06 <_dtoa_r+0x926>
 800fd20:	4631      	mov	r1, r6
 800fd22:	4650      	mov	r0, sl
 800fd24:	f000 fd4a 	bl	80107bc <__mcmp>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	da6c      	bge.n	800fe06 <_dtoa_r+0x926>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	4651      	mov	r1, sl
 800fd30:	220a      	movs	r2, #10
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 fb28 	bl	8010388 <__multadd>
 800fd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd3e:	4682      	mov	sl, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 81b0 	beq.w	80100a6 <_dtoa_r+0xbc6>
 800fd46:	2300      	movs	r3, #0
 800fd48:	4639      	mov	r1, r7
 800fd4a:	220a      	movs	r2, #10
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f000 fb1b 	bl	8010388 <__multadd>
 800fd52:	9b01      	ldr	r3, [sp, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	4607      	mov	r7, r0
 800fd58:	f300 8096 	bgt.w	800fe88 <_dtoa_r+0x9a8>
 800fd5c:	9b07      	ldr	r3, [sp, #28]
 800fd5e:	2b02      	cmp	r3, #2
 800fd60:	dc59      	bgt.n	800fe16 <_dtoa_r+0x936>
 800fd62:	e091      	b.n	800fe88 <_dtoa_r+0x9a8>
 800fd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd6a:	e758      	b.n	800fc1e <_dtoa_r+0x73e>
 800fd6c:	9b04      	ldr	r3, [sp, #16]
 800fd6e:	1e5e      	subs	r6, r3, #1
 800fd70:	9b08      	ldr	r3, [sp, #32]
 800fd72:	42b3      	cmp	r3, r6
 800fd74:	bfbf      	itttt	lt
 800fd76:	9b08      	ldrlt	r3, [sp, #32]
 800fd78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fd7a:	9608      	strlt	r6, [sp, #32]
 800fd7c:	1af3      	sublt	r3, r6, r3
 800fd7e:	bfb4      	ite	lt
 800fd80:	18d2      	addlt	r2, r2, r3
 800fd82:	1b9e      	subge	r6, r3, r6
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	bfbc      	itt	lt
 800fd88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fd8a:	2600      	movlt	r6, #0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	bfb7      	itett	lt
 800fd90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fd94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fd98:	1a9d      	sublt	r5, r3, r2
 800fd9a:	2300      	movlt	r3, #0
 800fd9c:	e741      	b.n	800fc22 <_dtoa_r+0x742>
 800fd9e:	9e08      	ldr	r6, [sp, #32]
 800fda0:	9d05      	ldr	r5, [sp, #20]
 800fda2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fda4:	e748      	b.n	800fc38 <_dtoa_r+0x758>
 800fda6:	9a08      	ldr	r2, [sp, #32]
 800fda8:	e770      	b.n	800fc8c <_dtoa_r+0x7ac>
 800fdaa:	9b07      	ldr	r3, [sp, #28]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	dc19      	bgt.n	800fde4 <_dtoa_r+0x904>
 800fdb0:	9b02      	ldr	r3, [sp, #8]
 800fdb2:	b9bb      	cbnz	r3, 800fde4 <_dtoa_r+0x904>
 800fdb4:	9b03      	ldr	r3, [sp, #12]
 800fdb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdba:	b99b      	cbnz	r3, 800fde4 <_dtoa_r+0x904>
 800fdbc:	9b03      	ldr	r3, [sp, #12]
 800fdbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fdc2:	0d1b      	lsrs	r3, r3, #20
 800fdc4:	051b      	lsls	r3, r3, #20
 800fdc6:	b183      	cbz	r3, 800fdea <_dtoa_r+0x90a>
 800fdc8:	9b05      	ldr	r3, [sp, #20]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	9305      	str	r3, [sp, #20]
 800fdce:	9b06      	ldr	r3, [sp, #24]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	9306      	str	r3, [sp, #24]
 800fdd4:	f04f 0801 	mov.w	r8, #1
 800fdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f47f af6f 	bne.w	800fcbe <_dtoa_r+0x7de>
 800fde0:	2001      	movs	r0, #1
 800fde2:	e774      	b.n	800fcce <_dtoa_r+0x7ee>
 800fde4:	f04f 0800 	mov.w	r8, #0
 800fde8:	e7f6      	b.n	800fdd8 <_dtoa_r+0x8f8>
 800fdea:	4698      	mov	r8, r3
 800fdec:	e7f4      	b.n	800fdd8 <_dtoa_r+0x8f8>
 800fdee:	d082      	beq.n	800fcf6 <_dtoa_r+0x816>
 800fdf0:	9a05      	ldr	r2, [sp, #20]
 800fdf2:	331c      	adds	r3, #28
 800fdf4:	441a      	add	r2, r3
 800fdf6:	9205      	str	r2, [sp, #20]
 800fdf8:	9a06      	ldr	r2, [sp, #24]
 800fdfa:	441a      	add	r2, r3
 800fdfc:	441d      	add	r5, r3
 800fdfe:	9206      	str	r2, [sp, #24]
 800fe00:	e779      	b.n	800fcf6 <_dtoa_r+0x816>
 800fe02:	4603      	mov	r3, r0
 800fe04:	e7f4      	b.n	800fdf0 <_dtoa_r+0x910>
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dc37      	bgt.n	800fe7c <_dtoa_r+0x99c>
 800fe0c:	9b07      	ldr	r3, [sp, #28]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	dd34      	ble.n	800fe7c <_dtoa_r+0x99c>
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	9b01      	ldr	r3, [sp, #4]
 800fe18:	b963      	cbnz	r3, 800fe34 <_dtoa_r+0x954>
 800fe1a:	4631      	mov	r1, r6
 800fe1c:	2205      	movs	r2, #5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 fab2 	bl	8010388 <__multadd>
 800fe24:	4601      	mov	r1, r0
 800fe26:	4606      	mov	r6, r0
 800fe28:	4650      	mov	r0, sl
 800fe2a:	f000 fcc7 	bl	80107bc <__mcmp>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	f73f adbb 	bgt.w	800f9aa <_dtoa_r+0x4ca>
 800fe34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe36:	9d00      	ldr	r5, [sp, #0]
 800fe38:	ea6f 0b03 	mvn.w	fp, r3
 800fe3c:	f04f 0800 	mov.w	r8, #0
 800fe40:	4631      	mov	r1, r6
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 fa7e 	bl	8010344 <_Bfree>
 800fe48:	2f00      	cmp	r7, #0
 800fe4a:	f43f aeab 	beq.w	800fba4 <_dtoa_r+0x6c4>
 800fe4e:	f1b8 0f00 	cmp.w	r8, #0
 800fe52:	d005      	beq.n	800fe60 <_dtoa_r+0x980>
 800fe54:	45b8      	cmp	r8, r7
 800fe56:	d003      	beq.n	800fe60 <_dtoa_r+0x980>
 800fe58:	4641      	mov	r1, r8
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 fa72 	bl	8010344 <_Bfree>
 800fe60:	4639      	mov	r1, r7
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 fa6e 	bl	8010344 <_Bfree>
 800fe68:	e69c      	b.n	800fba4 <_dtoa_r+0x6c4>
 800fe6a:	2600      	movs	r6, #0
 800fe6c:	4637      	mov	r7, r6
 800fe6e:	e7e1      	b.n	800fe34 <_dtoa_r+0x954>
 800fe70:	46bb      	mov	fp, r7
 800fe72:	4637      	mov	r7, r6
 800fe74:	e599      	b.n	800f9aa <_dtoa_r+0x4ca>
 800fe76:	bf00      	nop
 800fe78:	40240000 	.word	0x40240000
 800fe7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 80c8 	beq.w	8010014 <_dtoa_r+0xb34>
 800fe84:	9b04      	ldr	r3, [sp, #16]
 800fe86:	9301      	str	r3, [sp, #4]
 800fe88:	2d00      	cmp	r5, #0
 800fe8a:	dd05      	ble.n	800fe98 <_dtoa_r+0x9b8>
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	462a      	mov	r2, r5
 800fe90:	4620      	mov	r0, r4
 800fe92:	f000 fc27 	bl	80106e4 <__lshift>
 800fe96:	4607      	mov	r7, r0
 800fe98:	f1b8 0f00 	cmp.w	r8, #0
 800fe9c:	d05b      	beq.n	800ff56 <_dtoa_r+0xa76>
 800fe9e:	6879      	ldr	r1, [r7, #4]
 800fea0:	4620      	mov	r0, r4
 800fea2:	f000 fa0f 	bl	80102c4 <_Balloc>
 800fea6:	4605      	mov	r5, r0
 800fea8:	b928      	cbnz	r0, 800feb6 <_dtoa_r+0x9d6>
 800feaa:	4b83      	ldr	r3, [pc, #524]	; (80100b8 <_dtoa_r+0xbd8>)
 800feac:	4602      	mov	r2, r0
 800feae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800feb2:	f7ff bb2e 	b.w	800f512 <_dtoa_r+0x32>
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	3202      	adds	r2, #2
 800feba:	0092      	lsls	r2, r2, #2
 800febc:	f107 010c 	add.w	r1, r7, #12
 800fec0:	300c      	adds	r0, #12
 800fec2:	f7ff fa77 	bl	800f3b4 <memcpy>
 800fec6:	2201      	movs	r2, #1
 800fec8:	4629      	mov	r1, r5
 800feca:	4620      	mov	r0, r4
 800fecc:	f000 fc0a 	bl	80106e4 <__lshift>
 800fed0:	9b00      	ldr	r3, [sp, #0]
 800fed2:	3301      	adds	r3, #1
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feda:	4413      	add	r3, r2
 800fedc:	9308      	str	r3, [sp, #32]
 800fede:	9b02      	ldr	r3, [sp, #8]
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	46b8      	mov	r8, r7
 800fee6:	9306      	str	r3, [sp, #24]
 800fee8:	4607      	mov	r7, r0
 800feea:	9b04      	ldr	r3, [sp, #16]
 800feec:	4631      	mov	r1, r6
 800feee:	3b01      	subs	r3, #1
 800fef0:	4650      	mov	r0, sl
 800fef2:	9301      	str	r3, [sp, #4]
 800fef4:	f7ff fa6c 	bl	800f3d0 <quorem>
 800fef8:	4641      	mov	r1, r8
 800fefa:	9002      	str	r0, [sp, #8]
 800fefc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ff00:	4650      	mov	r0, sl
 800ff02:	f000 fc5b 	bl	80107bc <__mcmp>
 800ff06:	463a      	mov	r2, r7
 800ff08:	9005      	str	r0, [sp, #20]
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f000 fc71 	bl	80107f4 <__mdiff>
 800ff12:	68c2      	ldr	r2, [r0, #12]
 800ff14:	4605      	mov	r5, r0
 800ff16:	bb02      	cbnz	r2, 800ff5a <_dtoa_r+0xa7a>
 800ff18:	4601      	mov	r1, r0
 800ff1a:	4650      	mov	r0, sl
 800ff1c:	f000 fc4e 	bl	80107bc <__mcmp>
 800ff20:	4602      	mov	r2, r0
 800ff22:	4629      	mov	r1, r5
 800ff24:	4620      	mov	r0, r4
 800ff26:	9209      	str	r2, [sp, #36]	; 0x24
 800ff28:	f000 fa0c 	bl	8010344 <_Bfree>
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff30:	9d04      	ldr	r5, [sp, #16]
 800ff32:	ea43 0102 	orr.w	r1, r3, r2
 800ff36:	9b06      	ldr	r3, [sp, #24]
 800ff38:	4319      	orrs	r1, r3
 800ff3a:	d110      	bne.n	800ff5e <_dtoa_r+0xa7e>
 800ff3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff40:	d029      	beq.n	800ff96 <_dtoa_r+0xab6>
 800ff42:	9b05      	ldr	r3, [sp, #20]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dd02      	ble.n	800ff4e <_dtoa_r+0xa6e>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ff4e:	9b01      	ldr	r3, [sp, #4]
 800ff50:	f883 9000 	strb.w	r9, [r3]
 800ff54:	e774      	b.n	800fe40 <_dtoa_r+0x960>
 800ff56:	4638      	mov	r0, r7
 800ff58:	e7ba      	b.n	800fed0 <_dtoa_r+0x9f0>
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	e7e1      	b.n	800ff22 <_dtoa_r+0xa42>
 800ff5e:	9b05      	ldr	r3, [sp, #20]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	db04      	blt.n	800ff6e <_dtoa_r+0xa8e>
 800ff64:	9907      	ldr	r1, [sp, #28]
 800ff66:	430b      	orrs	r3, r1
 800ff68:	9906      	ldr	r1, [sp, #24]
 800ff6a:	430b      	orrs	r3, r1
 800ff6c:	d120      	bne.n	800ffb0 <_dtoa_r+0xad0>
 800ff6e:	2a00      	cmp	r2, #0
 800ff70:	dded      	ble.n	800ff4e <_dtoa_r+0xa6e>
 800ff72:	4651      	mov	r1, sl
 800ff74:	2201      	movs	r2, #1
 800ff76:	4620      	mov	r0, r4
 800ff78:	f000 fbb4 	bl	80106e4 <__lshift>
 800ff7c:	4631      	mov	r1, r6
 800ff7e:	4682      	mov	sl, r0
 800ff80:	f000 fc1c 	bl	80107bc <__mcmp>
 800ff84:	2800      	cmp	r0, #0
 800ff86:	dc03      	bgt.n	800ff90 <_dtoa_r+0xab0>
 800ff88:	d1e1      	bne.n	800ff4e <_dtoa_r+0xa6e>
 800ff8a:	f019 0f01 	tst.w	r9, #1
 800ff8e:	d0de      	beq.n	800ff4e <_dtoa_r+0xa6e>
 800ff90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff94:	d1d8      	bne.n	800ff48 <_dtoa_r+0xa68>
 800ff96:	9a01      	ldr	r2, [sp, #4]
 800ff98:	2339      	movs	r3, #57	; 0x39
 800ff9a:	7013      	strb	r3, [r2, #0]
 800ff9c:	462b      	mov	r3, r5
 800ff9e:	461d      	mov	r5, r3
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ffa6:	2a39      	cmp	r2, #57	; 0x39
 800ffa8:	d06c      	beq.n	8010084 <_dtoa_r+0xba4>
 800ffaa:	3201      	adds	r2, #1
 800ffac:	701a      	strb	r2, [r3, #0]
 800ffae:	e747      	b.n	800fe40 <_dtoa_r+0x960>
 800ffb0:	2a00      	cmp	r2, #0
 800ffb2:	dd07      	ble.n	800ffc4 <_dtoa_r+0xae4>
 800ffb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ffb8:	d0ed      	beq.n	800ff96 <_dtoa_r+0xab6>
 800ffba:	9a01      	ldr	r2, [sp, #4]
 800ffbc:	f109 0301 	add.w	r3, r9, #1
 800ffc0:	7013      	strb	r3, [r2, #0]
 800ffc2:	e73d      	b.n	800fe40 <_dtoa_r+0x960>
 800ffc4:	9b04      	ldr	r3, [sp, #16]
 800ffc6:	9a08      	ldr	r2, [sp, #32]
 800ffc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d043      	beq.n	8010058 <_dtoa_r+0xb78>
 800ffd0:	4651      	mov	r1, sl
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	220a      	movs	r2, #10
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f000 f9d6 	bl	8010388 <__multadd>
 800ffdc:	45b8      	cmp	r8, r7
 800ffde:	4682      	mov	sl, r0
 800ffe0:	f04f 0300 	mov.w	r3, #0
 800ffe4:	f04f 020a 	mov.w	r2, #10
 800ffe8:	4641      	mov	r1, r8
 800ffea:	4620      	mov	r0, r4
 800ffec:	d107      	bne.n	800fffe <_dtoa_r+0xb1e>
 800ffee:	f000 f9cb 	bl	8010388 <__multadd>
 800fff2:	4680      	mov	r8, r0
 800fff4:	4607      	mov	r7, r0
 800fff6:	9b04      	ldr	r3, [sp, #16]
 800fff8:	3301      	adds	r3, #1
 800fffa:	9304      	str	r3, [sp, #16]
 800fffc:	e775      	b.n	800feea <_dtoa_r+0xa0a>
 800fffe:	f000 f9c3 	bl	8010388 <__multadd>
 8010002:	4639      	mov	r1, r7
 8010004:	4680      	mov	r8, r0
 8010006:	2300      	movs	r3, #0
 8010008:	220a      	movs	r2, #10
 801000a:	4620      	mov	r0, r4
 801000c:	f000 f9bc 	bl	8010388 <__multadd>
 8010010:	4607      	mov	r7, r0
 8010012:	e7f0      	b.n	800fff6 <_dtoa_r+0xb16>
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	9301      	str	r3, [sp, #4]
 8010018:	9d00      	ldr	r5, [sp, #0]
 801001a:	4631      	mov	r1, r6
 801001c:	4650      	mov	r0, sl
 801001e:	f7ff f9d7 	bl	800f3d0 <quorem>
 8010022:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010026:	9b00      	ldr	r3, [sp, #0]
 8010028:	f805 9b01 	strb.w	r9, [r5], #1
 801002c:	1aea      	subs	r2, r5, r3
 801002e:	9b01      	ldr	r3, [sp, #4]
 8010030:	4293      	cmp	r3, r2
 8010032:	dd07      	ble.n	8010044 <_dtoa_r+0xb64>
 8010034:	4651      	mov	r1, sl
 8010036:	2300      	movs	r3, #0
 8010038:	220a      	movs	r2, #10
 801003a:	4620      	mov	r0, r4
 801003c:	f000 f9a4 	bl	8010388 <__multadd>
 8010040:	4682      	mov	sl, r0
 8010042:	e7ea      	b.n	801001a <_dtoa_r+0xb3a>
 8010044:	9b01      	ldr	r3, [sp, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	bfc8      	it	gt
 801004a:	461d      	movgt	r5, r3
 801004c:	9b00      	ldr	r3, [sp, #0]
 801004e:	bfd8      	it	le
 8010050:	2501      	movle	r5, #1
 8010052:	441d      	add	r5, r3
 8010054:	f04f 0800 	mov.w	r8, #0
 8010058:	4651      	mov	r1, sl
 801005a:	2201      	movs	r2, #1
 801005c:	4620      	mov	r0, r4
 801005e:	f000 fb41 	bl	80106e4 <__lshift>
 8010062:	4631      	mov	r1, r6
 8010064:	4682      	mov	sl, r0
 8010066:	f000 fba9 	bl	80107bc <__mcmp>
 801006a:	2800      	cmp	r0, #0
 801006c:	dc96      	bgt.n	800ff9c <_dtoa_r+0xabc>
 801006e:	d102      	bne.n	8010076 <_dtoa_r+0xb96>
 8010070:	f019 0f01 	tst.w	r9, #1
 8010074:	d192      	bne.n	800ff9c <_dtoa_r+0xabc>
 8010076:	462b      	mov	r3, r5
 8010078:	461d      	mov	r5, r3
 801007a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801007e:	2a30      	cmp	r2, #48	; 0x30
 8010080:	d0fa      	beq.n	8010078 <_dtoa_r+0xb98>
 8010082:	e6dd      	b.n	800fe40 <_dtoa_r+0x960>
 8010084:	9a00      	ldr	r2, [sp, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d189      	bne.n	800ff9e <_dtoa_r+0xabe>
 801008a:	f10b 0b01 	add.w	fp, fp, #1
 801008e:	2331      	movs	r3, #49	; 0x31
 8010090:	e796      	b.n	800ffc0 <_dtoa_r+0xae0>
 8010092:	4b0a      	ldr	r3, [pc, #40]	; (80100bc <_dtoa_r+0xbdc>)
 8010094:	f7ff ba99 	b.w	800f5ca <_dtoa_r+0xea>
 8010098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801009a:	2b00      	cmp	r3, #0
 801009c:	f47f aa6d 	bne.w	800f57a <_dtoa_r+0x9a>
 80100a0:	4b07      	ldr	r3, [pc, #28]	; (80100c0 <_dtoa_r+0xbe0>)
 80100a2:	f7ff ba92 	b.w	800f5ca <_dtoa_r+0xea>
 80100a6:	9b01      	ldr	r3, [sp, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	dcb5      	bgt.n	8010018 <_dtoa_r+0xb38>
 80100ac:	9b07      	ldr	r3, [sp, #28]
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	f73f aeb1 	bgt.w	800fe16 <_dtoa_r+0x936>
 80100b4:	e7b0      	b.n	8010018 <_dtoa_r+0xb38>
 80100b6:	bf00      	nop
 80100b8:	08011c28 	.word	0x08011c28
 80100bc:	08011b88 	.word	0x08011b88
 80100c0:	08011bac 	.word	0x08011bac

080100c4 <_free_r>:
 80100c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100c6:	2900      	cmp	r1, #0
 80100c8:	d044      	beq.n	8010154 <_free_r+0x90>
 80100ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100ce:	9001      	str	r0, [sp, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f1a1 0404 	sub.w	r4, r1, #4
 80100d6:	bfb8      	it	lt
 80100d8:	18e4      	addlt	r4, r4, r3
 80100da:	f000 f8e7 	bl	80102ac <__malloc_lock>
 80100de:	4a1e      	ldr	r2, [pc, #120]	; (8010158 <_free_r+0x94>)
 80100e0:	9801      	ldr	r0, [sp, #4]
 80100e2:	6813      	ldr	r3, [r2, #0]
 80100e4:	b933      	cbnz	r3, 80100f4 <_free_r+0x30>
 80100e6:	6063      	str	r3, [r4, #4]
 80100e8:	6014      	str	r4, [r2, #0]
 80100ea:	b003      	add	sp, #12
 80100ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100f0:	f000 b8e2 	b.w	80102b8 <__malloc_unlock>
 80100f4:	42a3      	cmp	r3, r4
 80100f6:	d908      	bls.n	801010a <_free_r+0x46>
 80100f8:	6825      	ldr	r5, [r4, #0]
 80100fa:	1961      	adds	r1, r4, r5
 80100fc:	428b      	cmp	r3, r1
 80100fe:	bf01      	itttt	eq
 8010100:	6819      	ldreq	r1, [r3, #0]
 8010102:	685b      	ldreq	r3, [r3, #4]
 8010104:	1949      	addeq	r1, r1, r5
 8010106:	6021      	streq	r1, [r4, #0]
 8010108:	e7ed      	b.n	80100e6 <_free_r+0x22>
 801010a:	461a      	mov	r2, r3
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	b10b      	cbz	r3, 8010114 <_free_r+0x50>
 8010110:	42a3      	cmp	r3, r4
 8010112:	d9fa      	bls.n	801010a <_free_r+0x46>
 8010114:	6811      	ldr	r1, [r2, #0]
 8010116:	1855      	adds	r5, r2, r1
 8010118:	42a5      	cmp	r5, r4
 801011a:	d10b      	bne.n	8010134 <_free_r+0x70>
 801011c:	6824      	ldr	r4, [r4, #0]
 801011e:	4421      	add	r1, r4
 8010120:	1854      	adds	r4, r2, r1
 8010122:	42a3      	cmp	r3, r4
 8010124:	6011      	str	r1, [r2, #0]
 8010126:	d1e0      	bne.n	80100ea <_free_r+0x26>
 8010128:	681c      	ldr	r4, [r3, #0]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	6053      	str	r3, [r2, #4]
 801012e:	440c      	add	r4, r1
 8010130:	6014      	str	r4, [r2, #0]
 8010132:	e7da      	b.n	80100ea <_free_r+0x26>
 8010134:	d902      	bls.n	801013c <_free_r+0x78>
 8010136:	230c      	movs	r3, #12
 8010138:	6003      	str	r3, [r0, #0]
 801013a:	e7d6      	b.n	80100ea <_free_r+0x26>
 801013c:	6825      	ldr	r5, [r4, #0]
 801013e:	1961      	adds	r1, r4, r5
 8010140:	428b      	cmp	r3, r1
 8010142:	bf04      	itt	eq
 8010144:	6819      	ldreq	r1, [r3, #0]
 8010146:	685b      	ldreq	r3, [r3, #4]
 8010148:	6063      	str	r3, [r4, #4]
 801014a:	bf04      	itt	eq
 801014c:	1949      	addeq	r1, r1, r5
 801014e:	6021      	streq	r1, [r4, #0]
 8010150:	6054      	str	r4, [r2, #4]
 8010152:	e7ca      	b.n	80100ea <_free_r+0x26>
 8010154:	b003      	add	sp, #12
 8010156:	bd30      	pop	{r4, r5, pc}
 8010158:	2000a010 	.word	0x2000a010

0801015c <malloc>:
 801015c:	4b02      	ldr	r3, [pc, #8]	; (8010168 <malloc+0xc>)
 801015e:	4601      	mov	r1, r0
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	f000 b823 	b.w	80101ac <_malloc_r>
 8010166:	bf00      	nop
 8010168:	200000a0 	.word	0x200000a0

0801016c <sbrk_aligned>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4e0e      	ldr	r6, [pc, #56]	; (80101a8 <sbrk_aligned+0x3c>)
 8010170:	460c      	mov	r4, r1
 8010172:	6831      	ldr	r1, [r6, #0]
 8010174:	4605      	mov	r5, r0
 8010176:	b911      	cbnz	r1, 801017e <sbrk_aligned+0x12>
 8010178:	f001 f808 	bl	801118c <_sbrk_r>
 801017c:	6030      	str	r0, [r6, #0]
 801017e:	4621      	mov	r1, r4
 8010180:	4628      	mov	r0, r5
 8010182:	f001 f803 	bl	801118c <_sbrk_r>
 8010186:	1c43      	adds	r3, r0, #1
 8010188:	d00a      	beq.n	80101a0 <sbrk_aligned+0x34>
 801018a:	1cc4      	adds	r4, r0, #3
 801018c:	f024 0403 	bic.w	r4, r4, #3
 8010190:	42a0      	cmp	r0, r4
 8010192:	d007      	beq.n	80101a4 <sbrk_aligned+0x38>
 8010194:	1a21      	subs	r1, r4, r0
 8010196:	4628      	mov	r0, r5
 8010198:	f000 fff8 	bl	801118c <_sbrk_r>
 801019c:	3001      	adds	r0, #1
 801019e:	d101      	bne.n	80101a4 <sbrk_aligned+0x38>
 80101a0:	f04f 34ff 	mov.w	r4, #4294967295
 80101a4:	4620      	mov	r0, r4
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	2000a014 	.word	0x2000a014

080101ac <_malloc_r>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	1ccd      	adds	r5, r1, #3
 80101b2:	f025 0503 	bic.w	r5, r5, #3
 80101b6:	3508      	adds	r5, #8
 80101b8:	2d0c      	cmp	r5, #12
 80101ba:	bf38      	it	cc
 80101bc:	250c      	movcc	r5, #12
 80101be:	2d00      	cmp	r5, #0
 80101c0:	4607      	mov	r7, r0
 80101c2:	db01      	blt.n	80101c8 <_malloc_r+0x1c>
 80101c4:	42a9      	cmp	r1, r5
 80101c6:	d905      	bls.n	80101d4 <_malloc_r+0x28>
 80101c8:	230c      	movs	r3, #12
 80101ca:	603b      	str	r3, [r7, #0]
 80101cc:	2600      	movs	r6, #0
 80101ce:	4630      	mov	r0, r6
 80101d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80102a8 <_malloc_r+0xfc>
 80101d8:	f000 f868 	bl	80102ac <__malloc_lock>
 80101dc:	f8d8 3000 	ldr.w	r3, [r8]
 80101e0:	461c      	mov	r4, r3
 80101e2:	bb5c      	cbnz	r4, 801023c <_malloc_r+0x90>
 80101e4:	4629      	mov	r1, r5
 80101e6:	4638      	mov	r0, r7
 80101e8:	f7ff ffc0 	bl	801016c <sbrk_aligned>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	4604      	mov	r4, r0
 80101f0:	d155      	bne.n	801029e <_malloc_r+0xf2>
 80101f2:	f8d8 4000 	ldr.w	r4, [r8]
 80101f6:	4626      	mov	r6, r4
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d145      	bne.n	8010288 <_malloc_r+0xdc>
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	d048      	beq.n	8010292 <_malloc_r+0xe6>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	4631      	mov	r1, r6
 8010204:	4638      	mov	r0, r7
 8010206:	eb04 0903 	add.w	r9, r4, r3
 801020a:	f000 ffbf 	bl	801118c <_sbrk_r>
 801020e:	4581      	cmp	r9, r0
 8010210:	d13f      	bne.n	8010292 <_malloc_r+0xe6>
 8010212:	6821      	ldr	r1, [r4, #0]
 8010214:	1a6d      	subs	r5, r5, r1
 8010216:	4629      	mov	r1, r5
 8010218:	4638      	mov	r0, r7
 801021a:	f7ff ffa7 	bl	801016c <sbrk_aligned>
 801021e:	3001      	adds	r0, #1
 8010220:	d037      	beq.n	8010292 <_malloc_r+0xe6>
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	442b      	add	r3, r5
 8010226:	6023      	str	r3, [r4, #0]
 8010228:	f8d8 3000 	ldr.w	r3, [r8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d038      	beq.n	80102a2 <_malloc_r+0xf6>
 8010230:	685a      	ldr	r2, [r3, #4]
 8010232:	42a2      	cmp	r2, r4
 8010234:	d12b      	bne.n	801028e <_malloc_r+0xe2>
 8010236:	2200      	movs	r2, #0
 8010238:	605a      	str	r2, [r3, #4]
 801023a:	e00f      	b.n	801025c <_malloc_r+0xb0>
 801023c:	6822      	ldr	r2, [r4, #0]
 801023e:	1b52      	subs	r2, r2, r5
 8010240:	d41f      	bmi.n	8010282 <_malloc_r+0xd6>
 8010242:	2a0b      	cmp	r2, #11
 8010244:	d917      	bls.n	8010276 <_malloc_r+0xca>
 8010246:	1961      	adds	r1, r4, r5
 8010248:	42a3      	cmp	r3, r4
 801024a:	6025      	str	r5, [r4, #0]
 801024c:	bf18      	it	ne
 801024e:	6059      	strne	r1, [r3, #4]
 8010250:	6863      	ldr	r3, [r4, #4]
 8010252:	bf08      	it	eq
 8010254:	f8c8 1000 	streq.w	r1, [r8]
 8010258:	5162      	str	r2, [r4, r5]
 801025a:	604b      	str	r3, [r1, #4]
 801025c:	4638      	mov	r0, r7
 801025e:	f104 060b 	add.w	r6, r4, #11
 8010262:	f000 f829 	bl	80102b8 <__malloc_unlock>
 8010266:	f026 0607 	bic.w	r6, r6, #7
 801026a:	1d23      	adds	r3, r4, #4
 801026c:	1af2      	subs	r2, r6, r3
 801026e:	d0ae      	beq.n	80101ce <_malloc_r+0x22>
 8010270:	1b9b      	subs	r3, r3, r6
 8010272:	50a3      	str	r3, [r4, r2]
 8010274:	e7ab      	b.n	80101ce <_malloc_r+0x22>
 8010276:	42a3      	cmp	r3, r4
 8010278:	6862      	ldr	r2, [r4, #4]
 801027a:	d1dd      	bne.n	8010238 <_malloc_r+0x8c>
 801027c:	f8c8 2000 	str.w	r2, [r8]
 8010280:	e7ec      	b.n	801025c <_malloc_r+0xb0>
 8010282:	4623      	mov	r3, r4
 8010284:	6864      	ldr	r4, [r4, #4]
 8010286:	e7ac      	b.n	80101e2 <_malloc_r+0x36>
 8010288:	4634      	mov	r4, r6
 801028a:	6876      	ldr	r6, [r6, #4]
 801028c:	e7b4      	b.n	80101f8 <_malloc_r+0x4c>
 801028e:	4613      	mov	r3, r2
 8010290:	e7cc      	b.n	801022c <_malloc_r+0x80>
 8010292:	230c      	movs	r3, #12
 8010294:	603b      	str	r3, [r7, #0]
 8010296:	4638      	mov	r0, r7
 8010298:	f000 f80e 	bl	80102b8 <__malloc_unlock>
 801029c:	e797      	b.n	80101ce <_malloc_r+0x22>
 801029e:	6025      	str	r5, [r4, #0]
 80102a0:	e7dc      	b.n	801025c <_malloc_r+0xb0>
 80102a2:	605b      	str	r3, [r3, #4]
 80102a4:	deff      	udf	#255	; 0xff
 80102a6:	bf00      	nop
 80102a8:	2000a010 	.word	0x2000a010

080102ac <__malloc_lock>:
 80102ac:	4801      	ldr	r0, [pc, #4]	; (80102b4 <__malloc_lock+0x8>)
 80102ae:	f7ff b87f 	b.w	800f3b0 <__retarget_lock_acquire_recursive>
 80102b2:	bf00      	nop
 80102b4:	2000a00c 	.word	0x2000a00c

080102b8 <__malloc_unlock>:
 80102b8:	4801      	ldr	r0, [pc, #4]	; (80102c0 <__malloc_unlock+0x8>)
 80102ba:	f7ff b87a 	b.w	800f3b2 <__retarget_lock_release_recursive>
 80102be:	bf00      	nop
 80102c0:	2000a00c 	.word	0x2000a00c

080102c4 <_Balloc>:
 80102c4:	b570      	push	{r4, r5, r6, lr}
 80102c6:	69c6      	ldr	r6, [r0, #28]
 80102c8:	4604      	mov	r4, r0
 80102ca:	460d      	mov	r5, r1
 80102cc:	b976      	cbnz	r6, 80102ec <_Balloc+0x28>
 80102ce:	2010      	movs	r0, #16
 80102d0:	f7ff ff44 	bl	801015c <malloc>
 80102d4:	4602      	mov	r2, r0
 80102d6:	61e0      	str	r0, [r4, #28]
 80102d8:	b920      	cbnz	r0, 80102e4 <_Balloc+0x20>
 80102da:	4b18      	ldr	r3, [pc, #96]	; (801033c <_Balloc+0x78>)
 80102dc:	4818      	ldr	r0, [pc, #96]	; (8010340 <_Balloc+0x7c>)
 80102de:	216b      	movs	r1, #107	; 0x6b
 80102e0:	f000 ff64 	bl	80111ac <__assert_func>
 80102e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102e8:	6006      	str	r6, [r0, #0]
 80102ea:	60c6      	str	r6, [r0, #12]
 80102ec:	69e6      	ldr	r6, [r4, #28]
 80102ee:	68f3      	ldr	r3, [r6, #12]
 80102f0:	b183      	cbz	r3, 8010314 <_Balloc+0x50>
 80102f2:	69e3      	ldr	r3, [r4, #28]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102fa:	b9b8      	cbnz	r0, 801032c <_Balloc+0x68>
 80102fc:	2101      	movs	r1, #1
 80102fe:	fa01 f605 	lsl.w	r6, r1, r5
 8010302:	1d72      	adds	r2, r6, #5
 8010304:	0092      	lsls	r2, r2, #2
 8010306:	4620      	mov	r0, r4
 8010308:	f000 ff6e 	bl	80111e8 <_calloc_r>
 801030c:	b160      	cbz	r0, 8010328 <_Balloc+0x64>
 801030e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010312:	e00e      	b.n	8010332 <_Balloc+0x6e>
 8010314:	2221      	movs	r2, #33	; 0x21
 8010316:	2104      	movs	r1, #4
 8010318:	4620      	mov	r0, r4
 801031a:	f000 ff65 	bl	80111e8 <_calloc_r>
 801031e:	69e3      	ldr	r3, [r4, #28]
 8010320:	60f0      	str	r0, [r6, #12]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1e4      	bne.n	80102f2 <_Balloc+0x2e>
 8010328:	2000      	movs	r0, #0
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	6802      	ldr	r2, [r0, #0]
 801032e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010332:	2300      	movs	r3, #0
 8010334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010338:	e7f7      	b.n	801032a <_Balloc+0x66>
 801033a:	bf00      	nop
 801033c:	08011bb9 	.word	0x08011bb9
 8010340:	08011c39 	.word	0x08011c39

08010344 <_Bfree>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	69c6      	ldr	r6, [r0, #28]
 8010348:	4605      	mov	r5, r0
 801034a:	460c      	mov	r4, r1
 801034c:	b976      	cbnz	r6, 801036c <_Bfree+0x28>
 801034e:	2010      	movs	r0, #16
 8010350:	f7ff ff04 	bl	801015c <malloc>
 8010354:	4602      	mov	r2, r0
 8010356:	61e8      	str	r0, [r5, #28]
 8010358:	b920      	cbnz	r0, 8010364 <_Bfree+0x20>
 801035a:	4b09      	ldr	r3, [pc, #36]	; (8010380 <_Bfree+0x3c>)
 801035c:	4809      	ldr	r0, [pc, #36]	; (8010384 <_Bfree+0x40>)
 801035e:	218f      	movs	r1, #143	; 0x8f
 8010360:	f000 ff24 	bl	80111ac <__assert_func>
 8010364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010368:	6006      	str	r6, [r0, #0]
 801036a:	60c6      	str	r6, [r0, #12]
 801036c:	b13c      	cbz	r4, 801037e <_Bfree+0x3a>
 801036e:	69eb      	ldr	r3, [r5, #28]
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010378:	6021      	str	r1, [r4, #0]
 801037a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	08011bb9 	.word	0x08011bb9
 8010384:	08011c39 	.word	0x08011c39

08010388 <__multadd>:
 8010388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038c:	690d      	ldr	r5, [r1, #16]
 801038e:	4607      	mov	r7, r0
 8010390:	460c      	mov	r4, r1
 8010392:	461e      	mov	r6, r3
 8010394:	f101 0c14 	add.w	ip, r1, #20
 8010398:	2000      	movs	r0, #0
 801039a:	f8dc 3000 	ldr.w	r3, [ip]
 801039e:	b299      	uxth	r1, r3
 80103a0:	fb02 6101 	mla	r1, r2, r1, r6
 80103a4:	0c1e      	lsrs	r6, r3, #16
 80103a6:	0c0b      	lsrs	r3, r1, #16
 80103a8:	fb02 3306 	mla	r3, r2, r6, r3
 80103ac:	b289      	uxth	r1, r1
 80103ae:	3001      	adds	r0, #1
 80103b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80103b4:	4285      	cmp	r5, r0
 80103b6:	f84c 1b04 	str.w	r1, [ip], #4
 80103ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80103be:	dcec      	bgt.n	801039a <__multadd+0x12>
 80103c0:	b30e      	cbz	r6, 8010406 <__multadd+0x7e>
 80103c2:	68a3      	ldr	r3, [r4, #8]
 80103c4:	42ab      	cmp	r3, r5
 80103c6:	dc19      	bgt.n	80103fc <__multadd+0x74>
 80103c8:	6861      	ldr	r1, [r4, #4]
 80103ca:	4638      	mov	r0, r7
 80103cc:	3101      	adds	r1, #1
 80103ce:	f7ff ff79 	bl	80102c4 <_Balloc>
 80103d2:	4680      	mov	r8, r0
 80103d4:	b928      	cbnz	r0, 80103e2 <__multadd+0x5a>
 80103d6:	4602      	mov	r2, r0
 80103d8:	4b0c      	ldr	r3, [pc, #48]	; (801040c <__multadd+0x84>)
 80103da:	480d      	ldr	r0, [pc, #52]	; (8010410 <__multadd+0x88>)
 80103dc:	21ba      	movs	r1, #186	; 0xba
 80103de:	f000 fee5 	bl	80111ac <__assert_func>
 80103e2:	6922      	ldr	r2, [r4, #16]
 80103e4:	3202      	adds	r2, #2
 80103e6:	f104 010c 	add.w	r1, r4, #12
 80103ea:	0092      	lsls	r2, r2, #2
 80103ec:	300c      	adds	r0, #12
 80103ee:	f7fe ffe1 	bl	800f3b4 <memcpy>
 80103f2:	4621      	mov	r1, r4
 80103f4:	4638      	mov	r0, r7
 80103f6:	f7ff ffa5 	bl	8010344 <_Bfree>
 80103fa:	4644      	mov	r4, r8
 80103fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010400:	3501      	adds	r5, #1
 8010402:	615e      	str	r6, [r3, #20]
 8010404:	6125      	str	r5, [r4, #16]
 8010406:	4620      	mov	r0, r4
 8010408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040c:	08011c28 	.word	0x08011c28
 8010410:	08011c39 	.word	0x08011c39

08010414 <__hi0bits>:
 8010414:	0c03      	lsrs	r3, r0, #16
 8010416:	041b      	lsls	r3, r3, #16
 8010418:	b9d3      	cbnz	r3, 8010450 <__hi0bits+0x3c>
 801041a:	0400      	lsls	r0, r0, #16
 801041c:	2310      	movs	r3, #16
 801041e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010422:	bf04      	itt	eq
 8010424:	0200      	lsleq	r0, r0, #8
 8010426:	3308      	addeq	r3, #8
 8010428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801042c:	bf04      	itt	eq
 801042e:	0100      	lsleq	r0, r0, #4
 8010430:	3304      	addeq	r3, #4
 8010432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010436:	bf04      	itt	eq
 8010438:	0080      	lsleq	r0, r0, #2
 801043a:	3302      	addeq	r3, #2
 801043c:	2800      	cmp	r0, #0
 801043e:	db05      	blt.n	801044c <__hi0bits+0x38>
 8010440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010444:	f103 0301 	add.w	r3, r3, #1
 8010448:	bf08      	it	eq
 801044a:	2320      	moveq	r3, #32
 801044c:	4618      	mov	r0, r3
 801044e:	4770      	bx	lr
 8010450:	2300      	movs	r3, #0
 8010452:	e7e4      	b.n	801041e <__hi0bits+0xa>

08010454 <__lo0bits>:
 8010454:	6803      	ldr	r3, [r0, #0]
 8010456:	f013 0207 	ands.w	r2, r3, #7
 801045a:	d00c      	beq.n	8010476 <__lo0bits+0x22>
 801045c:	07d9      	lsls	r1, r3, #31
 801045e:	d422      	bmi.n	80104a6 <__lo0bits+0x52>
 8010460:	079a      	lsls	r2, r3, #30
 8010462:	bf49      	itett	mi
 8010464:	085b      	lsrmi	r3, r3, #1
 8010466:	089b      	lsrpl	r3, r3, #2
 8010468:	6003      	strmi	r3, [r0, #0]
 801046a:	2201      	movmi	r2, #1
 801046c:	bf5c      	itt	pl
 801046e:	6003      	strpl	r3, [r0, #0]
 8010470:	2202      	movpl	r2, #2
 8010472:	4610      	mov	r0, r2
 8010474:	4770      	bx	lr
 8010476:	b299      	uxth	r1, r3
 8010478:	b909      	cbnz	r1, 801047e <__lo0bits+0x2a>
 801047a:	0c1b      	lsrs	r3, r3, #16
 801047c:	2210      	movs	r2, #16
 801047e:	b2d9      	uxtb	r1, r3
 8010480:	b909      	cbnz	r1, 8010486 <__lo0bits+0x32>
 8010482:	3208      	adds	r2, #8
 8010484:	0a1b      	lsrs	r3, r3, #8
 8010486:	0719      	lsls	r1, r3, #28
 8010488:	bf04      	itt	eq
 801048a:	091b      	lsreq	r3, r3, #4
 801048c:	3204      	addeq	r2, #4
 801048e:	0799      	lsls	r1, r3, #30
 8010490:	bf04      	itt	eq
 8010492:	089b      	lsreq	r3, r3, #2
 8010494:	3202      	addeq	r2, #2
 8010496:	07d9      	lsls	r1, r3, #31
 8010498:	d403      	bmi.n	80104a2 <__lo0bits+0x4e>
 801049a:	085b      	lsrs	r3, r3, #1
 801049c:	f102 0201 	add.w	r2, r2, #1
 80104a0:	d003      	beq.n	80104aa <__lo0bits+0x56>
 80104a2:	6003      	str	r3, [r0, #0]
 80104a4:	e7e5      	b.n	8010472 <__lo0bits+0x1e>
 80104a6:	2200      	movs	r2, #0
 80104a8:	e7e3      	b.n	8010472 <__lo0bits+0x1e>
 80104aa:	2220      	movs	r2, #32
 80104ac:	e7e1      	b.n	8010472 <__lo0bits+0x1e>
	...

080104b0 <__i2b>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	460c      	mov	r4, r1
 80104b4:	2101      	movs	r1, #1
 80104b6:	f7ff ff05 	bl	80102c4 <_Balloc>
 80104ba:	4602      	mov	r2, r0
 80104bc:	b928      	cbnz	r0, 80104ca <__i2b+0x1a>
 80104be:	4b05      	ldr	r3, [pc, #20]	; (80104d4 <__i2b+0x24>)
 80104c0:	4805      	ldr	r0, [pc, #20]	; (80104d8 <__i2b+0x28>)
 80104c2:	f240 1145 	movw	r1, #325	; 0x145
 80104c6:	f000 fe71 	bl	80111ac <__assert_func>
 80104ca:	2301      	movs	r3, #1
 80104cc:	6144      	str	r4, [r0, #20]
 80104ce:	6103      	str	r3, [r0, #16]
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	bf00      	nop
 80104d4:	08011c28 	.word	0x08011c28
 80104d8:	08011c39 	.word	0x08011c39

080104dc <__multiply>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	4691      	mov	r9, r2
 80104e2:	690a      	ldr	r2, [r1, #16]
 80104e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	bfb8      	it	lt
 80104ec:	460b      	movlt	r3, r1
 80104ee:	460c      	mov	r4, r1
 80104f0:	bfbc      	itt	lt
 80104f2:	464c      	movlt	r4, r9
 80104f4:	4699      	movlt	r9, r3
 80104f6:	6927      	ldr	r7, [r4, #16]
 80104f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104fc:	68a3      	ldr	r3, [r4, #8]
 80104fe:	6861      	ldr	r1, [r4, #4]
 8010500:	eb07 060a 	add.w	r6, r7, sl
 8010504:	42b3      	cmp	r3, r6
 8010506:	b085      	sub	sp, #20
 8010508:	bfb8      	it	lt
 801050a:	3101      	addlt	r1, #1
 801050c:	f7ff feda 	bl	80102c4 <_Balloc>
 8010510:	b930      	cbnz	r0, 8010520 <__multiply+0x44>
 8010512:	4602      	mov	r2, r0
 8010514:	4b44      	ldr	r3, [pc, #272]	; (8010628 <__multiply+0x14c>)
 8010516:	4845      	ldr	r0, [pc, #276]	; (801062c <__multiply+0x150>)
 8010518:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801051c:	f000 fe46 	bl	80111ac <__assert_func>
 8010520:	f100 0514 	add.w	r5, r0, #20
 8010524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010528:	462b      	mov	r3, r5
 801052a:	2200      	movs	r2, #0
 801052c:	4543      	cmp	r3, r8
 801052e:	d321      	bcc.n	8010574 <__multiply+0x98>
 8010530:	f104 0314 	add.w	r3, r4, #20
 8010534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010538:	f109 0314 	add.w	r3, r9, #20
 801053c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010540:	9202      	str	r2, [sp, #8]
 8010542:	1b3a      	subs	r2, r7, r4
 8010544:	3a15      	subs	r2, #21
 8010546:	f022 0203 	bic.w	r2, r2, #3
 801054a:	3204      	adds	r2, #4
 801054c:	f104 0115 	add.w	r1, r4, #21
 8010550:	428f      	cmp	r7, r1
 8010552:	bf38      	it	cc
 8010554:	2204      	movcc	r2, #4
 8010556:	9201      	str	r2, [sp, #4]
 8010558:	9a02      	ldr	r2, [sp, #8]
 801055a:	9303      	str	r3, [sp, #12]
 801055c:	429a      	cmp	r2, r3
 801055e:	d80c      	bhi.n	801057a <__multiply+0x9e>
 8010560:	2e00      	cmp	r6, #0
 8010562:	dd03      	ble.n	801056c <__multiply+0x90>
 8010564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010568:	2b00      	cmp	r3, #0
 801056a:	d05b      	beq.n	8010624 <__multiply+0x148>
 801056c:	6106      	str	r6, [r0, #16]
 801056e:	b005      	add	sp, #20
 8010570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010574:	f843 2b04 	str.w	r2, [r3], #4
 8010578:	e7d8      	b.n	801052c <__multiply+0x50>
 801057a:	f8b3 a000 	ldrh.w	sl, [r3]
 801057e:	f1ba 0f00 	cmp.w	sl, #0
 8010582:	d024      	beq.n	80105ce <__multiply+0xf2>
 8010584:	f104 0e14 	add.w	lr, r4, #20
 8010588:	46a9      	mov	r9, r5
 801058a:	f04f 0c00 	mov.w	ip, #0
 801058e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010592:	f8d9 1000 	ldr.w	r1, [r9]
 8010596:	fa1f fb82 	uxth.w	fp, r2
 801059a:	b289      	uxth	r1, r1
 801059c:	fb0a 110b 	mla	r1, sl, fp, r1
 80105a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80105a4:	f8d9 2000 	ldr.w	r2, [r9]
 80105a8:	4461      	add	r1, ip
 80105aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80105b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80105b6:	b289      	uxth	r1, r1
 80105b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105bc:	4577      	cmp	r7, lr
 80105be:	f849 1b04 	str.w	r1, [r9], #4
 80105c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105c6:	d8e2      	bhi.n	801058e <__multiply+0xb2>
 80105c8:	9a01      	ldr	r2, [sp, #4]
 80105ca:	f845 c002 	str.w	ip, [r5, r2]
 80105ce:	9a03      	ldr	r2, [sp, #12]
 80105d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105d4:	3304      	adds	r3, #4
 80105d6:	f1b9 0f00 	cmp.w	r9, #0
 80105da:	d021      	beq.n	8010620 <__multiply+0x144>
 80105dc:	6829      	ldr	r1, [r5, #0]
 80105de:	f104 0c14 	add.w	ip, r4, #20
 80105e2:	46ae      	mov	lr, r5
 80105e4:	f04f 0a00 	mov.w	sl, #0
 80105e8:	f8bc b000 	ldrh.w	fp, [ip]
 80105ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105f0:	fb09 220b 	mla	r2, r9, fp, r2
 80105f4:	4452      	add	r2, sl
 80105f6:	b289      	uxth	r1, r1
 80105f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010600:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010608:	f8be 1000 	ldrh.w	r1, [lr]
 801060c:	fb09 110a 	mla	r1, r9, sl, r1
 8010610:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010614:	4567      	cmp	r7, ip
 8010616:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801061a:	d8e5      	bhi.n	80105e8 <__multiply+0x10c>
 801061c:	9a01      	ldr	r2, [sp, #4]
 801061e:	50a9      	str	r1, [r5, r2]
 8010620:	3504      	adds	r5, #4
 8010622:	e799      	b.n	8010558 <__multiply+0x7c>
 8010624:	3e01      	subs	r6, #1
 8010626:	e79b      	b.n	8010560 <__multiply+0x84>
 8010628:	08011c28 	.word	0x08011c28
 801062c:	08011c39 	.word	0x08011c39

08010630 <__pow5mult>:
 8010630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010634:	4615      	mov	r5, r2
 8010636:	f012 0203 	ands.w	r2, r2, #3
 801063a:	4606      	mov	r6, r0
 801063c:	460f      	mov	r7, r1
 801063e:	d007      	beq.n	8010650 <__pow5mult+0x20>
 8010640:	4c25      	ldr	r4, [pc, #148]	; (80106d8 <__pow5mult+0xa8>)
 8010642:	3a01      	subs	r2, #1
 8010644:	2300      	movs	r3, #0
 8010646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801064a:	f7ff fe9d 	bl	8010388 <__multadd>
 801064e:	4607      	mov	r7, r0
 8010650:	10ad      	asrs	r5, r5, #2
 8010652:	d03d      	beq.n	80106d0 <__pow5mult+0xa0>
 8010654:	69f4      	ldr	r4, [r6, #28]
 8010656:	b97c      	cbnz	r4, 8010678 <__pow5mult+0x48>
 8010658:	2010      	movs	r0, #16
 801065a:	f7ff fd7f 	bl	801015c <malloc>
 801065e:	4602      	mov	r2, r0
 8010660:	61f0      	str	r0, [r6, #28]
 8010662:	b928      	cbnz	r0, 8010670 <__pow5mult+0x40>
 8010664:	4b1d      	ldr	r3, [pc, #116]	; (80106dc <__pow5mult+0xac>)
 8010666:	481e      	ldr	r0, [pc, #120]	; (80106e0 <__pow5mult+0xb0>)
 8010668:	f240 11b3 	movw	r1, #435	; 0x1b3
 801066c:	f000 fd9e 	bl	80111ac <__assert_func>
 8010670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010674:	6004      	str	r4, [r0, #0]
 8010676:	60c4      	str	r4, [r0, #12]
 8010678:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801067c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010680:	b94c      	cbnz	r4, 8010696 <__pow5mult+0x66>
 8010682:	f240 2171 	movw	r1, #625	; 0x271
 8010686:	4630      	mov	r0, r6
 8010688:	f7ff ff12 	bl	80104b0 <__i2b>
 801068c:	2300      	movs	r3, #0
 801068e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010692:	4604      	mov	r4, r0
 8010694:	6003      	str	r3, [r0, #0]
 8010696:	f04f 0900 	mov.w	r9, #0
 801069a:	07eb      	lsls	r3, r5, #31
 801069c:	d50a      	bpl.n	80106b4 <__pow5mult+0x84>
 801069e:	4639      	mov	r1, r7
 80106a0:	4622      	mov	r2, r4
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff ff1a 	bl	80104dc <__multiply>
 80106a8:	4639      	mov	r1, r7
 80106aa:	4680      	mov	r8, r0
 80106ac:	4630      	mov	r0, r6
 80106ae:	f7ff fe49 	bl	8010344 <_Bfree>
 80106b2:	4647      	mov	r7, r8
 80106b4:	106d      	asrs	r5, r5, #1
 80106b6:	d00b      	beq.n	80106d0 <__pow5mult+0xa0>
 80106b8:	6820      	ldr	r0, [r4, #0]
 80106ba:	b938      	cbnz	r0, 80106cc <__pow5mult+0x9c>
 80106bc:	4622      	mov	r2, r4
 80106be:	4621      	mov	r1, r4
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7ff ff0b 	bl	80104dc <__multiply>
 80106c6:	6020      	str	r0, [r4, #0]
 80106c8:	f8c0 9000 	str.w	r9, [r0]
 80106cc:	4604      	mov	r4, r0
 80106ce:	e7e4      	b.n	801069a <__pow5mult+0x6a>
 80106d0:	4638      	mov	r0, r7
 80106d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d6:	bf00      	nop
 80106d8:	08011d88 	.word	0x08011d88
 80106dc:	08011bb9 	.word	0x08011bb9
 80106e0:	08011c39 	.word	0x08011c39

080106e4 <__lshift>:
 80106e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106e8:	460c      	mov	r4, r1
 80106ea:	6849      	ldr	r1, [r1, #4]
 80106ec:	6923      	ldr	r3, [r4, #16]
 80106ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106f2:	68a3      	ldr	r3, [r4, #8]
 80106f4:	4607      	mov	r7, r0
 80106f6:	4691      	mov	r9, r2
 80106f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106fc:	f108 0601 	add.w	r6, r8, #1
 8010700:	42b3      	cmp	r3, r6
 8010702:	db0b      	blt.n	801071c <__lshift+0x38>
 8010704:	4638      	mov	r0, r7
 8010706:	f7ff fddd 	bl	80102c4 <_Balloc>
 801070a:	4605      	mov	r5, r0
 801070c:	b948      	cbnz	r0, 8010722 <__lshift+0x3e>
 801070e:	4602      	mov	r2, r0
 8010710:	4b28      	ldr	r3, [pc, #160]	; (80107b4 <__lshift+0xd0>)
 8010712:	4829      	ldr	r0, [pc, #164]	; (80107b8 <__lshift+0xd4>)
 8010714:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010718:	f000 fd48 	bl	80111ac <__assert_func>
 801071c:	3101      	adds	r1, #1
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	e7ee      	b.n	8010700 <__lshift+0x1c>
 8010722:	2300      	movs	r3, #0
 8010724:	f100 0114 	add.w	r1, r0, #20
 8010728:	f100 0210 	add.w	r2, r0, #16
 801072c:	4618      	mov	r0, r3
 801072e:	4553      	cmp	r3, sl
 8010730:	db33      	blt.n	801079a <__lshift+0xb6>
 8010732:	6920      	ldr	r0, [r4, #16]
 8010734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010738:	f104 0314 	add.w	r3, r4, #20
 801073c:	f019 091f 	ands.w	r9, r9, #31
 8010740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010748:	d02b      	beq.n	80107a2 <__lshift+0xbe>
 801074a:	f1c9 0e20 	rsb	lr, r9, #32
 801074e:	468a      	mov	sl, r1
 8010750:	2200      	movs	r2, #0
 8010752:	6818      	ldr	r0, [r3, #0]
 8010754:	fa00 f009 	lsl.w	r0, r0, r9
 8010758:	4310      	orrs	r0, r2
 801075a:	f84a 0b04 	str.w	r0, [sl], #4
 801075e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010762:	459c      	cmp	ip, r3
 8010764:	fa22 f20e 	lsr.w	r2, r2, lr
 8010768:	d8f3      	bhi.n	8010752 <__lshift+0x6e>
 801076a:	ebac 0304 	sub.w	r3, ip, r4
 801076e:	3b15      	subs	r3, #21
 8010770:	f023 0303 	bic.w	r3, r3, #3
 8010774:	3304      	adds	r3, #4
 8010776:	f104 0015 	add.w	r0, r4, #21
 801077a:	4584      	cmp	ip, r0
 801077c:	bf38      	it	cc
 801077e:	2304      	movcc	r3, #4
 8010780:	50ca      	str	r2, [r1, r3]
 8010782:	b10a      	cbz	r2, 8010788 <__lshift+0xa4>
 8010784:	f108 0602 	add.w	r6, r8, #2
 8010788:	3e01      	subs	r6, #1
 801078a:	4638      	mov	r0, r7
 801078c:	612e      	str	r6, [r5, #16]
 801078e:	4621      	mov	r1, r4
 8010790:	f7ff fdd8 	bl	8010344 <_Bfree>
 8010794:	4628      	mov	r0, r5
 8010796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801079a:	f842 0f04 	str.w	r0, [r2, #4]!
 801079e:	3301      	adds	r3, #1
 80107a0:	e7c5      	b.n	801072e <__lshift+0x4a>
 80107a2:	3904      	subs	r1, #4
 80107a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80107ac:	459c      	cmp	ip, r3
 80107ae:	d8f9      	bhi.n	80107a4 <__lshift+0xc0>
 80107b0:	e7ea      	b.n	8010788 <__lshift+0xa4>
 80107b2:	bf00      	nop
 80107b4:	08011c28 	.word	0x08011c28
 80107b8:	08011c39 	.word	0x08011c39

080107bc <__mcmp>:
 80107bc:	b530      	push	{r4, r5, lr}
 80107be:	6902      	ldr	r2, [r0, #16]
 80107c0:	690c      	ldr	r4, [r1, #16]
 80107c2:	1b12      	subs	r2, r2, r4
 80107c4:	d10e      	bne.n	80107e4 <__mcmp+0x28>
 80107c6:	f100 0314 	add.w	r3, r0, #20
 80107ca:	3114      	adds	r1, #20
 80107cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107dc:	42a5      	cmp	r5, r4
 80107de:	d003      	beq.n	80107e8 <__mcmp+0x2c>
 80107e0:	d305      	bcc.n	80107ee <__mcmp+0x32>
 80107e2:	2201      	movs	r2, #1
 80107e4:	4610      	mov	r0, r2
 80107e6:	bd30      	pop	{r4, r5, pc}
 80107e8:	4283      	cmp	r3, r0
 80107ea:	d3f3      	bcc.n	80107d4 <__mcmp+0x18>
 80107ec:	e7fa      	b.n	80107e4 <__mcmp+0x28>
 80107ee:	f04f 32ff 	mov.w	r2, #4294967295
 80107f2:	e7f7      	b.n	80107e4 <__mcmp+0x28>

080107f4 <__mdiff>:
 80107f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	460c      	mov	r4, r1
 80107fa:	4606      	mov	r6, r0
 80107fc:	4611      	mov	r1, r2
 80107fe:	4620      	mov	r0, r4
 8010800:	4690      	mov	r8, r2
 8010802:	f7ff ffdb 	bl	80107bc <__mcmp>
 8010806:	1e05      	subs	r5, r0, #0
 8010808:	d110      	bne.n	801082c <__mdiff+0x38>
 801080a:	4629      	mov	r1, r5
 801080c:	4630      	mov	r0, r6
 801080e:	f7ff fd59 	bl	80102c4 <_Balloc>
 8010812:	b930      	cbnz	r0, 8010822 <__mdiff+0x2e>
 8010814:	4b3a      	ldr	r3, [pc, #232]	; (8010900 <__mdiff+0x10c>)
 8010816:	4602      	mov	r2, r0
 8010818:	f240 2137 	movw	r1, #567	; 0x237
 801081c:	4839      	ldr	r0, [pc, #228]	; (8010904 <__mdiff+0x110>)
 801081e:	f000 fcc5 	bl	80111ac <__assert_func>
 8010822:	2301      	movs	r3, #1
 8010824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	bfa4      	itt	ge
 801082e:	4643      	movge	r3, r8
 8010830:	46a0      	movge	r8, r4
 8010832:	4630      	mov	r0, r6
 8010834:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010838:	bfa6      	itte	ge
 801083a:	461c      	movge	r4, r3
 801083c:	2500      	movge	r5, #0
 801083e:	2501      	movlt	r5, #1
 8010840:	f7ff fd40 	bl	80102c4 <_Balloc>
 8010844:	b920      	cbnz	r0, 8010850 <__mdiff+0x5c>
 8010846:	4b2e      	ldr	r3, [pc, #184]	; (8010900 <__mdiff+0x10c>)
 8010848:	4602      	mov	r2, r0
 801084a:	f240 2145 	movw	r1, #581	; 0x245
 801084e:	e7e5      	b.n	801081c <__mdiff+0x28>
 8010850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010854:	6926      	ldr	r6, [r4, #16]
 8010856:	60c5      	str	r5, [r0, #12]
 8010858:	f104 0914 	add.w	r9, r4, #20
 801085c:	f108 0514 	add.w	r5, r8, #20
 8010860:	f100 0e14 	add.w	lr, r0, #20
 8010864:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010868:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801086c:	f108 0210 	add.w	r2, r8, #16
 8010870:	46f2      	mov	sl, lr
 8010872:	2100      	movs	r1, #0
 8010874:	f859 3b04 	ldr.w	r3, [r9], #4
 8010878:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801087c:	fa11 f88b 	uxtah	r8, r1, fp
 8010880:	b299      	uxth	r1, r3
 8010882:	0c1b      	lsrs	r3, r3, #16
 8010884:	eba8 0801 	sub.w	r8, r8, r1
 8010888:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801088c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010890:	fa1f f888 	uxth.w	r8, r8
 8010894:	1419      	asrs	r1, r3, #16
 8010896:	454e      	cmp	r6, r9
 8010898:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801089c:	f84a 3b04 	str.w	r3, [sl], #4
 80108a0:	d8e8      	bhi.n	8010874 <__mdiff+0x80>
 80108a2:	1b33      	subs	r3, r6, r4
 80108a4:	3b15      	subs	r3, #21
 80108a6:	f023 0303 	bic.w	r3, r3, #3
 80108aa:	3304      	adds	r3, #4
 80108ac:	3415      	adds	r4, #21
 80108ae:	42a6      	cmp	r6, r4
 80108b0:	bf38      	it	cc
 80108b2:	2304      	movcc	r3, #4
 80108b4:	441d      	add	r5, r3
 80108b6:	4473      	add	r3, lr
 80108b8:	469e      	mov	lr, r3
 80108ba:	462e      	mov	r6, r5
 80108bc:	4566      	cmp	r6, ip
 80108be:	d30e      	bcc.n	80108de <__mdiff+0xea>
 80108c0:	f10c 0203 	add.w	r2, ip, #3
 80108c4:	1b52      	subs	r2, r2, r5
 80108c6:	f022 0203 	bic.w	r2, r2, #3
 80108ca:	3d03      	subs	r5, #3
 80108cc:	45ac      	cmp	ip, r5
 80108ce:	bf38      	it	cc
 80108d0:	2200      	movcc	r2, #0
 80108d2:	4413      	add	r3, r2
 80108d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80108d8:	b17a      	cbz	r2, 80108fa <__mdiff+0x106>
 80108da:	6107      	str	r7, [r0, #16]
 80108dc:	e7a4      	b.n	8010828 <__mdiff+0x34>
 80108de:	f856 8b04 	ldr.w	r8, [r6], #4
 80108e2:	fa11 f288 	uxtah	r2, r1, r8
 80108e6:	1414      	asrs	r4, r2, #16
 80108e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108ec:	b292      	uxth	r2, r2
 80108ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108f2:	f84e 2b04 	str.w	r2, [lr], #4
 80108f6:	1421      	asrs	r1, r4, #16
 80108f8:	e7e0      	b.n	80108bc <__mdiff+0xc8>
 80108fa:	3f01      	subs	r7, #1
 80108fc:	e7ea      	b.n	80108d4 <__mdiff+0xe0>
 80108fe:	bf00      	nop
 8010900:	08011c28 	.word	0x08011c28
 8010904:	08011c39 	.word	0x08011c39

08010908 <__d2b>:
 8010908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801090c:	460f      	mov	r7, r1
 801090e:	2101      	movs	r1, #1
 8010910:	ec59 8b10 	vmov	r8, r9, d0
 8010914:	4616      	mov	r6, r2
 8010916:	f7ff fcd5 	bl	80102c4 <_Balloc>
 801091a:	4604      	mov	r4, r0
 801091c:	b930      	cbnz	r0, 801092c <__d2b+0x24>
 801091e:	4602      	mov	r2, r0
 8010920:	4b24      	ldr	r3, [pc, #144]	; (80109b4 <__d2b+0xac>)
 8010922:	4825      	ldr	r0, [pc, #148]	; (80109b8 <__d2b+0xb0>)
 8010924:	f240 310f 	movw	r1, #783	; 0x30f
 8010928:	f000 fc40 	bl	80111ac <__assert_func>
 801092c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010934:	bb2d      	cbnz	r5, 8010982 <__d2b+0x7a>
 8010936:	9301      	str	r3, [sp, #4]
 8010938:	f1b8 0300 	subs.w	r3, r8, #0
 801093c:	d026      	beq.n	801098c <__d2b+0x84>
 801093e:	4668      	mov	r0, sp
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	f7ff fd87 	bl	8010454 <__lo0bits>
 8010946:	e9dd 1200 	ldrd	r1, r2, [sp]
 801094a:	b1e8      	cbz	r0, 8010988 <__d2b+0x80>
 801094c:	f1c0 0320 	rsb	r3, r0, #32
 8010950:	fa02 f303 	lsl.w	r3, r2, r3
 8010954:	430b      	orrs	r3, r1
 8010956:	40c2      	lsrs	r2, r0
 8010958:	6163      	str	r3, [r4, #20]
 801095a:	9201      	str	r2, [sp, #4]
 801095c:	9b01      	ldr	r3, [sp, #4]
 801095e:	61a3      	str	r3, [r4, #24]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bf14      	ite	ne
 8010964:	2202      	movne	r2, #2
 8010966:	2201      	moveq	r2, #1
 8010968:	6122      	str	r2, [r4, #16]
 801096a:	b1bd      	cbz	r5, 801099c <__d2b+0x94>
 801096c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010970:	4405      	add	r5, r0
 8010972:	603d      	str	r5, [r7, #0]
 8010974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010978:	6030      	str	r0, [r6, #0]
 801097a:	4620      	mov	r0, r4
 801097c:	b003      	add	sp, #12
 801097e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010986:	e7d6      	b.n	8010936 <__d2b+0x2e>
 8010988:	6161      	str	r1, [r4, #20]
 801098a:	e7e7      	b.n	801095c <__d2b+0x54>
 801098c:	a801      	add	r0, sp, #4
 801098e:	f7ff fd61 	bl	8010454 <__lo0bits>
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	6163      	str	r3, [r4, #20]
 8010996:	3020      	adds	r0, #32
 8010998:	2201      	movs	r2, #1
 801099a:	e7e5      	b.n	8010968 <__d2b+0x60>
 801099c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109a4:	6038      	str	r0, [r7, #0]
 80109a6:	6918      	ldr	r0, [r3, #16]
 80109a8:	f7ff fd34 	bl	8010414 <__hi0bits>
 80109ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109b0:	e7e2      	b.n	8010978 <__d2b+0x70>
 80109b2:	bf00      	nop
 80109b4:	08011c28 	.word	0x08011c28
 80109b8:	08011c39 	.word	0x08011c39

080109bc <__ssputs_r>:
 80109bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c0:	688e      	ldr	r6, [r1, #8]
 80109c2:	461f      	mov	r7, r3
 80109c4:	42be      	cmp	r6, r7
 80109c6:	680b      	ldr	r3, [r1, #0]
 80109c8:	4682      	mov	sl, r0
 80109ca:	460c      	mov	r4, r1
 80109cc:	4690      	mov	r8, r2
 80109ce:	d82c      	bhi.n	8010a2a <__ssputs_r+0x6e>
 80109d0:	898a      	ldrh	r2, [r1, #12]
 80109d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109d6:	d026      	beq.n	8010a26 <__ssputs_r+0x6a>
 80109d8:	6965      	ldr	r5, [r4, #20]
 80109da:	6909      	ldr	r1, [r1, #16]
 80109dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109e0:	eba3 0901 	sub.w	r9, r3, r1
 80109e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109e8:	1c7b      	adds	r3, r7, #1
 80109ea:	444b      	add	r3, r9
 80109ec:	106d      	asrs	r5, r5, #1
 80109ee:	429d      	cmp	r5, r3
 80109f0:	bf38      	it	cc
 80109f2:	461d      	movcc	r5, r3
 80109f4:	0553      	lsls	r3, r2, #21
 80109f6:	d527      	bpl.n	8010a48 <__ssputs_r+0x8c>
 80109f8:	4629      	mov	r1, r5
 80109fa:	f7ff fbd7 	bl	80101ac <_malloc_r>
 80109fe:	4606      	mov	r6, r0
 8010a00:	b360      	cbz	r0, 8010a5c <__ssputs_r+0xa0>
 8010a02:	6921      	ldr	r1, [r4, #16]
 8010a04:	464a      	mov	r2, r9
 8010a06:	f7fe fcd5 	bl	800f3b4 <memcpy>
 8010a0a:	89a3      	ldrh	r3, [r4, #12]
 8010a0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a14:	81a3      	strh	r3, [r4, #12]
 8010a16:	6126      	str	r6, [r4, #16]
 8010a18:	6165      	str	r5, [r4, #20]
 8010a1a:	444e      	add	r6, r9
 8010a1c:	eba5 0509 	sub.w	r5, r5, r9
 8010a20:	6026      	str	r6, [r4, #0]
 8010a22:	60a5      	str	r5, [r4, #8]
 8010a24:	463e      	mov	r6, r7
 8010a26:	42be      	cmp	r6, r7
 8010a28:	d900      	bls.n	8010a2c <__ssputs_r+0x70>
 8010a2a:	463e      	mov	r6, r7
 8010a2c:	6820      	ldr	r0, [r4, #0]
 8010a2e:	4632      	mov	r2, r6
 8010a30:	4641      	mov	r1, r8
 8010a32:	f000 fb6f 	bl	8011114 <memmove>
 8010a36:	68a3      	ldr	r3, [r4, #8]
 8010a38:	1b9b      	subs	r3, r3, r6
 8010a3a:	60a3      	str	r3, [r4, #8]
 8010a3c:	6823      	ldr	r3, [r4, #0]
 8010a3e:	4433      	add	r3, r6
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	2000      	movs	r0, #0
 8010a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a48:	462a      	mov	r2, r5
 8010a4a:	f000 fbf5 	bl	8011238 <_realloc_r>
 8010a4e:	4606      	mov	r6, r0
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d1e0      	bne.n	8010a16 <__ssputs_r+0x5a>
 8010a54:	6921      	ldr	r1, [r4, #16]
 8010a56:	4650      	mov	r0, sl
 8010a58:	f7ff fb34 	bl	80100c4 <_free_r>
 8010a5c:	230c      	movs	r3, #12
 8010a5e:	f8ca 3000 	str.w	r3, [sl]
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a68:	81a3      	strh	r3, [r4, #12]
 8010a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6e:	e7e9      	b.n	8010a44 <__ssputs_r+0x88>

08010a70 <_svfiprintf_r>:
 8010a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	4698      	mov	r8, r3
 8010a76:	898b      	ldrh	r3, [r1, #12]
 8010a78:	061b      	lsls	r3, r3, #24
 8010a7a:	b09d      	sub	sp, #116	; 0x74
 8010a7c:	4607      	mov	r7, r0
 8010a7e:	460d      	mov	r5, r1
 8010a80:	4614      	mov	r4, r2
 8010a82:	d50e      	bpl.n	8010aa2 <_svfiprintf_r+0x32>
 8010a84:	690b      	ldr	r3, [r1, #16]
 8010a86:	b963      	cbnz	r3, 8010aa2 <_svfiprintf_r+0x32>
 8010a88:	2140      	movs	r1, #64	; 0x40
 8010a8a:	f7ff fb8f 	bl	80101ac <_malloc_r>
 8010a8e:	6028      	str	r0, [r5, #0]
 8010a90:	6128      	str	r0, [r5, #16]
 8010a92:	b920      	cbnz	r0, 8010a9e <_svfiprintf_r+0x2e>
 8010a94:	230c      	movs	r3, #12
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9c:	e0d0      	b.n	8010c40 <_svfiprintf_r+0x1d0>
 8010a9e:	2340      	movs	r3, #64	; 0x40
 8010aa0:	616b      	str	r3, [r5, #20]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8010aa6:	2320      	movs	r3, #32
 8010aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ab0:	2330      	movs	r3, #48	; 0x30
 8010ab2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c58 <_svfiprintf_r+0x1e8>
 8010ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010aba:	f04f 0901 	mov.w	r9, #1
 8010abe:	4623      	mov	r3, r4
 8010ac0:	469a      	mov	sl, r3
 8010ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac6:	b10a      	cbz	r2, 8010acc <_svfiprintf_r+0x5c>
 8010ac8:	2a25      	cmp	r2, #37	; 0x25
 8010aca:	d1f9      	bne.n	8010ac0 <_svfiprintf_r+0x50>
 8010acc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ad0:	d00b      	beq.n	8010aea <_svfiprintf_r+0x7a>
 8010ad2:	465b      	mov	r3, fp
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4638      	mov	r0, r7
 8010ada:	f7ff ff6f 	bl	80109bc <__ssputs_r>
 8010ade:	3001      	adds	r0, #1
 8010ae0:	f000 80a9 	beq.w	8010c36 <_svfiprintf_r+0x1c6>
 8010ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ae6:	445a      	add	r2, fp
 8010ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8010aea:	f89a 3000 	ldrb.w	r3, [sl]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 80a1 	beq.w	8010c36 <_svfiprintf_r+0x1c6>
 8010af4:	2300      	movs	r3, #0
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295
 8010afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010afe:	f10a 0a01 	add.w	sl, sl, #1
 8010b02:	9304      	str	r3, [sp, #16]
 8010b04:	9307      	str	r3, [sp, #28]
 8010b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8010b0c:	4654      	mov	r4, sl
 8010b0e:	2205      	movs	r2, #5
 8010b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b14:	4850      	ldr	r0, [pc, #320]	; (8010c58 <_svfiprintf_r+0x1e8>)
 8010b16:	f7ef fb8b 	bl	8000230 <memchr>
 8010b1a:	9a04      	ldr	r2, [sp, #16]
 8010b1c:	b9d8      	cbnz	r0, 8010b56 <_svfiprintf_r+0xe6>
 8010b1e:	06d0      	lsls	r0, r2, #27
 8010b20:	bf44      	itt	mi
 8010b22:	2320      	movmi	r3, #32
 8010b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b28:	0711      	lsls	r1, r2, #28
 8010b2a:	bf44      	itt	mi
 8010b2c:	232b      	movmi	r3, #43	; 0x2b
 8010b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b32:	f89a 3000 	ldrb.w	r3, [sl]
 8010b36:	2b2a      	cmp	r3, #42	; 0x2a
 8010b38:	d015      	beq.n	8010b66 <_svfiprintf_r+0xf6>
 8010b3a:	9a07      	ldr	r2, [sp, #28]
 8010b3c:	4654      	mov	r4, sl
 8010b3e:	2000      	movs	r0, #0
 8010b40:	f04f 0c0a 	mov.w	ip, #10
 8010b44:	4621      	mov	r1, r4
 8010b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b4a:	3b30      	subs	r3, #48	; 0x30
 8010b4c:	2b09      	cmp	r3, #9
 8010b4e:	d94d      	bls.n	8010bec <_svfiprintf_r+0x17c>
 8010b50:	b1b0      	cbz	r0, 8010b80 <_svfiprintf_r+0x110>
 8010b52:	9207      	str	r2, [sp, #28]
 8010b54:	e014      	b.n	8010b80 <_svfiprintf_r+0x110>
 8010b56:	eba0 0308 	sub.w	r3, r0, r8
 8010b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	46a2      	mov	sl, r4
 8010b64:	e7d2      	b.n	8010b0c <_svfiprintf_r+0x9c>
 8010b66:	9b03      	ldr	r3, [sp, #12]
 8010b68:	1d19      	adds	r1, r3, #4
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	9103      	str	r1, [sp, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	bfbb      	ittet	lt
 8010b72:	425b      	neglt	r3, r3
 8010b74:	f042 0202 	orrlt.w	r2, r2, #2
 8010b78:	9307      	strge	r3, [sp, #28]
 8010b7a:	9307      	strlt	r3, [sp, #28]
 8010b7c:	bfb8      	it	lt
 8010b7e:	9204      	strlt	r2, [sp, #16]
 8010b80:	7823      	ldrb	r3, [r4, #0]
 8010b82:	2b2e      	cmp	r3, #46	; 0x2e
 8010b84:	d10c      	bne.n	8010ba0 <_svfiprintf_r+0x130>
 8010b86:	7863      	ldrb	r3, [r4, #1]
 8010b88:	2b2a      	cmp	r3, #42	; 0x2a
 8010b8a:	d134      	bne.n	8010bf6 <_svfiprintf_r+0x186>
 8010b8c:	9b03      	ldr	r3, [sp, #12]
 8010b8e:	1d1a      	adds	r2, r3, #4
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	9203      	str	r2, [sp, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bfb8      	it	lt
 8010b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b9c:	3402      	adds	r4, #2
 8010b9e:	9305      	str	r3, [sp, #20]
 8010ba0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010c68 <_svfiprintf_r+0x1f8>
 8010ba4:	7821      	ldrb	r1, [r4, #0]
 8010ba6:	2203      	movs	r2, #3
 8010ba8:	4650      	mov	r0, sl
 8010baa:	f7ef fb41 	bl	8000230 <memchr>
 8010bae:	b138      	cbz	r0, 8010bc0 <_svfiprintf_r+0x150>
 8010bb0:	9b04      	ldr	r3, [sp, #16]
 8010bb2:	eba0 000a 	sub.w	r0, r0, sl
 8010bb6:	2240      	movs	r2, #64	; 0x40
 8010bb8:	4082      	lsls	r2, r0
 8010bba:	4313      	orrs	r3, r2
 8010bbc:	3401      	adds	r4, #1
 8010bbe:	9304      	str	r3, [sp, #16]
 8010bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc4:	4825      	ldr	r0, [pc, #148]	; (8010c5c <_svfiprintf_r+0x1ec>)
 8010bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bca:	2206      	movs	r2, #6
 8010bcc:	f7ef fb30 	bl	8000230 <memchr>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d038      	beq.n	8010c46 <_svfiprintf_r+0x1d6>
 8010bd4:	4b22      	ldr	r3, [pc, #136]	; (8010c60 <_svfiprintf_r+0x1f0>)
 8010bd6:	bb1b      	cbnz	r3, 8010c20 <_svfiprintf_r+0x1b0>
 8010bd8:	9b03      	ldr	r3, [sp, #12]
 8010bda:	3307      	adds	r3, #7
 8010bdc:	f023 0307 	bic.w	r3, r3, #7
 8010be0:	3308      	adds	r3, #8
 8010be2:	9303      	str	r3, [sp, #12]
 8010be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be6:	4433      	add	r3, r6
 8010be8:	9309      	str	r3, [sp, #36]	; 0x24
 8010bea:	e768      	b.n	8010abe <_svfiprintf_r+0x4e>
 8010bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	2001      	movs	r0, #1
 8010bf4:	e7a6      	b.n	8010b44 <_svfiprintf_r+0xd4>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	3401      	adds	r4, #1
 8010bfa:	9305      	str	r3, [sp, #20]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	f04f 0c0a 	mov.w	ip, #10
 8010c02:	4620      	mov	r0, r4
 8010c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c08:	3a30      	subs	r2, #48	; 0x30
 8010c0a:	2a09      	cmp	r2, #9
 8010c0c:	d903      	bls.n	8010c16 <_svfiprintf_r+0x1a6>
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d0c6      	beq.n	8010ba0 <_svfiprintf_r+0x130>
 8010c12:	9105      	str	r1, [sp, #20]
 8010c14:	e7c4      	b.n	8010ba0 <_svfiprintf_r+0x130>
 8010c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e7f0      	b.n	8010c02 <_svfiprintf_r+0x192>
 8010c20:	ab03      	add	r3, sp, #12
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	462a      	mov	r2, r5
 8010c26:	4b0f      	ldr	r3, [pc, #60]	; (8010c64 <_svfiprintf_r+0x1f4>)
 8010c28:	a904      	add	r1, sp, #16
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f7fd fcfe 	bl	800e62c <_printf_float>
 8010c30:	1c42      	adds	r2, r0, #1
 8010c32:	4606      	mov	r6, r0
 8010c34:	d1d6      	bne.n	8010be4 <_svfiprintf_r+0x174>
 8010c36:	89ab      	ldrh	r3, [r5, #12]
 8010c38:	065b      	lsls	r3, r3, #25
 8010c3a:	f53f af2d 	bmi.w	8010a98 <_svfiprintf_r+0x28>
 8010c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c40:	b01d      	add	sp, #116	; 0x74
 8010c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c46:	ab03      	add	r3, sp, #12
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	462a      	mov	r2, r5
 8010c4c:	4b05      	ldr	r3, [pc, #20]	; (8010c64 <_svfiprintf_r+0x1f4>)
 8010c4e:	a904      	add	r1, sp, #16
 8010c50:	4638      	mov	r0, r7
 8010c52:	f7fd ff8f 	bl	800eb74 <_printf_i>
 8010c56:	e7eb      	b.n	8010c30 <_svfiprintf_r+0x1c0>
 8010c58:	08011d94 	.word	0x08011d94
 8010c5c:	08011d9e 	.word	0x08011d9e
 8010c60:	0800e62d 	.word	0x0800e62d
 8010c64:	080109bd 	.word	0x080109bd
 8010c68:	08011d9a 	.word	0x08011d9a

08010c6c <__sfputc_r>:
 8010c6c:	6893      	ldr	r3, [r2, #8]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	b410      	push	{r4}
 8010c74:	6093      	str	r3, [r2, #8]
 8010c76:	da08      	bge.n	8010c8a <__sfputc_r+0x1e>
 8010c78:	6994      	ldr	r4, [r2, #24]
 8010c7a:	42a3      	cmp	r3, r4
 8010c7c:	db01      	blt.n	8010c82 <__sfputc_r+0x16>
 8010c7e:	290a      	cmp	r1, #10
 8010c80:	d103      	bne.n	8010c8a <__sfputc_r+0x1e>
 8010c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c86:	f7fe ba18 	b.w	800f0ba <__swbuf_r>
 8010c8a:	6813      	ldr	r3, [r2, #0]
 8010c8c:	1c58      	adds	r0, r3, #1
 8010c8e:	6010      	str	r0, [r2, #0]
 8010c90:	7019      	strb	r1, [r3, #0]
 8010c92:	4608      	mov	r0, r1
 8010c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c98:	4770      	bx	lr

08010c9a <__sfputs_r>:
 8010c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	460f      	mov	r7, r1
 8010ca0:	4614      	mov	r4, r2
 8010ca2:	18d5      	adds	r5, r2, r3
 8010ca4:	42ac      	cmp	r4, r5
 8010ca6:	d101      	bne.n	8010cac <__sfputs_r+0x12>
 8010ca8:	2000      	movs	r0, #0
 8010caa:	e007      	b.n	8010cbc <__sfputs_r+0x22>
 8010cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb0:	463a      	mov	r2, r7
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	f7ff ffda 	bl	8010c6c <__sfputc_r>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	d1f3      	bne.n	8010ca4 <__sfputs_r+0xa>
 8010cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cc0 <_vfiprintf_r>:
 8010cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	b09d      	sub	sp, #116	; 0x74
 8010cc8:	4614      	mov	r4, r2
 8010cca:	4698      	mov	r8, r3
 8010ccc:	4606      	mov	r6, r0
 8010cce:	b118      	cbz	r0, 8010cd8 <_vfiprintf_r+0x18>
 8010cd0:	6a03      	ldr	r3, [r0, #32]
 8010cd2:	b90b      	cbnz	r3, 8010cd8 <_vfiprintf_r+0x18>
 8010cd4:	f7fe f8ea 	bl	800eeac <__sinit>
 8010cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cda:	07d9      	lsls	r1, r3, #31
 8010cdc:	d405      	bmi.n	8010cea <_vfiprintf_r+0x2a>
 8010cde:	89ab      	ldrh	r3, [r5, #12]
 8010ce0:	059a      	lsls	r2, r3, #22
 8010ce2:	d402      	bmi.n	8010cea <_vfiprintf_r+0x2a>
 8010ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ce6:	f7fe fb63 	bl	800f3b0 <__retarget_lock_acquire_recursive>
 8010cea:	89ab      	ldrh	r3, [r5, #12]
 8010cec:	071b      	lsls	r3, r3, #28
 8010cee:	d501      	bpl.n	8010cf4 <_vfiprintf_r+0x34>
 8010cf0:	692b      	ldr	r3, [r5, #16]
 8010cf2:	b99b      	cbnz	r3, 8010d1c <_vfiprintf_r+0x5c>
 8010cf4:	4629      	mov	r1, r5
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f7fe fa1c 	bl	800f134 <__swsetup_r>
 8010cfc:	b170      	cbz	r0, 8010d1c <_vfiprintf_r+0x5c>
 8010cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d00:	07dc      	lsls	r4, r3, #31
 8010d02:	d504      	bpl.n	8010d0e <_vfiprintf_r+0x4e>
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295
 8010d08:	b01d      	add	sp, #116	; 0x74
 8010d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0e:	89ab      	ldrh	r3, [r5, #12]
 8010d10:	0598      	lsls	r0, r3, #22
 8010d12:	d4f7      	bmi.n	8010d04 <_vfiprintf_r+0x44>
 8010d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d16:	f7fe fb4c 	bl	800f3b2 <__retarget_lock_release_recursive>
 8010d1a:	e7f3      	b.n	8010d04 <_vfiprintf_r+0x44>
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010d20:	2320      	movs	r3, #32
 8010d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d2a:	2330      	movs	r3, #48	; 0x30
 8010d2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010ee0 <_vfiprintf_r+0x220>
 8010d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d34:	f04f 0901 	mov.w	r9, #1
 8010d38:	4623      	mov	r3, r4
 8010d3a:	469a      	mov	sl, r3
 8010d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d40:	b10a      	cbz	r2, 8010d46 <_vfiprintf_r+0x86>
 8010d42:	2a25      	cmp	r2, #37	; 0x25
 8010d44:	d1f9      	bne.n	8010d3a <_vfiprintf_r+0x7a>
 8010d46:	ebba 0b04 	subs.w	fp, sl, r4
 8010d4a:	d00b      	beq.n	8010d64 <_vfiprintf_r+0xa4>
 8010d4c:	465b      	mov	r3, fp
 8010d4e:	4622      	mov	r2, r4
 8010d50:	4629      	mov	r1, r5
 8010d52:	4630      	mov	r0, r6
 8010d54:	f7ff ffa1 	bl	8010c9a <__sfputs_r>
 8010d58:	3001      	adds	r0, #1
 8010d5a:	f000 80a9 	beq.w	8010eb0 <_vfiprintf_r+0x1f0>
 8010d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d60:	445a      	add	r2, fp
 8010d62:	9209      	str	r2, [sp, #36]	; 0x24
 8010d64:	f89a 3000 	ldrb.w	r3, [sl]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 80a1 	beq.w	8010eb0 <_vfiprintf_r+0x1f0>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f04f 32ff 	mov.w	r2, #4294967295
 8010d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d78:	f10a 0a01 	add.w	sl, sl, #1
 8010d7c:	9304      	str	r3, [sp, #16]
 8010d7e:	9307      	str	r3, [sp, #28]
 8010d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d84:	931a      	str	r3, [sp, #104]	; 0x68
 8010d86:	4654      	mov	r4, sl
 8010d88:	2205      	movs	r2, #5
 8010d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d8e:	4854      	ldr	r0, [pc, #336]	; (8010ee0 <_vfiprintf_r+0x220>)
 8010d90:	f7ef fa4e 	bl	8000230 <memchr>
 8010d94:	9a04      	ldr	r2, [sp, #16]
 8010d96:	b9d8      	cbnz	r0, 8010dd0 <_vfiprintf_r+0x110>
 8010d98:	06d1      	lsls	r1, r2, #27
 8010d9a:	bf44      	itt	mi
 8010d9c:	2320      	movmi	r3, #32
 8010d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010da2:	0713      	lsls	r3, r2, #28
 8010da4:	bf44      	itt	mi
 8010da6:	232b      	movmi	r3, #43	; 0x2b
 8010da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dac:	f89a 3000 	ldrb.w	r3, [sl]
 8010db0:	2b2a      	cmp	r3, #42	; 0x2a
 8010db2:	d015      	beq.n	8010de0 <_vfiprintf_r+0x120>
 8010db4:	9a07      	ldr	r2, [sp, #28]
 8010db6:	4654      	mov	r4, sl
 8010db8:	2000      	movs	r0, #0
 8010dba:	f04f 0c0a 	mov.w	ip, #10
 8010dbe:	4621      	mov	r1, r4
 8010dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dc4:	3b30      	subs	r3, #48	; 0x30
 8010dc6:	2b09      	cmp	r3, #9
 8010dc8:	d94d      	bls.n	8010e66 <_vfiprintf_r+0x1a6>
 8010dca:	b1b0      	cbz	r0, 8010dfa <_vfiprintf_r+0x13a>
 8010dcc:	9207      	str	r2, [sp, #28]
 8010dce:	e014      	b.n	8010dfa <_vfiprintf_r+0x13a>
 8010dd0:	eba0 0308 	sub.w	r3, r0, r8
 8010dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	9304      	str	r3, [sp, #16]
 8010ddc:	46a2      	mov	sl, r4
 8010dde:	e7d2      	b.n	8010d86 <_vfiprintf_r+0xc6>
 8010de0:	9b03      	ldr	r3, [sp, #12]
 8010de2:	1d19      	adds	r1, r3, #4
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	9103      	str	r1, [sp, #12]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	bfbb      	ittet	lt
 8010dec:	425b      	neglt	r3, r3
 8010dee:	f042 0202 	orrlt.w	r2, r2, #2
 8010df2:	9307      	strge	r3, [sp, #28]
 8010df4:	9307      	strlt	r3, [sp, #28]
 8010df6:	bfb8      	it	lt
 8010df8:	9204      	strlt	r2, [sp, #16]
 8010dfa:	7823      	ldrb	r3, [r4, #0]
 8010dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8010dfe:	d10c      	bne.n	8010e1a <_vfiprintf_r+0x15a>
 8010e00:	7863      	ldrb	r3, [r4, #1]
 8010e02:	2b2a      	cmp	r3, #42	; 0x2a
 8010e04:	d134      	bne.n	8010e70 <_vfiprintf_r+0x1b0>
 8010e06:	9b03      	ldr	r3, [sp, #12]
 8010e08:	1d1a      	adds	r2, r3, #4
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	9203      	str	r2, [sp, #12]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	bfb8      	it	lt
 8010e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e16:	3402      	adds	r4, #2
 8010e18:	9305      	str	r3, [sp, #20]
 8010e1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ef0 <_vfiprintf_r+0x230>
 8010e1e:	7821      	ldrb	r1, [r4, #0]
 8010e20:	2203      	movs	r2, #3
 8010e22:	4650      	mov	r0, sl
 8010e24:	f7ef fa04 	bl	8000230 <memchr>
 8010e28:	b138      	cbz	r0, 8010e3a <_vfiprintf_r+0x17a>
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	eba0 000a 	sub.w	r0, r0, sl
 8010e30:	2240      	movs	r2, #64	; 0x40
 8010e32:	4082      	lsls	r2, r0
 8010e34:	4313      	orrs	r3, r2
 8010e36:	3401      	adds	r4, #1
 8010e38:	9304      	str	r3, [sp, #16]
 8010e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e3e:	4829      	ldr	r0, [pc, #164]	; (8010ee4 <_vfiprintf_r+0x224>)
 8010e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e44:	2206      	movs	r2, #6
 8010e46:	f7ef f9f3 	bl	8000230 <memchr>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d03f      	beq.n	8010ece <_vfiprintf_r+0x20e>
 8010e4e:	4b26      	ldr	r3, [pc, #152]	; (8010ee8 <_vfiprintf_r+0x228>)
 8010e50:	bb1b      	cbnz	r3, 8010e9a <_vfiprintf_r+0x1da>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	3307      	adds	r3, #7
 8010e56:	f023 0307 	bic.w	r3, r3, #7
 8010e5a:	3308      	adds	r3, #8
 8010e5c:	9303      	str	r3, [sp, #12]
 8010e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e60:	443b      	add	r3, r7
 8010e62:	9309      	str	r3, [sp, #36]	; 0x24
 8010e64:	e768      	b.n	8010d38 <_vfiprintf_r+0x78>
 8010e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e6a:	460c      	mov	r4, r1
 8010e6c:	2001      	movs	r0, #1
 8010e6e:	e7a6      	b.n	8010dbe <_vfiprintf_r+0xfe>
 8010e70:	2300      	movs	r3, #0
 8010e72:	3401      	adds	r4, #1
 8010e74:	9305      	str	r3, [sp, #20]
 8010e76:	4619      	mov	r1, r3
 8010e78:	f04f 0c0a 	mov.w	ip, #10
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e82:	3a30      	subs	r2, #48	; 0x30
 8010e84:	2a09      	cmp	r2, #9
 8010e86:	d903      	bls.n	8010e90 <_vfiprintf_r+0x1d0>
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d0c6      	beq.n	8010e1a <_vfiprintf_r+0x15a>
 8010e8c:	9105      	str	r1, [sp, #20]
 8010e8e:	e7c4      	b.n	8010e1a <_vfiprintf_r+0x15a>
 8010e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e94:	4604      	mov	r4, r0
 8010e96:	2301      	movs	r3, #1
 8010e98:	e7f0      	b.n	8010e7c <_vfiprintf_r+0x1bc>
 8010e9a:	ab03      	add	r3, sp, #12
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4b12      	ldr	r3, [pc, #72]	; (8010eec <_vfiprintf_r+0x22c>)
 8010ea2:	a904      	add	r1, sp, #16
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f7fd fbc1 	bl	800e62c <_printf_float>
 8010eaa:	4607      	mov	r7, r0
 8010eac:	1c78      	adds	r0, r7, #1
 8010eae:	d1d6      	bne.n	8010e5e <_vfiprintf_r+0x19e>
 8010eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eb2:	07d9      	lsls	r1, r3, #31
 8010eb4:	d405      	bmi.n	8010ec2 <_vfiprintf_r+0x202>
 8010eb6:	89ab      	ldrh	r3, [r5, #12]
 8010eb8:	059a      	lsls	r2, r3, #22
 8010eba:	d402      	bmi.n	8010ec2 <_vfiprintf_r+0x202>
 8010ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ebe:	f7fe fa78 	bl	800f3b2 <__retarget_lock_release_recursive>
 8010ec2:	89ab      	ldrh	r3, [r5, #12]
 8010ec4:	065b      	lsls	r3, r3, #25
 8010ec6:	f53f af1d 	bmi.w	8010d04 <_vfiprintf_r+0x44>
 8010eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ecc:	e71c      	b.n	8010d08 <_vfiprintf_r+0x48>
 8010ece:	ab03      	add	r3, sp, #12
 8010ed0:	9300      	str	r3, [sp, #0]
 8010ed2:	462a      	mov	r2, r5
 8010ed4:	4b05      	ldr	r3, [pc, #20]	; (8010eec <_vfiprintf_r+0x22c>)
 8010ed6:	a904      	add	r1, sp, #16
 8010ed8:	4630      	mov	r0, r6
 8010eda:	f7fd fe4b 	bl	800eb74 <_printf_i>
 8010ede:	e7e4      	b.n	8010eaa <_vfiprintf_r+0x1ea>
 8010ee0:	08011d94 	.word	0x08011d94
 8010ee4:	08011d9e 	.word	0x08011d9e
 8010ee8:	0800e62d 	.word	0x0800e62d
 8010eec:	08010c9b 	.word	0x08010c9b
 8010ef0:	08011d9a 	.word	0x08011d9a

08010ef4 <__sflush_r>:
 8010ef4:	898a      	ldrh	r2, [r1, #12]
 8010ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010efa:	4605      	mov	r5, r0
 8010efc:	0710      	lsls	r0, r2, #28
 8010efe:	460c      	mov	r4, r1
 8010f00:	d458      	bmi.n	8010fb4 <__sflush_r+0xc0>
 8010f02:	684b      	ldr	r3, [r1, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	dc05      	bgt.n	8010f14 <__sflush_r+0x20>
 8010f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	dc02      	bgt.n	8010f14 <__sflush_r+0x20>
 8010f0e:	2000      	movs	r0, #0
 8010f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f16:	2e00      	cmp	r6, #0
 8010f18:	d0f9      	beq.n	8010f0e <__sflush_r+0x1a>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f20:	682f      	ldr	r7, [r5, #0]
 8010f22:	6a21      	ldr	r1, [r4, #32]
 8010f24:	602b      	str	r3, [r5, #0]
 8010f26:	d032      	beq.n	8010f8e <__sflush_r+0x9a>
 8010f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	075a      	lsls	r2, r3, #29
 8010f2e:	d505      	bpl.n	8010f3c <__sflush_r+0x48>
 8010f30:	6863      	ldr	r3, [r4, #4]
 8010f32:	1ac0      	subs	r0, r0, r3
 8010f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f36:	b10b      	cbz	r3, 8010f3c <__sflush_r+0x48>
 8010f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f3a:	1ac0      	subs	r0, r0, r3
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4602      	mov	r2, r0
 8010f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f42:	6a21      	ldr	r1, [r4, #32]
 8010f44:	4628      	mov	r0, r5
 8010f46:	47b0      	blx	r6
 8010f48:	1c43      	adds	r3, r0, #1
 8010f4a:	89a3      	ldrh	r3, [r4, #12]
 8010f4c:	d106      	bne.n	8010f5c <__sflush_r+0x68>
 8010f4e:	6829      	ldr	r1, [r5, #0]
 8010f50:	291d      	cmp	r1, #29
 8010f52:	d82b      	bhi.n	8010fac <__sflush_r+0xb8>
 8010f54:	4a29      	ldr	r2, [pc, #164]	; (8010ffc <__sflush_r+0x108>)
 8010f56:	410a      	asrs	r2, r1
 8010f58:	07d6      	lsls	r6, r2, #31
 8010f5a:	d427      	bmi.n	8010fac <__sflush_r+0xb8>
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	6062      	str	r2, [r4, #4]
 8010f60:	04d9      	lsls	r1, r3, #19
 8010f62:	6922      	ldr	r2, [r4, #16]
 8010f64:	6022      	str	r2, [r4, #0]
 8010f66:	d504      	bpl.n	8010f72 <__sflush_r+0x7e>
 8010f68:	1c42      	adds	r2, r0, #1
 8010f6a:	d101      	bne.n	8010f70 <__sflush_r+0x7c>
 8010f6c:	682b      	ldr	r3, [r5, #0]
 8010f6e:	b903      	cbnz	r3, 8010f72 <__sflush_r+0x7e>
 8010f70:	6560      	str	r0, [r4, #84]	; 0x54
 8010f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f74:	602f      	str	r7, [r5, #0]
 8010f76:	2900      	cmp	r1, #0
 8010f78:	d0c9      	beq.n	8010f0e <__sflush_r+0x1a>
 8010f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f7e:	4299      	cmp	r1, r3
 8010f80:	d002      	beq.n	8010f88 <__sflush_r+0x94>
 8010f82:	4628      	mov	r0, r5
 8010f84:	f7ff f89e 	bl	80100c4 <_free_r>
 8010f88:	2000      	movs	r0, #0
 8010f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8010f8c:	e7c0      	b.n	8010f10 <__sflush_r+0x1c>
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4628      	mov	r0, r5
 8010f92:	47b0      	blx	r6
 8010f94:	1c41      	adds	r1, r0, #1
 8010f96:	d1c8      	bne.n	8010f2a <__sflush_r+0x36>
 8010f98:	682b      	ldr	r3, [r5, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d0c5      	beq.n	8010f2a <__sflush_r+0x36>
 8010f9e:	2b1d      	cmp	r3, #29
 8010fa0:	d001      	beq.n	8010fa6 <__sflush_r+0xb2>
 8010fa2:	2b16      	cmp	r3, #22
 8010fa4:	d101      	bne.n	8010faa <__sflush_r+0xb6>
 8010fa6:	602f      	str	r7, [r5, #0]
 8010fa8:	e7b1      	b.n	8010f0e <__sflush_r+0x1a>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fb0:	81a3      	strh	r3, [r4, #12]
 8010fb2:	e7ad      	b.n	8010f10 <__sflush_r+0x1c>
 8010fb4:	690f      	ldr	r7, [r1, #16]
 8010fb6:	2f00      	cmp	r7, #0
 8010fb8:	d0a9      	beq.n	8010f0e <__sflush_r+0x1a>
 8010fba:	0793      	lsls	r3, r2, #30
 8010fbc:	680e      	ldr	r6, [r1, #0]
 8010fbe:	bf08      	it	eq
 8010fc0:	694b      	ldreq	r3, [r1, #20]
 8010fc2:	600f      	str	r7, [r1, #0]
 8010fc4:	bf18      	it	ne
 8010fc6:	2300      	movne	r3, #0
 8010fc8:	eba6 0807 	sub.w	r8, r6, r7
 8010fcc:	608b      	str	r3, [r1, #8]
 8010fce:	f1b8 0f00 	cmp.w	r8, #0
 8010fd2:	dd9c      	ble.n	8010f0e <__sflush_r+0x1a>
 8010fd4:	6a21      	ldr	r1, [r4, #32]
 8010fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fd8:	4643      	mov	r3, r8
 8010fda:	463a      	mov	r2, r7
 8010fdc:	4628      	mov	r0, r5
 8010fde:	47b0      	blx	r6
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	dc06      	bgt.n	8010ff2 <__sflush_r+0xfe>
 8010fe4:	89a3      	ldrh	r3, [r4, #12]
 8010fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fea:	81a3      	strh	r3, [r4, #12]
 8010fec:	f04f 30ff 	mov.w	r0, #4294967295
 8010ff0:	e78e      	b.n	8010f10 <__sflush_r+0x1c>
 8010ff2:	4407      	add	r7, r0
 8010ff4:	eba8 0800 	sub.w	r8, r8, r0
 8010ff8:	e7e9      	b.n	8010fce <__sflush_r+0xda>
 8010ffa:	bf00      	nop
 8010ffc:	dfbffffe 	.word	0xdfbffffe

08011000 <_fflush_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	690b      	ldr	r3, [r1, #16]
 8011004:	4605      	mov	r5, r0
 8011006:	460c      	mov	r4, r1
 8011008:	b913      	cbnz	r3, 8011010 <_fflush_r+0x10>
 801100a:	2500      	movs	r5, #0
 801100c:	4628      	mov	r0, r5
 801100e:	bd38      	pop	{r3, r4, r5, pc}
 8011010:	b118      	cbz	r0, 801101a <_fflush_r+0x1a>
 8011012:	6a03      	ldr	r3, [r0, #32]
 8011014:	b90b      	cbnz	r3, 801101a <_fflush_r+0x1a>
 8011016:	f7fd ff49 	bl	800eeac <__sinit>
 801101a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d0f3      	beq.n	801100a <_fflush_r+0xa>
 8011022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011024:	07d0      	lsls	r0, r2, #31
 8011026:	d404      	bmi.n	8011032 <_fflush_r+0x32>
 8011028:	0599      	lsls	r1, r3, #22
 801102a:	d402      	bmi.n	8011032 <_fflush_r+0x32>
 801102c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801102e:	f7fe f9bf 	bl	800f3b0 <__retarget_lock_acquire_recursive>
 8011032:	4628      	mov	r0, r5
 8011034:	4621      	mov	r1, r4
 8011036:	f7ff ff5d 	bl	8010ef4 <__sflush_r>
 801103a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801103c:	07da      	lsls	r2, r3, #31
 801103e:	4605      	mov	r5, r0
 8011040:	d4e4      	bmi.n	801100c <_fflush_r+0xc>
 8011042:	89a3      	ldrh	r3, [r4, #12]
 8011044:	059b      	lsls	r3, r3, #22
 8011046:	d4e1      	bmi.n	801100c <_fflush_r+0xc>
 8011048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801104a:	f7fe f9b2 	bl	800f3b2 <__retarget_lock_release_recursive>
 801104e:	e7dd      	b.n	801100c <_fflush_r+0xc>

08011050 <__swhatbuf_r>:
 8011050:	b570      	push	{r4, r5, r6, lr}
 8011052:	460c      	mov	r4, r1
 8011054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011058:	2900      	cmp	r1, #0
 801105a:	b096      	sub	sp, #88	; 0x58
 801105c:	4615      	mov	r5, r2
 801105e:	461e      	mov	r6, r3
 8011060:	da0d      	bge.n	801107e <__swhatbuf_r+0x2e>
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011068:	f04f 0100 	mov.w	r1, #0
 801106c:	bf0c      	ite	eq
 801106e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011072:	2340      	movne	r3, #64	; 0x40
 8011074:	2000      	movs	r0, #0
 8011076:	6031      	str	r1, [r6, #0]
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	b016      	add	sp, #88	; 0x58
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	466a      	mov	r2, sp
 8011080:	f000 f862 	bl	8011148 <_fstat_r>
 8011084:	2800      	cmp	r0, #0
 8011086:	dbec      	blt.n	8011062 <__swhatbuf_r+0x12>
 8011088:	9901      	ldr	r1, [sp, #4]
 801108a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801108e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011092:	4259      	negs	r1, r3
 8011094:	4159      	adcs	r1, r3
 8011096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801109a:	e7eb      	b.n	8011074 <__swhatbuf_r+0x24>

0801109c <__smakebuf_r>:
 801109c:	898b      	ldrh	r3, [r1, #12]
 801109e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110a0:	079d      	lsls	r5, r3, #30
 80110a2:	4606      	mov	r6, r0
 80110a4:	460c      	mov	r4, r1
 80110a6:	d507      	bpl.n	80110b8 <__smakebuf_r+0x1c>
 80110a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	6123      	str	r3, [r4, #16]
 80110b0:	2301      	movs	r3, #1
 80110b2:	6163      	str	r3, [r4, #20]
 80110b4:	b002      	add	sp, #8
 80110b6:	bd70      	pop	{r4, r5, r6, pc}
 80110b8:	ab01      	add	r3, sp, #4
 80110ba:	466a      	mov	r2, sp
 80110bc:	f7ff ffc8 	bl	8011050 <__swhatbuf_r>
 80110c0:	9900      	ldr	r1, [sp, #0]
 80110c2:	4605      	mov	r5, r0
 80110c4:	4630      	mov	r0, r6
 80110c6:	f7ff f871 	bl	80101ac <_malloc_r>
 80110ca:	b948      	cbnz	r0, 80110e0 <__smakebuf_r+0x44>
 80110cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d0:	059a      	lsls	r2, r3, #22
 80110d2:	d4ef      	bmi.n	80110b4 <__smakebuf_r+0x18>
 80110d4:	f023 0303 	bic.w	r3, r3, #3
 80110d8:	f043 0302 	orr.w	r3, r3, #2
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	e7e3      	b.n	80110a8 <__smakebuf_r+0xc>
 80110e0:	89a3      	ldrh	r3, [r4, #12]
 80110e2:	6020      	str	r0, [r4, #0]
 80110e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e8:	81a3      	strh	r3, [r4, #12]
 80110ea:	9b00      	ldr	r3, [sp, #0]
 80110ec:	6163      	str	r3, [r4, #20]
 80110ee:	9b01      	ldr	r3, [sp, #4]
 80110f0:	6120      	str	r0, [r4, #16]
 80110f2:	b15b      	cbz	r3, 801110c <__smakebuf_r+0x70>
 80110f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110f8:	4630      	mov	r0, r6
 80110fa:	f000 f837 	bl	801116c <_isatty_r>
 80110fe:	b128      	cbz	r0, 801110c <__smakebuf_r+0x70>
 8011100:	89a3      	ldrh	r3, [r4, #12]
 8011102:	f023 0303 	bic.w	r3, r3, #3
 8011106:	f043 0301 	orr.w	r3, r3, #1
 801110a:	81a3      	strh	r3, [r4, #12]
 801110c:	89a3      	ldrh	r3, [r4, #12]
 801110e:	431d      	orrs	r5, r3
 8011110:	81a5      	strh	r5, [r4, #12]
 8011112:	e7cf      	b.n	80110b4 <__smakebuf_r+0x18>

08011114 <memmove>:
 8011114:	4288      	cmp	r0, r1
 8011116:	b510      	push	{r4, lr}
 8011118:	eb01 0402 	add.w	r4, r1, r2
 801111c:	d902      	bls.n	8011124 <memmove+0x10>
 801111e:	4284      	cmp	r4, r0
 8011120:	4623      	mov	r3, r4
 8011122:	d807      	bhi.n	8011134 <memmove+0x20>
 8011124:	1e43      	subs	r3, r0, #1
 8011126:	42a1      	cmp	r1, r4
 8011128:	d008      	beq.n	801113c <memmove+0x28>
 801112a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801112e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011132:	e7f8      	b.n	8011126 <memmove+0x12>
 8011134:	4402      	add	r2, r0
 8011136:	4601      	mov	r1, r0
 8011138:	428a      	cmp	r2, r1
 801113a:	d100      	bne.n	801113e <memmove+0x2a>
 801113c:	bd10      	pop	{r4, pc}
 801113e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011146:	e7f7      	b.n	8011138 <memmove+0x24>

08011148 <_fstat_r>:
 8011148:	b538      	push	{r3, r4, r5, lr}
 801114a:	4d07      	ldr	r5, [pc, #28]	; (8011168 <_fstat_r+0x20>)
 801114c:	2300      	movs	r3, #0
 801114e:	4604      	mov	r4, r0
 8011150:	4608      	mov	r0, r1
 8011152:	4611      	mov	r1, r2
 8011154:	602b      	str	r3, [r5, #0]
 8011156:	f7f2 fa20 	bl	800359a <_fstat>
 801115a:	1c43      	adds	r3, r0, #1
 801115c:	d102      	bne.n	8011164 <_fstat_r+0x1c>
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	b103      	cbz	r3, 8011164 <_fstat_r+0x1c>
 8011162:	6023      	str	r3, [r4, #0]
 8011164:	bd38      	pop	{r3, r4, r5, pc}
 8011166:	bf00      	nop
 8011168:	2000a008 	.word	0x2000a008

0801116c <_isatty_r>:
 801116c:	b538      	push	{r3, r4, r5, lr}
 801116e:	4d06      	ldr	r5, [pc, #24]	; (8011188 <_isatty_r+0x1c>)
 8011170:	2300      	movs	r3, #0
 8011172:	4604      	mov	r4, r0
 8011174:	4608      	mov	r0, r1
 8011176:	602b      	str	r3, [r5, #0]
 8011178:	f7f2 fa1f 	bl	80035ba <_isatty>
 801117c:	1c43      	adds	r3, r0, #1
 801117e:	d102      	bne.n	8011186 <_isatty_r+0x1a>
 8011180:	682b      	ldr	r3, [r5, #0]
 8011182:	b103      	cbz	r3, 8011186 <_isatty_r+0x1a>
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	bd38      	pop	{r3, r4, r5, pc}
 8011188:	2000a008 	.word	0x2000a008

0801118c <_sbrk_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d06      	ldr	r5, [pc, #24]	; (80111a8 <_sbrk_r+0x1c>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	602b      	str	r3, [r5, #0]
 8011198:	f7f2 fa28 	bl	80035ec <_sbrk>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_sbrk_r+0x1a>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_sbrk_r+0x1a>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	2000a008 	.word	0x2000a008

080111ac <__assert_func>:
 80111ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ae:	4614      	mov	r4, r2
 80111b0:	461a      	mov	r2, r3
 80111b2:	4b09      	ldr	r3, [pc, #36]	; (80111d8 <__assert_func+0x2c>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	4605      	mov	r5, r0
 80111b8:	68d8      	ldr	r0, [r3, #12]
 80111ba:	b14c      	cbz	r4, 80111d0 <__assert_func+0x24>
 80111bc:	4b07      	ldr	r3, [pc, #28]	; (80111dc <__assert_func+0x30>)
 80111be:	9100      	str	r1, [sp, #0]
 80111c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111c4:	4906      	ldr	r1, [pc, #24]	; (80111e0 <__assert_func+0x34>)
 80111c6:	462b      	mov	r3, r5
 80111c8:	f000 f872 	bl	80112b0 <fiprintf>
 80111cc:	f000 f882 	bl	80112d4 <abort>
 80111d0:	4b04      	ldr	r3, [pc, #16]	; (80111e4 <__assert_func+0x38>)
 80111d2:	461c      	mov	r4, r3
 80111d4:	e7f3      	b.n	80111be <__assert_func+0x12>
 80111d6:	bf00      	nop
 80111d8:	200000a0 	.word	0x200000a0
 80111dc:	08011daf 	.word	0x08011daf
 80111e0:	08011dbc 	.word	0x08011dbc
 80111e4:	08011dea 	.word	0x08011dea

080111e8 <_calloc_r>:
 80111e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ea:	fba1 2402 	umull	r2, r4, r1, r2
 80111ee:	b94c      	cbnz	r4, 8011204 <_calloc_r+0x1c>
 80111f0:	4611      	mov	r1, r2
 80111f2:	9201      	str	r2, [sp, #4]
 80111f4:	f7fe ffda 	bl	80101ac <_malloc_r>
 80111f8:	9a01      	ldr	r2, [sp, #4]
 80111fa:	4605      	mov	r5, r0
 80111fc:	b930      	cbnz	r0, 801120c <_calloc_r+0x24>
 80111fe:	4628      	mov	r0, r5
 8011200:	b003      	add	sp, #12
 8011202:	bd30      	pop	{r4, r5, pc}
 8011204:	220c      	movs	r2, #12
 8011206:	6002      	str	r2, [r0, #0]
 8011208:	2500      	movs	r5, #0
 801120a:	e7f8      	b.n	80111fe <_calloc_r+0x16>
 801120c:	4621      	mov	r1, r4
 801120e:	f7fd ffe9 	bl	800f1e4 <memset>
 8011212:	e7f4      	b.n	80111fe <_calloc_r+0x16>

08011214 <__ascii_mbtowc>:
 8011214:	b082      	sub	sp, #8
 8011216:	b901      	cbnz	r1, 801121a <__ascii_mbtowc+0x6>
 8011218:	a901      	add	r1, sp, #4
 801121a:	b142      	cbz	r2, 801122e <__ascii_mbtowc+0x1a>
 801121c:	b14b      	cbz	r3, 8011232 <__ascii_mbtowc+0x1e>
 801121e:	7813      	ldrb	r3, [r2, #0]
 8011220:	600b      	str	r3, [r1, #0]
 8011222:	7812      	ldrb	r2, [r2, #0]
 8011224:	1e10      	subs	r0, r2, #0
 8011226:	bf18      	it	ne
 8011228:	2001      	movne	r0, #1
 801122a:	b002      	add	sp, #8
 801122c:	4770      	bx	lr
 801122e:	4610      	mov	r0, r2
 8011230:	e7fb      	b.n	801122a <__ascii_mbtowc+0x16>
 8011232:	f06f 0001 	mvn.w	r0, #1
 8011236:	e7f8      	b.n	801122a <__ascii_mbtowc+0x16>

08011238 <_realloc_r>:
 8011238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123c:	4680      	mov	r8, r0
 801123e:	4614      	mov	r4, r2
 8011240:	460e      	mov	r6, r1
 8011242:	b921      	cbnz	r1, 801124e <_realloc_r+0x16>
 8011244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	4611      	mov	r1, r2
 801124a:	f7fe bfaf 	b.w	80101ac <_malloc_r>
 801124e:	b92a      	cbnz	r2, 801125c <_realloc_r+0x24>
 8011250:	f7fe ff38 	bl	80100c4 <_free_r>
 8011254:	4625      	mov	r5, r4
 8011256:	4628      	mov	r0, r5
 8011258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125c:	f000 f841 	bl	80112e2 <_malloc_usable_size_r>
 8011260:	4284      	cmp	r4, r0
 8011262:	4607      	mov	r7, r0
 8011264:	d802      	bhi.n	801126c <_realloc_r+0x34>
 8011266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801126a:	d812      	bhi.n	8011292 <_realloc_r+0x5a>
 801126c:	4621      	mov	r1, r4
 801126e:	4640      	mov	r0, r8
 8011270:	f7fe ff9c 	bl	80101ac <_malloc_r>
 8011274:	4605      	mov	r5, r0
 8011276:	2800      	cmp	r0, #0
 8011278:	d0ed      	beq.n	8011256 <_realloc_r+0x1e>
 801127a:	42bc      	cmp	r4, r7
 801127c:	4622      	mov	r2, r4
 801127e:	4631      	mov	r1, r6
 8011280:	bf28      	it	cs
 8011282:	463a      	movcs	r2, r7
 8011284:	f7fe f896 	bl	800f3b4 <memcpy>
 8011288:	4631      	mov	r1, r6
 801128a:	4640      	mov	r0, r8
 801128c:	f7fe ff1a 	bl	80100c4 <_free_r>
 8011290:	e7e1      	b.n	8011256 <_realloc_r+0x1e>
 8011292:	4635      	mov	r5, r6
 8011294:	e7df      	b.n	8011256 <_realloc_r+0x1e>

08011296 <__ascii_wctomb>:
 8011296:	b149      	cbz	r1, 80112ac <__ascii_wctomb+0x16>
 8011298:	2aff      	cmp	r2, #255	; 0xff
 801129a:	bf85      	ittet	hi
 801129c:	238a      	movhi	r3, #138	; 0x8a
 801129e:	6003      	strhi	r3, [r0, #0]
 80112a0:	700a      	strbls	r2, [r1, #0]
 80112a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80112a6:	bf98      	it	ls
 80112a8:	2001      	movls	r0, #1
 80112aa:	4770      	bx	lr
 80112ac:	4608      	mov	r0, r1
 80112ae:	4770      	bx	lr

080112b0 <fiprintf>:
 80112b0:	b40e      	push	{r1, r2, r3}
 80112b2:	b503      	push	{r0, r1, lr}
 80112b4:	4601      	mov	r1, r0
 80112b6:	ab03      	add	r3, sp, #12
 80112b8:	4805      	ldr	r0, [pc, #20]	; (80112d0 <fiprintf+0x20>)
 80112ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80112be:	6800      	ldr	r0, [r0, #0]
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	f7ff fcfd 	bl	8010cc0 <_vfiprintf_r>
 80112c6:	b002      	add	sp, #8
 80112c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80112cc:	b003      	add	sp, #12
 80112ce:	4770      	bx	lr
 80112d0:	200000a0 	.word	0x200000a0

080112d4 <abort>:
 80112d4:	b508      	push	{r3, lr}
 80112d6:	2006      	movs	r0, #6
 80112d8:	f000 f834 	bl	8011344 <raise>
 80112dc:	2001      	movs	r0, #1
 80112de:	f7f2 f90d 	bl	80034fc <_exit>

080112e2 <_malloc_usable_size_r>:
 80112e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112e6:	1f18      	subs	r0, r3, #4
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	bfbc      	itt	lt
 80112ec:	580b      	ldrlt	r3, [r1, r0]
 80112ee:	18c0      	addlt	r0, r0, r3
 80112f0:	4770      	bx	lr

080112f2 <_raise_r>:
 80112f2:	291f      	cmp	r1, #31
 80112f4:	b538      	push	{r3, r4, r5, lr}
 80112f6:	4604      	mov	r4, r0
 80112f8:	460d      	mov	r5, r1
 80112fa:	d904      	bls.n	8011306 <_raise_r+0x14>
 80112fc:	2316      	movs	r3, #22
 80112fe:	6003      	str	r3, [r0, #0]
 8011300:	f04f 30ff 	mov.w	r0, #4294967295
 8011304:	bd38      	pop	{r3, r4, r5, pc}
 8011306:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011308:	b112      	cbz	r2, 8011310 <_raise_r+0x1e>
 801130a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801130e:	b94b      	cbnz	r3, 8011324 <_raise_r+0x32>
 8011310:	4620      	mov	r0, r4
 8011312:	f000 f831 	bl	8011378 <_getpid_r>
 8011316:	462a      	mov	r2, r5
 8011318:	4601      	mov	r1, r0
 801131a:	4620      	mov	r0, r4
 801131c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011320:	f000 b818 	b.w	8011354 <_kill_r>
 8011324:	2b01      	cmp	r3, #1
 8011326:	d00a      	beq.n	801133e <_raise_r+0x4c>
 8011328:	1c59      	adds	r1, r3, #1
 801132a:	d103      	bne.n	8011334 <_raise_r+0x42>
 801132c:	2316      	movs	r3, #22
 801132e:	6003      	str	r3, [r0, #0]
 8011330:	2001      	movs	r0, #1
 8011332:	e7e7      	b.n	8011304 <_raise_r+0x12>
 8011334:	2400      	movs	r4, #0
 8011336:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801133a:	4628      	mov	r0, r5
 801133c:	4798      	blx	r3
 801133e:	2000      	movs	r0, #0
 8011340:	e7e0      	b.n	8011304 <_raise_r+0x12>
	...

08011344 <raise>:
 8011344:	4b02      	ldr	r3, [pc, #8]	; (8011350 <raise+0xc>)
 8011346:	4601      	mov	r1, r0
 8011348:	6818      	ldr	r0, [r3, #0]
 801134a:	f7ff bfd2 	b.w	80112f2 <_raise_r>
 801134e:	bf00      	nop
 8011350:	200000a0 	.word	0x200000a0

08011354 <_kill_r>:
 8011354:	b538      	push	{r3, r4, r5, lr}
 8011356:	4d07      	ldr	r5, [pc, #28]	; (8011374 <_kill_r+0x20>)
 8011358:	2300      	movs	r3, #0
 801135a:	4604      	mov	r4, r0
 801135c:	4608      	mov	r0, r1
 801135e:	4611      	mov	r1, r2
 8011360:	602b      	str	r3, [r5, #0]
 8011362:	f7f2 f8bb 	bl	80034dc <_kill>
 8011366:	1c43      	adds	r3, r0, #1
 8011368:	d102      	bne.n	8011370 <_kill_r+0x1c>
 801136a:	682b      	ldr	r3, [r5, #0]
 801136c:	b103      	cbz	r3, 8011370 <_kill_r+0x1c>
 801136e:	6023      	str	r3, [r4, #0]
 8011370:	bd38      	pop	{r3, r4, r5, pc}
 8011372:	bf00      	nop
 8011374:	2000a008 	.word	0x2000a008

08011378 <_getpid_r>:
 8011378:	f7f2 b8a8 	b.w	80034cc <_getpid>

0801137c <_init>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	bf00      	nop
 8011380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011382:	bc08      	pop	{r3}
 8011384:	469e      	mov	lr, r3
 8011386:	4770      	bx	lr

08011388 <_fini>:
 8011388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138a:	bf00      	nop
 801138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801138e:	bc08      	pop	{r3}
 8011390:	469e      	mov	lr, r3
 8011392:	4770      	bx	lr
